{"version":3,"sources":["webpack:///webpack/bootstrap 9addce99804779ae73ad","webpack:///./package/components/pc.component.ts","webpack:///./package/application.tag.ts","webpack:///./package/component.ts","webpack:///./package/config.ts","webpack:///./package/index.ts","webpack:///./package/components/index.ts","webpack:///./package/entity.tag.ts","webpack:///./package/node.ts","webpack:///./package/run.ts","webpack:///./package/script_commponent.ts","webpack:///./package/string_component.ts","webpack:///./package/util.ts","webpack:///./demo/loading_scene.tsx","webpack:///./~/@tweenjs/tween.js/src/Tween.js","webpack:///./~/process/browser.js","webpack:///./demo/index.tsx","webpack:///./package/components/audio/audiolisten.ts","webpack:///./package/components/audio/index.ts","webpack:///./package/components/audio/sound.ts","webpack:///./package/components/camera/camera.ts","webpack:///./package/components/collision/collision.ts","webpack:///./package/components/light/light.ts","webpack:///./package/components/model/model.ts","webpack:///./package/components/particlesystem/particlesystem.ts","webpack:///./package/components/rigidbody/rigidbody.ts","webpack:///./package/h.ts","webpack:///./package/render.ts","webpack:///./~/whatwg-fetch/fetch.js","webpack:///./package/playcanvas/playcanvas-latest.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AChEyC;AAOzC;IAAoC,+BAA+B;IAAnE;;IAiCA,CAAC;IA/BG,mCAAa,GAAb;QACI,OAAO,IAAI,CAAC;IAChB,CAAC;IACM,wBAAY,GAAnB,UAAoB,MAAiB,EAAE,IAAI;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAChD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE;YACxB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACvD;QACD,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;IACM,0BAAc,GAArB,UAAsB,MAAM,EAAE,IAAI;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QACvC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;YACb,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,GAAG,EAAE;gBACL,IAAI,GAAG,YAAY,OAAO,EAAE;oBACxB,GAAG,CAAC,IAAI,CAAC,UAAC,KAAK;wBACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;oBAC5C,CAAC,CAAC;iBACL;qBAAM;oBACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC;iBACzC;aACJ;QACL,CAAC,CAAC;QACF,8CAA8C;QAC9C,uDAAuD;QACvD,KAAK;IACT,CAAC;IACD,sBAAW,uBAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnC,CAAC;;;OAAA;IACL,kBAAC;AAAD,CAAC,CAjCmC,6DAAS,GAiC5C;;;;;;;;;;;;;;;;;;;;;;;;ACxCuC;AACT;AAM/B,IAAI,WAAW,CAAC;AAET,IAAM,WAAW,GAAG,EAAE,CAAC;AAE9B;IAAiC,+BAA2B;IAExD,qBAAY,KAAK,EAAE,OAAO,EAAE,YAAY;QAAxC,YACI,kBAAM,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,SAkBtC;QAjBG,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAI,GAAG,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE;YAC9C,KAAK,EAAE,YAAY,CAAC,KAAK;YACzB,QAAQ,EAAE,YAAY,CAAC,QAAQ;SAClC,CAAC;QACF,WAAW,GAAG,GAAG,CAAC;QAClB,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;QAC/C,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;QAC5C,GAAG,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QACrD,GAAG,CAAC,KAAK,EAAE,CAAC;QACZ,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,WAAW,CAAC,OAAO,CAAC,UAAC,EAAE,IAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC5E,YAAY,CAAC,GAAG,GAAG,GAAG,CAAC;QACvB,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE3E,KAAI,CAAC,EAAE,GAAG,GAAG,CAAC;QACd,KAAI,CAAC,EAAE,CAAC,oDAAG,CAAC,GAAG,KAAI,CAAC;;QACpB,wCAAwC;IAC5C,CAAC;IACD,4BAAM,GAAN;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAvBM,oBAAQ,GAAG,aAAa;IAwBnC,kBAAC;CAAA,CAzBgC,6DAAS,GAyBzC;AAzBuB;AA0BlB;IACF,OAAO,WAAW,CAAC;AACvB,CAAC;AAAA,CAAC;;;;;;;;ACnCF;AAAA;IAGI,4BAA4B;IAC5B,8BAA8B;IAC9B,iCAAiC;IACjC,mBAAY,KAAK,EAAS,OAAY,EAAS,YAAY;QAAjC,YAAO,GAAP,OAAO,CAAK;QAAS,iBAAY,GAAZ,YAAY;QACvD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IACL,gBAAC;AAAD,CAAC;;;;;;;;;;ACbM,IAAM,GAAG,GAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACA3B;AAAA,8CAA8C;AACJ;AACM;AACG;AACb;AAEtC,6FAA6F;AACrE;AACU;AAClC,IAAM,GAAG,GAAG;IACR,CAAC;CACJ;AACD,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;AACpB,IAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAGtB;AACF,yDAAe,GAAG,EAAC;AACI;AACM;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBG;AACD;AACD;AACA;AACkB;AACV;AACA;AACR;;;;;;;;;;;;;;;;;;;;;;;ACPU;AACe;AAEI;AAC5B;AAW/B,qBAAqB,MAAM;IACvB,OAAO,MAAM,EAAE;QACX,IAAI,MAAM,YAAY,MAAM,EAAE;YAC1B,OAAO,MAAM,CAAC,EAAE,CAAC;SAEpB;aAAM;YACH,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;SAC1B;KACJ;IACD,OAAO,uGAAsB,EAAE,CAAC,IAAI,CAAC;AACzC,CAAC;AAGD;IAA4B,0BAAsB;IAG9C,gBAAY,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM;QAAhD,YACI,kBAAM,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,SAiDtC;QAhDG,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;QAC5B,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,EAAE;QAC5B,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACzB,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,WAAC,IAAI,QAAC,KAAK,EAAE,EAAR,CAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC,CAAC;QACF,KAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpE,KAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC/D,KAAI,CAAC,KAAK,CAAC,KAAK,IAAI,MAAM,CAAC,aAAa,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE3D,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAE9B,IAAI,cAAc,GAAG,EAAE,CAAC;QAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,IAAI,IAAI,IAAI,EAAE;gBACd,SAAS;aACZ;YACD,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBAC3D,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,SAAS;aACZ;YACD,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;aAClC;YACD,+DAA+D;YAC/D,8CAA8C;YAC9C,4EAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAC3D;QAED,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,2BAA2B;YAC3B,KAAI,CAAC,MAAM,GAAG,cAAQ,OAAO,cAAc,CAAC,CAAC,CAAC;SACjD;QAKD,gBAAgB;QAChB,kCAAkC;QAClC,WAAW;QACX,8CAA8C;QAC9C,IAAI;QACJ,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAExB,KAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QACjB,KAAI,CAAC,EAAE,CAAC,oDAAG,CAAC,GAAG,KAAI,CAAC;;IACxB,CAAC;IApDM,eAAQ,GAAG,QAAQ;IAsD9B,aAAC;CAAA,CAvD2B,6DAAS,GAuDpC;AAvDkB;;;;;;;;AClBnB;AAAA;IACI,cAAmB,IAAI,EAAS,KAAQ,EAAS,QAAQ;QAAtC,SAAI,GAAJ,IAAI;QAAS,UAAK,GAAL,KAAK,CAAG;QAAS,aAAQ,GAAR,QAAQ;QACrD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;QAC/C,IAAI,CAAC,KAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1C,CAAC;IACL,WAAC;AAAD,CAAC;;;;;;;;;;;;;;;;ACfsC;AACsB;AACb;AACG;AAEnD,IAAI,iBAAiB,GAAG,yGAAuB,EAAE,CAAC;AAElD,IAAI,CAAC,GAAG,CAAC,CAAC;AAEJ,aAAc,IAAa,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,EAAG;IACjE,IAAI,IAAI,YAAY,mDAAI,EAAE;QACtB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAI,CAAC,CAAC;QACN,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QACnD,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,QAAQ,UAAC;QACb,IAAI,CAAC,YAAY,wEAAY,EAAE;YAC3B,CAAC,CAAC,UAAU,EAAE;YACd,IAAI,KAAK,CAAC,GAAG,EAAE;gBACX,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAChB;YACD,IAAI,MAAI,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;YACtB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAI,CAAC,EAAE;gBACrB,QAAQ,GAAG,WAAW,CAAC,MAAI,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aAC/D;iBAAM;gBACH,QAAQ,GAAG,WAAW,CAAC,CAAC,MAAI,CAAC,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aACjE;YACD,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC;YACvB,CAAC,CAAC,eAAe,EAAE,CAAC;YACpB,qEAAW,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACrC;aAAM;YACH,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACzE,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;SACzB;QAED,OAAO,CAAC,CAAC;KACZ;SAAM;QACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACtB;AACL,CAAC;AAAA,CAAC;AACI,qBAAsB,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,QAAgB;IAAhB,2CAAgB;IAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;QAAE,OAAM;KAAE;IAAA,CAAC;IAC9B,IAAM,GAAG,GAAG,EAAE;IACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACjD,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC;QAClB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACZ,IAAI,QAAQ,EAAE;YACV,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC3B;KACJ;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAAA,CAAC;AAEI,4BAA6B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM;IAEzD,IAAI,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAElC,MAAM,CAAC,SAAiB,CAAC,UAAU,GAAG;QACnC,IAAI,EAAE,CAAC;IACX,CAAC,CAAC;IACD,MAAM,CAAC,SAAiB,CAAC,MAAM,GAAG,UAAU,EAAE;QAC3C,MAAM,CAAC,EAAE,CAAC,CAAC;IACf,CAAC,CAAC;IACF,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC9B,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACvE0D;AACnB;AAEJ;AACJ;AAOhC;IAAoD,gCAAY;IAC5D,sBAAY,KAAK,EAAE,OAAO,EAAE,YAAY;QAAxC,YACI,kBAAM,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,SACtC;QAaD,eAAS,GAAG,EAAE,CAAC;QAUN,SAAG,GAAmB,uGAAsB,EAAE,CAAC;;IAvBxD,CAAC;IAED,2BAAI,GAAJ,UAAK,EAAY;IAEjB,CAAC;IACD,6BAAM,GAAN,UAAO,MAAoB;QAAE,kBAAW;aAAX,UAAW,EAAX,qBAAW,EAAX,IAAW;YAAX,iCAAW;;QAEpC,OAAO,gFAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,4EAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC;QACnF,uBAAuB;QACvB,6BAA6B;QAC7B,KAAK;IACT,CAAC;IAGD,sBAAI,kCAAQ;aAAZ;YACI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC;aACf;iBAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;aAC5B;iBAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClC,OAAO,IAAI,CAAC,SAAS,CAAC;aACzB;QACL,CAAC;;;OAAA;IAED,iCAAU,GAAV,cAAe,CAAC;IAAA,CAAC;IACjB,sCAAe,GAAf,cAAoB,CAAC;IAAA,CAAC;IACtB,wCAAiB,GAAjB,cAAsB,CAAC;IAAA,CAAC;IACxB,6BAAM,GAAN,UAAO,EAAE,IAAI,CAAC;IAAA,CAAC;IA1BR,2BAAc,GAAG,IAAI,CAAC;IA4BjC,mBAAC;CAAA,CAhCmD,6DAAS,GAgC5D;AAhCiC;;;;;;;;;;;;;ACXc;AACV;AACK;AAE3C,IAAM,iBAAiB,GAAG,EAAE,CAAC;AAE7B,KAAK,IAAI,CAAC,IAAI,yCAAU,EAAE;IACtB,iBAAiB,CAAC,yCAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,yCAAU,CAAC,CAAC,CAAC,CAAC;CAC7D;AACK;IACF,iBAAiB,CAAC,qEAAW,CAAC,QAAQ,CAAC,GAAG,qEAAW,CAAC;IACtD,iBAAiB,CAAC,2DAAM,CAAC,QAAQ,CAAC,GAAG,2DAAM,CAAC;IAC5C,OAAO,iBAAiB,CAAC;AAC7B,CAAC;AAC4B;;;;;;;;;;;;;;;;;;;ACd8B;AACX;AACjB;AAEzB,2BAA+B,GAAW,EAAE,IAAY;IAC1D,OAAO,IAAI,OAAO,CAAI,UAAU,OAAO,EAAE,MAAM;QAC3C,UAAU,CAAC;YACP,uGAAsB,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,UAAU,GAAG,EAAE,KAAK;gBACvE,IAAI,GAAG,EAAE;oBACL,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,CAAC;iBAClB;YAEL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC;AACN,CAAC;AAEK,wBAAyB,MAAM;IACjC,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,gBAAgB,EAAE,CAAC;IACzC,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;QACtB,QAAQ,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;KACnC;IACD,QAAQ,CAAC,MAAM,EAAE,CAAC;IAClB,OAAO,QAAQ,CAAC;AACpB,CAAC;AAEK,yBAA0B,EAAE;IAC9B,qEAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAEK,qBAAsB,CAAC,EAAE,CAAC;IAC5B,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACrB,IAAI,CAAC,GAAG,CAAC,EAAE;QACP,GAAG,GAAG,CAAC,CAAC;QAAC,GAAG,GAAG,CAAC,CAAC;KACpB;IACD,IAAI,WAAW,GAAG,GAAG,GAAG,GAAG,CAAC;IAC5B,OAAO,GAAG,GAAG,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC7C,CAAC;AAEK;IAA8B,aAAM;SAAN,UAAM,EAAN,qBAAM,EAAN,IAAM;QAAN,wBAAM;;IACtC,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IACrB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;IACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC1B,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE;YAC/B,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;SACjB;KACJ;AACL,CAAC;AACK,cAAe,MAAM,EAAE,GAAG,EAAE,UAAU;IACxC,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;IAChC,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,QAAQ,GAAG;QAAU,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,yBAAO;;QAC5B,IAAI,GAAG,CAAC;QACR,IAAI,IAAI,KAAK,CAAC,EAAE;YACZ,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;SACnC;QACD,IAAI,EAAE,CAAC;QACP,OAAO,GAAG,CAAC;IACf,CAAC;IACD,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC;AAChC,CAAC;AAEK,kBAAmB,IAAI;IACzB,OAAO,UAAU,MAAM,EAAE,GAAG,EAAE,UAAU;QACpC,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;QAChC,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,QAAQ,GAAG;YAAU,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,yBAAO;;YAC5B,IAAI,GAAG,CAAC;YACR,IAAI,IAAI,KAAK,CAAC,EAAE;gBACZ,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;aACnC;YACD,UAAU,CAAC,cAAc,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;YAC3C,IAAI,EAAE,CAAC;YACP,OAAO,GAAG,CAAC;QACf,CAAC;QACD,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC;IAEhC,CAAC;AACL,CAAC;AAEK,sBAAuB,IAAa;IACtC,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;IAC/B,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC7C,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,gCAAgC;IAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE,EAAE;QAC9C,4BAA4B;QAC5B,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC;QAEpD,eAAe;QACf,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC1C,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC1C,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QACxC,0BAA0B;QAC1B,QAAQ,CAAC,IAAI,EAAE,CAAC;KACnB;IAED,QAAQ,CAAC,GAAG,EAAE,CAAC;IACf,OAAO,GAAG,CAAC;AACf,CAAC;AAEK,gBAAiB,EAAE;IACrB,OAAO,EAAE,CAAC,oDAAG,CAAC,CAAC;AACnB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GD;;GAEG;AAKuB;AAEJ;AACqB;AAC3C,IAAI,QAAQ,GAAG,6FAAc,CAAC;IAC1B,OAAO,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;CACpC,CAAC,CAAC;AAIH,iCAAiC,IAAI;IACjC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;QACzB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;KAEpB;IACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;QAC1B,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;KACjC;SAAM;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;IACD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IACvB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,EACxB,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC;IAC9B,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,OAAO,MAAM,GAAG,OAAO,EAAE;QACrB,IAAI,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAClC,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC;QACtC,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC;QACtC,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC;QACtC,CAAC,EAAE,CAAC;QACJ,iCAAiC;QACjC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1B;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AACD,wBAAwB;AAExB,iBAAiB,IAAI;IACjB,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAC/B,yDAAY,CAAC,IAAI,CAAC,CAAC;AACvB,CAAC;AAED,qBAAqB,CAAC,OAAO,CAAC,CAAC;AAE/B,4FAA4F;AAC5F;IAAkC,gCAAiB;IAAnD;QAAA,qEAiGC;QA/FG,cAAQ,GAAgB,EAAE,CAAC;QAG3B,uBAAiB,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QACzC,cAAQ,GAAU,EAAE,CAAC;QACrB,eAAS,GAAG,EAAE,CAAC;;IA0FnB,CAAC;IAzFS,sCAAe,GAArB;;;;;;;wBACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAc,CAAC;wBAEtD,qBAAM,KAAK,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,8BAAuB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC;;wBAAvI,aAAa,GAAG,SAAuH;wBACtH,qBAAM,KAAK,CAAC,8BAA8B,CAAC,CAAC,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,8BAAuB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC;;wBAA1I,cAAc,GAAG,SAAyH;wBACzH,qBAAM,KAAK,CAAC,8BAA8B,CAAC,CAAC,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,8BAAuB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC;;wBAA1I,cAAc,GAAG,SAAyH;wBACzH,qBAAM,KAAK,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,8BAAuB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC;;wBAAxI,cAAc,GAAG,SAAuH;wBACvH,qBAAM,KAAK,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,8BAAuB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC;;wBAA3I,cAAc,GAAG,SAA0H;wBAC1H,qBAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG,IAAK,8BAAuB,CAAC,GAAG,CAAC,EAA5B,CAA4B,CAAC;;wBAArI,cAAc,GAAG,SAAoH;wBAErI,GAAG,GAAG,CAAC,cAAc,EAAE,aAAa,EAAE,cAAc,EAAE,cAAc,CAAC;wBACrE,QAAQ,GAAG,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,GAAG,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;wBAClD,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;wBACjC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;wBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAc,CAAC;wBACpE,IAAI,CAAC,cAAc,GAAG,IAAI,wDAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,yDAAY,CAAC,WAAW,CAAC,KAAK,CAAC;wBAChG,KAAK,GAAG,CAAC,CAAC;wBACd,WAAW,CAAC;4BACR,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;4BACvB,IAAI,QAAQ,GAAG,IAAI,CAAC;4BACpB,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;4BACzC,8FAA8F;4BAC9F,iHAAiH;4BACjH,KAAK,EAAE,CAAC;wBACZ,CAAC,EAAE,IAAI,CAAC;;;;;KAEX;IACD,+BAAQ,GAAR,UAAS,QAAQ;QACb,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YAC/B,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,0FAAW,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,0FAAW,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,0FAAW,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC5F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,CAAC,8EAAQ,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;gBAChE,6EAAO,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,SAAG,CAC/C,CAAC;YACV,IAAI,CAAC,QAAQ,CAAC,IAAI,CACd,IAAI,wDAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,yDAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CACnE;SACJ;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,8EAAQ,IAAI,EAAC,WAAW,EAAC,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAG,IAAI,CAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC;QAC/H,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;IACD,gCAAS,GAAT,UAAU,OAAO,EAAE,QAAQ;QACvB,4DAAe,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAE9B,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;aACxD;iBAAM;gBACH,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC1C;YACD,wDAAwD;SAC3D;IACL,CAAC;IACD,2BAAI,GAAJ,UAAK,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK;QAEhC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,GAAG,QAAQ,CAAC;YACnG,6EAA6E;YAC7E,kFAAkF;YAClF,gCAAgC;YAChC,kEAAkE;YAClE,KAAK;aACJ,KAAK,EAAE,CAAC;IACjB,CAAC;IACD,6BAAM,GAAN;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC3D,wDAAwD;SAC3D;QACD,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACnI,CAAC;IACD,6BAAM,GAAN;QACI,OAAO,8EAAQ,IAAI,EAAC,cAAc;YAI9B,8EAAQ,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAClF,iFAAU,CACL,CAEH;IACd,CAAC;IACL,mBAAC;AAAD,CAAC,CAjGiC,oEAAY,GAiG7C;;;;;;;;+CCvJD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH,EAAE;;AAEF;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,qBAAqB;;AAEvC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA,gEAAgE,sBAAsB;AACtF;AACA;;AAEA,EAAE;;AAEF;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;AACA;;AAEA,kEAAkE,sBAAsB;AACxF;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE;;AAEF;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AAAA;;AAEH,EAAE;;AAEF;AACA;;AAEA,EAAE;;AAEF;AACA;;AAEA;;AAEA,CAAC;;;;;;;;ACp5BD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvLtC;;GAEG;AAKuB;AAIqB;AAC/C,IAAI,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAI7C;IAAkB,uBAAY;IAA9B;;IAqBA,CAAC;IApBG,oBAAM,GAAN;QACI,OAAO,mFAAa,OAAO,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAChD,kEAAC,oEAAY,OAAG;YAGhB,yFAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;gBAC3C,wFAAW;oBACP,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBAC5B,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,CAAC;oBACZ,UAAU,EAAE,GAAG;oBACf,gBAAgB,EAAE,GAAG;oBACrB,gBAAgB,EAAE,IAAI;oBACtB,cAAc,EAAE,EAAE;oBAClB,UAAU,EAAE,EAAE,CAAC,WAAW;iBAC7B,EAAI,CACA,CACC;IAClB,CAAC;IACL,UAAC;AAAD,CAAC,CArBiB,oEAAY,GAqB7B;AAED,qFAAM,CAAC,kEAAC,GAAG,OAAG,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;ACvCE;AAO9C;IAAiC,+BAA6B;IAA9D;;IAEA,CAAC;IAAD,kBAAC;AAAD,CAAC,CAFgC,kEAAW,GAE3C;;;;;;;;;;;;;ACTuB;AACM;;;;;;;;;;;;;;;;;;;;ACDgB;AAc9C;IAA2B,yBAAuB;IAAlD;;IA6BA,CAAC;IA5BU,kBAAY,GAAnB,UAAoB,MAAiB,EAAE,IAAI;QACvC,IAAI,SAAS,GAAG,OAAM,YAAY,YAAC,MAAM,EAAE,IAAI,CAAC;QAChD,gCAAgC;QAEhC,qBAAqB;QACrB,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YAClB,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,YAAY,OAAO,EAAE;gBACrC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,KAAK;oBACxB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE;wBAC9B,KAAK,EAAE,KAAK,CAAC,QAAQ;wBACrB,KAAK,EAAE,GAAG;wBACV,IAAI,EAAE,IAAI;wBACV,QAAQ,EAAE,IAAI;qBACjB,CAAC,CAAC;gBACP,CAAC,CAAC;aACL;iBAAM;gBACH,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE;oBAC9B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ;oBAChC,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,IAAI;oBACV,QAAQ,EAAE,IAAI;iBACjB,CAAC,CAAC;aACN;SACJ;QACD,OAAO,SAAS;IAEpB,CAAC;IAEL,YAAC;AAAD,CAAC,CA7B0B,kEAAW,GA6BrC;;;;;;;;;;;;;;;;;;;;;AC3C6C;AA4B9C;IAA4B,0BAAwB;IAApD;;IAEA,CAAC;IAAD,aAAC;AAAD,CAAC,CAF2B,kEAAW,GAEtC;;;;;;;;;;;;;;;;;;;;;AC9B6C;AAkB9C;IAA+B,6BAA2B;IAA1D;;IAYA,CAAC;IAXU,sBAAY,GAAnB,UAAoB,MAAM,EAAE,IAAI;QAC5B,IAAI,SAAS,GAAG,OAAM,YAAY,YAAC,MAAM,EAAE,IAAI,CAAC;QAEhD,IAAI,GAAG,GAAG,CAAC,gBAAgB,EAAE,cAAc,EAAE,SAAS,EAAE,cAAc,EAAE,cAAc,CAAC;QACvF,GAAG,CAAC,OAAO,CAAC,aAAG;YACX,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,UAAU,GAAG;gBAC9C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC;YAChC,CAAC,EAAE,MAAM,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;IACrB,CAAC;IACL,gBAAC;AAAD,CAAC,CAZ8B,kEAAW,GAYzC;;;;;;;;;;;;;;;;;;;;;AC9B6C;AAoC9C;IAA2B,yBAAuB;IAAlD;;IAEA,CAAC;IAAD,YAAC;AAAD,CAAC,CAF0B,kEAAW,GAErC;;;;;;;;;;;;;;;;;;;;;ACtC6C;AAqB9C;IAA2B,yBAAuB;IAAlD;;IA2BA,CAAC;IAzBU,kBAAY,GAAnB,UAAoB,MAAiB,EAAE,IAAI;QACvC,IAAI,SAAS,CAAC;QACd,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;YAC7B,SAAS,GAAG,OAAM,YAAY,YAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC;SAChE;aAAM;YACH,SAAS,GAAG,OAAM,YAAY,YAAC,MAAM,EAAE,IAAI,CAAC;SAC/C;QAED,OAAM,cAAc,YAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAE5C,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACrB,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,YAAY,OAAO,EAAE;gBACxC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,GAAG;oBACzB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,IAAI;wBACnD,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;oBACxB,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC;aACL;iBAAM;gBACH,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,IAAI;oBAC1E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBACxC,CAAC,CAAC,CAAC;aACN;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IACL,YAAC;AAAD,CAAC,CA3B0B,kEAAW,GA2BrC;;;;;;;;;;;;;;;;;;;;;AChD6C;AAmD9C;IAAoC,kCAAgC;IAApE;;IAUA,CAAC;IARU,2BAAY,GAAnB,UAAoB,MAAM,EAAE,IAAI;QAC5B,IAAI,SAAS,GAAG,OAAM,YAAY,YAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,CAAC;QACzE,qDAAqD;QACrD,uDAAuD;QACvD,KAAK;QACL,OAAM,cAAc,YAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,CAAC;QAC3D,OAAO,SAAS,CAAC;IACrB,CAAC;IACL,qBAAC;AAAD,CAAC,CAVmC,kEAAW,GAU9C;;;;;;;;;;;;;;;;;;;;;AC7D6C;AA4F9C;IAA+B,6BAA2B;IAA1D;;IAEA,CAAC;IAAD,gBAAC;AAAD,CAAC,CAF8B,kEAAW,GAEzC;;;;;;;;;;;AC9F6B;AAExB,WAAY,IAAI,EAAE,KAAM;IAAE,kBAAW;SAAX,UAAW,EAAX,qBAAW,EAAX,IAAW;QAAX,iCAAW;;IACvC,IAAM,WAAW,GAAG,EAAE,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvB,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC3B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SAC/B;aAAM;YACH,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;KACJ;IACD,OAAO,IAAI,mDAAI,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AAC9C,CAAC;AAED,kBAAkB,WAAW,EAAE,IAAI;IAC/B,IAAI,CAAC,CAAC;IACN,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE;QACd,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAClB,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;SAC5B;aACI;YACD,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACvB;KACJ;AACL,CAAC;;;;;;;;;;AC5B2B;AAEtB,gBAAiB,IAAa,EAAE,MAAM,EAAE,OAAO;IACjD,IAAM,GAAG,GAAG,wEAAG,CAAC,IAAI,EAAE;QAClB,KAAK,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC;QAC3B,QAAQ,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAa,CAAC;QACxC,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,IAAI;KACZ,EAAE,EAAE,EAAE,IAAI,CAAC;IACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AACpC,CAAC;AAAA,CAAC;;;;;;;ACVF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;;AAEA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;;AAEA;AACA;AACA,wCAAwC,4BAA4B;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,uDAAuD;AACvD,SAAS;AACT;AACA,SAAS;AACT,8EAA8E;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,uBAAuB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,0BAA0B,eAAe;AACxE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA,CAAC;;;;;;;ACjdD,iGAAC;AACD;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,mDAAmD,WAAW,SAAS,SAAS;AAC1F;AACA,CAAC;AACD;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,iCAAiC;AACjC,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iBAAiB,qDAAqD;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,yDAAyD;AACzD;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,uDAAuD;AACvD;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,MAAM;AACN;AACA;AACA,0DAA0D;AAC1D;AACA,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,GAAG;AACH;AACA,IAAI;AACJ,+CAA+C;AAC/C;AACA,GAAG;AACH;AACA,IAAI;AACJ,+CAA+C;AAC/C;AACA,GAAG;AACH;AACA,IAAI;AACJ,+CAA+C;AAC/C;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV;AACA;AACA,CAAC;AACD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,aAAa;AACb;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,UAAU;AACV;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,UAAU;AACV;AACA;AACA,eAAe,iBAAiB;AAChC,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,+CAA+C,uBAAuB,eAAe;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uCAAuC;AACrE;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,iBAAiB,mGAAmG;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,GAAG;AACH;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAsC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA,kBAAkB;AACloBAAoB;AACpB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,8CAA8C;AAC9C;AACA,GAAG;AACH;AACA,IAAI;AACJ,8CAA8C;AAC9C;AACA,GAAG;AACH;AACA,IAAI;AACJ,sCAAsC;AACtC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,wCAAwC;AACxC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,qCAAqC;AACrC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpuCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,sCAAsC;AACtC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,wCAAwC;AACxC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,qCAAqC;AACrC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpsCAAsC;AACtC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpeAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,uCAAuC;AACvC;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA,SAAS;AACT,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,OAAO;AACP,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,IAAI;AACJ,qDAAqD;AACrD;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qFAAqF;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA,IAAI;AACJ,sEAAsE;AACtE;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,qDAAqD;AACrD;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA,IAAI;AACJ,qDAAqD;AACrD;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA,IAAI;AACJ,qDAAqD;AACrD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB,UAAU;AAC9B,mBAAmB,yBAAyB;AAC5C;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA,wBAAwB;AACxgEAAgE;AAChE;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtmBAAmB,UAAU;AAC7B;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACbeAAe,kBAAkB;AACjC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClmCAAmC,0BAA0B;AAC7D;AACA;AACA;AACA,oBAAoB;AACpB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gIAAgI;AAC5K,uDAAuD,YAAY;AACnE;AACA,6CAA6C,oIAAoI;AACjL,yDAAyD,YAAY;AACrnD;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAunD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,2EAA2E;AAC3E;AACA,GAAG;AACH;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,GAAG;AACN,oEAAoE;AACpE;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8FAA8F;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8FAA8F;AAC9I;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,uDAAuD,kEAAkE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qFAAqF;AACrI,oBAAoB,UAAU;AAC9B,yDAAyD,uBAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA,kDAAkD,qFAAqF;AACvI,sBAAsB,UAAU;AAChC,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mGAAmG;AACnJ,oBAAoB,UAAU;AAC9B,yDAAyD,uBAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,4BAA4B,yBAAyB;AACrD;AACA,2DAA2D,qMAAqM;AAChQ;AACA;AACA;AACA,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,wBAAwB,UAAU;AAClC,oEAAoE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gKAAgK;AAC5M,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8KAA8K;AAC1N,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA,4CAA4C,gGAAgG;AAC5I;AACA;AACA,6CAA6C,gGAAgG;AAC7I,wDAAwD,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU;AAC5B,iBAAiB,cAAc;AAC/B,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2EAA2E;AACrH,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+FAA+F;AACzI,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD,uDAAuD,2BAA2B,iCAAiC,GAAG;AACtH,0DAA0D,2CAA2C,GAAG;AACxG,4HAA4H,6BAA6B,oEAAoE,6BAA6B,+GAA+G,GAAG;AAC5W,gLAAgL,6BAA6B,oEAAoE,6BAA6B,8HAA8H,GAAG;AAC/a,yDAAyD,qBAAqB,wBAAwB,meAAme,iEAAiE,GAAG;AAC7oB,2EAA2E,0BAA0B,gBAAgB,0EAA0E,8EAA8E,uCAAuC,GAAG;AACvT,+EAA+E,0BAA0B,+FAA+F,mLAAmL,qEAAqE,gCAAgC,6BAA6B,GAAG;AAChgB,4DAA4D,+FAA+F,mLAAmL,gCAAgC,6BAA6B,GAAG;AAC9Y,kEAAkE,0BAA0B,gCAAgC,6BAA6B,GAAG;AAC5J,qFAAqF,0BAA0B,uEAAuE,gCAAgC,6BAA6B,GAAG;AACtP,0FAA0F,0BAA0B,iCAAiC,sDAAsD,wCAAwC,4GAA4G,gDAAgD,gEAAgE,WAAW,OAAO,mCAAmC,WAAW,OAAO,OAAO,uCAAuC,6EAA6E,OAAO;AACxpB,kEAAkE,sDAAsD,0BAA0B,sHAAsH,wDAAwD,qCAAqC;AACrW,uDAAuD,mCAAmC,yBAAyB,iBAAiB,GAAG,2BAA2B,gCAAgC,GAAG,yBAAyB,4CAA4C,GAAG;AAC7Q,2DAA2D,+BAA+B,gCAAgC,kCAAkC,kCAAkC,8BAA8B,qCAAqC,4BAA4B,6BAA6B,kBAAkB,oBAAoB,qBAAqB,kBAAkB,sBAAsB,gBAAgB;AAC7a,yGAAyG,qBAAqB,GAAG;AACjI,iDAAiD,2BAA2B,2BAA2B,8CAA8C,uDAAuD,qCAAqC,GAAG,iCAAiC,oCAAoC,qBAAqB,+CAA+C,eAAe,GAAG,2BAA2B,+BAA+B,4DAA4D,kBAAkB,WAAW,OAAO,kEAAkE,uFAAuF,6EAA6E,0CAA0C,uBAAuB,mDAAmD,6GAA6G,2EAA2E,eAAe;AAC1kC,yDAAyD,qCAAqC,GAAG;AACjG,iEAAiE,0GAA0G,GAAG;AAC9K,2EAA2E,yGAAyG,GAAG;AACvL,uEAAuE,qEAAqE,GAAG;AAC/I,+FAA+F,uBAAuB,sIAAsI,GAAG;AAC/P,oEAAoE,0GAA0G,GAAG;AACjL,8FAA8F,uDAAuD,8BAA8B,mEAAmE,GAAG,wEAAwE,uDAAuD,8BAA8B,wHAAwH,mEAAmE,GAAG,+GAA+G,uDAAuD,8BAA8B,iCAAiC,wEAAwE,2DAA2D,GAAG,mHAAmH,uDAAuD,8BAA8B,iCAAiC,wHAAwH,wEAAwE,2DAA2D,GAAG,wEAAwE,2FAA2F,GAAG;AAC5kD,yEAAyE,mCAAmC,oDAAoD,oDAAoD,oBAAoB,kDAAkD,kDAAkD,kDAAkD,8DAA8D,8CAA8C,qDAAqD,kCAAkC,GAAG;AACpkB,uEAAuE,iBAAiB,GAAG;AAC3F,4EAA4E,kEAAkE,4BAA4B,0BAA0B,+DAA+D,mGAAmG,qGAAqG,eAAe;AAC1d,8CAA8C,2BAA2B,2BAA2B,mBAAmB,uCAAuC,6DAA6D,yEAAyE,qFAAqF,yEAAyE,wEAAwE,qFAAqF,wEAAwE,6DAA6D,uBAAuB,GAAG;AAC9vB,mDAAmD,2BAA2B,sBAAsB,mBAAmB,qBAAqB,gCAAgC,sBAAsB,0BAA0B,2CAA2C,GAAG;AAC1Q,8EAA8E,oEAAoE,mEAAmE,8BAA8B,gCAAgC,sEAAsE,yEAAyE,wGAAwG,sGAAsG,kCAAkC,GAAG;AACrpB,8DAA8D,uCAAuC,iDAAiD,mEAAmE,8DAA8D;AACvR,mEAAmE,mBAAmB,GAAG;AACzF,+DAA+D,uCAAuC,qCAAqC,GAAG;AAC9I;AACA;AACA,sFAAsF,kDAAkD,4CAA4C,0CAA0C,sBAAsB,mFAAmF,qBAAqB,GAAG;AAC/V,8EAA8E,mCAAmC,yDAAyD,GAAG;AAC7K,qFAAqF,iBAAiB,GAAG,2BAA2B,iBAAiB,GAAG,sDAAsD,iBAAiB,GAAG;AAClO,wFAAwF,oDAAoD,6DAA6D,0CAA0C,0CAA0C,0CAA0C,iBAAiB,GAAG,2BAA2B,sCAAsC,6DAA6D,0CAA0C,0CAA0C,0CAA0C,iBAAiB,GAAG,sDAAsD,kCAAkC,6DAA6D,0CAA0C,0CAA0C,0CAA0C,iBAAiB,GAAG;AACl5B,mDAAmD,4BAA4B,2BAA2B,oDAAoD,kDAAkD,6CAA6C,8CAA8C,GAAG;AAC9S,oDAAoD,4BAA4B,2BAA2B,oDAAoD,wEAAwE,6CAA6C,8CAA8C,GAAG;AACrU,sDAAsD,0BAA0B,wBAAwB,2BAA2B,oDAAoD,kEAAkE,6CAA6C,+CAA+C,8CAA8C,GAAG;AACtY,sDAAsD,mBAAmB,GAAG;AAC5E,qGAAqG,+BAA+B,+DAA+D,yCAAyC,qCAAqC,2CAA2C,mEAAmE,GAAG;AAClY,sDAAsD,2BAA2B,mBAAmB,6CAA6C,GAAG;AACpJ,mEAAmE,oBAAoB,oBAAoB,oDAAoD,wCAAwC,GAAG;AAC1M,0EAA0E,gCAAgC,GAAG,0DAA0D,sCAAsC,GAAG,mDAAmD,mCAAmC,GAAG,uCAAuC,mBAAmB,GAAG,sCAAsC,mBAAmB,GAAG,wCAAwC,mBAAmB,GAAG,sCAAsC,mBAAmB,GAAG;AAC5hB,kEAAkE,mCAAmC,GAAG,wCAAwC,6BAA6B,GAAG,sCAAsC,sDAAsD,GAAG,8CAA8C,qCAAqC,6CAA6C,kBAAkB,GAAG,0DAA0D,2CAA2C,6CAA6C,kBAAkB,GAAG,mDAAmD,wCAAwC,6CAA6C,kBAAkB,GAAG,uCAAuC,+BAA+B,sCAAsC,oCAAoC,WAAW;AACn4B,qDAAqD,6BAA6B,sBAAsB,8BAA8B,qBAAqB,0CAA0C,cAAc,2CAA2C,8BAA8B,oGAAoG,kBAAkB,eAAe,yCAAyC,yEAAyE,gCAAgC,8FAA8F,oDAAoD,2BAA2B,GAAG;AACnuB,2EAA2E;AAC3E;AACA,6EAA6E,gEAAgE,gCAAgC,wBAAwB,iEAAiE,iGAAiG,sFAAsF,2CAA2C,GAAG;AAC3e,gEAAgE,gCAAgC,gCAAgC,gCAAgC;AAChK,kEAAkE,sDAAsD,GAAG;AAC3H,0EAA0E,0CAA0C,6CAA6C,6BAA6B,GAAG;AACjM,oEAAoE,wCAAwC,sBAAsB,+DAA+D,qDAAqD,6CAA6C,iCAAiC,iBAAiB,OAAO,4DAA4D,oEAAoE,8DAA8D,uDAAuD,4CAA4C,GAAG,yBAAyB,qDAAqD,mDAAmD,+DAA+D,4DAA4D,yDAAyD,GAAG;AACx7B,0FAA0F,8BAA8B,0BAA0B,mFAAmF,6EAA6E,4CAA4C,GAAG;AACjW,4DAA4D,kDAAkD,GAAG;AACjH,gHAAgH,wDAAwD,gDAAgD,+CAA+C,uCAAuC,sDAAsD,uJAAuJ,sDAAsD,GAAG;AACpjB,kEAAkE,kCAAkC,6CAA6C,gMAAgM,GAAG;AACpV,uEAAuE,sCAAsC,iEAAiE,iCAAiC,GAAG,oDAAoD,oEAAoE,iCAAiC,4BAA4B,+DAA+D,mGAAmG,oFAAoF,8CAA8C,GAAG;AAC9qB,4DAA4D,mJAAmJ,+CAA+C,GAAG,6CAA6C,qCAAqC,GAAG,8CAA8C,2DAA2D,2EAA2E,uEAAuE,oDAAoD,yDAAyD,gDAAgD,MAAM,kCAAkC,wHAAwH,0GAA0G,gEAAgE,6BAA6B,oGAAoG,oGAAoG,kHAAkH,mGAAmG,gTAAgT,yGAAyG,kFAAkF,sCAAsC,iEAAiE,iHAAiH,yBAAyB,kIAAkI,8EAA8E,uEAAuE,GAAG;AACx+E,8CAA8C,+GAA+G,0HAA0H,mDAAmD,kEAAkE,GAAG;AAC/Y,uDAAuD,uFAAuF,sDAAsD,GAAG;AACvM,mEAAmE,mCAAmC,oBAAoB,uEAAuE,6BAA6B,kCAAkC,GAAG;AACnQ,wEAAwE,mCAAmC,oBAAoB,uEAAuE,6BAA6B,qFAAqF,kCAAkC,GAAG;AAC7V,+EAA+E,mCAAmC,oBAAoB,uEAAuE,6BAA6B,0EAA0E,6CAA6C,GAAG;AACpW,qDAAqD,0FAA0F,sDAAsD,GAAG;AACxM,oDAAoD,2CAA2C,GAAG;AAClG,4DAA4D,kBAAkB,sCAAsC,iEAAiE,oBAAoB,GAAG;AAC5M,6DAA6D,kCAAkC,GAAG;AAClG,6EAA6E,kEAAkE,6BAA6B,mBAAmB,0DAA0D,8FAA8F,iFAAiF,eAAe;AACvb,yDAAyD;AACzD,4DAA4D;AAC5D,kEAAkE,0BAA0B;AAC5F,qDAAqD,6BAA6B,sBAAsB,2BAA2B,gCAAgC,GAAG,+BAA+B,6DAA6D,6BAA6B,wFAAwF,8CAA8C,2BAA2B,mBAAmB,GAAG,mBAAmB,iCAAiC,4BAA4B,eAAe,sBAAsB,sCAAsC,OAAO,sBAAsB,sCAAsC,OAAO,sBAAsB,oCAAoC,OAAO,sBAAsB,sCAAsC,OAAO,sBAAsB,qCAAqC,OAAO,OAAO,uCAAuC,OAAO,8CAA8C,mEAAmE,GAAG;AAC1iC,mDAAmD,2BAA2B,mBAAmB,6CAA6C,GAAG;AACjJ,0LAA0L,oFAAoF,8EAA8E,oJAAoJ,iCAAiC,iBAAiB,GAAG;AACriB,gEAAgE,oFAAoF,8EAA8E,oJAAoJ,kBAAkB,iCAAiC,iBAAiB,GAAG;AAC7b,kEAAkE,yCAAyC,sBAAsB,qDAAqD,2DAA2D,0DAA0D,uCAAuC,yBAAyB,sDAAsD,GAAG;AACpa,8DAA8D,6BAA6B,iCAAiC,gCAAgC,gCAAgC,yEAAyE,kCAAkC,0BAA0B,2BAA2B,gCAAgC,GAAG,+EAA+E,yGAAyG,6CAA6C,mBAAmB,GAAG,2BAA2B,wEAAwE,mFAAmF,4BAA4B,qCAAqC,wCAAwC,uCAAuC;AACh8B,gEAAgE,2BAA2B,mCAAmC,qCAAqC,2BAA2B,GAAG,2BAA2B,gCAAgC,GAAG,8CAA8C,wGAAwG,GAAG,0DAA0D,iCAAiC,mDAAmD,4CAA4C,2CAA2C,2CAA2C,uCAAuC,0BAA0B,GAAG,iEAAiE,+BAA+B,+BAA+B,iCAAiC,oBAAoB,wBAAwB,GAAG,oDAAoD,+FAA+F,iBAAiB,GAAG,mBAAmB,kDAAkD,8CAA8C,oDAAoD,uFAAuF,sCAAsC,oBAAoB,iEAAiE,sGAAsG,0FAA0F,oCAAoC,+DAA+D,oBAAoB,0EAA0E,6BAA6B,kCAAkC,kCAAkC,gFAAgF,mIAAmI,+BAA+B,wCAAwC,qBAAqB;AAC5uE,wIAAwI;AACxI,iHAAiH;AACjH,sFAAsF,qDAAqD,6BAA6B,gDAAgD,oDAAoD,wDAAwD;AACpU,kEAAkE,0DAA0D,2DAA2D,sBAAsB,uBAAuB,uDAAuD,4BAA4B,sBAAsB,GAAG;AAChV,8JAA8J,8BAA8B,uBAAuB,gCAAgC,qCAAqC,GAAG,sCAAsC,2EAA2E,GAAG,4BAA4B,4DAA4D,4DAA4D,4DAA4D,4DAA4D,2FAA2F,kEAAkE,uBAAuB,2CAA2C,6CAA6C,4BAA4B,qCAAqC,8EAA8E,sCAAsC,+DAA+D,GAAG;AAC9pC,6DAA6D,+BAA+B,qEAAqE,OAAO,OAAO,+CAA+C,OAAO,GAAG;AACxO,mEAAmE,4BAA4B,iCAAiC,oCAAoC,qBAAqB,+CAA+C,eAAe,GAAG,mCAAmC,0DAA0D,qBAAqB,8DAA8D,eAAe,GAAG,sBAAsB,wEAAwE,oDAAoD,uCAAuC,6CAA6C,2FAA2F,sCAAsC,mEAAmE,iCAAiC,gFAAgF,OAAO,iCAAiC,gFAAgF,OAAO,iCAAiC,uDAAuD,OAAO,OAAO,kDAAkD,OAAO,GAAG;AACxvC,kEAAkE,0DAA0D,+DAA+D,GAAG,oEAAoE,mDAAmD,GAAG;AACxT,4DAA4D,GAAG;AAC/D,2DAA2D,kCAAkC,iCAAiC,iCAAiC,iCAAiC,6BAA6B,4BAA4B,8EAA8E,oFAAoF,wCAAwC,gCAAgC,gCAAgC,gCAAgC,aAAa,aAAa,gBAAgB,cAAc,eAAe,gBAAgB,cAAc,cAAc,iBAAiB,eAAe,gBAAgB;AACtsB,4EAA4E,wEAAwE,yBAAyB,OAAO;AACpL,sFAAsF;AACtF,0EAA0E,wEAAwE,wBAAwB,OAAO,4CAA4C;AAC7N,2EAA2E,0DAA0D,6CAA6C,yFAAyF,GAAG,oEAAoE,yEAAyE,GAAG;AAC9Z,mEAAmE,gCAAgC,GAAG,kCAAkC,2BAA2B,mCAAmC,qCAAqC,2BAA2B,GAAG,0DAA0D,kCAAkC,oDAAoD,8CAA8C,2CAA2C,2CAA2C,uCAAuC,kCAAkC,GAAG,4EAA4E,4CAA4C,mCAAmC,yGAAyG,GAAG,oBAAoB,iDAAiD,wBAAwB,mCAAmC,qDAAqD,wDAAwD,+BAA+B,wDAAwD,4BAA4B,uBAAuB,oBAAoB,yFAAyF,oFAAoF,iFAAiF,gCAAgC,qCAAqC,4GAA4G,kGAAkG,oFAAoF,uDAAuD,+EAA+E,sCAAsC,4CAA4C,2DAA2D,+EAA+E,+EAA+E,2CAA2C;AAC5zE,0FAA0F,qDAAqD;AAC/I,mFAAmF,sDAAsD;AACzI,qFAAqF,gDAAgD;AACrI,sEAAsE;AACtE,qEAAqE,uEAAuE,6FAA6F,sFAAsF,4EAA4E,4BAA4B,mEAAmE,qCAAqC,kCAAkC,6BAA6B,yBAAyB,wBAAwB,kCAAkC,kCAAkC,wCAAwC,2CAA2C,iCAAiC,iCAAiC,iCAAiC,0BAA0B,kCAAkC,kEAAkE,+BAA+B,+BAA+B,gDAAgD,iCAAiC,oBAAoB,wBAAwB,GAAG,qDAAqD,+FAA+F,iBAAiB,GAAG,oBAAoB,iDAAiD,+BAA+B,8CAA8C,gGAAgG,iEAAiE,6FAA6F,oGAAoG,qBAAqB,6CAA6C,wCAAwC,mDAAmD;AAC9+D,8FAA8F,8BAA8B,gEAAgE;AAC5L,wDAAwD,yBAAyB,oCAAoC,kCAAkC,GAAG;AAC1J,yEAAyE,8BAA8B,oEAAoE;AAC3K,gFAAgF,uCAAuC,6BAA6B,6BAA6B;AACjL,sEAAsE,iGAAiG,4BAA4B,6BAA6B,kCAAkC,mEAAmE,sDAAsD,gCAAgC,gCAAgC,wBAAwB,0BAA0B,wCAAwC,wGAAwG,kDAAkD,iCAAiC,iCAAiC,iCAAiC,yEAAyE,0CAA0C,aAAa,aAAa,gBAAgB,cAAc,eAAe;AAC58B,oFAAoF,+CAA+C;AACnI,4QAA4Q,mBAAmB;AAC/R,uEAAuE;AACvE,sEAAsE,4DAA4D,4DAA4D,qCAAqC;AACnO,oGAAoG;AACpG,gJAAgJ,4CAA4C;AAC5L,sFAAsF,+CAA+C;AACrI,8EAA8E,mCAAmC,yEAAyE,qBAAqB;AAC/M,2EAA2E;AAC3E,yEAAyE,qCAAqC,kCAAkC,0EAA0E,yEAAyE,6DAA6D;AAChW,oKAAoK,mHAAmH;AACvR,4EAA4E,yCAAyC,oEAAoE,yCAAyC,uDAAuD;AACzR,oDAAoD,wCAAwC,GAAG;AAC/F,6DAA6D,+BAA+B,oFAAoF,8EAA8E,4EAA4E,iCAAiC,iBAAiB,GAAG,mBAAmB,+CAA+C,wDAAwD,qCAAqC,GAAG;AACjiB,wDAAwD,6BAA6B,sBAAsB,2BAA2B,gCAAgC,GAAG,sBAAsB,2EAA2E,GAAG,oCAAoC,gFAAgF,sFAAsF,wCAAwC,uDAAuD,gFAAgF,qEAAqE,GAAG,oFAAoF,kCAAkC,8DAA8D,uDAAuD,gFAAgF,kCAAkC,GAAG,iCAAiC,6CAA6C,+BAA+B,mDAAmD,mDAAmD,6BAA6B,GAAG,+BAA+B,oCAAoC,8CAA8C,+BAA+B,gGAAgG,kDAAkD,+BAA+B,qBAAqB,GAAG,mBAAmB,iCAAiC,2CAA2C,qEAAqE,OAAO,4BAA4B,eAAe,sBAAsB,sCAAsC,OAAO,sBAAsB,sCAAsC,OAAO,sBAAsB,oCAAoC,OAAO,sBAAsB,sCAAsC,OAAO,sBAAsB,qCAAqC,OAAO,OAAO,uCAAuC,OAAO,uDAAuD,6BAA6B,sCAAsC,gBAAgB,kBAAkB,WAAW,OAAO,qCAAqC,qCAAqC,6CAA6C,0GAA0G,kDAAkD,OAAO,8BAA8B,0EAA0E,GAAG;AACpwF,gDAAgD,2DAA2D,GAAG;AAC9G,wEAAwE,sCAAsC,wBAAwB,2DAA2D,0BAA0B,qGAAqG,GAAG;AACnU,2EAA2E,sCAAsC,yCAAyC,gBAAgB,qCAAqC,wBAAwB,mCAAmC,6BAA6B,+CAA+C,6BAA6B,oCAAoC,4BAA4B,mCAAmC,+CAA+C,oHAAoH,kDAAkD,kCAAkC,gBAAgB,GAAG,wBAAwB,0DAA0D,oEAAoE,uDAAuD,aAAa,8DAA8D,8CAA8C,gCAAgC,2BAA2B,wDAAwD,oDAAoD,qDAAqD,2DAA2D,iFAAiF,gCAAgC,iFAAiF,0CAA0C,sCAAsC,uDAAuD,GAAG;AACzoD,iGAAiG,mDAAmD,mDAAmD,mDAAmD,kDAAkD,kFAAkF,8CAA8C,wBAAwB,8WAA8W,0DAA0D,6CAA6C,oEAAoE,6BAA6B,oBAAoB,0EAA0E,yEAAyE,yEAAyE,yEAAyE,wEAAwE,wEAAwE,4EAA4E,oBAAoB,OAAO,OAAO,4BAA4B,iCAAiC,WAAW,4BAA4B,iCAAiC,WAAW,OAAO,+CAA+C,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,mBAAmB,qBAAqB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,kBAAkB,OAAO,oBAAoB,mBAAmB,4DAA4D,6DAA6D,uDAAuD,GAAG;AACv6E,qLAAqL,8CAA8C,wBAAwB,qDAAqD,iGAAiG,6BAA6B,0HAA0H,uDAAuD,GAAG;AAClmB,uGAAuG,8CAA8C,sCAAsC,wBAAwB,0DAA0D,gGAAgG,+CAA+C,uGAAuG,GAAG;AACtgB,6EAA6E,sCAAsC,wBAAwB,+BAA+B,iDAAiD,uGAAuG,GAAG;AACrU,4FAA4F,uDAAuD,sCAAsC,kDAAkD,mEAAmE,qBAAqB,GAAG,wBAAwB,mFAAmF,8BAA8B,8BAA8B,2EAA2E,sBAAsB,yFAAyF,sBAAsB,yBAAyB,GAAG;AACztB,sDAAsD,6CAA6C,2BAA2B,GAAG,8CAA8C,4CAA4C,GAAG,mDAAmD,+CAA+C,GAAG;AACnU,6DAA6D,mEAAmE,2EAA2E,iFAAiF,yIAAyI,4BAA4B,+DAA+D,OAAO,kGAAkG,6GAA6G,0CAA0C,OAAO,4GAA4G,8FAA8F,oFAAoF,eAAe,yHAAyH,iDAAiD,sCAAsC,GAAG,yGAAyG,+CAA+C,GAAG;AACl6C,mFAAmF,2CAA2C,yIAAyI,0CAA0C,uBAAuB,GAAG;AAC3U,6GAA6G,0DAA0D,yDAAyD,iGAAiG,eAAe,8EAA8E,oDAAoD,8BAA8B,mCAAmC,2DAA2D,iGAAiG,eAAe,kEAAkE,mEAAmE,GAAG,kEAAkE,mEAAmE,GAAG,8EAA8E,0EAA0E,iJAAiJ,6DAA6D,GAAG,8EAA8E,6HAA6H,oEAAoE,GAAG;AACzkD,wEAAwE,8CAA8C,4CAA4C,6BAA6B,GAAG,8EAA8E,oDAAoD,8BAA8B,GAAG,8EAA8E,oDAAoD,8BAA8B,GAAG,kEAAkE,mEAAmE,GAAG,kEAAkE,mEAAmE,GAAG,8EAA8E,0EAA0E,qIAAqI,6DAA6D,GAAG,8EAA8E,iHAAiH,oEAAoE,GAAG;AAC33C,gIAAgI,oDAAoD,+BAA+B,iCAAiC,mDAAmD,qFAAqF,0EAA0E,iJAAiJ,oEAAoE,GAAG,yEAAyE,0EAA0E,GAAG;AACpzB,qIAAqI,mDAAmD,0DAA0D,GAAG,+EAA+E,wGAAwG,GAAG,mFAAmF,8IAA8I,GAAG;AACnpB,sIAAsI,yCAAyC,mCAAmC,+CAA+C,oEAAoE,oEAAoE,iEAAiE,8CAA8C,oCAAoC,oCAAoC,uCAAuC,0DAA0D,GAAG,+EAA+E,wGAAwG,GAAG,mFAAmF,8IAA8I,GAAG;AAClkC,oEAAoE,6CAA6C,qBAAqB,+EAA+E,yGAAyG,sCAAsC,GAAG,qIAAqI,mCAAmC,qDAAqD,4EAA4E,yCAAyC,6CAA6C,6CAA6C,+BAA+B,sCAAsC,0BAA0B,sCAAsC,sCAAsC,2CAA2C,mCAAmC,sCAAsC,sCAAsC,2CAA2C,mCAAmC,iDAAiD,iDAAiD,iDAAiD,iDAAiD,iEAAiE,iEAAiE,iEAAiE,iEAAiE,6BAA6B,qBAAqB,OAAO,2EAA2E,2DAA2D,OAAO,+EAA+E,+DAA+D,OAAO,gGAAgG,4BAA4B,0CAA0C,6CAA6C,uEAAuE,uEAAuE,uEAAuE,0EAA0E,qFAAqF,qFAAqF,4BAA4B,0FAA0F,0FAA0F,0FAA0F,0FAA0F,yDAAyD,OAAO,sEAAsE,0CAA0C,+CAA+C,qDAAqD,8BAA8B,2BAA2B,iGAAiG,iGAAiG,iGAAiG,iGAAiG,gFAAgF,iGAAiG,iGAAiG,iGAAiG,iGAAiG,yEAAyE,OAAO,qEAAqE,2DAA2D,OAAO,yEAAyE,+DAA+D,OAAO,oHAAoH,+BAA+B,2BAA2B,oCAAoC,oCAAoC,mCAAmC,uDAAuD,mCAAmC,mCAAmC,iCAAiC,OAAO,uDAAuD,mCAAmC,mCAAmC,iCAAiC,OAAO,0FAA0F,0DAA0D,0DAA0D,0BAA0B,0BAA0B,yBAAyB,yBAAyB,wBAAwB,uBAAuB,8EAA8E,wEAAwE,8EAA8E,wEAAwE,kEAAkE,wEAAwE,8EAA8E,wEAAwE,8EAA8E,yEAAyE,iEAAiE,iEAAiE,iEAAiE,oEAAoE,0DAA0D,iFAAiF,iFAAiF,wBAAwB,sFAAsF,sFAAsF,sFAAsF,sFAAsF,2DAA2D,GAAG,wEAAwE,kEAAkE,GAAG;AAC3rO,6GAA6G,0GAA0G,iDAAiD,wEAAwE,qCAAqC,yCAAyC,yCAAyC,2BAA2B,kCAAkC,kCAAkC,sBAAsB,kCAAkC,6CAA6C,iCAAiC,+BAA+B,kCAAkC,sBAAsB,kCAAkC,6CAA6C,iCAAiC,+BAA+B,sBAAsB,6CAA6C,6CAA6C,6CAA6C,6CAA6C,6CAA6C,6CAA6C,6DAA6D,6DAA6D,6DAA6D,6DAA6D,6DAA6D,6DAA6D,6DAA6D,6DAA6D,6DAA6D,0BAA0B,mCAAmC,mDAAmD,iBAAiB,GAAG,uEAAuE,uDAAuD,GAAG,2EAA2E,2DAA2D,GAAG;AACzmE,gHAAgH,uCAAuC,yDAAyD,oGAAoG,GAAG;AACvT,uNAAuN,uCAAuC,yDAAyD,iGAAiG,mEAAmE,GAAG;AAC9d,2FAA2F,8BAA8B,cAAc,qCAAqC,mDAAmD,mEAAmE,GAAG,gCAAgC,qCAAqC,GAAG,uGAAuG,yCAAyC,yEAAyE,gDAAgD,GAAG,+EAA+E,mGAAmG,GAAG,mFAAmF,yIAAyI,GAAG;AAC7gC,gHAAgH,uCAAuC,uCAAuC,0CAA0C,gDAAgD,wGAAwG,GAAG;AACnY,gFAAgF,yCAAyC,GAAG,uDAAuD,2GAA2G,GAAG,wGAAwG,oFAAoF,4CAA4C,2EAA2E,mDAAmD,+DAA+D,2EAA2E,GAAG,6EAA6E,wBAAwB,4CAA4C,mFAAmF,8BAA8B,cAAc,0DAA0D,mDAAmD,6EAA6E,GAAG;AACjuC,uEAAuE,uCAAuC,wCAAwC,sCAAsC,kBAAkB,GAAG;AACjN,qEAAqE,oCAAoC,mCAAmC,wCAAwC,wBAAwB,qDAAqD,wDAAwD,oDAAoD,oDAAoD,yBAAyB,oEAAoE,oEAAoE,oEAAoE,oEAAoE,uCAAuC,kBAAkB,GAAG;AACtwB,iEAAiE,oCAAoC,uCAAuC,yCAAyC,sCAAsC,kBAAkB,GAAG;AAChP,+DAA+D,oCAAoC,oCAAoC,mCAAmC,yCAAyC,wBAAwB,qDAAqD,wDAAwD,oDAAoD,oDAAoD,yBAAyB,oEAAoE,oEAAoE,oEAAoE,oEAAoE,uCAAuC,kBAAkB,GAAG;AACryB,kDAAkD,sCAAsC,mBAAmB,sEAAsE,GAAG;AACpL,qDAAqD,mEAAmE,yCAAyC,wBAAwB,oBAAoB,8BAA8B,iDAAiD,oEAAoE,sUAAsU,2BAA2B,yBAAyB,GAAG;AAC7tB,qDAAqD,sCAAsC,mBAAmB,oHAAoH,6BAA6B,wCAAwC,sCAAsC,GAAG;AAChV,iEAAiE,sCAAsC,wEAAwE,0DAA0D,6DAA6D,0CAA0C,0CAA0C,0CAA0C,iBAAiB,GAAG,mBAAmB,2FAA2F,6BAA6B,wCAAwC,sCAAsC,GAAG;AACppB,8EAA8E,mEAAmE,iCAAiC,+BAA+B,iEAAiE,qGAAqG,uFAAuF,eAAe;AAC7d,4EAA4E,mBAAmB,GAAG;AAClG,+EAA+E,sDAAsD,yDAAyD,6BAA6B,GAAG;AAC9N,oFAAoF,sDAAsD,yDAAyD,2DAA2D,GAAG;AACjQ,yHAAyH,0DAA0D,4EAA4E,GAAG;AAClQ,8CAA8C,8BAA8B,+BAA+B,4BAA4B,6BAA6B;AACpK,8CAA8C,kCAAkC;AAChF,6DAA6D,4BAA4B,iCAAiC,oDAAoD;AAC9K,0DAA0D,2DAA2D,GAAG,sBAAsB,2DAA2D,GAAG;AAC5M,wCAAwC,0FAA0F,GAAG;AACrI,4CAA4C,yDAAyD,GAAG;AACxG,4DAA4D,4BAA4B,sBAAsB,sBAAsB,sBAAsB,sBAAsB,sBAAsB,gCAAgC,4CAA4C,GAAG;AACrR,6DAA6D,0NAA0N,sLAAsL,6BAA6B,iDAAiD,yDAAyD,mBAAmB,GAAG,4BAA4B,wBAAwB,mCAAmC,4DAA4D,oCAAoC,6DAA6D,mBAAmB,GAAG;AACp3B,6DAA6D,wBAAwB,wBAAwB,wBAAwB,wBAAwB,wBAAwB,wBAAwB,yBAAyB,kCAAkC,oDAAoD,GAAG,4BAA4B,kDAAkD,6DAA6D,iCAAiC,mBAAmB,GAAG;AACjgB,4DAA4D,4BAA4B,wBAAwB,wEAAwE,6BAA6B,qDAAqD,2IAA2I,GAAG;AACxZ,8DAA8D,4BAA4B,8BAA8B,GAAG;AAC3H,+DAA+D,mBAAmB,GAAG;AACrF,8EAA8E,wGAAwG,8BAA8B,6BAA6B,4BAA4B,6CAA6C,4EAA4E,6VAA6V,qHAAqH,yCAAyC,eAAe,sBAAsB,sCAAsC,sCAAsC,qIAAqI,wFAAwF,6FAA6F,qFAAqF,4HAA4H,8EAA8E,+DAA+D,iBAAiB,UAAU,qCAAqC,iEAAiE,2DAA2D,wCAAwC,qBAAqB,0FAA0F,sEAAsE,sEAAsE,kJAAkJ,6CAA6C,iDAAiD,6CAA6C,wDAAwD,mDAAmD,GAAG,2BAA2B,wBAAwB,GAAG;AAC1iF,kEAAkE,4BAA4B,qCAAqC,kBAAkB,oBAAoB;AACzK,0CAA0C,8BAA8B,GAAG;AAC3E,0CAA0C,8BAA8B,GAAG;AAC3E,6FAA6F,0BAA0B,yBAAyB,wBAAwB,6BAA6B,iBAAiB,mCAAmC,gFAAgF,yFAAyF,iFAAiF,+GAA+G,2BAA2B,4CAA4C,kCAAkC,gBAAgB,GAAG;AAC9tB,gDAAgD,wDAAwD,GAAG;AAC3G,mGAAmG,gCAAgC,0CAA0C,GAAG;AAChL,iBAAiB;AACjB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;AACD,wDAAwD;AACxD;AACA,6EAA6E;AAC7E;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,2BAA2B,0BAA0B;AACrD,CAAC;AACD,4BAA4B;AAC5B,CAAC;AACD,WAAW;AACX;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,yCAAyC;AACzC,iCAAiC;AACjC;AACA;AACA,6CAA6C;AAC7C,+BAA+B;AAC/B;AACA;AACA,kCAAkC;AAClC;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,4FAA4F;AAC5F;AACA;AACA,uCAAuC;AACvC;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,GAAG;AACH,iCAAiC;AACjC;AACA;AACA,+BAA+B;AAC/B,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,uCAAuC;AACvC,GAAG;AACH,uCAAuC;AACvC;AACA;AACA,qEAAqE;AACrE;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,GAAG;AACH;AACA,oDAAoD;AACpD,KAAK;AACL;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,sCAAsC;AACtC;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,wCAAwC;AACxC,KAAK;AACL;AACA,+CAA+C;AAC/C;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB,SAAS,yBAAyB,YAAY,0BAA0B,kBAAkB,gCAAgC,gBAAgB,8BAA8B,qBAAqB,mCAAmC,iBAAiB,+BAA+B,sBAAsB,oCAAoC,mBAAmB,iCAAiC,iBAAiB,+BAA+B,sBAAsB;AAC9e,oBAAoB,2BAA2B,oCAAoC,kBAAkB,gCAAgC,uBAAuB,qCAAqC,4BAA4B,qCAAqC,gBAAgB,8BAA8B,cAAc,4BAA4B,mBAAmB,iCAAiC,eAAe,6BAA6B,oBAAoB,kCAAkC,oBAAoB;AACpgB,iBAAiB,kBAAkB,gCAAgC,uBAAuB,qCAAqC,mBAAmB,iCAAiC,wBAAwB,sCAAsC,kBAAkB,gCAAgC,gBAAgB,8BAA8B,qBAAqB,mCAAmC,iBAAiB,+BAA+B,sBAAsB,oCAAoC;AACnf,iBAAiB,iCAAiC,iBAAiB,+BAA+B,sBAAsB,oCAAoC,kBAAkB,gCAAgC,uBAAuB,qCAAqC,2BAA2B,8CAA8C,wBAAwB,+CAA+C,wBAAwB,+CAA+C,0BAA0B;AAC3f,gCAAgC,oCAAoC,sDAAsD,oBAAoB,0CAA0C,gBAAgB,0CAA0C;AAClP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,6DAA6D;AAC7D;AACA;AACA,uDAAuD;AACvD,wIAAwI;AACxI;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD,sEAAsE;AACtE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA,8DAA8D;AAC9D,8DAA8D;AAC9D,2HAA2H;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,kCAAkC;AAClC;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,wCAAwC;AACxC;AACA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,iDAAiD;AACjD,kDAAkD;AAClD;AACA;AACA;AACA;AACA,kFAAkF;AAClF,OAAO;AACP,kFAAkF;AAClF;AACA,oHAAoH;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA,iCAAiC;AACjC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,oCAAoC;AACpC;AACA,uCAAuC;AACvC;AACA,YAAY;AACZ,GAAG;AACH;AACA,oCAAoC;AACpC;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,sCAAsC;AACtC;AACA,oDAAoD;AACpD;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oDAAoD;AACpD,yDAAyD;AACzD,0CAA0C;AAC1C,oEAAoE;AACpE,oCAAoC;AACpC,sBAAsB;AACtB;AACA;AACA;AACA;AACA,mCAAmC;AACnC,wCAAwC;AACxC;AACA;AACA;AACA,qGAAqG;AACrG,SAAS;AACT,mDAAmD;AACnD;AACA;AACA;AACA,gEAAgE,2CAA2C;AAC3G,wHAAwH;AACxH,wDAAwD;AACxD,WAAW;AACX,wDAAwD;AACxD;AACA,SAAS;AACT;AACA,iDAAiD;AACjD,WAAW;AACX;AACA,gGAAgG;AAChG,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,2BAA2B;AACxC;AACA;AACA,+CAA+C;AAC/C;AACA,qDAAqD;AACrD,KAAK;AACL,oDAAoD;AACpD,mDAAmD;AACnD;AACA,uDAAuD;AACvD,6DAA6D;AAC7D,6DAA6D;AAC7D;AACA;AACA;AACA,wDAAwD;AACxD;AACA,0DAA0D;AAC1D,OAAO;AACP,0DAA0D;AAC1D;AACA;AACA,8DAA8D;AAC9D,OAAO;AACP;AACA,oEAAoE;AACpE,SAAS;AACT,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,gEAAgE;AAChE;AACA,8DAA8D;AAC9D;AACA;AACA,OAAO;AACP;AACA,2DAA2D;AAC3D,gEAAgE;AAChE;AACA,8DAA8D;AAC9D;AACA;AACA,8DAA8D;AAC9D,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE,KAAK;AACL,4CAA4C;AAC5C;AACA;AACA;AACA,wEAAwE;AACxE,2EAA2E;AAC3E,OAAO;AACP,0CAA0C;AAC1C,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,GAAG;AACH;AACA;AACA,KAAK;AACL,+BAA+B;AAC/B;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,2BAA2B;AAC3B;AACA;AACA,gCAAgC;AAChC;AACA;AACA,+BAA+B;AAC/B;AACA,sCAAsC;AACtC;AACA;AACA,4BAA4B;AAC5B;AACA,+BAA+B;AAC/B;AACA;AACA,0BAA0B;AAC1B;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,kDAAkD;AAClD;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,mCAAmC;AACnC;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,iCAAiC;AACjC,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,yVAAyV;AACzV,WAAW;AACX,iKAAiK;AACjK;AACA;AACA;AACA,uEAAuE;AACvE;AACA,SAAS;AACT,2EAA2E;AAC3E;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,4IAA4I;AAC5I;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA,mFAAmF;AACnF;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA,yKAAyK;AACzK;AACA;AACA;AACA,gHAAgH;AAChH;AACA,qDAAqD;AACrD,mHAAmH;AACnH;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,gCAAgC;AAChC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,uCAAuC;AACvC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,sCAAsC;AACtC;AACA;AACA,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,qCAAqC;AACrC;AACA;AACA,mCAAmC;AACnC;AACA;AACA,qCAAqC;AACrC;AACA;AACA,kCAAkC;AAClC;AACA;AACA,qCAAqC;AACrC;AACA;AACA,gCAAgC;AAChC;AACA;AACA,gCAAgC;AAChC;AACA;AACA,gCAAgC;AAChC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,UAAU;AACV;AACA,wBAAwB;AACxB;AACA;AACA,CAAC;AACD;AACA;AACA,UAAU,YAAY,+BAA+B;AACrD;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,qDAAqD,kEAAkE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,oDAAoD;AACpD;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,IAAI;AACJ,oDAAoD;AACpD;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA,kBAAkB;AAClB;AACA;AACA,0BAA0B,IAAI,IAAI,IAAI,IAAI;AAC1C;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mKAAmK;AAC/M;AACA;AACA;AACA,kCAAkC,sBAAsB;AACxD;AACA,gCAAgC,kCAAkC;AAClE;AACA;AACA,0CAA0C,wNAAwN;AAClQ;AACA;AACA,mBAAmB,OAAO;AAC1B,oCAAoC,wCAAwC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI;AAChC,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxiBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAaeAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,kBAAkB;AACreAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,yBAAyB,mEAAmE,GAAG,mEAAmE,GAAG,mEAAmE,GAAG,mEAAmE;AAC9S;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,gDAAgD,oCAAoC;AACpF,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,IAAI;AACJ,oDAAoD;AACpD;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,IAAI;AACJ,kCAAkC;AAClC;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,wCAAwC,2BAA2B;AACnE;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,qBAAqB,EAAE,EAAE,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmkBAAkB;AAClB,yBAAyB;AACzB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,kDAAkD;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,kDAAkD;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,kDAAkD;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,oDAAoD;AACpD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,GAAG;AACH;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA,iBAAiB,iCAAiC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB;AACnB;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH,mBAAmB;AACnB;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,kEAAkE;AAClE;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN;AACA;AACA,cAAc;AACd;AACA,kEAAkE;AAClE;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN;AACA;AACA,cAAc;AACd;AACA,+EAA+E;AAC/E;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN,oFAAoF;AACpF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN,wFAAwF;AACxF;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN,+FAA+F;AAC/F;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,KAAK;AACL;AACA,MAAM;AACN;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gCAAgC;AAC/C;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B,GAAG,6BAA6B;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,mBAAmB,cAAc;AACjC,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,qCAAqC;AACrC,GAAG;AACH;AACA;AACA,GAAG,uTAAuT;AAC1T;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,GAAG;AACH;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,iDAAiD,gIAAgI;AACjL;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA,GAAG;AACH,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA,sCAAsC,iCAAiC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oCAAoC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA,kBAAkB,MAAM,6BAA6B;AACrD;AACA,4CAA4C,QAAQ;AACpD;AACA,kCAAkC,sCAAsC;AACxE;AACA,uCAAuC,qEAAqE;AAC5G;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wLAAwL;AAClO;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,mBAAmB,gBAAgB;AACnmBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA,iBAAiB,OAAO;AACxeAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,0EAA0E,YAAY;AACtF,4EAA4E,YAAY;AACxeAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,yLAAyL;AACzL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+DAA+D;AACpF;AACA;AACA;AACA,OAAO;AACP,qBAAqB,+DAA+D,GAAG,+DAA+D,GAAG,+DAA+D,GAAG,+DAA+D;AAC1R;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,6BAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,qBAAqB,kCAAkC;AACvD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,uBAAuB;AAC1C;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+BAA+B;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kDAAkD,wEAAwE;AAC1H;AACA;AACA;AACA;AACA,sEAAsE,WAAW;AACjF,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAkE;AACvF;AACA,qBAAqB,gEAAgE;AACrF;AACA;AACA,qBAAqB,iEAAiE;AACtF;AACA;AACA,qBAAqB,6EAA6E;AAClG;AACA;AACA,qBAAqB,mEAAmE;AACxF;AACA;AACA,qBAAqB,mEAAmE;AACxF;AACA;AACA,qBAAqB,oEAAoE;AACzF;AACA;AACA,qBAAqB,qEAAqE;AAC1F;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,SAAS;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA,WAAW;AACX;AACA,yBAAyB,4BAA4B;AACrD,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,iBAAiB,qCAAqC;AACtD;AACA,mBAAmB,wCAAwC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0CAA0C;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA,GAAG,wDAAwD;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ,oDAAoD;AACpD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI;AACJ,qDAAqD;AACrD;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,4DAA4D;AAC/D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mIAAmI;AAC7K;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qDAAqD;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA,KAAK;AACL,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,6DAA6D;AAC7D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,4DAA4D;AAC5D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN,6DAA6D;AAC7D;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjgEAAgE;AAChE;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,+DAA+D;AAC/D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR,8DAA8D;AAC9D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR,+DAA+D;AAC/D;AACA,OAAO;AACP;AACA;AACA,QAAQ;AACR,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,KAAK;AACL;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,kEAAkE;AAClE;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN,kEAAkE;AAClE;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN,qEAAqE;AACrE;AACA,KAAK;AACL;AACA,MAAM;AACN,qEAAqE;AACrE;AACA,KAAK;AACL;AACA,MAAM;AACN,uEAAuE;AACvE;AACA,KAAK;AACL;AACA,MAAM;AACN,uEAAuE;AACvE;AACA,KAAK;AACL;AACA,MAAM;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oEAAoE;AACpE;AACA,OAAO;AACP;AACA,QAAQ;AACR,uEAAuE;AACvE;AACA,OAAO;AACP;AACA,QAAQ;AACR,uEAAuE;AACvE;AACA,OAAO;AACP;AACA,QAAQ;AACR,yEAAyE;AACzE;AACA,OAAO;AACP;AACA,QAAQ;AACR,yEAAyE;AACzE;AACA,OAAO;AACP;AACA,QAAQ;AACR,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,QAAQ;AACR,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACriCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,gWAAgW,OAAO;AAC9X;AACA,uBAAuB;AACvB,wBAAwB;AACxB;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA,qBAAqB,kDAAkD;AACvE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,eAAe,OAAO;AACtiDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mCAAmC;AACrE,KAAK;AACL,gCAAgC,mCAAmC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oCAAoC;AACtE,KAAK;AACL,gCAAgC,qCAAqC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+CAA+C;AACjF,KAAK;AACL,gCAAgC,+CAA+C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,aAAa;AACtE,6DAA6D,aAAa;AAC1E,6DAA6D,aAAa;AAC1E,+DAA+D,aAAa;AAC5E,mEAAmE,aAAa;AAChF;AACA,4EAA4E,aAAa;AACzF,wEAAwE,aAAa;AACrF;AACA,8EAA8E,aAAa;AAC3F;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmyBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB;AACvB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,sDAAsD,EAAE,kCAAkC,EAAE;AAC5F;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;AACA,gEAAgE,2FAA2F;AAC3J;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uCAAuC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,WAAW;AACX,4DAA4D,EAAE,EAAE,IAAI;AACpE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yCAAyC;AACtD;AACA;AACA;AACA;AACA;AACA,aAAa,4CAA4C;AACzD;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,GAAG;AACH;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kCAAkC;AAC7E;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,+DAA+D,uGAAuG;AACtK;AACA;AACA;AACA;AACA,iDAAiD,6DAA6D;AAC9G;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,kDAAkD;AAClD,KAAK;AACL,6CAA6C;AAC7C;AACA;AACA;AACA,+DAA+D,sGAAsG;AACrK;AACA;AACA;AACA;AACA,mFAAmF,wDAAwD;AAC3I;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR,sDAAsD;AACtD;AACA,4CAA4C,oFAAoF;AAChI,wCAAwC,oGAAoG;AAC5I,+CAA+C,2GAA2G;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6BAA6B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,wBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA,gBAAgB;AAChB,oBAAoB;AACpB,eAAe;AACf,oBAAoB;AACpB;AACA;AACA,iDAAiD;AACjD;AACA,IAAI;AACJ,wCAAwC;AACxC;AACA,IAAI;AACJ,8CAA8C;AAC9C;AACA,IAAI;AACJ,0CAA0C;AAC1C;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,KAAK;AACL,+DAA+D,EAAE;AACjE;AACA,GAAG;AACH;AACA,mEAAmE,EAAE;AACrE;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,IAAI;AACJ,+BAA+B;AAC/B;AACA,GAAG;AACH;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO,oBAAoB;AAC3B,KAAK;AACL;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,iEAAiE,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD,aAAa;AACtE;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA,KAAK;AACL,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,GAAG;AACH;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2EAA2E;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uCAAuC;AACxE,yCAAyC,qBAAqB;AAC9D,uCAAuC,WAAW;AAClD,mCAAmC,uCAAuC;AAC1E,2CAA2C,qBAAqB;AAChE,qCAAqC,qEAAqE;AAC1G;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,gBAAgB,kbAAkb;AAClc;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,IAAI;AACJ,wCAAwC;AACxC;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwaAAa;AACb;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,8CAA8C,0CAA0C;AACxF;AACA;AACA;AACA;AACA,sEAAsE,eAAe;AACrF,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,0CAA0C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,oBAAoB;AACpB;AACA,iCAAiC;AACjC,uBAAuB,8BAA8B;AACrD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,0CAA0C;AAC1C,qCAAqC;AACrC,6EAA6E,iBAAiB;AAC9F,6EAA6E,GAAG,GAAG;AACnF,yHAAyH,iBAAiB;AAC1I,8GAA8G,GAAG,GAAG;AACpH;AACA,qDAAqD;AACrD;AACA;AACA,4EAA4E;AAC5E,2DAA2D;AAC3D;AACA;AACA;AACA,sCAAsC,wDAAwD;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,iBAAiB,qBAAqB;AACtC;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,OAAO;AACP,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B,gDAAgD,uFAAuF;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,+CAA+C;AAC/C;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA,gJAAgJ;AAChJ;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,2DAA2D,GAAG;AAC9D;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oBAAoB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6DAA6D;AAC7D;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,uCAAuC;AACvC;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,8CAA8C,SAAS;AACvD;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0IAA0I;AACvL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,wCAAwC;AACxC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sHAAsH;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C,yCAAyC,2HAA2H;AACpK;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,mCAAmC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,GAAG;AACH,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA,gBAAgB;AAChB;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,8DAA8D,EAAE,kBAAkB,EAAE,QAAQ,EAAE,IAAI,GAAG;AACrG;AACA,6CAA6C;AAC7C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,EAAE;AAC/D,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,OAAO;AACP;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,iBAAiB;AACjB;AACA,8DAA8D;AAC9D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK,oBAAoB;AACzB,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD,eAAe,yFAAyF;AACxG;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA,sDAAsD;AACtD;AACA,GAAG;AACH;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA,GAAG;AACH;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxmEAAmE;AACnE;AACA,GAAG;AACH;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD,eAAe;AACf,kVAAkV;AAClV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,gBAAgB;AAChB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvsFAAsF;AACtF;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,wFAAwF;AACxF;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,oFAAoF;AACpF,GAAG;AACH;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrgDAAgD;AAChD;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpaAAa;AACb;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc;AACvmCAAmC;AACnC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,qEAAqE;AACrE;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,2DAA2D;AACrH;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,iDAAiD,2EAA2E;AAC5H;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA,IAAI;AACJ,mEAAmE;AACnE;AACA,GAAG;AACH;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,mEAAmE;AACnE;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,oEAAoE;AACpE;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,6CAA6C,0BAA0B,6BAA6B,4BAA4B,2BAA2B,sBAAsB;AACjL,mEAAmE,8FAA8F,wDAAwD,wEAAwE;AACjS;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,qDAAqD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qCAAqC,yRAAyR;AAC9T,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,qCAAqC,iLAAiL;AACtN,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzmBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAA4D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uCAAuC,yDAAyD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,IAAI;AACJ,mEAAmE;AACnE;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,+DAA+D;AAC/D;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA,IAAI;AACJ,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,IAAI;AACJ,mEAAmE;AACnE;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ,qEAAqE;AACrE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,6DAA6D;AAC7D;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA,6CAA6C,0BAA0B,6BAA6B,4BAA4B,2BAA2B,sBAAsB;AACjL,mEAAmE,8FAA8F,wDAAwD,wEAAwE;AACjS;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,qDAAqD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,qCAAqC;AACrC,6eAA6e;AAC7e,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,4DAA4D;AAC5I;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI;AACJ,iEAAiE;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,gEAAgE;AAChE;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,kEAAkE;AAClE;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,qEAAqE;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACteAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,GAAG;AACH;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,yDAAyD;AACzD;AACA,IAAI;AACJ,2DAA2D;AAC3D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4DAA4D;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,IAAI;AACJ,wDAAwD;AACxD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA,6BAA6B,yBAAyB;AACtD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2BAA2B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,8DAA8D;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2DAA2D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,0DAA0D;AAC1D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,gBAAgB;AAChB;AACA,GAAG;AACH;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,uDAAuD,EAAE;AACzD;AACA,KAAK;AACL,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wDAAwD,EAAE;AAC1D;AACA,KAAK;AACL,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA,WAAW;AACX,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,sEAAsE,EAAE,GAAG,EAAE;AAC7E,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,4BAA4B;AAC5B,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA,gEAAgE,mGAAmG;AACnK;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kCAAkC,yDAAyD;AAC3F;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC,kDAAkD,oKAAoK;AACtiEAAiE,EAAE,GAAG,EAAE;AACxE;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,8DAA8D,EAAE,GAAG,EAAE;AACrE;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,oBAAoB;AACpB;AACA;AACA;AACA;AACA,sEAAsE,qDAAqD;AAC3H;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oDAAoD;AAC3E;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sDAAsD;AAC1F,oCAAoC,qDAAqD;AACzF,oCAAoC,qDAAqD;AACzF,oCAAoC,qDAAqD;AACzF,oCAAoC,oDAAoD;AACxF,oCAAoC,oDAAoD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU;AACV;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yDAAyD,EAAE,GAAG,EAAE;AAChE;AACA,KAAK;AACL,GAAG;AACH,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA,6DAA6D,EAAE;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,wBAAwB,+BAA+B;AACvD;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,OAAO;AACP,iEAAiE,EAAE,GAAG,EAAE;AACxE;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,6BAA6B;AAC7B,sBAAsB,+CAA+C;AACrE;AACA;AACA,OAAO;AACP,mEAAmE,EAAE,GAAG,EAAE;AAC1E;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA,2BAA2B;AAC3B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,EAAE;AACrE;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,EAAE;AACvE;AACA;AACA,SAAS;AACT;AACA,sFAAsF,EAAE;AACxF,WAAW;AACX;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kDAAkD;AAChG;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kDAAkD,kDAAkD;AACpG;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,OAAO;AACP,iEAAiE,EAAE,GAAG,EAAE;AACxE;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,OAAO;AACP,gEAAgE,EAAE,GAAG,EAAE;AACvE;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,OAAO;AACP,mEAAmE,EAAE,GAAG,EAAE;AAC1E;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,GAAG;AACH;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D,WAAW;AACX,SAAS;AACT,mEAAmE,EAAE,GAAG,EAAE;AAC1E;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA,2BAA2B;AAC3B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8BAA8B,+BAA+B;AAC7D;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA,6BAA6B;AAC7B,kCAAkC;AAClC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA,iBAAiB,yCAAyC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,4CAA4C,4IAA4I;AACxL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,yBAAyB,cAAc;AACvC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,wBAAwB;AACxB;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8KAA8K;AACvM;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ,kDAAkD;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,kDAAkD;AAClD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,sDAAsD;AACtD;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ,qDAAqD;AACrD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,yBAAyB;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAkD;AAChF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD,WAAW;AACX,YAAY;AACZ,YAAY;AACZ,SAAS,oJAAoJ,gGAAgG,kBAAkB;AAC/Q,mBAAmB;AACnB,iCAAiC;AACjC,qBAAqB,mQAAmQ;AACxR,iBAAiB;AACjB,qBAAqB,4CAA4C,2QAA2Q;AAC5U,iLAAiL,+EAA+E,6DAA6D;AAC7T,YAAY;AACZ,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,kEAAkE,GAAG,6EAA6E;AAC5M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT,qBAAqB;AACrB;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT,qBAAqB;AACrB;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAA4C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8DAA8D,kEAAkE;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6CAA6C,QAAQ;AACrD,mBAAmB,kBAAkB;AACrC;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gEAAgE;AAChH,eAAe,kBAAkB;AACjC;AACA;AACA,oBAAoB,kBAAkB;AACtC,sCAAsC,8JAA8J;AACpM;AACA;AACA;AACA,2CAA2C,+IAA+I;AAC1L,uDAAuD,YAAY;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8FAA8F,wBAAwB;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA,gDAAgD,YAAY;AAC5D;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,iDAAiD,gIAAgI;AACjL;AACA,KAAK;AACL;AACA;AACA;AACA,iCAAiC;AACjC,GAAG;AACH;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0FAA0F;AACjH;AACA,yBAAyB,wFAAwF;AACjH;AACA;AACA,yBAAyB,2FAA2F;AACpH;AACA;AACA,yBAAyB,2FAA2F;AACpH;AACA;AACA,yBAAyB,yFAAyF;AAClH;AACA;AACA,yBAAyB,oFAAoF;AAC7G;AACA;AACA,yBAAyB,8FAA8F;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,UAAU;AACV,CAAC;AACD;AACA;AACA,CAAC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9addce99804779ae73ad","import { Component } from '../component';\n\nexport interface PcComponentProps {\n    enable?: boolean;\n    children?: never;\n}\n\nexport class PcComponent<T> extends Component<T & PcComponentProps> {\n    pc;\n    isPcComponent() {\n        return true;\n    }\n    static addComponent(entity: pc.Entity, node, ...keys) {\n        keys.push('children');\n        let obj = {};\n        for (let key in node.props) {\n            !keys.includes(key) && (obj[key] = node.props[key]);\n        }\n        return entity.addComponent(node.type, obj);\n    }\n    static asyncAssetsSet(entity, node, ...keys) {\n        keys.forEach((key) => {\n            let res = node.props[key];\n            if (res) {\n                if (res instanceof Promise) {\n                    res.then((asset) => {\n                        entity[node.type][key] = asset.resource;\n                    })\n                } else {\n                    entity[node.type][key] = res.resource;\n                }\n            }\n        })\n        // props[] && props.colorMap.then((asset) => {\n        //     entity.particlesystem.colorMap = asset.resource;\n        // })\n    }\n    static get basename() {\n        return this.name.toLowerCase();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/pc.component.ts","import { Component } from './component';\nimport { KEY } from './config';\nimport { Node } from './node';\nexport interface ApplicationProps {\n    gravity?: pc.Vec3;\n    ambientLight?: pc.Color;\n}\nlet application;\n\nexport const updateQuene = [];\n\nexport class Application extends Component<ApplicationProps> {\n    static basename = 'application'\n    constructor(props, context, innerContext) {\n        super(props, context, innerContext);\n        innerContext.canvas.focus();\n        var app = new pc.Application(innerContext.canvas, {\n            mouse: innerContext.mouse,\n            keyboard: innerContext.keyboard\n        })\n        application = app;\n        app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);\n        app.setCanvasResolution(pc.RESOLUTION_AUTO);\n        app.scene.ambientLight = new pc.Color(0.2, 0.2, 0.2);\n        app.start();\n        app.on('update', function (dt) { updateQuene.forEach((cb) => { cb(dt); }) })\n        innerContext.app = app;\n        this.props.gravity && app.systems.rigidbody.setGravity(this.props.gravity);\n     \n        this.pc = app;\n        this.pc[KEY] = this;\n        // console.log('application init',this);\n    }\n    render() {\n        return this.props.children;\n    }\n}\nexport function getApplicationInstance() {\n    return application;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./package/application.tag.ts","import { ClassAttributes, HPCNode } from './node';\n\n\nexport interface Component<P= {}> { }\nexport class Component<P> {\n    props: Readonly<{ children?: HPCNode }> & Readonly<P>;\n    pc: any;\n    // parent: null | Component;\n    // children: Component[] = [];\n    // parent: BABYLON.TransformNode;\n    constructor(props, public context: any, public innerContext) {\n        this.props = props;\n    }\n}\n\n\n\nexport interface ComponentClass<P extends ClassAttributes<P>= {}> {\n    new(props: P, context, innerContext): Component<P>;\n    defaultProps?: Partial<P>;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./package/component.ts","export const KEY='__hpc__';\n\n\n// WEBPACK FOOTER //\n// ./package/config.ts","/// <reference path=\"../typings/index.d.ts\" />\nimport './playcanvas/playcanvas-latest.js'\nimport { Application } from './application.tag';\nimport { HpcComponent } from './script_commponent';\nimport { Entity } from './entity.tag';\nimport { Node } from './node';\n// import { loadAssetsFromUrl, createMaterial, randomRange, randomEnum, once } from './util';\nimport { h } from './h';\nimport { render } from './render';\nconst hpc = {\n    h\n}\nwindow['hpc'] = hpc;\nconst pc = window['pc'];\nexport {\n    render, h, Application, Entity, HpcComponent, pc\n};\nexport default hpc;\nexport * from './util';\nexport * from './components';\n\n\n\n// WEBPACK FOOTER //\n// ./package/index.ts","export * from './camera/camera';\nexport * from './pc.component';\nexport * from './model/model';\nexport * from './light/light';\nexport * from './particlesystem/particlesystem';\nexport * from './rigidbody/rigidbody';\nexport * from './collision/collision';\nexport * from './audio/index';\n\n\n// WEBPACK FOOTER //\n// ./package/components/index.ts","import { Component } from './component';\nimport { stringToComponent } from './string_component';\nimport { HpcComponent } from './script_commponent';\nimport { getApplicationInstance } from './application.tag';\nimport { KEY } from './config';\nexport interface EntityProps {\n    position?: pc.Vec3;\n    // rotation?: [number, number, number, number];\n    rotation?: pc.Vec3;\n    scale?: pc.Vec3;\n    name?: string;\n    tag?: string;\n    enable?: boolean;\n}\n\nfunction getPcParent(parent) {\n    while (parent) {\n        if (parent instanceof Entity) {\n            return parent.pc;\n\n        } else {\n            parent = parent.parent;\n        }\n    }\n    return getApplicationInstance().root;\n}\n\n\nexport class Entity extends Component<EntityProps> {\n    static basename = 'entity'\n    readonly pc: pc.Entity;\n    constructor(props, context, innerContext, parent) {\n        super(props, context, innerContext);\n        parent = getPcParent(parent)\n        var entity = new pc.Entity()\n        entity.name = props.name;\n        props.tag && props.tag.split(' ').filter(x => x !== '').forEach((x) => {\n            entity.tags.add(x);\n        })\n        this.props.position && entity.setLocalPosition(this.props.position);\n        this.props.rotation && entity.rotateLocal(this.props.rotation);\n        this.props.scale && entity.setLocalScale(this.props.scale);\n\n        let children = props.children;\n\n        let renderChildren = [];\n\n        for (let i = 0; i < children.length; i++) {\n            let node = children[i];\n            if (node == null) {\n                continue;\n            }\n            if (node.type === Entity.basename || node.type.isHpcComponent) {\n                renderChildren.push(node);\n                continue;\n            }\n            if (typeof node.type !== 'string') {\n                node.type = node.type.basename;\n            }\n            // if(node.type==='light'){debugger;delete node.props.children}\n            // entity.addComponent(node.type, node.props);\n            stringToComponent[node.type].addComponent(entity, node);\n        }\n\n        if (renderChildren.length > 0) {\n            // parent.addChild(entity);\n            this.render = () => { return renderChildren; }\n        }\n\n\n\n\n        // if (parent) {\n        //     parent.pc.addChild(entity);\n        // } else {\n        //     innerContext.app.root.addChild(entity);\n        // }\n        parent.addChild(entity);\n\n        this.pc = entity;\n        this.pc[KEY] = this;\n    }\n    render?()\n}\n\n\n// WEBPACK FOOTER //\n// ./package/entity.tag.ts","import { Component, ComponentClass } from './component';\nimport {\n    CameraProps, PcComponentProps, ModelProps, LightProps,\n    ParticleSystemProps, RigidBodyProps, CollisionProps,\n    SoundProps, AudioListenProps\n} from './components';\nimport { ApplicationProps } from './application.tag';\nimport { EntityProps, Entity } from './entity.tag';\n\n\nexport class Node<P> {\n    constructor(public type, public props: P, public children) {\n        this.props = this.props == null ? <P>{} : this.props;\n        (<any>this.props).children = children;\n    }\n}\n\nexport type TextNode = string | number;\nexport type NodeChild = Node<any> | TextNode;\nexport type NodeFragment = {} | Array<NodeChild | any[] | boolean>;\nexport type HPCNode = NodeFragment | NodeChild | string | number | boolean | null | undefined;\n\nexport interface Attributes {\n    // name?: string;\n    // tag?: string;\n}\n\nexport type Ref<T> = { bivarianceHack(instance: T | null): any }['bivarianceHack'];\n\nexport interface ClassAttributes<T> extends Attributes {\n    ref?: Ref<T>;\n}\n\nexport interface IElements {\n    camera: CameraProps;\n    model: ModelProps;\n    light: LightProps;\n    particlesystem: ParticleSystemProps;\n    rigidbody: RigidBodyProps;\n    collision: CollisionProps;\n    sound: SoundProps;\n    audiolisten: AudioListenProps;\n}\n\nexport type pc<T> = {\n    [K in keyof T]: PcComponentProps & T[K];\n}\n\ndeclare global {\n    namespace JSX {\n\n        interface Element extends Node<any> { }\n        interface ElementClass extends Component<any> {\n            render?(): HPCNode;\n        }\n        interface ElementAttributesProperty { props: {} }\n        interface ElementChildrenAttribute { children: {}; }\n        interface IntrinsicAttributes extends Attributes { }\n        interface IntrinsicClassAttributes<T> extends ClassAttributes<T> { }\n        interface IntrinsicElements extends pc<IElements> {\n            application: ApplicationProps & Readonly<{ children?: HPCNode }>;\n            entity: EntityProps & Readonly<{ children?: HPCNode }> & ClassAttributes<Entity>;\n        }\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./package/node.ts","import { Node, HPCNode } from './node';\nimport { getAllStringToComponent } from './string_component';\nimport { updateQuene } from './application.tag';\nimport { HpcComponent } from './script_commponent';\n\nlet stringToComponent = getAllStringToComponent();\n\nlet i = 0;\n\nexport function run(node: HPCNode, innerContext, context, parent, cb?) {\n    if (node instanceof Node) {\n        var Ctor = node.type;\n        if (typeof Ctor === 'string') {\n            Ctor = stringToComponent[Ctor];\n        }\n        var props = Object.assign({}, Ctor.defaultProps, node.props);\n        var c;\n        c = new Ctor(props, context, innerContext, parent);\n        props.ref && props.ref(c);\n        let children;\n        if (c instanceof HpcComponent) {\n            c.initialize()\n            if (props.ref) {\n                props.ref(c);\n            }\n            let node = c.render();\n            if (Array.isArray(node)) {\n                children = runChildren(node, innerContext, context, parent);\n            } else {\n                children = runChildren([node], innerContext, context, parent);\n            }\n            c._children = children;\n            c.componentLoaded();\n            updateQuene.push(c.update.bind(c))\n        } else {\n            children = runChildren(c.render && c.render(), innerContext, context, c);\n            c.children = children;\n        }\n\n        return c;\n    } else {\n        console.error('e');\n    }\n};\nexport function runChildren(nodes, innerContext, context, parent, isAppend = false) {\n    if (nodes == null) { return };\n    const arr = []\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var c = run(node, innerContext, context, parent);\n        c.parent = parent;\n        arr.push(c);\n        if (isAppend) {\n            parent.children.push(c);\n        }\n    }\n    return arr;\n};\n\nexport function addScriptComponent(entity, name, init, update) {\n\n    var script = pc.createScript(name);\n\n    (script.prototype as any).initialize = function () {\n        init();\n    };\n    (script.prototype as any).update = function (dt) {\n        update(dt);\n    };\n    entity.addComponent('script');\n    entity.script.create(name);\n}\n\n\n// WEBPACK FOOTER //\n// ./package/run.ts","import { getApplicationInstance } from './application.tag';\nimport { Component } from './component';\nimport { HPCNode } from './node';\nimport { runChildren } from './run';\nimport { getHpc } from './util';\nexport interface ScriptComponentProps {\n    // children: never;\n}\n\n\n\nexport abstract class HpcComponent<T = any> extends Component<T>{\n    constructor(props, context, innerContext) {\n        super(props, context, innerContext)\n    }\n    static isHpcComponent = true;\n    next(cb: Function) {\n\n    }\n    append(parent: pc.GraphNode, ...children) {\n\n        return runChildren(children, this.innerContext, this.context, getHpc(parent), true)\n        // res.forEach((x) => {\n        //     parent.addChild(x.pc);\n        // })\n    }\n\n    _children = [];\n    get children() {\n        if (this._children.length === 0) {\n            return null;\n        } else if (this._children.length === 1) {\n            return this._children[0];\n        } else if (this._children.length > 1) {\n            return this._children;\n        }\n    }\n    readonly app: pc.Application = getApplicationInstance();\n    initialize() { };\n    componentLoaded() { };\n    applicationLoaded() { };\n    update(dt) { };\n    abstract render(): HPCNode;\n}\n\n\n// WEBPACK FOOTER //\n// ./package/script_commponent.ts","import { Application } from './application.tag';\nimport { Entity } from './entity.tag';\nimport * as components from './components';\n\nconst stringToComponent = {};\n\nfor (let x in components) {\n    stringToComponent[components[x].basename] = components[x];\n}\nexport function getAllStringToComponent() {\n    stringToComponent[Application.basename] = Application;\n    stringToComponent[Entity.basename] = Entity;\n    return stringToComponent;\n}\nexport { stringToComponent };\n\n\n// WEBPACK FOOTER //\n// ./package/string_component.ts","import { getApplicationInstance } from './application.tag';\nimport { updateQuene } from './application.tag';\nimport { KEY } from './config';\n\nexport function loadAssetsFromUrl<T>(url: string, type: string) {\n    return new Promise<T>(function (resolve, reject) {\n        setTimeout(() => {\n            getApplicationInstance().assets.loadFromUrl(url, type, function (err, asset) {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(asset);\n                }\n\n            });\n        });\n\n    })\n}\n\nexport function createMaterial(colors) {\n    var material = new pc.StandardMaterial();\n    for (var param in colors) {\n        material[param] = colors[param];\n    }\n    material.update();\n    return material;\n}\n\nexport function addUpdateListen(cb) {\n    updateQuene.push(cb);\n}\n\nexport function randomRange(a, b): number {\n    let min = a, max = b;\n    if (a > b) {\n        max = a; min = b;\n    }\n    let subtraction = max - min;\n    return min + subtraction * Math.random();\n}\n\nexport function randomEnum<T = any>(...arg): T {\n    let len = arg.length;\n    let random = Math.random() * len;\n    for (let i = 0; i < len; i++) {\n        if (random >= i && random < i + 1) {\n            return arg[i];\n        }\n    }\n}\nexport function once(target, key, descriptor) {\n    let oldValue = descriptor.value;\n    let cout = 0;\n    let newValue = function (...args) {\n        let res;\n        if (cout === 0) {\n            res = oldValue.apply(this, args)\n        }\n        cout++;\n        return res;\n    }\n    descriptor.value = newValue;\n}\n\nexport function onceTime(time) {\n    return function (target, key, descriptor) {\n        let oldValue = descriptor.value;\n        let cout = 0;\n        let newValue = function (...args) {\n            let res;\n            if (cout === 0) {\n                res = oldValue.apply(this, args)\n            }\n            setTimeout(function () { cout = 0; }, time)\n            cout++;\n            return res;\n        }\n        descriptor.value = newValue;\n\n    }\n}\n\nexport function getVertexArr(mesh: pc.Mesh) {\n    let buffer = mesh.vertexBuffer;\n    let iterator = new pc.VertexIterator(buffer);\n    let arr = [];\n    // Iterate though all verticles \n    for (let i = 0; i < buffer.getNumVertices(); i++) {\n        // Current vertex's position\n        var posSem = iterator.element[pc.SEMANTIC_POSITION];\n\n        // Get position\n        var posX = posSem.array[posSem.index];\n        var posY = posSem.array[posSem.index + 1];\n        var posZ = posSem.array[posSem.index + 2];\n        arr.push({ x: posX, y: posY, z: posZ });\n        // Move to the next vertex\n        iterator.next();\n    }\n\n    iterator.end();\n    return arr;\n}\n\nexport function getHpc(pc) {\n    return pc[KEY];\n}\n\n\n// WEBPACK FOOTER //\n// ./package/util.ts","/**\r\n * @author dadigua\r\n */\r\nimport hpc, {\r\n    loadAssetsFromUrl, HpcComponent,\r\n    createMaterial, render, randomRange, randomEnum,\r\n    onceTime, once, getVertexArr\r\n} from '../package/index';\r\nimport { FirstCamera } from './first_person_camera';\r\nimport 'whatwg-fetch';\r\nimport * as TWEEN from '@tweenjs/tween.js';\r\nvar material = createMaterial({\r\n    diffuse: new pc.Color(.3, .9, .3)\r\n});\r\n\r\n\r\n\r\nfunction formatThreeJsonVertices(json) {\r\n    if (json.data !== undefined) {\r\n        json = json.data;\r\n\r\n    }\r\n    if (json.scale !== undefined) {\r\n        json.scale = 1.0 / json.scale;\r\n    } else {\r\n        json.scale = 10.0;\r\n    }\r\n    let scale = json.scale;\r\n    let vertices = json.vertices,\r\n        offset = 0;\r\n    let zLength = vertices.length;\r\n    let positions = [];\r\n    let i = 0;\r\n    while (offset < zLength) {\r\n        let vertex = { x: 0, y: 0, z: 0 };\r\n        vertex.x = vertices[offset++] * scale;\r\n        vertex.y = vertices[offset++] * scale;\r\n        vertex.z = vertices[offset++] * scale;\r\n        i++;\r\n        // if (i % 2 !== 0) { continue; }\r\n        positions.push(vertex);\r\n    }\r\n    return positions;\r\n}\r\n// pc.calculateNormals()\r\n\r\nfunction animate(time) {\r\n    requestAnimationFrame(animate);\r\n    TWEEN.update(time);\r\n}\r\n\r\nrequestAnimationFrame(animate);\r\n\r\n// let assets = loadAssetsFromUrl<pc.Asset>('./assets/models/statue/Statue_1.json', 'model')\r\nexport class LoadingScene extends HpcComponent<any> {\r\n    loadingScene: pc.Entity;\r\n    vertices: pc.Entity[] = [];\r\n    container: pc.Entity;\r\n    containerTween;\r\n    containerposition = { x: 0, y: 0, z: 0 };\r\n    tweenArr: any[] = [];\r\n    positions = [];\r\n    async componentLoaded() {\r\n        this.loadingScene = this.app.root.findByName('loadingScene') as pc.Entity;\r\n\r\n        let modelVertices = await fetch('./assets/models/cpac5.json').then(rssponse => rssponse.json()).then((res) => formatThreeJsonVertices(res))\r\n        let modelVertices2 = await fetch('./assets/models/cpbook2.json').then(rssponse => rssponse.json()).then((res) => formatThreeJsonVertices(res))\r\n        let modelVertices3 = await fetch('./assets/models/cpgame3.json').then(rssponse => rssponse.json()).then((res) => formatThreeJsonVertices(res))\r\n        let modelVertices4 = await fetch('./assets/models/cpkv3.json').then(rssponse => rssponse.json()).then((res) => formatThreeJsonVertices(res))\r\n        let modelVertices5 = await fetch('./assets/models/cpmovie4.json').then(rssponse => rssponse.json()).then((res) => formatThreeJsonVertices(res))\r\n        let modelVertices6 = await fetch('./assets/models/qr.json').then(rssponse => rssponse.json()).then((res) => formatThreeJsonVertices(res))\r\n\r\n        let arr = [modelVertices4, modelVertices, modelVertices3, modelVertices6]\r\n        let maxCount = Math.max(...arr.map(x => x.length))\r\n        console.log('maxCount', maxCount)\r\n        this.generate(maxCount);\r\n        this.container = this.app.root.findByName('container') as pc.Entity;\r\n        this.containerTween = new TWEEN.Tween(this.containerposition).easing(TWEEN.Easing.Exponential.InOut)\r\n        let index = 0;\r\n        setInterval(() => {\r\n            console.log(index % 3);\r\n            let duration = 2000;\r\n            this.transform(arr[index % 3], duration);\r\n            // let target = new pc.Vec3(randomRange(-10, 10), randomRange(-10, 10), randomRange(-10, 10));\r\n            // this.containerTween.to({ x: target.x, y: target.y, z: target.z }, Math.random() * duration + duration).start()\r\n            index++;\r\n        }, 4000)\r\n\r\n    }\r\n    generate(maxCount) {\r\n        let temp = [];\r\n        for (let i = 0; i < maxCount; i++) {\r\n            let position = new pc.Vec3(randomRange(-10, 10), randomRange(-10, 10), randomRange(-10, 10))\r\n            this.positions.push(position);\r\n            temp.push(<entity position={position} scale={new pc.Vec3(.1, .1, .1)}  >\r\n                <model type='sphere' material={material} isStatic />\r\n            </entity>)\r\n            this.tweenArr.push(\r\n                new TWEEN.Tween(position).easing(TWEEN.Easing.Exponential.InOut)\r\n            )\r\n        }\r\n\r\n        let res = this.append(this.loadingScene, <entity name='container' scale={new pc.Vec3(1, 1, 1)}>{temp}</entity>)[0].pc.children;\r\n        this.vertices = res;\r\n    }\r\n    transform(targets, duration) {\r\n        TWEEN.removeAll();\r\n        for (let i = 0; i < this.vertices.length; i++) {\r\n            var object = this.vertices[i];\r\n\r\n            var target = targets[i];\r\n            if (!target) {\r\n                object.enabled = false;\r\n                this.move(new pc.Vec3(0, 0, 0), object, duration, i);\r\n            } else {\r\n                object.enabled = true;\r\n                this.move(target, object, duration, i);\r\n            }\r\n            // object.setLocalPosition(target.x, target.y, target.z)\r\n        }\r\n    }\r\n    move(target, object, duration, index) {\r\n\r\n        this.tweenArr[index].to({ x: target.x, y: target.y, z: target.z }, Math.random() * duration + duration)\r\n            // .onUpdate(function (position) { // Called after tween.js updates 'coords'.\r\n            //     // Move 'box' to the position described by 'coords' with a CSS translation.\r\n            //     // console.log(arguments)\r\n            //     object.setLocalPosition(position.x, position.y, position.z)\r\n            // })\r\n            .start();\r\n    }\r\n    update() {\r\n        for (let i = 0; i < this.vertices.length; i++) {\r\n            var object = this.vertices[i];\r\n            var position = this.positions[i];\r\n            object.setLocalPosition(position.x, position.y, position.z)\r\n            // object.setLocalPosition(target.x, target.y, target.z)\r\n        }\r\n        this.container && this.container.setLocalPosition(this.containerposition.x, this.containerposition.y, this.containerposition.z)\r\n    }\r\n    render() {\r\n        return <entity name='loadingScene'>\r\n            {/* <entity name='A'  >\r\n                <model type='box' />\r\n            </entity> */}\r\n            <entity name='camera' position={new pc.Vec3(0, 0, 100)} rotation={new pc.Vec3(0, 0, 0)}>\r\n                <camera />\r\n            </entity>\r\n            {/* <FirstCamera /> */}\r\n        </entity >\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./demo/loading_scene.tsx","/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\n\n\nvar _Group = function () {\n\tthis._tweens = {};\n\tthis._tweensAddedDuringUpdate = {};\n};\n\n_Group.prototype = {\n\tgetAll: function () {\n\n\t\treturn Object.keys(this._tweens).map(function (tweenId) {\n\t\t\treturn this._tweens[tweenId];\n\t\t}.bind(this));\n\n\t},\n\n\tremoveAll: function () {\n\n\t\tthis._tweens = {};\n\n\t},\n\n\tadd: function (tween) {\n\n\t\tthis._tweens[tween.getId()] = tween;\n\t\tthis._tweensAddedDuringUpdate[tween.getId()] = tween;\n\n\t},\n\n\tremove: function (tween) {\n\n\t\tdelete this._tweens[tween.getId()];\n\t\tdelete this._tweensAddedDuringUpdate[tween.getId()];\n\n\t},\n\n\tupdate: function (time, preserve) {\n\n\t\tvar tweenIds = Object.keys(this._tweens);\n\n\t\tif (tweenIds.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\ttime = time !== undefined ? time : TWEEN.now();\n\n\t\t// Tweens are updated in \"batches\". If you add a new tween during an update, then the\n\t\t// new tween will be updated in the next batch.\n\t\t// If you remove a tween during an update, it may or may not be updated. However,\n\t\t// if the removed tween was added during the current batch, then it will not be updated.\n\t\twhile (tweenIds.length > 0) {\n\t\t\tthis._tweensAddedDuringUpdate = {};\n\n\t\t\tfor (var i = 0; i < tweenIds.length; i++) {\n\n\t\t\t\tvar tween = this._tweens[tweenIds[i]];\n\n\t\t\t\tif (tween && tween.update(time) === false) {\n\t\t\t\t\ttween._isPlaying = false;\n\n\t\t\t\t\tif (!preserve) {\n\t\t\t\t\t\tdelete this._tweens[tweenIds[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttweenIds = Object.keys(this._tweensAddedDuringUpdate);\n\t\t}\n\n\t\treturn true;\n\n\t}\n};\n\nvar TWEEN = new _Group();\n\nTWEEN.Group = _Group;\nTWEEN._nextId = 0;\nTWEEN.nextId = function () {\n\treturn TWEEN._nextId++;\n};\n\n\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\nif (typeof (window) === 'undefined' && typeof (process) !== 'undefined') {\n\tTWEEN.now = function () {\n\t\tvar time = process.hrtime();\n\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use window.performance.now if it is available.\nelse if (typeof (window) !== 'undefined' &&\n         window.performance !== undefined &&\n\t\t window.performance.now !== undefined) {\n\t// This must be bound, because directly assigning this function\n\t// leads to an invocation exception in Chrome.\n\tTWEEN.now = window.performance.now.bind(window.performance);\n}\n// Use Date.now if it is available.\nelse if (Date.now !== undefined) {\n\tTWEEN.now = Date.now;\n}\n// Otherwise, use 'new Date().getTime()'.\nelse {\n\tTWEEN.now = function () {\n\t\treturn new Date().getTime();\n\t};\n}\n\n\nTWEEN.Tween = function (object, group) {\n\tthis._object = object;\n\tthis._valuesStart = {};\n\tthis._valuesEnd = {};\n\tthis._valuesStartRepeat = {};\n\tthis._duration = 1000;\n\tthis._repeat = 0;\n\tthis._repeatDelayTime = undefined;\n\tthis._yoyo = false;\n\tthis._isPlaying = false;\n\tthis._reversed = false;\n\tthis._delayTime = 0;\n\tthis._startTime = null;\n\tthis._easingFunction = TWEEN.Easing.Linear.None;\n\tthis._interpolationFunction = TWEEN.Interpolation.Linear;\n\tthis._chainedTweens = [];\n\tthis._onStartCallback = null;\n\tthis._onStartCallbackFired = false;\n\tthis._onUpdateCallback = null;\n\tthis._onCompleteCallback = null;\n\tthis._onStopCallback = null;\n\tthis._group = group || TWEEN;\n\tthis._id = TWEEN.nextId();\n\n};\n\nTWEEN.Tween.prototype = {\n\tgetId: function getId() {\n\t\treturn this._id;\n\t},\n\n\tisPlaying: function isPlaying() {\n\t\treturn this._isPlaying;\n\t},\n\n\tto: function to(properties, duration) {\n\n\t\tthis._valuesEnd = properties;\n\n\t\tif (duration !== undefined) {\n\t\t\tthis._duration = duration;\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tstart: function start(time) {\n\n\t\tthis._group.add(this);\n\n\t\tthis._isPlaying = true;\n\n\t\tthis._onStartCallbackFired = false;\n\n\t\tthis._startTime = time !== undefined ? typeof time === 'string' ? TWEEN.now() + parseFloat(time) : time : TWEEN.now();\n\t\tthis._startTime += this._delayTime;\n\n\t\tfor (var property in this._valuesEnd) {\n\n\t\t\t// Check if an Array was provided as property value\n\t\t\tif (this._valuesEnd[property] instanceof Array) {\n\n\t\t\t\tif (this._valuesEnd[property].length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Create a local copy of the Array with the start value at the front\n\t\t\t\tthis._valuesEnd[property] = [this._object[property]].concat(this._valuesEnd[property]);\n\n\t\t\t}\n\n\t\t\t// If `to()` specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (this._object[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Save the starting value.\n\t\t\tthis._valuesStart[property] = this._object[property];\n\n\t\t\tif ((this._valuesStart[property] instanceof Array) === false) {\n\t\t\t\tthis._valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n\t\t\t}\n\n\t\t\tthis._valuesStartRepeat[property] = this._valuesStart[property] || 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tstop: function stop() {\n\n\t\tif (!this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._group.remove(this);\n\t\tthis._isPlaying = false;\n\n\t\tif (this._onStopCallback !== null) {\n\t\t\tthis._onStopCallback(this._object);\n\t\t}\n\n\t\tthis.stopChainedTweens();\n\t\treturn this;\n\n\t},\n\n\tend: function end() {\n\n\t\tthis.update(this._startTime + this._duration);\n\t\treturn this;\n\n\t},\n\n\tstopChainedTweens: function stopChainedTweens() {\n\n\t\tfor (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\tthis._chainedTweens[i].stop();\n\t\t}\n\n\t},\n\n\tgroup: function group(group) {\n\t\tthis._group = group;\n\t\treturn this;\n\t},\n\n\tdelay: function delay(amount) {\n\n\t\tthis._delayTime = amount;\n\t\treturn this;\n\n\t},\n\n\trepeat: function repeat(times) {\n\n\t\tthis._repeat = times;\n\t\treturn this;\n\n\t},\n\n\trepeatDelay: function repeatDelay(amount) {\n\n\t\tthis._repeatDelayTime = amount;\n\t\treturn this;\n\n\t},\n\n\tyoyo: function yoyo(yy) {\n\n\t\tthis._yoyo = yy;\n\t\treturn this;\n\n\t},\n\n\teasing: function easing(eas) {\n\n\t\tthis._easingFunction = eas;\n\t\treturn this;\n\n\t},\n\n\tinterpolation: function interpolation(inter) {\n\n\t\tthis._interpolationFunction = inter;\n\t\treturn this;\n\n\t},\n\n\tchain: function chain() {\n\n\t\tthis._chainedTweens = arguments;\n\t\treturn this;\n\n\t},\n\n\tonStart: function onStart(callback) {\n\n\t\tthis._onStartCallback = callback;\n\t\treturn this;\n\n\t},\n\n\tonUpdate: function onUpdate(callback) {\n\n\t\tthis._onUpdateCallback = callback;\n\t\treturn this;\n\n\t},\n\n\tonComplete: function onComplete(callback) {\n\n\t\tthis._onCompleteCallback = callback;\n\t\treturn this;\n\n\t},\n\n\tonStop: function onStop(callback) {\n\n\t\tthis._onStopCallback = callback;\n\t\treturn this;\n\n\t},\n\n\tupdate: function update(time) {\n\n\t\tvar property;\n\t\tvar elapsed;\n\t\tvar value;\n\n\t\tif (time < this._startTime) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this._onStartCallbackFired === false) {\n\n\t\t\tif (this._onStartCallback !== null) {\n\t\t\t\tthis._onStartCallback(this._object);\n\t\t\t}\n\n\t\t\tthis._onStartCallbackFired = true;\n\t\t}\n\n\t\telapsed = (time - this._startTime) / this._duration;\n\t\telapsed = (this._duration === 0 || elapsed > 1) ? 1 : elapsed;\n\n\t\tvalue = this._easingFunction(elapsed);\n\n\t\tfor (property in this._valuesEnd) {\n\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (this._valuesStart[property] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar start = this._valuesStart[property] || 0;\n\t\t\tvar end = this._valuesEnd[property];\n\n\t\t\tif (end instanceof Array) {\n\n\t\t\t\tthis._object[property] = this._interpolationFunction(end, value);\n\n\t\t\t} else {\n\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tif (typeof (end) === 'string') {\n\n\t\t\t\t\tif (end.charAt(0) === '+' || end.charAt(0) === '-') {\n\t\t\t\t\t\tend = start + parseFloat(end);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tend = parseFloat(end);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof (end) === 'number') {\n\t\t\t\t\tthis._object[property] = start + (end - start) * value;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._onUpdateCallback !== null) {\n\t\t\tthis._onUpdateCallback(this._object);\n\t\t}\n\n\t\tif (elapsed === 1) {\n\n\t\t\tif (this._repeat > 0) {\n\n\t\t\t\tif (isFinite(this._repeat)) {\n\t\t\t\t\tthis._repeat--;\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values, restart by making startTime = now\n\t\t\t\tfor (property in this._valuesStartRepeat) {\n\n\t\t\t\t\tif (typeof (this._valuesEnd[property]) === 'string') {\n\t\t\t\t\t\tthis._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._yoyo) {\n\t\t\t\t\t\tvar tmp = this._valuesStartRepeat[property];\n\n\t\t\t\t\t\tthis._valuesStartRepeat[property] = this._valuesEnd[property];\n\t\t\t\t\t\tthis._valuesEnd[property] = tmp;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._valuesStart[property] = this._valuesStartRepeat[property];\n\n\t\t\t\t}\n\n\t\t\t\tif (this._yoyo) {\n\t\t\t\t\tthis._reversed = !this._reversed;\n\t\t\t\t}\n\n\t\t\t\tif (this._repeatDelayTime !== undefined) {\n\t\t\t\t\tthis._startTime = time + this._repeatDelayTime;\n\t\t\t\t} else {\n\t\t\t\t\tthis._startTime = time + this._delayTime;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\tif (this._onCompleteCallback !== null) {\n\n\t\t\t\t\tthis._onCompleteCallback(this._object);\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t\t// even if the `update()` method was called way past the duration of the tween\n\t\t\t\t\tthis._chainedTweens[i].start(this._startTime + this._duration);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n};\n\n\nTWEEN.Easing = {\n\n\tLinear: {\n\n\t\tNone: function (k) {\n\n\t\t\treturn k;\n\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn k * (2 - k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * (--k * (k - 2) - 1);\n\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn --k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn 1 - (--k * k * k * k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * ((k -= 2) * k * k * k - 2);\n\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k * k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);\n\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\treturn Math.sqrt(1 - (--k * k));\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn - 0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function (k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function (k) {\n\n\t\t\treturn 1 - TWEEN.Easing.Bounce.Out(1 - k);\n\n\t\t},\n\n\t\tOut: function (k) {\n\n\t\t\tif (k < (1 / 2.75)) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < (2 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t\t\t} else if (k < (2.5 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t\t\t}\n\n\t\t},\n\n\t\tInOut: function (k) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\n\t\t}\n\n\t}\n\n};\n\nTWEEN.Interpolation = {\n\n\tLinear: function (v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.Linear;\n\n\t\tif (k < 0) {\n\t\t\treturn fn(v[0], v[1], f);\n\t\t}\n\n\t\tif (k > 1) {\n\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t}\n\n\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\n\t},\n\n\tBezier: function (v, k) {\n\n\t\tvar b = 0;\n\t\tvar n = v.length - 1;\n\t\tvar pw = Math.pow;\n\t\tvar bn = TWEEN.Interpolation.Utils.Bernstein;\n\n\t\tfor (var i = 0; i <= n; i++) {\n\t\t\tb += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n\t\t}\n\n\t\treturn b;\n\n\t},\n\n\tCatmullRom: function (v, k) {\n\n\t\tvar m = v.length - 1;\n\t\tvar f = m * k;\n\t\tvar i = Math.floor(f);\n\t\tvar fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n\t\tif (v[0] === v[m]) {\n\n\t\t\tif (k < 0) {\n\t\t\t\ti = Math.floor(f = m * (1 + k));\n\t\t\t}\n\n\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\n\t\t} else {\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\n\t\t}\n\n\t},\n\n\tUtils: {\n\n\t\tLinear: function (p0, p1, t) {\n\n\t\t\treturn (p1 - p0) * t + p0;\n\n\t\t},\n\n\t\tBernstein: function (n, i) {\n\n\t\t\tvar fc = TWEEN.Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\n\t\t},\n\n\t\tFactorial: (function () {\n\n\t\t\tvar a = [1];\n\n\t\t\treturn function (n) {\n\n\t\t\t\tvar s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (var i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\t\t\t\treturn s;\n\n\t\t\t};\n\n\t\t})(),\n\n\t\tCatmullRom: function (p0, p1, p2, p3, t) {\n\n\t\t\tvar v0 = (p2 - p0) * 0.5;\n\t\t\tvar v1 = (p3 - p1) * 0.5;\n\t\t\tvar t2 = t * t;\n\t\t\tvar t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\n\t\t}\n\n\t}\n\n};\n\n// UMD (Universal Module Definition)\n(function (root) {\n\n\tif (typeof define === 'function' && define.amd) {\n\n\t\t// AMD\n\t\tdefine([], function () {\n\t\t\treturn TWEEN;\n\t\t});\n\n\t} else if (typeof module !== 'undefined' && typeof exports === 'object') {\n\n\t\t// Node.js\n\t\tmodule.exports = TWEEN;\n\n\t} else if (root !== undefined) {\n\n\t\t// Global variable\n\t\troot.TWEEN = TWEEN;\n\n\t}\n\n})(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@tweenjs/tween.js/src/Tween.js\n// module id = 13\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 14\n// module chunks = 0","/**\r\n * @author dadigua\r\n */\r\nimport hpc, {\r\n    loadAssetsFromUrl, HpcComponent,\r\n    createMaterial, render, randomRange, randomEnum,\r\n    onceTime, once\r\n} from '../package/index';\r\n// import '../package/playcanvas/ammo.js';\r\nimport { FirstCamera } from './first_person_camera';\r\nimport { Scene } from './sence';\r\nimport { LoadingScene } from './loading_scene';\r\nvar canvas = document.getElementById(\"root\");\r\n\r\n\r\n\r\nclass App extends HpcComponent {\r\n    render() {\r\n        return <application gravity={new pc.Vec3(0, -9.8, 0)}  >\r\n            <LoadingScene />\r\n            {/* <Scene /> */}\r\n            {/* <FirstCamera /> */}\r\n            <entity {...{ rotation: new pc.Vec3(0, 0, 10) }}  >\r\n                <light {...{\r\n                    type: \"directional\",\r\n                    color: new pc.Color(1, 1, 1),\r\n                    castShadows: true,\r\n                    intensity: 1,\r\n                    shadowBias: 0.2,\r\n                    normalOffsetBias: 0.2,\r\n                    shadowResolution: 1024,\r\n                    shadowDistance: 16,\r\n                    shadowType: pc.SHADOW_PCF3\r\n                }} />\r\n            </entity>\r\n        </application>\r\n    }\r\n}\r\n\r\nrender(<App />, canvas, { debugger: true });\r\n\n\n\n// WEBPACK FOOTER //\n// ./demo/index.tsx","import { PcComponent } from '../pc.component';\n\nexport interface IAudioListenProps {\n\n}\nexport type AudioListenProps=Partial<IAudioListenProps>\n\nexport class AudioListen extends PcComponent<AudioListenProps> {\n    \n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/audio/audiolisten.ts","export * from './sound';\nexport * from './audiolisten';\n\n\n// WEBPACK FOOTER //\n// ./package/components/audio/index.ts","import { PcComponent } from '../pc.component';\n\nexport interface ISoundProps {\n    volume?: number;\n    pitch?: number;\n    loop?: boolean;\n    startTime?: number;\n    duration?: number;\n    overlap?: boolean;\n    autoPlay?: boolean;\n    asset?: Promise<pc.Asset> | pc.Asset;\n}\nexport type SoundProps = Partial<ISoundProps>\n\nexport class Sound extends PcComponent<SoundProps> {\n    static addComponent(entity: pc.Entity, node) {\n        let component = super.addComponent(entity, node)\n        // entity.addComponent('sound');\n\n        // add footsteps slot\n        if (node.props.asset) {\n            if (node.props.asset instanceof Promise) {\n                node.props.asset.then((asset) => {\n                    entity.sound.addSlot('footsteps', {\n                        asset: asset.resource,\n                        pitch: 1.7,\n                        loop: true,\n                        autoPlay: true\n                    });\n                })\n            } else {\n                entity.sound.addSlot('footsteps', {\n                    asset: node.props.asset.resource,\n                    pitch: 1.7,\n                    loop: true,\n                    autoPlay: true\n                });\n            }\n        }\n        return component\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/audio/sound.ts","import { PcComponent } from '../pc.component';\n\nexport interface ICameraProps {\n    // camera: pc.Camera;\n    projection: number;\n    nearClip: number;\n    farClip: number;\n    aspectRatio: number;\n    horizontalFov: boolean;\n    fov: number;\n    orthoHeight: number;\n    priority: number;\n    clearColor: pc.Color;\n    clearColorBuffer: boolean;\n    clearDepthBuffer: boolean;\n    clearStencilBuffer: boolean;\n    rect: pc.Vec4;\n    scissorRect: pc.Vec4;\n    renderTarget: pc.RenderTarget;\n    postEffects: pc.PostEffectQueue;\n    frustumCulling: boolean;\n    calculateTransform: Function;\n    calculateProjection: Function;\n    cullFaces: boolean;\n    flipFaces: boolean;\n}\nexport type CameraProps=Partial<ICameraProps>\n\nexport class Camera extends PcComponent<CameraProps> {\n    \n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/camera/camera.ts","import { PcComponent } from '../pc.component';\n\nexport interface ICollisionProps {\n    type: string;\n    halfExtents: pc.Vec3;\n    radius: number;\n    axis: number;\n    height: number;\n    asset: pc.Asset;\n    model: pc.Model;\n    collisionstart: (result: pc.ContactResult, self: pc.Entity) => void;\n    collisionend: (result: pc.Entity, self: pc.Entity) => void;\n    contact: (result: pc.ContactResult, self: pc.Entity) => void;\n    triggerenter: (result: pc.Entity, self: pc.Entity) => void;\n    triggerleave: (result: pc.Entity, self: pc.Entity) => void;\n}\nexport type CollisionProps = Partial<ICollisionProps>\n\nexport class Collision extends PcComponent<CollisionProps> {\n    static addComponent(entity, node) {\n        let component = super.addComponent(entity, node)\n\n        let arr = ['collisionstart', 'collisionend', 'contact', 'triggerenter', 'triggerleave']\n        arr.forEach(key => {\n            node.props[key] && component.on(key, function (arg) {\n                node.props[key](arg, entity)\n            }, entity);\n        });\n        return component;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/collision/collision.ts","import { PcComponent } from '../pc.component';\n\nexport interface ILightProps {\n    type: 'directional' | 'point' | 'spot';  //default directional\n    color: pc.Color;\n    intensity: number;\n    castShadows: boolean;\n    shadowDistance: number;\n    shadowResolution: number;\n    shadowBias: number;\n    normalOffsetBias: number;\n    range: number;\n    innerConeAngle: number;\n    outerConeAngle: number;\n    falloffMode: number;\n    mask: number;\n    affectDynamic: boolean;\n    affectLightmapped: boolean;\n    bake: boolean;\n    bakeDir: boolean;\n    shadowUpdateMode: number;\n    shadowType: number;\n    vsmBlurMode: number;\n    vsmBlurSize: number;\n    cookieAsset: number;\n    cookie: pc.Texture;\n    cookieIntensity: number;\n    cookieFalloff: boolean;\n    cookieChannel: string;\n    cookieAngle: number;\n    cookieScale: pc.Vec2;\n    cookieOffset: pc.Vec2;\n    isStatic: boolean;\n}\nexport type LightProps = Partial<ILightProps>\n\nexport class Light extends PcComponent<LightProps> {\n\n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/light/light.ts","import { PcComponent } from '../pc.component';\n\nexport interface IModelProps {\n    type: string;\n    asset: pc.Asset | number;\n    castShadows: boolean;\n    receiveShadows: boolean;\n    materialAsset: number;\n    model: Promise<pc.Asset> | pc.Asset;\n    mapping: {};\n    castShadowsLightmap: boolean;\n    lightmapped: boolean;\n    lightmapSizeMultiplier: number;\n    isStatic: boolean;\n    meshInstances: pc.MeshInstance[];\n    batchGroupId: number;\n    layers: number[];\n    material: Promise<pc.Material> | pc.Material;\n}\nexport type ModelProps = Partial<IModelProps>\n\nexport class Model extends PcComponent<ModelProps> {\n\n    static addComponent(entity: pc.Entity, node) {\n        let component;\n        if (node.props.type === 'model') {\n            component = super.addComponent(entity, node, 'model', 'type')\n        } else {\n            component = super.addComponent(entity, node)\n        }\n\n        super.asyncAssetsSet(entity, node, 'model');\n\n        if (node.props.material) {\n            if (node.props.material instanceof Promise) {\n                node.props.material.then((res) => {\n                    entity.model.model.meshInstances.forEach(function (mesh) {\n                        mesh.material = res;\n                    });\n                })\n            } else {\n                node.props.material && entity.model.model.meshInstances.forEach(function (mesh) {\n                    mesh.material = node.props.material;\n                });\n            }\n        }\n        return component;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./package/components/model/model.ts","import { PcComponent } from '../pc.component';\n\nexport interface IParticleSystemProps {\n    autoPlay: boolean;\n    loop: boolean;\n    preWarm: boolean;\n    lighting: boolean;\n    halfLambert: boolean;\n    alignToMotion: boolean;\n    depthWrite: boolean;\n    noFog: boolean;\n    numParticles: number;\n    rate: number;\n    rate2: number;\n    startAngle: number;\n    startAngle2: number;\n    lifetime: number;\n    stretch: number;\n    intensity: number;\n    animLoop: boolean;\n    animTilesX: number;\n    animTilesY: number;\n    animNumFrames: number;\n    animSpeed: number;\n    depthSoftening: number;\n    initialVelocity: number;\n    emitterExtents: pc.Vec3;\n    emitterRadius: number;\n    wrapBounds: pc.Vec3;\n    // colorMap: pc.Texture;\n    // normalMap: pc.Texture;\n    colorMap: Promise<pc.Asset>;\n    normalMap: Promise<pc.Asset>;\n    emmitterShape: number;\n    sort: number;\n    mesh: pc.Mesh;\n    blend: number;\n    localVelocityGraph: pc.CurveSet;\n    localVelocityGraph2: pc.CurveSet;\n    velocityGraph: pc.CurveSet;\n    velocityGraph2: pc.CurveSet;\n    colorGraph: pc.CurveSet;\n    rotationSpeedGraph: pc.Curve;\n    rotationSpeedGraph2: pc.Curve;\n    scaleGraph: pc.Curve;\n    scaleGraph2: pc.Curve;\n    alphaGraph: pc.Curve;\n    alphaGraph2: pc.Curve;\n}\nexport type ParticleSystemProps = Partial<IParticleSystemProps>\n\nexport class ParticleSystem extends PcComponent<ParticleSystemProps> {\n\n    static addComponent(entity, node) {\n        let component = super.addComponent(entity, node, 'colorMap', 'normalMap')\n        // props.colorMap && props.colorMap.then((asset) => {\n        //     entity.particlesystem.colorMap = asset.resource;\n        // })\n        super.asyncAssetsSet(entity, node, 'colorMap', 'normalMap')\n        return component;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/particlesystem/particlesystem.ts","import { PcComponent } from '../pc.component';\n\nexport interface IRigidBodyProps {\n    /**\n     * Controls the rate at which a body loses angular velocity over time. \n     * @type {number}\n     */\n    angularDamping: number;\n\n    /**\n     * Scaling factor for angular movement of the body in each axis.\n     * @type {pc.Vec3}\n     */\n    angularFactor: pc.Vec3;\n\n    /**\n     * Defines the rotational speed of the body around each world axis. \n     * @type {pc.Vec3}\n     */\n    angularVelocity: pc.Vec3;\n\n    /**\n     * The friction value used when contacts occur between two bodies. A higher value\n     * indicates more friction. Should be set in the range 0 to 1. Defaults to 0.5.\n     * @type {number}\n     */\n    friction: number;\n\n    /**\n     * The collision group this body belongs to. Combine the group and the mask to\n     * prevent bodies colliding with each other. Defaults to 1. \n     * @type {number}\n     */\n    group: number;\n\n    /**\n     * Controls the rate at which a body loses linear velocity over time.\n     * Defaults to 0.\n     * @type {number}\n     */\n    linearDamping: number;\n\n    /**\n     * Scaling factor for linear movement of the body in each axis.\n     * Defaults to 1 in all axes.\n     * @type {pc.Vec3}\n     */\n    linearFactor: pc.Vec3;\n\n    /**\n     * Defines the speed of the body in a given direction.\n     * @type {pc.Vec3}\n     */\n    linearVelocity: pc.Vec3;\n\n    /**\n     * The collision mask sets which groups this body collides with. It is a bitfield\n     * of 16 bits, the first 8 bits are reserved for engine use. Defaults to 65535.\n     * @type {number}\n     */\n    mask: number;\n\n    /**\n     * The mass of the body. This is only relevant for {@link pc.BODYTYPE_DYNAMIC}\n     * bodies, other types have infinite mass. Defaults to 1.\n     * @type {number}\n     */\n    mass: number;\n\n    /**\n     * Influences the amount of energy lost when two rigid bodies collide. The\n     * calculation multiplies the restitution values for both colliding bodies. A multiplied value of 0 means\n     * that all energy is lost in the collision while a value of 1 means that no energy is lost. Should be\n     * set in the range 0 to 1. Defaults to 0.\n     * @type {number}\n     */\n    restitution: number;\n\n    /**\n     * The rigid body type determines how the body is simulated. Can be:\n     * <ul>\n     *     <li>pc.BODYTYPE_STATIC: infinite mass and cannot move.</li>\n     *     <li>pc.BODYTYPE_DYNAMIC: simulated according to applied forces.</li>\n     *     <li>pc.BODYTYPE_KINEMATIC: infinite mass and does not respond to forces but can still be moved by setting their velocity or position.</li>\n     * </ul>\n     * Defaults to pc.BODYTYPE_STATIC.\n     * @type {string}\n     */\n    type: pc.rigidBodyType | 'static' | 'dynamic';\n}\nexport type RigidBodyProps = Partial<IRigidBodyProps>\n\nexport class RigidBody extends PcComponent<RigidBodyProps> {\n    \n}\n\n\n// WEBPACK FOOTER //\n// ./package/components/rigidbody/rigidbody.ts","import { Node } from './node';\n\nexport function h(type, props?, ...children) {\n    const newChildren = [];\n    for (let i = 0; i < children.length; i++) {\n        let item = children[i];\n        if (typeof item === 'boolean') {\n            newChildren.push(null);\n        } else if (Array.isArray(item)) {\n            addChild(newChildren, item);\n        } else {\n            newChildren.push(item);\n        }\n    }\n    return new Node(type, props, newChildren);\n}\n\nfunction addChild(newChildren, item) {\n    var x;\n    while (item.length !== 0) {\n        x = item.pop()\n        if (Array.isArray(x)) {\n            addChild(newChildren, x);\n        }\n        else {\n            newChildren.push(x);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./package/h.ts","import { run } from './run';\nimport { Node, HPCNode } from './node';\nexport function render(root: HPCNode, canvas, options) {\n    const app = run(root, {\n        mouse: new pc.Mouse(canvas),\n        keyboard: new pc.Keyboard(window as any),\n        canvas: canvas,\n        app: null\n    }, {}, null)\n    console.log('application init');\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./package/render.ts","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/whatwg-fetch/fetch.js\n// module id = 27\n// module chunks = 0",";(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        try {\n            var JSDOM = require(\"jsdom\").JSDOM;\n            var DOM = new JSDOM();\n            var window = DOM.window;\n            var navigator = window.navigator;\n            module.exports = factory(window, navigator);\n        } catch (error) {\n            module.exports = factory();\n        }\n    } else {\n        root.pc = factory(root, root.navigator);\n  }\n}(this, function (_window, _navigator) {\n  window = _window || window;\n  navigator = _navigator || navigator;\n\n  /*\n PlayCanvas Engine v1.1.0-dev revision f849b9e3\n http://playcanvas.com\n Copyright 2011-2017 PlayCanvas Ltd. All rights reserved.\n*/\nvar pc = {version:\"1.1.0-dev\", revision:\"f849b9e3\", config:{}, common:{}, apps:{}, data:{}, unpack:function() {\n  console.warn(\"pc.unpack has been deprecated and will be removed shortly. Please update your code.\");\n}, makeArray:function(arr) {\n  var i, ret = [], length = arr.length;\n  for (i = 0; i < length; ++i) {\n    ret.push(arr[i]);\n  }\n  return ret;\n}, type:function(obj) {\n  if (obj === null) {\n    return \"null\";\n  }\n  var type = typeof obj;\n  if (type == \"undefined\" || type == \"number\" || type == \"string\" || type == \"boolean\") {\n    return type;\n  }\n  return _typeLookup[Object.prototype.toString.call(obj)];\n}, extend:function(target, ex) {\n  var prop, copy;\n  for (prop in ex) {\n    copy = ex[prop];\n    if (pc.type(copy) == \"object\") {\n      target[prop] = pc.extend({}, copy);\n    } else {\n      if (pc.type(copy) == \"array\") {\n        target[prop] = pc.extend([], copy);\n      } else {\n        target[prop] = copy;\n      }\n    }\n  }\n  return target;\n}, isDefined:function(o) {\n  var a;\n  return o !== a;\n}};\nvar _typeLookup = function() {\n  var result = {};\n  var names = [\"Array\", \"Object\", \"Function\", \"Date\", \"RegExp\", \"Float32Array\"];\n  for (var i = 0; i < names.length; i++) {\n    result[\"[object \" + names[i] + \"]\"] = names[i].toLowerCase();\n  }\n  return result;\n}();\nif (typeof exports !== \"undefined\") {\n  exports.pc = pc;\n}\n;(function() {\n  var lastTime = 0;\n  var vendors = [\"ms\", \"moz\", \"webkit\", \"o\"];\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + \"RequestAnimationFrame\"];\n    window.cancelAnimationFrame = window[vendors[x] + \"CancelAnimationFrame\"] || window[vendors[x] + \"CancelRequestAnimationFrame\"];\n  }\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function(callback, element) {\n      var currTime = (new Date).getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function() {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function(id) {\n      clearTimeout(id);\n    };\n  }\n})();\nif (!String.prototype.startsWith) {\n  Object.defineProperty(String.prototype, \"startsWith\", {enumerable:false, configurable:true, writable:true, value:function(str) {\n    var that = this;\n    for (var i = 0, ceil = str.length; i < ceil; i++) {\n      if (that[i] !== str[i]) {\n        return false;\n      }\n    }\n    return true;\n  }});\n}\nif (!String.prototype.endsWith) {\n  Object.defineProperty(String.prototype, \"endsWith\", {enumerable:false, configurable:true, writable:true, value:function(str) {\n    var that = this;\n    for (var i = 0, ceil = str.length; i < ceil; i++) {\n      if (that[i + that.length - ceil] !== str[i]) {\n        return false;\n      }\n    }\n    return true;\n  }});\n}\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n    if (start + search.length > this.length) {\n      return false;\n    } else {\n      return this.indexOf(search, start) !== -1;\n    }\n  };\n}\n;(function() {\n  if (typeof document === \"undefined\") {\n    return;\n  }\n  var fullscreenchange = function(event) {\n    var e = document.createEvent(\"CustomEvent\");\n    e.initCustomEvent(\"fullscreenchange\", true, false, null);\n    event.target.dispatchEvent(e);\n  };\n  var fullscreenerror = function(event) {\n    var e = document.createEvent(\"CustomEvent\");\n    e.initCustomEvent(\"fullscreenerror\", true, false, null);\n    event.target.dispatchEvent(e);\n  };\n  document.addEventListener(\"webkitfullscreenchange\", fullscreenchange, false);\n  document.addEventListener(\"mozfullscreenchange\", fullscreenchange, false);\n  document.addEventListener(\"MSFullscreenChange\", fullscreenchange, false);\n  document.addEventListener(\"webkitfullscreenerror\", fullscreenerror, false);\n  document.addEventListener(\"mozfullscreenerror\", fullscreenerror, false);\n  document.addEventListener(\"MSFullscreenError\", fullscreenerror, false);\n  if (Element.prototype.mozRequestFullScreen) {\n    Element.prototype.requestFullscreen = function() {\n      this.mozRequestFullScreen();\n    };\n  } else {\n    Element.prototype.requestFullscreen = Element.prototype.requestFullscreen || Element.prototype.webkitRequestFullscreen || Element.prototype.msRequestFullscreen;\n  }\n  document.exitFullscreen = document.exitFullscreen || document.webkitExitFullscreen || document.mozCancelFullScreen || document.msExitFullscreen;\n  if (!document.hasOwnProperty(\"fullscreenElement\")) {\n    Object.defineProperty(document, \"fullscreenElement\", {enumerable:true, configurable:false, get:function() {\n      return document.webkitCurrentFullScreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n    }});\n  }\n  if (!document.hasOwnProperty(\"fullscreenEnabled\")) {\n    Object.defineProperty(document, \"fullscreenEnabled\", {enumerable:true, configurable:false, get:function() {\n      return document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled;\n    }});\n  }\n})();\npc.extend(pc, function() {\n  var Color = function(r, g, b, a) {\n    this.buffer = new ArrayBuffer(4 * 4);\n    this.data = new Float32Array(this.buffer, 0, 4);\n    this.data3 = new Float32Array(this.buffer, 0, 3);\n    var length = r && r.length;\n    if (length === 3 || length === 4) {\n      this.data[0] = r[0];\n      this.data[1] = r[1];\n      this.data[2] = r[2];\n      this.data[3] = r[3] !== undefined ? r[3] : 1.0;\n    } else {\n      this.data[0] = r || 0;\n      this.data[1] = g || 0;\n      this.data[2] = b || 0;\n      this.data[3] = a !== undefined ? a : 1.0;\n    }\n  };\n  Color.prototype = {clone:function() {\n    return new pc.Color(this.data[0], this.data[1], this.data[2], this.data[3]);\n  }, copy:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] = b[0];\n    a[1] = b[1];\n    a[2] = b[2];\n    a[3] = b[3];\n    return this;\n  }, set:function(r, g, b, a) {\n    var c = this.data;\n    c[0] = r;\n    c[1] = g;\n    c[2] = b;\n    c[3] = a === undefined ? 1 : a;\n    return this;\n  }, fromString:function(hex) {\n    var i = parseInt(hex.replace(\"#\", \"0x\"));\n    var bytes;\n    if (hex.length > 7) {\n      bytes = pc.math.intToBytes32(i);\n    } else {\n      bytes = pc.math.intToBytes24(i);\n      bytes[3] = 255;\n    }\n    this.set(bytes[0] / 255, bytes[1] / 255, bytes[2] / 255, bytes[3] / 255);\n    return this;\n  }, toString:function(alpha) {\n    var s = \"#\" + ((1 << 24) + (parseInt(this.r * 255) << 16) + (parseInt(this.g * 255) << 8) + parseInt(this.b * 255)).toString(16).slice(1);\n    if (alpha === true) {\n      var a = parseInt(this.a * 255).toString(16);\n      if (this.a < 16 / 255) {\n        s += \"0\" + a;\n      } else {\n        s += a;\n      }\n    }\n    return s;\n  }};\n  Object.defineProperty(Color.prototype, \"r\", {get:function() {\n    return this.data[0];\n  }, set:function(value) {\n    this.data[0] = value;\n  }});\n  Object.defineProperty(Color.prototype, \"g\", {get:function() {\n    return this.data[1];\n  }, set:function(value) {\n    this.data[1] = value;\n  }});\n  Object.defineProperty(Color.prototype, \"b\", {get:function() {\n    return this.data[2];\n  }, set:function(value) {\n    this.data[2] = value;\n  }});\n  Object.defineProperty(Color.prototype, \"a\", {get:function() {\n    return this.data[3];\n  }, set:function(value) {\n    this.data[3] = value;\n  }});\n  return {Color:Color};\n}());\npc.guid = function() {\n  return {create:function() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n      var r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 3 | 8;\n      return v.toString(16);\n    });\n  }};\n}();\npc.extend(pc, function() {\n  var Timer = function Timer() {\n    this._isRunning = false;\n    this._a = 0;\n    this._b = 0;\n  };\n  Timer.prototype = {start:function() {\n    this._isRunning = true;\n    this._a = pc.now();\n  }, stop:function() {\n    this._isRunning = false;\n    this._b = pc.now();\n  }, getMilliseconds:function() {\n    return this._b - this._a;\n  }};\n  return {Timer:Timer, now:!window.performance || !window.performance.now || !window.performance.timing ? Date.now : function() {\n    return window.performance.now();\n  }};\n}());\npc.extend(pc, function() {\n  return {hashCode:function(str) {\n    var hash = 0;\n    if (str.length === 0) {\n      return hash;\n    }\n    for (var i = 0; i < str.length; i++) {\n      var char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash;\n    }\n    return hash;\n  }};\n}());\npc.extend(pc, function() {\n  return {createURI:function(options) {\n    var s = \"\";\n    if ((options.authority || options.scheme) && (options.host || options.hostpath)) {\n      throw new Error(\"Can't have 'scheme' or 'authority' and 'host' or 'hostpath' option\");\n    }\n    if (options.host && options.hostpath) {\n      throw new Error(\"Can't have 'host' and 'hostpath' option\");\n    }\n    if (options.path && options.hostpath) {\n      throw new Error(\"Can't have 'path' and 'hostpath' option\");\n    }\n    if (options.scheme) {\n      s += options.scheme + \":\";\n    }\n    if (options.authority) {\n      s += \"//\" + options.authority;\n    }\n    if (options.host) {\n      s += options.host;\n    }\n    if (options.path) {\n      s += options.path;\n    }\n    if (options.hostpath) {\n      s += options.hostpath;\n    }\n    if (options.query) {\n      s += \"?\" + options.query;\n    }\n    if (options.fragment) {\n      s += \"#\" + options.fragment;\n    }\n    return s;\n  }, URI:function(uri) {\n    var re = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/, result = uri.match(re);\n    this.scheme = result[2];\n    this.authority = result[4];\n    this.path = result[5];\n    this.query = result[7];\n    this.fragment = result[9];\n    this.toString = function() {\n      var s = \"\";\n      if (this.scheme) {\n        s += this.scheme + \":\";\n      }\n      if (this.authority) {\n        s += \"//\" + this.authority;\n      }\n      s += this.path;\n      if (this.query) {\n        s += \"?\" + this.query;\n      }\n      if (this.fragment) {\n        s += \"#\" + this.fragment;\n      }\n      return s;\n    };\n    this.getQuery = function() {\n      var vars;\n      var pair;\n      var result = {};\n      if (this.query) {\n        vars = decodeURIComponent(this.query).split(\"&\");\n        vars.forEach(function(item, index, arr) {\n          pair = item.split(\"=\");\n          result[pair[0]] = pair[1];\n        }, this);\n      }\n      return result;\n    };\n    this.setQuery = function(params) {\n      var q = \"\";\n      for (var key in params) {\n        if (params.hasOwnProperty(key)) {\n          if (q !== \"\") {\n            q += \"&\";\n          }\n          q += encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      this.query = q;\n    };\n  }};\n}());\npc.extend(pc, function() {\n  var log = {write:function(text) {\n    console.log(text);\n  }, open:function() {\n    pc.log.write(\"Powered by PlayCanvas \" + pc.version + \" \" + pc.revision);\n  }, info:function(text) {\n    console.info(\"INFO:    \" + text);\n  }, debug:function(text) {\n    console.debug(\"DEBUG:   \" + text);\n  }, error:function(text) {\n    console.error(\"ERROR:   \" + text);\n  }, warning:function(text) {\n    console.warn(\"WARNING: \" + text);\n  }, alert:function(text) {\n    pc.log.write(\"ALERT:   \" + text);\n    alert(text);\n  }, assert:function(condition, text) {\n    if (condition === false) {\n      pc.log.write(\"ASSERT:  \" + text);\n      alert(\"ASSERT failed: \" + text);\n    }\n  }};\n  return {log:log};\n}());\nvar logINFO = pc.log.info;\nvar logDEBUG = pc.log.debug;\nvar logWARNING = pc.log.warning;\nvar logERROR = pc.log.error;\nvar logALERT = pc.log.alert;\nvar logASSERT = pc.log.assert;\nFunction.prototype.extendsFrom = function(Super) {\n  var Self, Func;\n  var Temp = function() {\n  };\n  Self = this;\n  Func = function() {\n    Super.apply(this, arguments);\n    Self.apply(this, arguments);\n    this.constructor = Self;\n  };\n  Func._super = Super.prototype;\n  Temp.prototype = Super.prototype;\n  Func.prototype = new Temp;\n  return Func;\n};\npc.extend(pc, function() {\n  return {inherits:function(Self, Super) {\n    var Temp = function() {\n    };\n    var Func = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {\n      Super.call(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);\n      Self.call(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);\n    };\n    Func._super = Super.prototype;\n    Temp.prototype = Super.prototype;\n    Func.prototype = new Temp;\n    return Func;\n  }};\n}());\npc.path = function() {\n  return {delimiter:\"/\", join:function() {\n    var index;\n    var num = arguments.length;\n    var result = arguments[0];\n    for (index = 0; index < num - 1; ++index) {\n      var one = arguments[index];\n      var two = arguments[index + 1];\n      if (!pc.isDefined(one) || !pc.isDefined(two)) {\n        throw new Error(\"undefined argument to pc.path.join\");\n      }\n      if (two[0] === pc.path.delimiter) {\n        result = two;\n        continue;\n      }\n      if (one && two && one[one.length - 1] !== pc.path.delimiter && two[0] !== pc.path.delimiter) {\n        result += pc.path.delimiter + two;\n      } else {\n        result += two;\n      }\n    }\n    return result;\n  }, split:function(path) {\n    var parts = path.split(pc.path.delimiter);\n    var tail = parts.slice(parts.length - 1)[0];\n    var head = parts.slice(0, parts.length - 1).join(pc.path.delimiter);\n    return [head, tail];\n  }, getBasename:function(path) {\n    return pc.path.split(path)[1];\n  }, getDirectory:function(path) {\n    var parts = path.split(pc.path.delimiter);\n    return parts.slice(0, parts.length - 1).join(pc.path.delimiter);\n  }, getExtension:function(path) {\n    var ext = path.split(\"?\")[0].split(\".\").pop();\n    if (ext !== path) {\n      return \".\" + ext;\n    } else {\n      return \"\";\n    }\n  }, isRelativePath:function(s) {\n    return s.charAt(0) !== \"/\" && s.match(/:\\/\\//) === null;\n  }, extractPath:function(s) {\n    var path = \".\", parts = s.split(\"/\"), i = 0;\n    if (parts.length > 1) {\n      if (pc.path.isRelativePath(s) === false) {\n        path = \"\";\n      }\n      for (i = 0; i < parts.length - 1; ++i) {\n        path += \"/\" + parts[i];\n      }\n    }\n    return path;\n  }};\n}();\npc.string = function() {\n  return {ASCII_LOWERCASE:\"abcdefghijklmnopqrstuvwxyz\", ASCII_UPPERCASE:\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", ASCII_LETTERS:this.ASCII_LOWERCASE + this.ASCII_UPPERCASE, format:function(s) {\n    var i = 0, regexp, args = pc.makeArray(arguments);\n    args.shift();\n    for (i = 0; i < args.length; i++) {\n      regexp = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"gi\");\n      s = s.replace(regexp, args[i]);\n    }\n    return s;\n  }, startsWith:function(s, subs) {\n    console.warn(\"WARNING: startsWith: Function is deprecated. Use String.startsWith instead.\");\n    return s.startsWith(subs);\n  }, endsWith:function(s, subs) {\n    console.warn(\"WARNING: endsWith: Function is deprecated. Use String.endsWith instead.\");\n    return s.endsWith(subs);\n  }, toBool:function(s, strict) {\n    if (s === \"true\") {\n      return true;\n    }\n    if (strict) {\n      if (s === \"false\") {\n        return false;\n      }\n      throw new Error(\"Not a boolean string\");\n    }\n    return false;\n  }};\n}();\npc.debug = function() {\n  var table = null;\n  var row = null;\n  var title = null;\n  var field = null;\n  return {display:function(data) {\n    function init() {\n      table = document.createElement(\"table\");\n      row = document.createElement(\"tr\");\n      title = document.createElement(\"td\");\n      field = document.createElement(\"td\");\n      table.style.cssText = \"position:absolute;font-family:sans-serif;font-size:12px;color:#cccccc\";\n      table.style.top = \"0px\";\n      table.style.left = \"0px\";\n      table.style.border = \"thin solid #cccccc\";\n      document.body.appendChild(table);\n    }\n    if (!table) {\n      init();\n    }\n    table.innerHTML = \"\";\n    for (var key in data) {\n      var r = row.cloneNode();\n      var t = title.cloneNode();\n      var f = field.cloneNode();\n      t.textContent = key;\n      f.textContent = data[key];\n      r.appendChild(t);\n      r.appendChild(f);\n      table.appendChild(r);\n    }\n  }};\n}();\npc.events = {attach:function(target) {\n  var ev = pc.events;\n  target.on = ev.on;\n  target.off = ev.off;\n  target.fire = ev.fire;\n  target.once = ev.once;\n  target.hasEvent = ev.hasEvent;\n  target._callbackActive = {};\n  return target;\n}, on:function(name, callback, scope) {\n  if (!name || typeof name !== \"string\" || !callback) {\n    return this;\n  }\n  if (!this._callbacks) {\n    this._callbacks = {};\n  }\n  if (!this._callbacks[name]) {\n    this._callbacks[name] = [];\n  }\n  if (!this._callbackActive) {\n    this._callbackActive = {};\n  }\n  if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name]) {\n    this._callbackActive[name] = this._callbackActive[name].slice();\n  }\n  this._callbacks[name].push({callback:callback, scope:scope || this});\n  return this;\n}, off:function(name, callback, scope) {\n  if (!this._callbacks) {\n    return this;\n  }\n  if (this._callbackActive) {\n    if (name) {\n      if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name]) {\n        this._callbackActive[name] = this._callbackActive[name].slice();\n      }\n    } else {\n      for (var key in this._callbackActive) {\n        if (!this._callbacks[key]) {\n          continue;\n        }\n        if (this._callbacks[key] !== this._callbackActive[key]) {\n          continue;\n        }\n        this._callbackActive[key] = this._callbackActive[key].slice();\n      }\n    }\n  }\n  if (!name) {\n    this._callbacks = null;\n  } else {\n    if (!callback) {\n      if (this._callbacks[name]) {\n        delete this._callbacks[name];\n      }\n    } else {\n      var events = this._callbacks[name];\n      if (!events) {\n        return this;\n      }\n      var i = events.length;\n      while (i--) {\n        if (events[i].callback !== callback) {\n          continue;\n        }\n        if (scope && events[i].scope !== scope) {\n          continue;\n        }\n        events.splice(i, 1);\n      }\n    }\n  }\n  return this;\n}, fire:function(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {\n  if (!name || !this._callbacks || !this._callbacks[name]) {\n    return this;\n  }\n  var callbacks;\n  if (!this._callbackActive) {\n    this._callbackActive = {};\n  }\n  if (!this._callbackActive[name]) {\n    this._callbackActive[name] = this._callbacks[name];\n  } else {\n    if (this._callbackActive[name] === this._callbacks[name]) {\n      this._callbackActive[name] = this._callbackActive[name].slice();\n    }\n    callbacks = this._callbacks[name].slice();\n  }\n  for (var i = 0; (callbacks || this._callbackActive[name]) && i < (callbacks || this._callbackActive[name]).length; i++) {\n    var evt = (callbacks || this._callbackActive[name])[i];\n    evt.callback.call(evt.scope, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);\n    if (evt.callback.once) {\n      var ind = this._callbacks[name].indexOf(evt);\n      if (ind !== -1) {\n        if (this._callbackActive[name] === this._callbacks[name]) {\n          this._callbackActive[name] = this._callbackActive[name].slice();\n        }\n        this._callbacks[name].splice(ind, 1);\n      }\n    }\n  }\n  if (!callbacks) {\n    this._callbackActive[name] = null;\n  }\n  return this;\n}, once:function(name, callback, scope) {\n  callback.once = true;\n  this.on(name, callback, scope);\n  return this;\n}, hasEvent:function(name) {\n  return this._callbacks && this._callbacks[name] && this._callbacks[name].length !== 0 || false;\n}};\npc.extend(pc, function() {\n  var TagsCache = function(key) {\n    this._index = {};\n    this._key = key || null;\n  };\n  TagsCache.prototype = {addItem:function(item) {\n    var tags = item.tags._list;\n    for (var i = 0; i < tags.length; i++) {\n      this.add(tags[i], item);\n    }\n  }, removeItem:function(item) {\n    var tags = item.tags._list;\n    for (var i = 0; i < tags.length; i++) {\n      this.remove(tags[i], item);\n    }\n  }, add:function(tag, item) {\n    if (this._index[tag] && this._index[tag].list.indexOf(item) !== -1) {\n      return;\n    }\n    if (!this._index[tag]) {\n      this._index[tag] = {list:[]};\n      if (this._key) {\n        this._index[tag].keys = {};\n      }\n    }\n    this._index[tag].list.push(item);\n    if (this._key) {\n      this._index[tag].keys[item[this._key]] = item;\n    }\n  }, remove:function(tag, item) {\n    if (!this._index[tag]) {\n      return;\n    }\n    if (this._key) {\n      if (!this._index[tag].keys[item[this._key]]) {\n        return;\n      }\n    }\n    var ind = this._index[tag].indexOf(item);\n    if (ind === -1) {\n      return;\n    }\n    this._index[tag].list.splice(ind, 1);\n    if (this._key) {\n      delete this._index[tag].keys[item[this._key]];\n    }\n    if (this._index[tag].list.length === 0) {\n      delete this._index[tag];\n    }\n  }, find:function(args) {\n    var self = this;\n    var index = {};\n    var items = [];\n    var i, n, t;\n    var item, tag, tags, tagsRest, missingIndex;\n    var sort = function(a, b) {\n      return self._index[a].list.length - self._index[b].list.length;\n    };\n    for (i = 0; i < args.length; i++) {\n      tag = args[i];\n      if (tag instanceof Array) {\n        if (tag.length === 0) {\n          continue;\n        }\n        if (tag.length === 1) {\n          tag = tag[0];\n        } else {\n          missingIndex = false;\n          for (t = 0; t < tag.length; t++) {\n            if (!this._index[tag[t]]) {\n              missingIndex = true;\n              break;\n            }\n          }\n          if (missingIndex) {\n            continue;\n          }\n          tags = tag.slice(0).sort(sort);\n          tagsRest = tags.slice(1);\n          if (tagsRest.length === 1) {\n            tagsRest = tagsRest[0];\n          }\n          for (n = 0; n < this._index[tags[0]].list.length; n++) {\n            item = this._index[tags[0]].list[n];\n            if ((this._key ? !index[item[this._key]] : items.indexOf(item) === -1) && item.tags.has(tagsRest)) {\n              if (this._key) {\n                index[item[this._key]] = true;\n              }\n              items.push(item);\n            }\n          }\n          continue;\n        }\n      }\n      if (tag && typeof tag === \"string\" && this._index[tag]) {\n        for (n = 0; n < this._index[tag].list.length; n++) {\n          item = this._index[tag].list[n];\n          if (this._key) {\n            if (!index[item[this._key]]) {\n              index[item[this._key]] = true;\n              items.push(item);\n            }\n          } else {\n            if (items.indexOf(item) === -1) {\n              items.push(item);\n            }\n          }\n        }\n      }\n    }\n    return items;\n  }};\n  var Tags = function(parent) {\n    this._index = {};\n    this._list = [];\n    this._parent = parent;\n    pc.events.attach(this);\n  };\n  Tags.prototype = {add:function() {\n    var changed = false;\n    var tags = this._processArguments(arguments, true);\n    if (!tags.length) {\n      return changed;\n    }\n    for (var i = 0; i < tags.length; i++) {\n      if (this._index[tags[i]]) {\n        continue;\n      }\n      changed = true;\n      this._index[tags[i]] = true;\n      this._list.push(tags[i]);\n      this.fire(\"add\", tags[i], this._parent);\n    }\n    if (changed) {\n      this.fire(\"change\", this._parent);\n    }\n    return changed;\n  }, remove:function() {\n    var changed = false;\n    if (!this._list.length) {\n      return changed;\n    }\n    var tags = this._processArguments(arguments, true);\n    if (!tags.length) {\n      return changed;\n    }\n    for (var i = 0; i < tags.length; i++) {\n      if (!this._index[tags[i]]) {\n        continue;\n      }\n      changed = true;\n      delete this._index[tags[i]];\n      this._list.splice(this._list.indexOf(tags[i]), 1);\n      this.fire(\"remove\", tags[i], this._parent);\n    }\n    if (changed) {\n      this.fire(\"change\", this._parent);\n    }\n    return changed;\n  }, clear:function() {\n    if (!this._list.length) {\n      return;\n    }\n    var tags = this._list.slice(0);\n    this._list = [];\n    this._index = {};\n    for (var i = 0; i < tags.length; i++) {\n      this.fire(\"remove\", tags[i], this._parent);\n    }\n    this.fire(\"change\", this._parent);\n  }, has:function() {\n    if (!this._list.length) {\n      return false;\n    }\n    return this._has(this._processArguments(arguments));\n  }, _has:function(tags) {\n    if (!this._list.length || !tags.length) {\n      return false;\n    }\n    for (var i = 0; i < tags.length; i++) {\n      if (tags[i].length === 1) {\n        if (this._index[tags[i][0]]) {\n          return true;\n        }\n      } else {\n        var multiple = true;\n        for (var t = 0; t < tags[i].length; t++) {\n          if (this._index[tags[i][t]]) {\n            continue;\n          }\n          multiple = false;\n          break;\n        }\n        if (multiple) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }, list:function() {\n    return this._list.slice(0);\n  }, _processArguments:function(args, flat) {\n    var tags = [];\n    var tmp = [];\n    if (!args || !args.length) {\n      return tags;\n    }\n    for (var i = 0; i < args.length; i++) {\n      if (args[i] instanceof Array) {\n        if (!flat) {\n          tmp = [];\n        }\n        for (var t = 0; t < args[i].length; t++) {\n          if (typeof args[i][t] !== \"string\") {\n            continue;\n          }\n          if (flat) {\n            tags.push(args[i][t]);\n          } else {\n            tmp.push(args[i][t]);\n          }\n        }\n        if (!flat && tmp.length) {\n          tags.push(tmp);\n        }\n      } else {\n        if (typeof args[i] === \"string\") {\n          if (flat) {\n            tags.push(args[i]);\n          } else {\n            tags.push([args[i]]);\n          }\n        }\n      }\n    }\n    return tags;\n  }};\n  Object.defineProperty(Tags.prototype, \"size\", {get:function() {\n    return this._list.length;\n  }});\n  return {TagsCache:TagsCache, Tags:Tags};\n}());\npc.extend(pc, function() {\n  var AllocatePool = function(constructor, size) {\n    this._constructor = constructor;\n    this._pool = [];\n    this._count = 0;\n    this._resize(size);\n  };\n  AllocatePool.prototype = {_resize:function(size) {\n    if (size > this._pool.length) {\n      for (var i = this._pool.length; i < size; i++) {\n        this._pool[i] = new this._constructor;\n      }\n    }\n  }, allocate:function() {\n    if (this._count >= this._pool.length) {\n      this._resize(this._pool.length * 2);\n    }\n    return this._pool[this._count++];\n  }, freeAll:function() {\n    this._count = 0;\n  }};\n  return {AllocatePool:AllocatePool};\n}());\npc.extend(pc, function() {\n  var platform = {desktop:false, mobile:false, ios:false, android:false, windows:false, cocoonjs:false, xbox:false, gamepads:false, touch:false};\n  var ua = navigator.userAgent;\n  if (/(windows|mac os|linux|cros)/i.test(ua)) {\n    platform.desktop = true;\n  }\n  if (/xbox/i.test(ua)) {\n    platform.xbox = true;\n  }\n  if (/(windows phone|iemobile|wpdesktop)/i.test(ua)) {\n    platform.desktop = false;\n    platform.mobile = true;\n    platform.windows = true;\n  } else {\n    if (/android/i.test(ua)) {\n      platform.desktop = false;\n      platform.mobile = true;\n      platform.android = true;\n    } else {\n      if (/ip([ao]d|hone)/i.test(ua)) {\n        platform.desktop = false;\n        platform.mobile = true;\n        platform.ios = true;\n      }\n    }\n  }\n  if (navigator.isCocoonJS) {\n    platform.cocoonjs = true;\n  }\n  platform.touch = \"ontouchstart\" in window;\n  platform.gamepads = \"getGamepads\" in navigator;\n  return {platform:platform};\n}());\npc.math = {DEG_TO_RAD:Math.PI / 180, RAD_TO_DEG:180 / Math.PI, INV_LOG2:1 / Math.log(2), clamp:function(value, min, max) {\n  if (value >= max) {\n    return max;\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value;\n}, intToBytes24:function(i) {\n  var r, g, b;\n  r = i >> 16 & 255;\n  g = i >> 8 & 255;\n  b = i & 255;\n  return [r, g, b];\n}, intToBytes32:function(i) {\n  var r, g, b, a;\n  r = i >> 24 & 255;\n  g = i >> 16 & 255;\n  b = i >> 8 & 255;\n  a = i & 255;\n  return [r, g, b, a];\n}, bytesToInt24:function(r, g, b) {\n  if (r.length) {\n    b = r[2];\n    g = r[1];\n    r = r[0];\n  }\n  return r << 16 | g << 8 | b;\n}, bytesToInt32:function(r, g, b, a) {\n  if (r.length) {\n    a = r[3];\n    b = r[2];\n    g = r[1];\n    r = r[0];\n  }\n  return (r << 24 | g << 16 | b << 8 | a) >>> 32;\n}, lerp:function(a, b, alpha) {\n  return a + (b - a) * pc.math.clamp(alpha, 0, 1);\n}, lerpAngle:function(a, b, alpha) {\n  if (b - a > 180) {\n    b -= 360;\n  }\n  if (b - a < -180) {\n    b += 360;\n  }\n  return pc.math.lerp(a, b, pc.math.clamp(alpha, 0, 1));\n}, powerOfTwo:function(x) {\n  return x !== 0 && !(x & x - 1);\n}, nextPowerOfTwo:function(val) {\n  val--;\n  val = val >> 1 | val;\n  val = val >> 2 | val;\n  val = val >> 4 | val;\n  val = val >> 8 | val;\n  val = val >> 16 | val;\n  val++;\n  return val;\n}, random:function(min, max) {\n  var diff = max - min;\n  return Math.random() * diff + min;\n}, smoothstep:function(min, max, x) {\n  if (x <= min) {\n    return 0;\n  }\n  if (x >= max) {\n    return 1;\n  }\n  x = (x - min) / (max - min);\n  return x * x * (3 - 2 * x);\n}, smootherstep:function(min, max, x) {\n  if (x <= min) {\n    return 0;\n  }\n  if (x >= max) {\n    return 1;\n  }\n  x = (x - min) / (max - min);\n  return x * x * x * (x * (x * 6 - 15) + 10);\n}};\npc.math.intToBytes = pc.math.intToBytes32;\npc.math.bytesToInt = pc.math.bytesToInt32;\nif (!Math.log2) {\n  Math.log2 = function(x) {\n    return Math.log(x) * pc.math.INV_LOG2;\n  };\n}\n;pc.extend(pc, function() {\n  var Vec2 = function(x, y) {\n    if (x && x.length === 2) {\n      this.data = new Float32Array(x);\n      return;\n    }\n    this.data = new Float32Array(2);\n    this.data[0] = x || 0;\n    this.data[1] = y || 0;\n  };\n  Vec2.prototype = {add:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] += b[0];\n    a[1] += b[1];\n    return this;\n  }, add2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + b[0];\n    r[1] = a[1] + b[1];\n    return this;\n  }, clone:function() {\n    return (new Vec2).copy(this);\n  }, copy:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] = b[0];\n    a[1] = b[1];\n    return this;\n  }, dot:function(rhs) {\n    var a = this.data, b = rhs.data;\n    return a[0] * b[0] + a[1] * b[1];\n  }, equals:function(rhs) {\n    var a = this.data, b = rhs.data;\n    return a[0] === b[0] && a[1] === b[1];\n  }, length:function() {\n    var v = this.data;\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  }, lengthSq:function() {\n    var v = this.data;\n    return v[0] * v[0] + v[1] * v[1];\n  }, lerp:function(lhs, rhs, alpha) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + alpha * (b[0] - a[0]);\n    r[1] = a[1] + alpha * (b[1] - a[1]);\n    return this;\n  }, mul:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] *= b[0];\n    a[1] *= b[1];\n    return this;\n  }, mul2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] * b[0];\n    r[1] = a[1] * b[1];\n    return this;\n  }, normalize:function() {\n    var v = this.data;\n    var lengthSq = v[0] * v[0] + v[1] * v[1];\n    if (lengthSq > 0) {\n      var invLength = 1 / Math.sqrt(lengthSq);\n      v[0] *= invLength;\n      v[1] *= invLength;\n    }\n    return this;\n  }, scale:function(scalar) {\n    var v = this.data;\n    v[0] *= scalar;\n    v[1] *= scalar;\n    return this;\n  }, set:function(x, y) {\n    var v = this.data;\n    v[0] = x;\n    v[1] = y;\n    return this;\n  }, sub:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] -= b[0];\n    a[1] -= b[1];\n    return this;\n  }, sub2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] - b[0];\n    r[1] = a[1] - b[1];\n    return this;\n  }, toString:function() {\n    return \"[\" + this.data[0] + \", \" + this.data[1] + \"]\";\n  }};\n  Object.defineProperty(Vec2.prototype, \"x\", {get:function() {\n    return this.data[0];\n  }, set:function(value) {\n    this.data[0] = value;\n  }});\n  Object.defineProperty(Vec2.prototype, \"y\", {get:function() {\n    return this.data[1];\n  }, set:function(value) {\n    this.data[1] = value;\n  }});\n  Object.defineProperty(Vec2, \"ONE\", {get:function() {\n    var one = new Vec2(1, 1);\n    return function() {\n      return one;\n    };\n  }()});\n  Object.defineProperty(Vec2, \"RIGHT\", {get:function() {\n    var right = new Vec2(1, 0);\n    return function() {\n      return right;\n    };\n  }()});\n  Object.defineProperty(Vec2, \"UP\", {get:function() {\n    var down = new Vec2(0, 1);\n    return function() {\n      return down;\n    };\n  }()});\n  Object.defineProperty(Vec2, \"ZERO\", {get:function() {\n    var zero = new Vec2(0, 0);\n    return function() {\n      return zero;\n    };\n  }()});\n  return {Vec2:Vec2};\n}());\npc.extend(pc, function() {\n  var Vec3 = function(x, y, z) {\n    if (x && x.length === 3) {\n      this.data = new Float32Array(x);\n      return;\n    }\n    this.data = new Float32Array(3);\n    this.data[0] = x || 0;\n    this.data[1] = y || 0;\n    this.data[2] = z || 0;\n  };\n  Vec3.prototype = {add:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n    return this;\n  }, add2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + b[0];\n    r[1] = a[1] + b[1];\n    r[2] = a[2] + b[2];\n    return this;\n  }, clone:function() {\n    return (new Vec3).copy(this);\n  }, copy:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] = b[0];\n    a[1] = b[1];\n    a[2] = b[2];\n    return this;\n  }, cross:function(lhs, rhs) {\n    var a, b, r, ax, ay, az, bx, by, bz;\n    a = lhs.data;\n    b = rhs.data;\n    r = this.data;\n    ax = a[0];\n    ay = a[1];\n    az = a[2];\n    bx = b[0];\n    by = b[1];\n    bz = b[2];\n    r[0] = ay * bz - by * az;\n    r[1] = az * bx - bz * ax;\n    r[2] = ax * by - bx * ay;\n    return this;\n  }, dot:function(rhs) {\n    var a = this.data, b = rhs.data;\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n  }, equals:function(rhs) {\n    var a = this.data, b = rhs.data;\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n  }, length:function() {\n    var v = this.data;\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  }, lengthSq:function() {\n    var v = this.data;\n    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n  }, lerp:function(lhs, rhs, alpha) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + alpha * (b[0] - a[0]);\n    r[1] = a[1] + alpha * (b[1] - a[1]);\n    r[2] = a[2] + alpha * (b[2] - a[2]);\n    return this;\n  }, mul:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] *= b[0];\n    a[1] *= b[1];\n    a[2] *= b[2];\n    return this;\n  }, mul2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] * b[0];\n    r[1] = a[1] * b[1];\n    r[2] = a[2] * b[2];\n    return this;\n  }, normalize:function() {\n    var v = this.data;\n    var lengthSq = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n    if (lengthSq > 0) {\n      var invLength = 1 / Math.sqrt(lengthSq);\n      v[0] *= invLength;\n      v[1] *= invLength;\n      v[2] *= invLength;\n    }\n    return this;\n  }, project:function(rhs) {\n    var a = this.data;\n    var b = rhs.data;\n    var a_dot_b = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    var b_dot_b = b[0] * b[0] + b[1] * b[1] + b[2] * b[2];\n    var s = a_dot_b / b_dot_b;\n    a[0] = b[0] * s;\n    a[1] = b[1] * s;\n    a[2] = b[2] * s;\n    return this;\n  }, scale:function(scalar) {\n    var v = this.data;\n    v[0] *= scalar;\n    v[1] *= scalar;\n    v[2] *= scalar;\n    return this;\n  }, set:function(x, y, z) {\n    var v = this.data;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    return this;\n  }, sub:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n    return this;\n  }, sub2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] - b[0];\n    r[1] = a[1] - b[1];\n    r[2] = a[2] - b[2];\n    return this;\n  }, toString:function() {\n    return \"[\" + this.data[0] + \", \" + this.data[1] + \", \" + this.data[2] + \"]\";\n  }};\n  Object.defineProperty(Vec3.prototype, \"x\", {get:function() {\n    return this.data[0];\n  }, set:function(value) {\n    this.data[0] = value;\n  }});\n  Object.defineProperty(Vec3.prototype, \"y\", {get:function() {\n    return this.data[1];\n  }, set:function(value) {\n    this.data[1] = value;\n  }});\n  Object.defineProperty(Vec3.prototype, \"z\", {get:function() {\n    return this.data[2];\n  }, set:function(value) {\n    this.data[2] = value;\n  }});\n  Object.defineProperty(Vec3, \"BACK\", {get:function() {\n    var back = new Vec3(0, 0, 1);\n    return function() {\n      return back;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"DOWN\", {get:function() {\n    var down = new Vec3(0, -1, 0);\n    return function() {\n      return down;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"FORWARD\", {get:function() {\n    var forward = new Vec3(0, 0, -1);\n    return function() {\n      return forward;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"LEFT\", {get:function() {\n    var left = new Vec3(-1, 0, 0);\n    return function() {\n      return left;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"ONE\", {get:function() {\n    var one = new Vec3(1, 1, 1);\n    return function() {\n      return one;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"RIGHT\", {get:function() {\n    var right = new Vec3(1, 0, 0);\n    return function() {\n      return right;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"UP\", {get:function() {\n    var down = new Vec3(0, 1, 0);\n    return function() {\n      return down;\n    };\n  }()});\n  Object.defineProperty(Vec3, \"ZERO\", {get:function() {\n    var zero = new Vec3(0, 0, 0);\n    return function() {\n      return zero;\n    };\n  }()});\n  return {Vec3:Vec3};\n}());\npc.extend(pc, function() {\n  var Vec4 = function(x, y, z, w) {\n    if (x && x.length === 4) {\n      this.data = new Float32Array(x);\n      return;\n    }\n    this.data = new Float32Array(4);\n    this.data[0] = x || 0;\n    this.data[1] = y || 0;\n    this.data[2] = z || 0;\n    this.data[3] = w || 0;\n  };\n  Vec4.prototype = {add:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n    a[3] += b[3];\n    return this;\n  }, add2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + b[0];\n    r[1] = a[1] + b[1];\n    r[2] = a[2] + b[2];\n    r[3] = a[3] + b[3];\n    return this;\n  }, clone:function() {\n    return (new Vec4).copy(this);\n  }, copy:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] = b[0];\n    a[1] = b[1];\n    a[2] = b[2];\n    a[3] = b[3];\n    return this;\n  }, dot:function(rhs) {\n    var a = this.data, b = rhs.data;\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n  }, equals:function(rhs) {\n    var a = this.data, b = rhs.data;\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n  }, length:function() {\n    var v = this.data;\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3]);\n  }, lengthSq:function() {\n    var v = this.data;\n    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3];\n  }, lerp:function(lhs, rhs, alpha) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + alpha * (b[0] - a[0]);\n    r[1] = a[1] + alpha * (b[1] - a[1]);\n    r[2] = a[2] + alpha * (b[2] - a[2]);\n    r[3] = a[3] + alpha * (b[3] - a[3]);\n    return this;\n  }, mul:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] *= b[0];\n    a[1] *= b[1];\n    a[2] *= b[2];\n    a[3] *= b[3];\n    return this;\n  }, mul2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] * b[0];\n    r[1] = a[1] * b[1];\n    r[2] = a[2] * b[2];\n    r[3] = a[3] * b[3];\n    return this;\n  }, normalize:function() {\n    var v = this.data;\n    var lengthSq = v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3];\n    if (lengthSq > 0) {\n      var invLength = 1 / Math.sqrt(lengthSq);\n      v[0] *= invLength;\n      v[1] *= invLength;\n      v[2] *= invLength;\n      v[3] *= invLength;\n    }\n    return this;\n  }, scale:function(scalar) {\n    var v = this.data;\n    v[0] *= scalar;\n    v[1] *= scalar;\n    v[2] *= scalar;\n    v[3] *= scalar;\n    return this;\n  }, set:function(x, y, z, w) {\n    var v = this.data;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    v[3] = w;\n    return this;\n  }, sub:function(rhs) {\n    var a = this.data, b = rhs.data;\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n    a[3] -= b[3];\n    return this;\n  }, sub2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] - b[0];\n    r[1] = a[1] - b[1];\n    r[2] = a[2] - b[2];\n    r[3] = a[3] - b[3];\n    return this;\n  }, toString:function() {\n    return \"[\" + this.data[0] + \", \" + this.data[1] + \", \" + this.data[2] + \", \" + this.data[3] + \"]\";\n  }};\n  Object.defineProperty(Vec4.prototype, \"x\", {get:function() {\n    return this.data[0];\n  }, set:function(value) {\n    this.data[0] = value;\n  }});\n  Object.defineProperty(Vec4.prototype, \"y\", {get:function() {\n    return this.data[1];\n  }, set:function(value) {\n    this.data[1] = value;\n  }});\n  Object.defineProperty(Vec4.prototype, \"z\", {get:function() {\n    return this.data[2];\n  }, set:function(value) {\n    this.data[2] = value;\n  }});\n  Object.defineProperty(Vec4.prototype, \"w\", {get:function() {\n    return this.data[3];\n  }, set:function(value) {\n    this.data[3] = value;\n  }});\n  Object.defineProperty(Vec4, \"ONE\", {get:function() {\n    var one = new Vec4(1, 1, 1, 1);\n    return function() {\n      return one;\n    };\n  }()});\n  Object.defineProperty(Vec4, \"ZERO\", {get:function() {\n    var zero = new Vec4(0, 0, 0, 0);\n    return function() {\n      return zero;\n    };\n  }()});\n  return {Vec4:Vec4};\n}());\npc.extend(pc, function() {\n  var typeNumber = \"number\";\n  var Mat3 = function(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n    if (v0 && v0.length === 9) {\n      this.data = new Float32Array(v0);\n      return;\n    }\n    this.data = new Float32Array(9);\n    if (typeof v0 === typeNumber) {\n      this.data[0] = v0;\n      this.data[1] = v1;\n      this.data[2] = v2;\n      this.data[3] = v3;\n      this.data[4] = v4;\n      this.data[5] = v5;\n      this.data[6] = v6;\n      this.data[7] = v7;\n      this.data[8] = v8;\n    } else {\n      this.setIdentity();\n    }\n  };\n  Mat3.prototype = {clone:function() {\n    return (new pc.Mat3).copy(this);\n  }, copy:function(rhs) {\n    var src = rhs.data;\n    var dst = this.data;\n    dst[0] = src[0];\n    dst[1] = src[1];\n    dst[2] = src[2];\n    dst[3] = src[3];\n    dst[4] = src[4];\n    dst[5] = src[5];\n    dst[6] = src[6];\n    dst[7] = src[7];\n    dst[8] = src[8];\n    return this;\n  }, equals:function(rhs) {\n    var l = this.data;\n    var r = rhs.data;\n    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8];\n  }, isIdentity:function() {\n    var m = this.data;\n    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 1 && m[5] === 0 && m[6] === 0 && m[7] === 0 && m[8] === 1;\n  }, setIdentity:function() {\n    var m = this.data;\n    m[0] = 1;\n    m[1] = 0;\n    m[2] = 0;\n    m[3] = 0;\n    m[4] = 1;\n    m[5] = 0;\n    m[6] = 0;\n    m[7] = 0;\n    m[8] = 1;\n    return this;\n  }, toString:function() {\n    var t = \"[\";\n    for (var i = 0; i < 9; i++) {\n      t += this.data[i];\n      t += i !== 9 ? \", \" : \"\";\n    }\n    t += \"]\";\n    return t;\n  }, transpose:function() {\n    var m = this.data;\n    var tmp;\n    tmp = m[1];\n    m[1] = m[3];\n    m[3] = tmp;\n    tmp = m[2];\n    m[2] = m[6];\n    m[6] = tmp;\n    tmp = m[5];\n    m[5] = m[7];\n    m[7] = tmp;\n    return this;\n  }};\n  Object.defineProperty(Mat3, \"IDENTITY\", {get:function() {\n    var identity = new Mat3;\n    return function() {\n      return identity;\n    };\n  }()});\n  Object.defineProperty(Mat3, \"ZERO\", {get:function() {\n    var zero = new Mat3(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    return function() {\n      return zero;\n    };\n  }()});\n  return {Mat3:Mat3};\n}());\npc.extend(pc, function() {\n  var typeNumber = \"number\";\n  var Mat4 = function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n    if (v0 && v0.length === 16) {\n      this.data = new Float32Array(v0);\n      return;\n    }\n    this.data = new Float32Array(16);\n    if (typeof v0 === typeNumber) {\n      this.data[0] = v0;\n      this.data[1] = v1;\n      this.data[2] = v2;\n      this.data[3] = v3;\n      this.data[4] = v4;\n      this.data[5] = v5;\n      this.data[6] = v6;\n      this.data[7] = v7;\n      this.data[8] = v8;\n      this.data[9] = v9;\n      this.data[10] = v10;\n      this.data[11] = v11;\n      this.data[12] = v12;\n      this.data[13] = v13;\n      this.data[14] = v14;\n      this.data[15] = v15;\n    } else {\n      this.setIdentity();\n    }\n  };\n  Mat4.prototype = {add2:function(lhs, rhs) {\n    var a = lhs.data, b = rhs.data, r = this.data;\n    r[0] = a[0] + b[0];\n    r[1] = a[1] + b[1];\n    r[2] = a[2] + b[2];\n    r[3] = a[3] + b[3];\n    r[4] = a[4] + b[4];\n    r[5] = a[5] + b[5];\n    r[6] = a[6] + b[6];\n    r[7] = a[7] + b[7];\n    r[8] = a[8] + b[8];\n    r[9] = a[9] + b[9];\n    r[10] = a[10] + b[10];\n    r[11] = a[11] + b[11];\n    r[12] = a[12] + b[12];\n    r[13] = a[13] + b[13];\n    r[14] = a[14] + b[14];\n    r[15] = a[15] + b[15];\n    return this;\n  }, add:function(rhs) {\n    return this.add2(this, rhs);\n  }, clone:function() {\n    return (new pc.Mat4).copy(this);\n  }, copy:function(rhs) {\n    var src = rhs.data, dst = this.data;\n    dst[0] = src[0];\n    dst[1] = src[1];\n    dst[2] = src[2];\n    dst[3] = src[3];\n    dst[4] = src[4];\n    dst[5] = src[5];\n    dst[6] = src[6];\n    dst[7] = src[7];\n    dst[8] = src[8];\n    dst[9] = src[9];\n    dst[10] = src[10];\n    dst[11] = src[11];\n    dst[12] = src[12];\n    dst[13] = src[13];\n    dst[14] = src[14];\n    dst[15] = src[15];\n    return this;\n  }, equals:function(rhs) {\n    var l = this.data, r = rhs.data;\n    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8] && l[9] === r[9] && l[10] === r[10] && l[11] === r[11] && l[12] === r[12] && l[13] === r[13] && l[14] === r[14] && l[15] === r[15];\n  }, isIdentity:function() {\n    var m = this.data;\n    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 0 && m[5] === 1 && m[6] === 0 && m[7] === 0 && m[8] === 0 && m[9] === 0 && m[10] === 1 && m[11] === 0 && m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1;\n  }, mul2:function(lhs, rhs) {\n    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b0, b1, b2, b3, a = lhs.data, b = rhs.data, r = this.data;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    a30 = a[12];\n    a31 = a[13];\n    a32 = a[14];\n    a33 = a[15];\n    b0 = b[0];\n    b1 = b[1];\n    b2 = b[2];\n    b3 = b[3];\n    r[0] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;\n    r[1] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;\n    r[2] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;\n    r[3] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    r[4] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;\n    r[5] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;\n    r[6] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;\n    r[7] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    r[8] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;\n    r[9] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;\n    r[10] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;\n    r[11] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    r[12] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;\n    r[13] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;\n    r[14] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;\n    r[15] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;\n    return this;\n  }, mul:function(rhs) {\n    return this.mul2(this, rhs);\n  }, transformPoint:function(vec, res) {\n    var x, y, z, m = this.data, v = vec.data;\n    res = res === undefined ? new pc.Vec3 : res;\n    x = v[0] * m[0] + v[1] * m[4] + v[2] * m[8] + m[12];\n    y = v[0] * m[1] + v[1] * m[5] + v[2] * m[9] + m[13];\n    z = v[0] * m[2] + v[1] * m[6] + v[2] * m[10] + m[14];\n    return res.set(x, y, z);\n  }, transformVector:function(vec, res) {\n    var x, y, z, m = this.data, v = vec.data;\n    res = res === undefined ? new pc.Vec3 : res;\n    x = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];\n    y = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];\n    z = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];\n    return res.set(x, y, z);\n  }, transformVec4:function(vec, res) {\n    var x, y, z, w, m = this.data, v = vec.data;\n    res = res === undefined ? new pc.Vec4 : res;\n    x = v[0] * m[0] + v[1] * m[4] + v[2] * m[8] + v[3] * m[12];\n    y = v[0] * m[1] + v[1] * m[5] + v[2] * m[9] + v[3] * m[13];\n    z = v[0] * m[2] + v[1] * m[6] + v[2] * m[10] + v[3] * m[14];\n    w = v[0] * m[3] + v[1] * m[7] + v[2] * m[11] + v[3] * m[15];\n    return res.set(x, y, z, w);\n  }, setLookAt:function() {\n    var x, y, z;\n    x = new pc.Vec3;\n    y = new pc.Vec3;\n    z = new pc.Vec3;\n    return function(position, target, up) {\n      z.sub2(position, target).normalize();\n      y.copy(up).normalize();\n      x.cross(y, z).normalize();\n      y.cross(z, x);\n      var r = this.data;\n      r[0] = x.x;\n      r[1] = x.y;\n      r[2] = x.z;\n      r[3] = 0;\n      r[4] = y.x;\n      r[5] = y.y;\n      r[6] = y.z;\n      r[7] = 0;\n      r[8] = z.x;\n      r[9] = z.y;\n      r[10] = z.z;\n      r[11] = 0;\n      r[12] = position.x;\n      r[13] = position.y;\n      r[14] = position.z;\n      r[15] = 1;\n      return this;\n    };\n  }(), setFrustum:function(left, right, bottom, top, znear, zfar) {\n    var temp1, temp2, temp3, temp4, r;\n    temp1 = 2 * znear;\n    temp2 = right - left;\n    temp3 = top - bottom;\n    temp4 = zfar - znear;\n    r = this.data;\n    r[0] = temp1 / temp2;\n    r[1] = 0;\n    r[2] = 0;\n    r[3] = 0;\n    r[4] = 0;\n    r[5] = temp1 / temp3;\n    r[6] = 0;\n    r[7] = 0;\n    r[8] = (right + left) / temp2;\n    r[9] = (top + bottom) / temp3;\n    r[10] = (-zfar - znear) / temp4;\n    r[11] = -1;\n    r[12] = 0;\n    r[13] = 0;\n    r[14] = -temp1 * zfar / temp4;\n    r[15] = 0;\n    return this;\n  }, setPerspective:function(fovy, aspect, znear, zfar, fovIsHorizontal) {\n    var xmax, ymax;\n    if (!fovIsHorizontal) {\n      ymax = znear * Math.tan(fovy * Math.PI / 360);\n      xmax = ymax * aspect;\n    } else {\n      xmax = znear * Math.tan(fovy * Math.PI / 360);\n      ymax = xmax / aspect;\n    }\n    return this.setFrustum(-xmax, xmax, -ymax, ymax, znear, zfar);\n  }, setOrtho:function(left, right, bottom, top, near, far) {\n    var r = this.data;\n    r[0] = 2 / (right - left);\n    r[1] = 0;\n    r[2] = 0;\n    r[3] = 0;\n    r[4] = 0;\n    r[5] = 2 / (top - bottom);\n    r[6] = 0;\n    r[7] = 0;\n    r[8] = 0;\n    r[9] = 0;\n    r[10] = -2 / (far - near);\n    r[11] = 0;\n    r[12] = -(right + left) / (right - left);\n    r[13] = -(top + bottom) / (top - bottom);\n    r[14] = -(far + near) / (far - near);\n    r[15] = 1;\n    return this;\n  }, setFromAxisAngle:function(axis, angle) {\n    var x, y, z, c, s, t, tx, ty, m;\n    angle *= pc.math.DEG_TO_RAD;\n    x = axis.x;\n    y = axis.y;\n    z = axis.z;\n    c = Math.cos(angle);\n    s = Math.sin(angle);\n    t = 1 - c;\n    tx = t * x;\n    ty = t * y;\n    m = this.data;\n    m[0] = tx * x + c;\n    m[1] = tx * y + s * z;\n    m[2] = tx * z - s * y;\n    m[3] = 0;\n    m[4] = tx * y - s * z;\n    m[5] = ty * y + c;\n    m[6] = ty * z + s * x;\n    m[7] = 0;\n    m[8] = tx * z + s * y;\n    m[9] = ty * z - x * s;\n    m[10] = t * z * z + c;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n    return this;\n  }, setTranslate:function(x, y, z) {\n    var m = this.data;\n    m[0] = 1;\n    m[1] = 0;\n    m[2] = 0;\n    m[3] = 0;\n    m[4] = 0;\n    m[5] = 1;\n    m[6] = 0;\n    m[7] = 0;\n    m[8] = 0;\n    m[9] = 0;\n    m[10] = 1;\n    m[11] = 0;\n    m[12] = x;\n    m[13] = y;\n    m[14] = z;\n    m[15] = 1;\n    return this;\n  }, setScale:function(x, y, z) {\n    var m = this.data;\n    m[0] = x;\n    m[1] = 0;\n    m[2] = 0;\n    m[3] = 0;\n    m[4] = 0;\n    m[5] = y;\n    m[6] = 0;\n    m[7] = 0;\n    m[8] = 0;\n    m[9] = 0;\n    m[10] = z;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n    return this;\n  }, invert:function() {\n    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, m;\n    m = this.data;\n    a00 = m[0];\n    a01 = m[1];\n    a02 = m[2];\n    a03 = m[3];\n    a10 = m[4];\n    a11 = m[5];\n    a12 = m[6];\n    a13 = m[7];\n    a20 = m[8];\n    a21 = m[9];\n    a22 = m[10];\n    a23 = m[11];\n    a30 = m[12];\n    a31 = m[13];\n    a32 = m[14];\n    a33 = m[15];\n    b00 = a00 * a11 - a01 * a10;\n    b01 = a00 * a12 - a02 * a10;\n    b02 = a00 * a13 - a03 * a10;\n    b03 = a01 * a12 - a02 * a11;\n    b04 = a01 * a13 - a03 * a11;\n    b05 = a02 * a13 - a03 * a12;\n    b06 = a20 * a31 - a21 * a30;\n    b07 = a20 * a32 - a22 * a30;\n    b08 = a20 * a33 - a23 * a30;\n    b09 = a21 * a32 - a22 * a31;\n    b10 = a21 * a33 - a23 * a31;\n    b11 = a22 * a33 - a23 * a32;\n    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    if (det === 0) {\n      this.setIdentity();\n    } else {\n      invDet = 1 / det;\n      m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n      m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n      m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n      m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n      m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n      m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n      m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n      m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n      m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n      m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n      m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n      m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n      m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n      m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n      m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n      m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n    }\n    return this;\n  }, set:function(src) {\n    var dst = this.data;\n    dst[0] = src[0];\n    dst[1] = src[1];\n    dst[2] = src[2];\n    dst[3] = src[3];\n    dst[4] = src[4];\n    dst[5] = src[5];\n    dst[6] = src[6];\n    dst[7] = src[7];\n    dst[8] = src[8];\n    dst[9] = src[9];\n    dst[10] = src[10];\n    dst[11] = src[11];\n    dst[12] = src[12];\n    dst[13] = src[13];\n    dst[14] = src[14];\n    dst[15] = src[15];\n    return this;\n  }, setIdentity:function() {\n    var m = this.data;\n    m[0] = 1;\n    m[1] = 0;\n    m[2] = 0;\n    m[3] = 0;\n    m[4] = 0;\n    m[5] = 1;\n    m[6] = 0;\n    m[7] = 0;\n    m[8] = 0;\n    m[9] = 0;\n    m[10] = 1;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n    return this;\n  }, setTRS:function(t, r, s) {\n    var tx, ty, tz, qx, qy, qz, qw, sx, sy, sz, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, m;\n    tx = t.x;\n    ty = t.y;\n    tz = t.z;\n    qx = r.x;\n    qy = r.y;\n    qz = r.z;\n    qw = r.w;\n    sx = s.x;\n    sy = s.y;\n    sz = s.z;\n    x2 = qx + qx;\n    y2 = qy + qy;\n    z2 = qz + qz;\n    xx = qx * x2;\n    xy = qx * y2;\n    xz = qx * z2;\n    yy = qy * y2;\n    yz = qy * z2;\n    zz = qz * z2;\n    wx = qw * x2;\n    wy = qw * y2;\n    wz = qw * z2;\n    m = this.data;\n    m[0] = (1 - (yy + zz)) * sx;\n    m[1] = (xy + wz) * sx;\n    m[2] = (xz - wy) * sx;\n    m[3] = 0;\n    m[4] = (xy - wz) * sy;\n    m[5] = (1 - (xx + zz)) * sy;\n    m[6] = (yz + wx) * sy;\n    m[7] = 0;\n    m[8] = (xz + wy) * sz;\n    m[9] = (yz - wx) * sz;\n    m[10] = (1 - (xx + yy)) * sz;\n    m[11] = 0;\n    m[12] = tx;\n    m[13] = ty;\n    m[14] = tz;\n    m[15] = 1;\n    return this;\n  }, transpose:function() {\n    var tmp, m = this.data;\n    tmp = m[1];\n    m[1] = m[4];\n    m[4] = tmp;\n    tmp = m[2];\n    m[2] = m[8];\n    m[8] = tmp;\n    tmp = m[3];\n    m[3] = m[12];\n    m[12] = tmp;\n    tmp = m[6];\n    m[6] = m[9];\n    m[9] = tmp;\n    tmp = m[7];\n    m[7] = m[13];\n    m[13] = tmp;\n    tmp = m[11];\n    m[11] = m[14];\n    m[14] = tmp;\n    return this;\n  }, invertTo3x3:function(res) {\n    var a11, a21, a31, a12, a22, a32, a13, a23, a33, m, r, det, idet;\n    m = this.data;\n    r = res.data;\n    var m0 = m[0];\n    var m1 = m[1];\n    var m2 = m[2];\n    var m4 = m[4];\n    var m5 = m[5];\n    var m6 = m[6];\n    var m8 = m[8];\n    var m9 = m[9];\n    var m10 = m[10];\n    a11 = m10 * m5 - m6 * m9;\n    a21 = -m10 * m1 + m2 * m9;\n    a31 = m6 * m1 - m2 * m5;\n    a12 = -m10 * m4 + m6 * m8;\n    a22 = m10 * m0 - m2 * m8;\n    a32 = -m6 * m0 + m2 * m4;\n    a13 = m9 * m4 - m5 * m8;\n    a23 = -m9 * m0 + m1 * m8;\n    a33 = m5 * m0 - m1 * m4;\n    det = m0 * a11 + m1 * a12 + m2 * a13;\n    if (det === 0) {\n      return this;\n    }\n    idet = 1 / det;\n    r[0] = idet * a11;\n    r[1] = idet * a21;\n    r[2] = idet * a31;\n    r[3] = idet * a12;\n    r[4] = idet * a22;\n    r[5] = idet * a32;\n    r[6] = idet * a13;\n    r[7] = idet * a23;\n    r[8] = idet * a33;\n    return this;\n  }, getTranslation:function(t) {\n    t = t === undefined ? new pc.Vec3 : t;\n    return t.set(this.data[12], this.data[13], this.data[14]);\n  }, getX:function(x) {\n    x = x === undefined ? new pc.Vec3 : x;\n    return x.set(this.data[0], this.data[1], this.data[2]);\n  }, getY:function(y) {\n    y = y === undefined ? new pc.Vec3 : y;\n    return y.set(this.data[4], this.data[5], this.data[6]);\n  }, getZ:function(z) {\n    z = z === undefined ? new pc.Vec3 : z;\n    return z.set(this.data[8], this.data[9], this.data[10]);\n  }, getScale:function() {\n    var x, y, z;\n    x = new pc.Vec3;\n    y = new pc.Vec3;\n    z = new pc.Vec3;\n    return function(scale) {\n      scale = scale === undefined ? new pc.Vec3 : scale;\n      this.getX(x);\n      this.getY(y);\n      this.getZ(z);\n      scale.set(x.length(), y.length(), z.length());\n      return scale;\n    };\n  }(), setFromEulerAngles:function(ex, ey, ez) {\n    var s1, c1, s2, c2, s3, c3, m;\n    ex *= pc.math.DEG_TO_RAD;\n    ey *= pc.math.DEG_TO_RAD;\n    ez *= pc.math.DEG_TO_RAD;\n    s1 = Math.sin(-ex);\n    c1 = Math.cos(-ex);\n    s2 = Math.sin(-ey);\n    c2 = Math.cos(-ey);\n    s3 = Math.sin(-ez);\n    c3 = Math.cos(-ez);\n    m = this.data;\n    m[0] = c2 * c3;\n    m[1] = -c2 * s3;\n    m[2] = s2;\n    m[3] = 0;\n    m[4] = c1 * s3 + c3 * s1 * s2;\n    m[5] = c1 * c3 - s1 * s2 * s3;\n    m[6] = -c2 * s1;\n    m[7] = 0;\n    m[8] = s1 * s3 - c1 * c3 * s2;\n    m[9] = c3 * s1 + c1 * s2 * s3;\n    m[10] = c1 * c2;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n    return this;\n  }, getEulerAngles:function() {\n    var scale = new pc.Vec3;\n    return function(eulers) {\n      var x, y, z, sx, sy, sz, m, halfPi;\n      eulers = eulers === undefined ? new pc.Vec3 : eulers;\n      this.getScale(scale);\n      sx = scale.x;\n      sy = scale.y;\n      sz = scale.z;\n      m = this.data;\n      y = Math.asin(-m[2] / sx);\n      halfPi = Math.PI * 0.5;\n      if (y < halfPi) {\n        if (y > -halfPi) {\n          x = Math.atan2(m[6] / sy, m[10] / sz);\n          z = Math.atan2(m[1] / sx, m[0] / sx);\n        } else {\n          z = 0;\n          x = -Math.atan2(m[4] / sy, m[5] / sy);\n        }\n      } else {\n        z = 0;\n        x = Math.atan2(m[4] / sy, m[5] / sy);\n      }\n      return eulers.set(x, y, z).scale(pc.math.RAD_TO_DEG);\n    };\n  }(), toString:function() {\n    var i, t;\n    t = \"[\";\n    for (i = 0; i < 16; i += 1) {\n      t += this.data[i];\n      t += i !== 15 ? \", \" : \"\";\n    }\n    t += \"]\";\n    return t;\n  }};\n  Object.defineProperty(Mat4, \"IDENTITY\", {get:function() {\n    var identity = new Mat4;\n    return function() {\n      return identity;\n    };\n  }()});\n  Object.defineProperty(Mat4, \"ZERO\", {get:function() {\n    var zero = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    return function() {\n      return zero;\n    };\n  }()});\n  return {Mat4:Mat4};\n}());\npc.extend(pc, function() {\n  var Quat = function(x, y, z, w) {\n    if (x && x.length === 4) {\n      this.x = x[0];\n      this.y = x[1];\n      this.z = x[2];\n      this.w = x[3];\n    } else {\n      this.x = x === undefined ? 0 : x;\n      this.y = y === undefined ? 0 : y;\n      this.z = z === undefined ? 0 : z;\n      this.w = w === undefined ? 1 : w;\n    }\n  };\n  Quat.prototype = {clone:function() {\n    return new pc.Quat(this.x, this.y, this.z, this.w);\n  }, conjugate:function() {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  }, copy:function(rhs) {\n    this.x = rhs.x;\n    this.y = rhs.y;\n    this.z = rhs.z;\n    this.w = rhs.w;\n    return this;\n  }, equals:function(rhs) {\n    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z && this.w === rhs.w;\n  }, getAxisAngle:function(axis) {\n    var rad = Math.acos(this.w) * 2;\n    var s = Math.sin(rad / 2);\n    if (s !== 0) {\n      axis.x = this.x / s;\n      axis.y = this.y / s;\n      axis.z = this.z / s;\n      if (axis.x < 0 || axis.y < 0 || axis.z < 0) {\n        axis.x *= -1;\n        axis.y *= -1;\n        axis.z *= -1;\n        rad *= -1;\n      }\n    } else {\n      axis.x = 1;\n      axis.y = 0;\n      axis.z = 0;\n    }\n    return rad * pc.math.RAD_TO_DEG;\n  }, getEulerAngles:function(eulers) {\n    var x, y, z, qx, qy, qz, qw, a2;\n    eulers = eulers === undefined ? new pc.Vec3 : eulers;\n    qx = this.x;\n    qy = this.y;\n    qz = this.z;\n    qw = this.w;\n    a2 = 2 * (qw * qy - qx * qz);\n    if (a2 <= -0.99999) {\n      x = 2 * Math.atan2(qx, qw);\n      y = -Math.PI / 2;\n      z = 0;\n    } else {\n      if (a2 >= 0.99999) {\n        x = 2 * Math.atan2(qx, qw);\n        y = Math.PI / 2;\n        z = 0;\n      } else {\n        x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));\n        y = Math.asin(a2);\n        z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));\n      }\n    }\n    return eulers.set(x, y, z).scale(pc.math.RAD_TO_DEG);\n  }, invert:function() {\n    return this.conjugate().normalize();\n  }, length:function() {\n    var x, y, z, w;\n    x = this.x;\n    y = this.y;\n    z = this.z;\n    w = this.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  }, lengthSq:function() {\n    var x, y, z, w;\n    return x * x + y * y + z * z + w * w;\n  }, mul:function(rhs) {\n    var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w;\n    q1x = this.x;\n    q1y = this.y;\n    q1z = this.z;\n    q1w = this.w;\n    q2x = rhs.x;\n    q2y = rhs.y;\n    q2z = rhs.z;\n    q2w = rhs.w;\n    this.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n    this.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n    this.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n    this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n    return this;\n  }, mul2:function(lhs, rhs) {\n    var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w;\n    q1x = lhs.x;\n    q1y = lhs.y;\n    q1z = lhs.z;\n    q1w = lhs.w;\n    q2x = rhs.x;\n    q2y = rhs.y;\n    q2z = rhs.z;\n    q2w = rhs.w;\n    this.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;\n    this.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;\n    this.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;\n    this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;\n    return this;\n  }, normalize:function() {\n    var len = this.length();\n    if (len === 0) {\n      this.x = this.y = this.z = 0;\n      this.w = 1;\n    } else {\n      len = 1 / len;\n      this.x *= len;\n      this.y *= len;\n      this.z *= len;\n      this.w *= len;\n    }\n    return this;\n  }, set:function(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }, setFromAxisAngle:function(axis, angle) {\n    var sa, ca;\n    angle *= 0.5 * pc.math.DEG_TO_RAD;\n    sa = Math.sin(angle);\n    ca = Math.cos(angle);\n    this.x = sa * axis.x;\n    this.y = sa * axis.y;\n    this.z = sa * axis.z;\n    this.w = ca;\n    return this;\n  }, setFromEulerAngles:function(ex, ey, ez) {\n    var sx, cx, sy, cy, sz, cz, halfToRad;\n    halfToRad = 0.5 * pc.math.DEG_TO_RAD;\n    ex *= halfToRad;\n    ey *= halfToRad;\n    ez *= halfToRad;\n    sx = Math.sin(ex);\n    cx = Math.cos(ex);\n    sy = Math.sin(ey);\n    cy = Math.cos(ey);\n    sz = Math.sin(ez);\n    cz = Math.cos(ez);\n    this.x = sx * cy * cz - cx * sy * sz;\n    this.y = cx * sy * cz + sx * cy * sz;\n    this.z = cx * cy * sz - sx * sy * cz;\n    this.w = cx * cy * cz + sx * sy * sz;\n    return this;\n  }, setFromMat4:function(m) {\n    var m00, m01, m02, m10, m11, m12, m20, m21, m22, tr, s, rs, lx, ly, lz;\n    m = m.data;\n    m00 = m[0];\n    m01 = m[1];\n    m02 = m[2];\n    m10 = m[4];\n    m11 = m[5];\n    m12 = m[6];\n    m20 = m[8];\n    m21 = m[9];\n    m22 = m[10];\n    lx = 1 / Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);\n    ly = 1 / Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);\n    lz = 1 / Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);\n    m00 *= lx;\n    m01 *= lx;\n    m02 *= lx;\n    m10 *= ly;\n    m11 *= ly;\n    m12 *= ly;\n    m20 *= lz;\n    m21 *= lz;\n    m22 *= lz;\n    tr = m00 + m11 + m22;\n    if (tr >= 0) {\n      s = Math.sqrt(tr + 1);\n      this.w = s * 0.5;\n      s = 0.5 / s;\n      this.x = (m12 - m21) * s;\n      this.y = (m20 - m02) * s;\n      this.z = (m01 - m10) * s;\n    } else {\n      if (m00 > m11) {\n        if (m00 > m22) {\n          rs = m00 - (m11 + m22) + 1;\n          rs = Math.sqrt(rs);\n          this.x = rs * 0.5;\n          rs = 0.5 / rs;\n          this.w = (m12 - m21) * rs;\n          this.y = (m01 + m10) * rs;\n          this.z = (m02 + m20) * rs;\n        } else {\n          rs = m22 - (m00 + m11) + 1;\n          rs = Math.sqrt(rs);\n          this.z = rs * 0.5;\n          rs = 0.5 / rs;\n          this.w = (m01 - m10) * rs;\n          this.x = (m20 + m02) * rs;\n          this.y = (m21 + m12) * rs;\n        }\n      } else {\n        if (m11 > m22) {\n          rs = m11 - (m22 + m00) + 1;\n          rs = Math.sqrt(rs);\n          this.y = rs * 0.5;\n          rs = 0.5 / rs;\n          this.w = (m20 - m02) * rs;\n          this.z = (m12 + m21) * rs;\n          this.x = (m10 + m01) * rs;\n        } else {\n          rs = m22 - (m00 + m11) + 1;\n          rs = Math.sqrt(rs);\n          this.z = rs * 0.5;\n          rs = 0.5 / rs;\n          this.w = (m01 - m10) * rs;\n          this.x = (m20 + m02) * rs;\n          this.y = (m21 + m12) * rs;\n        }\n      }\n    }\n    return this;\n  }, slerp:function(lhs, rhs, alpha) {\n    var lx, ly, lz, lw, rx, ry, rz, rw;\n    lx = lhs.x;\n    ly = lhs.y;\n    lz = lhs.z;\n    lw = lhs.w;\n    rx = rhs.x;\n    ry = rhs.y;\n    rz = rhs.z;\n    rw = rhs.w;\n    var cosHalfTheta = lw * rw + lx * rx + ly * ry + lz * rz;\n    if (cosHalfTheta < 0) {\n      rw = -rw;\n      rx = -rx;\n      ry = -ry;\n      rz = -rz;\n      cosHalfTheta = -cosHalfTheta;\n    }\n    if (Math.abs(cosHalfTheta) >= 1) {\n      this.w = lw;\n      this.x = lx;\n      this.y = ly;\n      this.z = lz;\n      return this;\n    }\n    var halfTheta = Math.acos(cosHalfTheta);\n    var sinHalfTheta = Math.sqrt(1 - cosHalfTheta * cosHalfTheta);\n    if (Math.abs(sinHalfTheta) < 0.001) {\n      this.w = lw * 0.5 + rw * 0.5;\n      this.x = lx * 0.5 + rx * 0.5;\n      this.y = ly * 0.5 + ry * 0.5;\n      this.z = lz * 0.5 + rz * 0.5;\n      return this;\n    }\n    var ratioA = Math.sin((1 - alpha) * halfTheta) / sinHalfTheta;\n    var ratioB = Math.sin(alpha * halfTheta) / sinHalfTheta;\n    this.w = lw * ratioA + rw * ratioB;\n    this.x = lx * ratioA + rx * ratioB;\n    this.y = ly * ratioA + ry * ratioB;\n    this.z = lz * ratioA + rz * ratioB;\n    return this;\n  }, transformVector:function(vec, res) {\n    if (res === undefined) {\n      res = new pc.Vec3;\n    }\n    var x = vec.x, y = vec.y, z = vec.z;\n    var qx = this.x, qy = this.y, qz = this.z, qw = this.w;\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z;\n    res.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    res.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    res.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return res;\n  }, toString:function() {\n    return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \", \" + this.w + \"]\";\n  }};\n  Object.defineProperty(Quat, \"IDENTITY\", {get:function() {\n    var identity = new Quat;\n    return function() {\n      return identity;\n    };\n  }()});\n  Object.defineProperty(Quat, \"ZERO\", {get:function() {\n    var zero = new Quat(0, 0, 0, 0);\n    return function() {\n      return zero;\n    };\n  }()});\n  return {Quat:Quat};\n}());\npc.extend(pc, function() {\n  var CURVE_LINEAR = 0;\n  var CURVE_SMOOTHSTEP = 1;\n  var CURVE_CATMULL = 2;\n  var CURVE_CARDINAL = 3;\n  var Curve = function(data) {\n    this.keys = [];\n    this.type = CURVE_SMOOTHSTEP;\n    this.tension = 0.5;\n    if (data) {\n      for (var i = 0; i < data.length - 1; i += 2) {\n        this.keys.push([data[i], data[i + 1]]);\n      }\n    }\n    this.sort();\n  };\n  Curve.prototype = {add:function(time, value) {\n    var keys = this.keys;\n    var len = keys.length;\n    var i = 0;\n    for (; i < len; i++) {\n      if (keys[i][0] > time) {\n        break;\n      }\n    }\n    var key = [time, value];\n    this.keys.splice(i, 0, key);\n    return key;\n  }, get:function(index) {\n    return this.keys[index];\n  }, sort:function() {\n    this.keys.sort(function(a, b) {\n      return a[0] - b[0];\n    });\n  }, value:function(time) {\n    var keys = this.keys;\n    if (!keys.length) {\n      return 0;\n    }\n    if (time < keys[0][0]) {\n      return keys[0][1];\n    } else {\n      if (time > keys[keys.length - 1][0]) {\n        return keys[keys.length - 1][1];\n      }\n    }\n    var leftTime = 0;\n    var leftValue = keys.length ? keys[0][1] : 0;\n    var rightTime = 1;\n    var rightValue = 0;\n    for (var i = 0, len = keys.length; i < len; i++) {\n      if (keys[i][0] === time) {\n        return keys[i][1];\n      }\n      rightValue = keys[i][1];\n      if (time < keys[i][0]) {\n        rightTime = keys[i][0];\n        break;\n      }\n      leftTime = keys[i][0];\n      leftValue = keys[i][1];\n    }\n    var div = rightTime - leftTime;\n    var interpolation = div === 0 ? 0 : (time - leftTime) / div;\n    if (this.type === CURVE_SMOOTHSTEP) {\n      interpolation *= interpolation * (3 - 2 * interpolation);\n    } else {\n      if (this.type === CURVE_CATMULL || this.type === CURVE_CARDINAL) {\n        var p1 = leftValue;\n        var p2 = rightValue;\n        var p0 = p1 + (p1 - p2);\n        var p3 = p2 + (p2 - p1);\n        var dt1 = rightTime - leftTime;\n        var dt0 = dt1;\n        var dt2 = dt1;\n        if (i > 0) {\n          i = i - 1;\n        }\n        if (i > 0) {\n          p0 = keys[i - 1][1];\n          dt0 = keys[i][0] - keys[i - 1][0];\n        }\n        if (keys.length > i + 1) {\n          dt1 = keys[i + 1][0] - keys[i][0];\n        }\n        if (keys.length > i + 2) {\n          dt2 = keys[i + 2][0] - keys[i + 1][0];\n          p3 = keys[i + 2][1];\n        }\n        p0 = p1 + (p0 - p1) * dt1 / dt0;\n        p3 = p2 + (p3 - p2) * dt1 / dt2;\n        if (this.type === CURVE_CATMULL) {\n          return this._interpolateCatmullRom(p0, p1, p2, p3, interpolation);\n        } else {\n          return this._interpolateCardinal(p0, p1, p2, p3, interpolation, this.tension);\n        }\n      }\n    }\n    return pc.math.lerp(leftValue, rightValue, interpolation);\n  }, _interpolateHermite:function(p0, p1, t0, t1, s) {\n    var s2 = s * s;\n    var s3 = s * s * s;\n    var h0 = 2 * s3 - 3 * s2 + 1;\n    var h1 = -2 * s3 + 3 * s2;\n    var h2 = s3 - 2 * s2 + s;\n    var h3 = s3 - s2;\n    return p0 * h0 + p1 * h1 + t0 * h2 + t1 * h3;\n  }, _interpolateCardinal:function(p0, p1, p2, p3, s, t) {\n    var t0 = t * (p2 - p0);\n    var t1 = t * (p3 - p1);\n    return this._interpolateHermite(p1, p2, t0, t1, s);\n  }, _interpolateCatmullRom:function(p0, p1, p2, p3, s) {\n    return this._interpolateCardinal(p0, p1, p2, p3, s, 0.5);\n  }, closest:function(time) {\n    var keys = this.keys;\n    var length = keys.length;\n    var min = 2;\n    var result = null;\n    for (var i = 0; i < length; i++) {\n      var diff = Math.abs(time - keys[i][0]);\n      if (min >= diff) {\n        min = diff;\n        result = keys[i];\n      } else {\n        break;\n      }\n    }\n    return result;\n  }, clone:function() {\n    var result = new pc.Curve;\n    result.keys = pc.extend(result.keys, this.keys);\n    result.type = this.type;\n    return result;\n  }, quantize:function(precision) {\n    precision = Math.max(precision, 2);\n    var values = new Float32Array(precision);\n    var step = 1.0 / (precision - 1);\n    for (var i = 0; i < precision; i++) {\n      var value = this.value(step * i);\n      values[i] = value;\n    }\n    return values;\n  }};\n  Object.defineProperty(Curve.prototype, \"length\", {get:function() {\n    return this.keys.length;\n  }});\n  return {Curve:Curve, CURVE_LINEAR:CURVE_LINEAR, CURVE_SMOOTHSTEP:CURVE_SMOOTHSTEP, CURVE_CATMULL:CURVE_CATMULL, CURVE_CARDINAL:CURVE_CARDINAL};\n}());\npc.extend(pc, function() {\n  var CurveSet = function() {\n    var i;\n    this.curves = [];\n    this._type = pc.CURVE_SMOOTHSTEP;\n    if (arguments.length > 1) {\n      for (i = 0; i < arguments.length; i++) {\n        this.curves.push(new pc.Curve(arguments[i]));\n      }\n    } else {\n      if (arguments.length === 0) {\n        this.curves.push(new pc.Curve);\n      } else {\n        var arg = arguments[0];\n        if (pc.type(arg) === \"number\") {\n          for (i = 0; i < arg; i++) {\n            this.curves.push(new pc.Curve);\n          }\n        } else {\n          for (i = 0; i < arg.length; i++) {\n            this.curves.push(new pc.Curve(arg[i]));\n          }\n        }\n      }\n    }\n  };\n  CurveSet.prototype = {get:function(index) {\n    return this.curves[index];\n  }, value:function(time, result) {\n    var length = this.curves.length;\n    result = result || [];\n    result.length = length;\n    for (var i = 0; i < length; i++) {\n      result[i] = this.curves[i].value(time);\n    }\n    return result;\n  }, clone:function() {\n    var result = new pc.CurveSet;\n    result.curves = [];\n    for (var i = 0; i < this.curves.length; i++) {\n      result.curves.push(this.curves[i].clone());\n    }\n    result._type = this._type;\n    return result;\n  }, quantize:function(precision) {\n    precision = Math.max(precision, 2);\n    var numCurves = this.curves.length;\n    var values = new Float32Array(precision * numCurves);\n    var step = 1.0 / (precision - 1);\n    var temp = [];\n    for (var i = 0; i < precision; i++) {\n      var value = this.value(step * i, temp);\n      if (numCurves == 1) {\n        values[i] = value[0];\n      } else {\n        for (var j = 0; j < numCurves; j++) {\n          values[i * numCurves + j] = value[j];\n        }\n      }\n    }\n    return values;\n  }};\n  Object.defineProperty(CurveSet.prototype, \"length\", {get:function() {\n    return this.curves.length;\n  }});\n  Object.defineProperty(CurveSet.prototype, \"type\", {get:function() {\n    return this._type;\n  }, set:function(value) {\n    this._type = value;\n    for (var i = 0; i < this.curves.length; i++) {\n      this.curves[i].type = value;\n    }\n  }});\n  return {CurveSet:CurveSet};\n}());\npc.extend(pc, function() {\n  var tmpVecA = new pc.Vec3;\n  var tmpVecB = new pc.Vec3;\n  var tmpVecC = new pc.Vec3;\n  var tmpVecD = new pc.Vec3;\n  var tmpVecE = new pc.Vec3;\n  var BoundingBox = function BoundingBox(center, halfExtents) {\n    this.center = center || new pc.Vec3(0, 0, 0);\n    this.halfExtents = halfExtents || new pc.Vec3(0.5, 0.5, 0.5);\n    this._min = new pc.Vec3;\n    this._max = new pc.Vec3;\n  };\n  BoundingBox.prototype = {add:function(other) {\n    var tc = this.center.data;\n    var tcx = tc[0];\n    var tcy = tc[1];\n    var tcz = tc[2];\n    var th = this.halfExtents.data;\n    var thx = th[0];\n    var thy = th[1];\n    var thz = th[2];\n    var tminx = tcx - thx;\n    var tmaxx = tcx + thx;\n    var tminy = tcy - thy;\n    var tmaxy = tcy + thy;\n    var tminz = tcz - thz;\n    var tmaxz = tcz + thz;\n    var oc = other.center.data;\n    var ocx = oc[0];\n    var ocy = oc[1];\n    var ocz = oc[2];\n    var oh = other.halfExtents.data;\n    var ohx = oh[0];\n    var ohy = oh[1];\n    var ohz = oh[2];\n    var ominx = ocx - ohx;\n    var omaxx = ocx + ohx;\n    var ominy = ocy - ohy;\n    var omaxy = ocy + ohy;\n    var ominz = ocz - ohz;\n    var omaxz = ocz + ohz;\n    if (ominx < tminx) {\n      tminx = ominx;\n    }\n    if (omaxx > tmaxx) {\n      tmaxx = omaxx;\n    }\n    if (ominy < tminy) {\n      tminy = ominy;\n    }\n    if (omaxy > tmaxy) {\n      tmaxy = omaxy;\n    }\n    if (ominz < tminz) {\n      tminz = ominz;\n    }\n    if (omaxz > tmaxz) {\n      tmaxz = omaxz;\n    }\n    tc[0] = (tminx + tmaxx) * 0.5;\n    tc[1] = (tminy + tmaxy) * 0.5;\n    tc[2] = (tminz + tmaxz) * 0.5;\n    th[0] = (tmaxx - tminx) * 0.5;\n    th[1] = (tmaxy - tminy) * 0.5;\n    th[2] = (tmaxz - tminz) * 0.5;\n  }, copy:function(src) {\n    this.center.copy(src.center);\n    this.halfExtents.copy(src.halfExtents);\n    this.type = src.type;\n  }, clone:function() {\n    return new pc.BoundingBox(this.center.clone(), this.halfExtents.clone());\n  }, intersects:function(other) {\n    var aMax = this.getMax();\n    var aMin = this.getMin();\n    var bMax = other.getMax();\n    var bMin = other.getMin();\n    return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;\n  }, _intersectsRay:function(ray, point) {\n    var tMin = tmpVecA.copy(this.getMin()).sub(ray.origin).data;\n    var tMax = tmpVecB.copy(this.getMax()).sub(ray.origin).data;\n    var dir = ray.direction.data;\n    for (var i = 0; i < 3; i++) {\n      if (dir[i] === 0) {\n        tMin[i] = tMin[i] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[i] = tMax[i] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[i] /= dir[i];\n        tMax[i] /= dir[i];\n      }\n    }\n    var realMin = tmpVecC.set(Math.min(tMin[0], tMax[0]), Math.min(tMin[1], tMax[1]), Math.min(tMin[2], tMax[2])).data;\n    var realMax = tmpVecD.set(Math.max(tMin[0], tMax[0]), Math.max(tMin[1], tMax[1]), Math.max(tMin[2], tMax[2])).data;\n    var minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n    var maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n    var intersects = minMax >= maxMin && maxMin >= 0;\n    if (intersects) {\n      point.copy(ray.direction).scale(maxMin).add(ray.origin);\n    }\n    return intersects;\n  }, _fastIntersectsRay:function(ray) {\n    var diff = tmpVecA;\n    var cross = tmpVecB;\n    var prod = tmpVecC;\n    var absDiff = tmpVecD;\n    var absDir = tmpVecE;\n    var rayDir = ray.direction;\n    diff.sub2(ray.origin, this.center);\n    absDiff.set(Math.abs(diff.x), Math.abs(diff.y), Math.abs(diff.z));\n    prod.mul2(diff, rayDir);\n    if (absDiff.x > this.halfExtents.x && prod.x >= 0) {\n      return false;\n    }\n    if (absDiff.y > this.halfExtents.y && prod.y >= 0) {\n      return false;\n    }\n    if (absDiff.z > this.halfExtents.z && prod.z >= 0) {\n      return false;\n    }\n    absDir.set(Math.abs(rayDir.x), Math.abs(rayDir.y), Math.abs(rayDir.z));\n    cross.cross(rayDir, diff);\n    cross.set(Math.abs(cross.x), Math.abs(cross.y), Math.abs(cross.z));\n    if (cross.x > this.halfExtents.y * absDir.z + this.halfExtents.z * absDir.y) {\n      return false;\n    }\n    if (cross.y > this.halfExtents.x * absDir.z + this.halfExtents.z * absDir.x) {\n      return false;\n    }\n    if (cross.z > this.halfExtents.x * absDir.y + this.halfExtents.y * absDir.x) {\n      return false;\n    }\n    return true;\n  }, intersectsRay:function(ray, point) {\n    if (point) {\n      return this._intersectsRay(ray, point);\n    } else {\n      return this._fastIntersectsRay(ray);\n    }\n  }, setMinMax:function(min, max) {\n    this.center.add2(max, min).scale(0.5);\n    this.halfExtents.sub2(max, min).scale(0.5);\n  }, getMin:function() {\n    return this._min.copy(this.center).sub(this.halfExtents);\n  }, getMax:function() {\n    return this._max.copy(this.center).add(this.halfExtents);\n  }, containsPoint:function(point) {\n    var min = this.getMin();\n    var max = this.getMax();\n    var i;\n    for (i = 0; i < 3; ++i) {\n      if (point.data[i] < min.data[i] || point.data[i] > max.data[i]) {\n        return false;\n      }\n    }\n    return true;\n  }, setFromTransformedAabb:function(aabb, m) {\n    var bc = this.center;\n    var br = this.halfExtents;\n    var ac = aabb.center.data;\n    var ar = aabb.halfExtents.data;\n    m = m.data;\n    var mx0 = m[0];\n    var mx1 = m[4];\n    var mx2 = m[8];\n    var my0 = m[1];\n    var my1 = m[5];\n    var my2 = m[9];\n    var mz0 = m[2];\n    var mz1 = m[6];\n    var mz2 = m[10];\n    var mx0a = Math.abs(mx0);\n    var mx1a = Math.abs(mx1);\n    var mx2a = Math.abs(mx2);\n    var my0a = Math.abs(my0);\n    var my1a = Math.abs(my1);\n    var my2a = Math.abs(my2);\n    var mz0a = Math.abs(mz0);\n    var mz1a = Math.abs(mz1);\n    var mz2a = Math.abs(mz2);\n    bc.set(m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2], m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2], m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2]);\n    br.set(mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2], my0a * ar[0] + my1a * ar[1] + my2a * ar[2], mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2]);\n  }, compute:function(vertices) {\n    var min = tmpVecA.set(vertices[0], vertices[1], vertices[2]);\n    var max = tmpVecB.set(vertices[0], vertices[1], vertices[2]);\n    var numVerts = vertices.length / 3;\n    for (var i = 1; i < numVerts; i++) {\n      var x = vertices[i * 3 + 0];\n      var y = vertices[i * 3 + 1];\n      var z = vertices[i * 3 + 2];\n      if (x < min.x) {\n        min.x = x;\n      }\n      if (y < min.y) {\n        min.y = y;\n      }\n      if (z < min.z) {\n        min.z = z;\n      }\n      if (x > max.x) {\n        max.x = x;\n      }\n      if (y > max.y) {\n        max.y = y;\n      }\n      if (z > max.z) {\n        max.z = z;\n      }\n    }\n    this.setMinMax(min, max);\n  }, intersectsBoundingSphere:function(sphere) {\n    var sq = this._distanceToBoundingSphereSq(sphere);\n    if (sq <= sphere.radius * sphere.radius) {\n      return true;\n    }\n    return false;\n  }, _distanceToBoundingSphereSq:function(sphere) {\n    var boxMin = this.getMin();\n    var boxMax = this.getMax();\n    var sq = 0;\n    for (var i = 0; i < 3; ++i) {\n      var out = 0;\n      var pn = sphere.center.data[i];\n      var bMin = boxMin.data[i];\n      var bMax = boxMax.data[i];\n      var val = 0;\n      if (pn < bMin) {\n        val = bMin - pn;\n        out += val * val;\n      }\n      if (pn > bMax) {\n        val = pn - bMax;\n        out += val * val;\n      }\n      sq += out;\n    }\n    return sq;\n  }};\n  return {BoundingBox:BoundingBox};\n}());\npc.extend(pc, function() {\n  var tmpVecA = new pc.Vec3;\n  var tmpVecB = new pc.Vec3;\n  var tmpVecC = new pc.Vec3;\n  var tmpVecD = new pc.Vec3;\n  function BoundingSphere(center, radius) {\n    this.center = center || new pc.Vec3(0, 0, 0);\n    this.radius = radius === undefined ? 0.5 : radius;\n  }\n  BoundingSphere.prototype = {containsPoint:function(point) {\n    var lenSq = tmpVecA.sub2(point, this.center).lengthSq();\n    var r = this.radius;\n    return lenSq < r * r;\n  }, compute:function(vertices) {\n    var i;\n    var numVerts = vertices.length / 3;\n    var vertex = tmpVecA;\n    var avgVertex = tmpVecB;\n    var sum = tmpVecC;\n    for (i = 0; i < numVerts; i++) {\n      vertex.set(vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2]);\n      sum.addSelf(vertex);\n      if (i % 100 === 0) {\n        sum.scale(1 / numVerts);\n        avgVertex.add(sum);\n        sum.set(0, 0, 0);\n      }\n    }\n    sum.scale(1 / numVerts);\n    avgVertex.add(sum);\n    this.center.copy(avgVertex);\n    var maxDistSq = 0;\n    var centerToVert = tmpVecD;\n    for (i = 0; i < numVerts; i++) {\n      vertex.set(vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2]);\n      centerToVert.sub2(vertex, this.center);\n      maxDistSq = Math.max(centerToVert.lengthSq(), maxDistSq);\n    }\n    this.radius = Math.sqrt(maxDistSq);\n  }, intersectsRay:function(ray, point) {\n    var m = tmpVecA.copy(ray.origin).sub(this.center);\n    var b = m.dot(tmpVecB.copy(ray.direction).normalize());\n    var c = m.dot(m) - this.radius * this.radius;\n    if (c > 0 && b > 0) {\n      return null;\n    }\n    var discr = b * b - c;\n    if (discr < 0) {\n      return false;\n    }\n    var t = Math.abs(-b - Math.sqrt(discr));\n    if (point) {\n      point.copy(ray.direction).scale(t).add(ray.origin);\n    }\n    return true;\n  }, intersectsBoundingSphere:function(sphere) {\n    tmpVecA.sub2(sphere.center, this.center);\n    var totalRadius = sphere.radius + this.radius;\n    if (tmpVecA.lengthSq() <= totalRadius * totalRadius) {\n      return true;\n    }\n    return false;\n  }};\n  return {BoundingSphere:BoundingSphere};\n}());\npc.extend(pc, function() {\n  var viewProj = new pc.Mat4;\n  var Frustum = function Frustum(projectionMatrix, viewMatrix) {\n    projectionMatrix = projectionMatrix || (new pc.Mat4).setPerspective(90, 16 / 9, 0.1, 1000);\n    viewMatrix = viewMatrix || new pc.Mat4;\n    this.planes = [];\n    for (var i = 0; i < 6; i++) {\n      this.planes[i] = [];\n    }\n    this.update(projectionMatrix, viewMatrix);\n  };\n  Frustum.prototype = {update:function(projectionMatrix, viewMatrix) {\n    viewProj.mul2(projectionMatrix, viewMatrix);\n    var vpm = viewProj.data;\n    this.planes[0][0] = vpm[3] - vpm[0];\n    this.planes[0][1] = vpm[7] - vpm[4];\n    this.planes[0][2] = vpm[11] - vpm[8];\n    this.planes[0][3] = vpm[15] - vpm[12];\n    var t = Math.sqrt(this.planes[0][0] * this.planes[0][0] + this.planes[0][1] * this.planes[0][1] + this.planes[0][2] * this.planes[0][2]);\n    this.planes[0][0] /= t;\n    this.planes[0][1] /= t;\n    this.planes[0][2] /= t;\n    this.planes[0][3] /= t;\n    this.planes[1][0] = vpm[3] + vpm[0];\n    this.planes[1][1] = vpm[7] + vpm[4];\n    this.planes[1][2] = vpm[11] + vpm[8];\n    this.planes[1][3] = vpm[15] + vpm[12];\n    t = Math.sqrt(this.planes[1][0] * this.planes[1][0] + this.planes[1][1] * this.planes[1][1] + this.planes[1][2] * this.planes[1][2]);\n    this.planes[1][0] /= t;\n    this.planes[1][1] /= t;\n    this.planes[1][2] /= t;\n    this.planes[1][3] /= t;\n    this.planes[2][0] = vpm[3] + vpm[1];\n    this.planes[2][1] = vpm[7] + vpm[5];\n    this.planes[2][2] = vpm[11] + vpm[9];\n    this.planes[2][3] = vpm[15] + vpm[13];\n    t = Math.sqrt(this.planes[2][0] * this.planes[2][0] + this.planes[2][1] * this.planes[2][1] + this.planes[2][2] * this.planes[2][2]);\n    this.planes[2][0] /= t;\n    this.planes[2][1] /= t;\n    this.planes[2][2] /= t;\n    this.planes[2][3] /= t;\n    this.planes[3][0] = vpm[3] - vpm[1];\n    this.planes[3][1] = vpm[7] - vpm[5];\n    this.planes[3][2] = vpm[11] - vpm[9];\n    this.planes[3][3] = vpm[15] - vpm[13];\n    t = Math.sqrt(this.planes[3][0] * this.planes[3][0] + this.planes[3][1] * this.planes[3][1] + this.planes[3][2] * this.planes[3][2]);\n    this.planes[3][0] /= t;\n    this.planes[3][1] /= t;\n    this.planes[3][2] /= t;\n    this.planes[3][3] /= t;\n    this.planes[4][0] = vpm[3] - vpm[2];\n    this.planes[4][1] = vpm[7] - vpm[6];\n    this.planes[4][2] = vpm[11] - vpm[10];\n    this.planes[4][3] = vpm[15] - vpm[14];\n    t = Math.sqrt(this.planes[4][0] * this.planes[4][0] + this.planes[4][1] * this.planes[4][1] + this.planes[4][2] * this.planes[4][2]);\n    this.planes[4][0] /= t;\n    this.planes[4][1] /= t;\n    this.planes[4][2] /= t;\n    this.planes[4][3] /= t;\n    this.planes[5][0] = vpm[3] + vpm[2];\n    this.planes[5][1] = vpm[7] + vpm[6];\n    this.planes[5][2] = vpm[11] + vpm[10];\n    this.planes[5][3] = vpm[15] + vpm[14];\n    t = Math.sqrt(this.planes[5][0] * this.planes[5][0] + this.planes[5][1] * this.planes[5][1] + this.planes[5][2] * this.planes[5][2]);\n    this.planes[5][0] /= t;\n    this.planes[5][1] /= t;\n    this.planes[5][2] /= t;\n    this.planes[5][3] /= t;\n  }, containsPoint:function(point) {\n    for (var p = 0; p < 6; p++) {\n      if (this.planes[p][0] * point.x + this.planes[p][1] * point.y + this.planes[p][2] * point.z + this.planes[p][3] <= 0) {\n        return false;\n      }\n    }\n    return true;\n  }, containsSphere:function(sphere) {\n    var c = 0;\n    var d;\n    var p;\n    var sr = sphere.radius;\n    var sc = sphere.center.data;\n    var scx = sc[0];\n    var scy = sc[1];\n    var scz = sc[2];\n    var planes = this.planes;\n    var plane;\n    for (p = 0; p < 6; p++) {\n      plane = planes[p];\n      d = plane[0] * scx + plane[1] * scy + plane[2] * scz + plane[3];\n      if (d <= -sr) {\n        return 0;\n      }\n      if (d > sr) {\n        c++;\n      }\n    }\n    return c === 6 ? 2 : 1;\n  }};\n  return {Frustum:Frustum};\n}());\npc.extend(pc, function() {\n  var tmpVecA = new pc.Vec3;\n  var Plane = function Plane(point, normal) {\n    this.normal = normal || new pc.Vec3(0, 0, 1);\n    this.point = point || new pc.Vec3(0, 0, 0);\n  };\n  Plane.prototype = {intersectsLine:function(start, end, point) {\n    var d = -this.normal.dot(this.point);\n    var d0 = this.normal.dot(start) + d;\n    var d1 = this.normal.dot(end) + d;\n    var t = d0 / (d0 - d1);\n    var intersects = t >= 0 && t <= 1;\n    if (intersects && point) {\n      point.lerp(start, end, t);\n    }\n    return intersects;\n  }, intersectsRay:function(ray, point) {\n    var pointToOrigin = tmpVecA.sub2(this.point, ray.origin);\n    var t = this.normal.dot(pointToOrigin) / this.normal.dot(ray.direction);\n    var intersects = t >= 0;\n    if (intersects && point) {\n      point.copy(ray.direction).scale(t).add(ray.origin);\n    }\n    return intersects;\n  }};\n  return {Plane:Plane};\n}());\npc.extend(pc, function() {\n  var Ray = function Ray(origin, direction) {\n    this.origin = origin || new pc.Vec3(0, 0, 0);\n    this.direction = direction || new pc.Vec3(0, 0, -1);\n  };\n  return {Ray:Ray};\n}());\npc.extend(pc, function() {\n  var tmpRay = new pc.Ray;\n  var tmpVec3 = new pc.Vec3;\n  var tmpSphere = new pc.BoundingSphere;\n  var tmpMat4 = new pc.Mat4;\n  var OrientedBox = function OrientedBox(worldTransform, halfExtents) {\n    this.halfExtents = halfExtents || new pc.Vec3(0.5, 0.5, 0.5);\n    worldTransform = worldTransform || tmpMat4.setIdentity();\n    this._modelTransform = worldTransform.clone().invert();\n    this._aabb = new pc.BoundingBox(new pc.Vec3, this.halfExtents);\n  };\n  OrientedBox.prototype = {intersectsRay:function(ray, point) {\n    this._modelTransform.transformPoint(ray.origin, tmpRay.origin);\n    this._modelTransform.transformVector(ray.direction, tmpRay.direction);\n    if (point) {\n      var result = this._aabb._intersectsRay(tmpRay, point);\n      tmpMat4.copy(this._modelTransform).invert().transformPoint(point, point);\n      return result;\n    } else {\n      return this._aabb._fastIntersectsRay(tmpRay);\n    }\n  }, containsPoint:function(point) {\n    this._modelTransform.transformPoint(point, tmpVec3);\n    return this._aabb.containsPoint(tmpVec3);\n  }, intersectsBoundingSphere:function(sphere) {\n    this._modelTransform.transformPoint(sphere.center, tmpSphere.center);\n    tmpSphere.radius = sphere.radius;\n    if (this._aabb.intersectsBoundingSphere(tmpSphere)) {\n      return true;\n    }\n    return false;\n  }};\n  Object.defineProperty(OrientedBox.prototype, \"worldTransform\", {set:function(value) {\n    this._modelTransform.copy(value).invert();\n  }});\n  return {OrientedBox:OrientedBox};\n}());\n(function() {\n  var enums = {ADDRESS_REPEAT:0, ADDRESS_CLAMP_TO_EDGE:1, ADDRESS_MIRRORED_REPEAT:2, BLENDMODE_ZERO:0, BLENDMODE_ONE:1, BLENDMODE_SRC_COLOR:2, BLENDMODE_ONE_MINUS_SRC_COLOR:3, BLENDMODE_DST_COLOR:4, BLENDMODE_ONE_MINUS_DST_COLOR:5, BLENDMODE_SRC_ALPHA:6, BLENDMODE_SRC_ALPHA_SATURATE:7, BLENDMODE_ONE_MINUS_SRC_ALPHA:8, BLENDMODE_DST_ALPHA:9, BLENDMODE_ONE_MINUS_DST_ALPHA:10, BLENDEQUATION_ADD:0, BLENDEQUATION_SUBTRACT:1, BLENDEQUATION_REVERSE_SUBTRACT:2, BLENDEQUATION_MIN:3, BLENDEQUATION_MAX:4, BUFFER_STATIC:0, \n  BUFFER_DYNAMIC:1, BUFFER_STREAM:2, BUFFER_GPUDYNAMIC:3, CLEARFLAG_COLOR:1, CLEARFLAG_DEPTH:2, CLEARFLAG_STENCIL:4, CUBEFACE_POSX:0, CUBEFACE_NEGX:1, CUBEFACE_POSY:2, CUBEFACE_NEGY:3, CUBEFACE_POSZ:4, CUBEFACE_NEGZ:5, CULLFACE_NONE:0, CULLFACE_BACK:1, CULLFACE_FRONT:2, CULLFACE_FRONTANDBACK:3, TYPE_INT8:0, TYPE_UINT8:1, TYPE_INT16:2, TYPE_UINT16:3, TYPE_INT32:4, TYPE_UINT32:5, TYPE_FLOAT32:6, FILTER_NEAREST:0, FILTER_LINEAR:1, FILTER_NEAREST_MIPMAP_NEAREST:2, FILTER_NEAREST_MIPMAP_LINEAR:3, FILTER_LINEAR_MIPMAP_NEAREST:4, \n  FILTER_LINEAR_MIPMAP_LINEAR:5, FUNC_NEVER:0, FUNC_LESS:1, FUNC_EQUAL:2, FUNC_LESSEQUAL:3, FUNC_GREATER:4, FUNC_NOTEQUAL:5, FUNC_GREATEREQUAL:6, FUNC_ALWAYS:7, INDEXFORMAT_UINT8:0, INDEXFORMAT_UINT16:1, INDEXFORMAT_UINT32:2, PIXELFORMAT_A8:0, PIXELFORMAT_L8:1, PIXELFORMAT_L8_A8:2, PIXELFORMAT_R5_G6_B5:3, PIXELFORMAT_R5_G5_B5_A1:4, PIXELFORMAT_R4_G4_B4_A4:5, PIXELFORMAT_R8_G8_B8:6, PIXELFORMAT_R8_G8_B8_A8:7, PIXELFORMAT_DXT1:8, PIXELFORMAT_DXT3:9, PIXELFORMAT_DXT5:10, PIXELFORMAT_RGB16F:11, PIXELFORMAT_RGBA16F:12, \n  PIXELFORMAT_RGB32F:13, PIXELFORMAT_RGBA32F:14, PIXELFORMAT_R32F:15, PIXELFORMAT_DEPTH:16, PIXELFORMAT_DEPTHSTENCIL:17, PIXELFORMAT_111110F:18, PIXELFORMAT_SRGB:19, PIXELFORMAT_SRGBA:20, PIXELFORMAT_ETC1:21, PIXELFORMAT_PVRTC_2BPP_RGB_1:22, PIXELFORMAT_PVRTC_2BPP_RGBA_1:23, PIXELFORMAT_PVRTC_4BPP_RGB_1:24, PIXELFORMAT_PVRTC_4BPP_RGBA_1:25, PRIMITIVE_POINTS:0, PRIMITIVE_LINES:1, PRIMITIVE_LINELOOP:2, PRIMITIVE_LINESTRIP:3, PRIMITIVE_TRIANGLES:4, PRIMITIVE_TRISTRIP:5, PRIMITIVE_TRIFAN:6, SEMANTIC_POSITION:\"POSITION\", \n  SEMANTIC_NORMAL:\"NORMAL\", SEMANTIC_TANGENT:\"TANGENT\", SEMANTIC_BLENDWEIGHT:\"BLENDWEIGHT\", SEMANTIC_BLENDINDICES:\"BLENDINDICES\", SEMANTIC_COLOR:\"COLOR\", SEMANTIC_TEXCOORD0:\"TEXCOORD0\", SEMANTIC_TEXCOORD1:\"TEXCOORD1\", SEMANTIC_TEXCOORD2:\"TEXCOORD2\", SEMANTIC_TEXCOORD3:\"TEXCOORD3\", SEMANTIC_TEXCOORD4:\"TEXCOORD4\", SEMANTIC_TEXCOORD5:\"TEXCOORD5\", SEMANTIC_TEXCOORD6:\"TEXCOORD6\", SEMANTIC_TEXCOORD7:\"TEXCOORD7\", SEMANTIC_ATTR0:\"ATTR0\", SEMANTIC_ATTR1:\"ATTR1\", SEMANTIC_ATTR2:\"ATTR2\", SEMANTIC_ATTR3:\"ATTR3\", \n  SEMANTIC_ATTR4:\"ATTR4\", SEMANTIC_ATTR5:\"ATTR5\", SEMANTIC_ATTR6:\"ATTR6\", SEMANTIC_ATTR7:\"ATTR7\", SEMANTIC_ATTR8:\"ATTR8\", SEMANTIC_ATTR9:\"ATTR9\", SEMANTIC_ATTR10:\"ATTR10\", SEMANTIC_ATTR11:\"ATTR11\", SEMANTIC_ATTR12:\"ATTR12\", SEMANTIC_ATTR13:\"ATTR13\", SEMANTIC_ATTR14:\"ATTR14\", SEMANTIC_ATTR15:\"ATTR15\", SHADERTAG_MATERIAL:1, STENCILOP_KEEP:0, STENCILOP_ZERO:1, STENCILOP_REPLACE:2, STENCILOP_INCREMENT:3, STENCILOP_INCREMENTWRAP:4, STENCILOP_DECREMENT:5, STENCILOP_DECREMENTWRAP:6, STENCILOP_INVERT:7, \n  TEXTURELOCK_READ:1, TEXTURELOCK_WRITE:2, TEXHINT_NONE:0, TEXHINT_SHADOWMAP:1, TEXHINT_ASSET:2, TEXHINT_LIGHTMAP:3, UNIFORMTYPE_BOOL:0, UNIFORMTYPE_INT:1, UNIFORMTYPE_FLOAT:2, UNIFORMTYPE_VEC2:3, UNIFORMTYPE_VEC3:4, UNIFORMTYPE_VEC4:5, UNIFORMTYPE_IVEC2:6, UNIFORMTYPE_IVEC3:7, UNIFORMTYPE_IVEC4:8, UNIFORMTYPE_BVEC2:9, UNIFORMTYPE_BVEC3:10, UNIFORMTYPE_BVEC4:11, UNIFORMTYPE_MAT2:12, UNIFORMTYPE_MAT3:13, UNIFORMTYPE_MAT4:14, UNIFORMTYPE_TEXTURE2D:15, UNIFORMTYPE_TEXTURECUBE:16, UNIFORMTYPE_FLOATARRAY:17, \n  UNIFORMTYPE_TEXTURE2D_SHADOW:18, UNIFORMTYPE_TEXTURECUBE_SHADOW:19, UNIFORMTYPE_TEXTURE3D:20};\n  pc.extend(pc, enums);\n  pc.gfx = {};\n  pc.extend(pc.gfx, enums);\n})();\npc.extend(pc, function() {\n  var ScopeId = function(name) {\n    this.name = name;\n    this.value = null;\n    this.versionObject = new pc.VersionedObject;\n  };\n  ScopeId.prototype = {setValue:function(value) {\n    this.value = value;\n    this.versionObject.increment();\n  }, getValue:function(value) {\n    return this.value;\n  }};\n  return {ScopeId:ScopeId};\n}());\npc.extend(pc, function() {\n  var ScopeSpace = function(name) {\n    this.name = name;\n    this.variables = {};\n    this.namespaces = {};\n  };\n  ScopeSpace.prototype = {resolve:function(name) {\n    if (this.variables.hasOwnProperty(name) === false) {\n      this.variables[name] = new pc.ScopeId(name);\n    }\n    return this.variables[name];\n  }, getSubSpace:function(name) {\n    if (this.namespaces.hasOwnProperty(name) === false) {\n      this.namespaces[name] = new pc.ScopeSpace(name);\n      logDEBUG(\"Added ScopeSpace: \" + name);\n    }\n    return this.namespaces[name];\n  }};\n  return {ScopeSpace:ScopeSpace};\n}());\npc.extend(pc, function() {\n  var Version = function() {\n    this.globalId = 0;\n    this.revision = 0;\n  };\n  Version.prototype = {equals:function(other) {\n    return this.globalId === other.globalId && this.revision === other.revision;\n  }, notequals:function(other) {\n    return this.globalId !== other.globalId || this.revision !== other.revision;\n  }, copy:function(other) {\n    this.globalId = other.globalId;\n    this.revision = other.revision;\n  }, reset:function() {\n    this.globalId = 0;\n    this.revision = 0;\n  }};\n  return {Version:Version};\n}());\npc.extend(pc, function() {\n  var idCounter = 0;\n  var VersionedObject = function() {\n    idCounter++;\n    this.version = new pc.Version;\n    this.version.globalId = idCounter;\n  };\n  VersionedObject.prototype = {increment:function() {\n    this.version.revision++;\n  }};\n  return {VersionedObject:VersionedObject};\n}());\npc.extend(pc, function() {\n  function VertexIteratorSetter(buffer, vertexElement) {\n    this.index = 0;\n    switch(vertexElement.dataType) {\n      case pc.TYPE_INT8:\n        this.array = new Int8Array(buffer, vertexElement.offset);\n        break;\n      case pc.TYPE_UINT8:\n        this.array = new Uint8Array(buffer, vertexElement.offset);\n        break;\n      case pc.TYPE_INT16:\n        this.array = new Int16Array(buffer, vertexElement.offset);\n        break;\n      case pc.TYPE_UINT16:\n        this.array = new Uint16Array(buffer, vertexElement.offset);\n        break;\n      case pc.TYPE_INT32:\n        this.array = new Int32Array(buffer, vertexElement.offset);\n        break;\n      case pc.TYPE_UINT32:\n        this.array = new Uint32Array(buffer, vertexElement.offset);\n        break;\n      case pc.TYPE_FLOAT32:\n        this.array = new Float32Array(buffer, vertexElement.offset);\n        break;\n    }\n    switch(vertexElement.numComponents) {\n      case 1:\n        this.set = VertexIteratorSetter_set1;\n        break;\n      case 2:\n        this.set = VertexIteratorSetter_set2;\n        break;\n      case 3:\n        this.set = VertexIteratorSetter_set3;\n        break;\n      case 4:\n        this.set = VertexIteratorSetter_set4;\n        break;\n    }\n  }\n  function VertexIteratorSetter_set1(a) {\n    this.array[this.index] = a;\n  }\n  function VertexIteratorSetter_set2(a, b) {\n    this.array[this.index] = a;\n    this.array[this.index + 1] = b;\n  }\n  function VertexIteratorSetter_set3(a, b, c) {\n    this.array[this.index] = a;\n    this.array[this.index + 1] = b;\n    this.array[this.index + 2] = c;\n  }\n  function VertexIteratorSetter_set4(a, b, c, d) {\n    this.array[this.index] = a;\n    this.array[this.index + 1] = b;\n    this.array[this.index + 2] = c;\n    this.array[this.index + 3] = d;\n  }\n  function VertexIterator(vertexBuffer) {\n    this.vertexBuffer = vertexBuffer;\n    this.buffer = this.vertexBuffer.lock();\n    this.setters = [];\n    this.element = {};\n    var vertexFormat = this.vertexBuffer.getFormat();\n    for (var i = 0; i < vertexFormat.elements.length; i++) {\n      var vertexElement = vertexFormat.elements[i];\n      this.setters[i] = new VertexIteratorSetter(this.buffer, vertexElement);\n      this.element[vertexElement.name] = this.setters[i];\n    }\n  }\n  VertexIterator.prototype = {next:function() {\n    var i = 0;\n    var setters = this.setters;\n    var numSetters = this.setters.length;\n    var vertexFormat = this.vertexBuffer.getFormat();\n    while (i < numSetters) {\n      var setter = setters[i++];\n      setter.index += vertexFormat.size / setter.array.constructor.BYTES_PER_ELEMENT;\n    }\n  }, end:function() {\n    this.vertexBuffer.unlock();\n  }};\n  return {VertexIterator:VertexIterator};\n}());\npc.extend(pc, function() {\n  var _typeSize = [];\n  _typeSize[pc.TYPE_INT8] = 1;\n  _typeSize[pc.TYPE_UINT8] = 1;\n  _typeSize[pc.TYPE_INT16] = 2;\n  _typeSize[pc.TYPE_UINT16] = 2;\n  _typeSize[pc.TYPE_INT32] = 4;\n  _typeSize[pc.TYPE_UINT32] = 4;\n  _typeSize[pc.TYPE_FLOAT32] = 4;\n  var VertexFormat = function(graphicsDevice, description) {\n    var i, len, element;\n    this.elements = [];\n    this.hasUv0 = false;\n    this.hasUv1 = false;\n    this.hasColor = false;\n    this.size = 0;\n    for (i = 0, len = description.length; i < len; i++) {\n      var elementDesc = description[i];\n      element = {name:elementDesc.semantic, offset:0, stride:0, stream:-1, scopeId:graphicsDevice.scope.resolve(elementDesc.semantic), dataType:elementDesc.type, numComponents:elementDesc.components, normalize:elementDesc.normalize === undefined ? false : elementDesc.normalize, size:elementDesc.components * _typeSize[elementDesc.type]};\n      this.elements.push(element);\n      this.size += Math.ceil(element.size / 4) * 4;\n      if (elementDesc.semantic === pc.SEMANTIC_TEXCOORD0) {\n        this.hasUv0 = true;\n      } else {\n        if (elementDesc.semantic === pc.SEMANTIC_TEXCOORD1) {\n          this.hasUv1 = true;\n        } else {\n          if (elementDesc.semantic === pc.SEMANTIC_COLOR) {\n            this.hasColor = true;\n          }\n        }\n      }\n    }\n    var offset = 0;\n    for (i = 0, len = this.elements.length; i < len; i++) {\n      element = this.elements[i];\n      element.offset = offset;\n      element.stride = this.size;\n      offset += element.size;\n    }\n  };\n  return {VertexFormat:VertexFormat};\n}());\npc.extend(pc, function() {\n  var VertexBuffer = function(graphicsDevice, format, numVertices, usage, initialData) {\n    this.usage = usage || pc.BUFFER_STATIC;\n    this.format = format;\n    this.numVertices = numVertices;\n    this.numBytes = format.size * numVertices;\n    graphicsDevice._vram.vb += this.numBytes;\n    this.device = graphicsDevice;\n    if (initialData) {\n      this.setData(initialData);\n    } else {\n      this.storage = new ArrayBuffer(this.numBytes);\n    }\n    this.device.buffers.push(this);\n  };\n  VertexBuffer.prototype = {destroy:function() {\n    var device = this.device;\n    var idx = device.buffers.indexOf(this);\n    if (idx !== -1) {\n      device.buffers.splice(idx, 1);\n    }\n    if (this.bufferId) {\n      var gl = device.gl;\n      gl.deleteBuffer(this.bufferId);\n      device._vram.vb -= this.storage.byteLength;\n      this.bufferId = null;\n      device.boundBuffer = null;\n      device.vertexBuffers.length = 0;\n      device.vbOffsets.length = 0;\n      device.attributesInvalidated = true;\n      for (var loc in device.enabledAttributes) {\n        gl.disableVertexAttribArray(loc);\n      }\n      device.enabledAttributes = {};\n    }\n  }, getFormat:function() {\n    return this.format;\n  }, getUsage:function() {\n    return this.usage;\n  }, getNumVertices:function() {\n    return this.numVertices;\n  }, lock:function() {\n    return this.storage;\n  }, unlock:function() {\n    var gl = this.device.gl;\n    if (!this.bufferId) {\n      this.bufferId = gl.createBuffer();\n    }\n    var glUsage;\n    switch(this.usage) {\n      case pc.BUFFER_STATIC:\n        glUsage = gl.STATIC_DRAW;\n        break;\n      case pc.BUFFER_DYNAMIC:\n        glUsage = gl.DYNAMIC_DRAW;\n        break;\n      case pc.BUFFER_STREAM:\n        glUsage = gl.STREAM_DRAW;\n        break;\n      case pc.BUFFER_GPUDYNAMIC:\n        if (this.device.webgl2) {\n          glUsage = gl.DYNAMIC_COPY;\n        } else {\n          glUsage = gl.STATIC_DRAW;\n        }\n        break;\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferId);\n    gl.bufferData(gl.ARRAY_BUFFER, this.storage, glUsage);\n  }, setData:function(data) {\n    if (data.byteLength !== this.numBytes) {\n      console.error(\"VertexBuffer: wrong initial data size: expected \" + this.numBytes + \", got \" + data.byteLength);\n      return false;\n    }\n    this.storage = data;\n    this.unlock();\n    return true;\n  }};\n  return {VertexBuffer:VertexBuffer};\n}());\npc.extend(pc, function() {\n  var IndexBuffer = function(graphicsDevice, format, numIndices, usage, initialData) {\n    this.usage = usage || pc.BUFFER_STATIC;\n    this.format = format;\n    this.numIndices = numIndices;\n    this.device = graphicsDevice;\n    var gl = this.device.gl;\n    var bytesPerIndex;\n    if (format === pc.INDEXFORMAT_UINT8) {\n      bytesPerIndex = 1;\n      this.glFormat = gl.UNSIGNED_BYTE;\n    } else {\n      if (format === pc.INDEXFORMAT_UINT16) {\n        bytesPerIndex = 2;\n        this.glFormat = gl.UNSIGNED_SHORT;\n      } else {\n        if (format === pc.INDEXFORMAT_UINT32) {\n          bytesPerIndex = 4;\n          this.glFormat = gl.UNSIGNED_INT;\n        }\n      }\n    }\n    this.bytesPerIndex = bytesPerIndex;\n    this.numBytes = this.numIndices * bytesPerIndex;\n    if (initialData) {\n      this.setData(initialData);\n    } else {\n      this.storage = new ArrayBuffer(this.numBytes);\n    }\n    graphicsDevice._vram.ib += this.numBytes;\n    this.device.buffers.push(this);\n  };\n  IndexBuffer.prototype = {destroy:function() {\n    var device = this.device;\n    var idx = device.buffers.indexOf(this);\n    if (idx !== -1) {\n      device.buffers.splice(idx, 1);\n    }\n    if (this.bufferId) {\n      var gl = this.device.gl;\n      gl.deleteBuffer(this.bufferId);\n      this.device._vram.ib -= this.storage.byteLength;\n      this.bufferId = null;\n      if (this.device.indexBuffer === this) {\n        this.device.indexBuffer = null;\n      }\n    }\n  }, getFormat:function() {\n    return this.format;\n  }, getNumIndices:function() {\n    return this.numIndices;\n  }, lock:function() {\n    return this.storage;\n  }, unlock:function() {\n    var gl = this.device.gl;\n    if (!this.bufferId) {\n      this.bufferId = gl.createBuffer();\n    }\n    var glUsage;\n    switch(this.usage) {\n      case pc.BUFFER_STATIC:\n        glUsage = gl.STATIC_DRAW;\n        break;\n      case pc.BUFFER_DYNAMIC:\n        glUsage = gl.DYNAMIC_DRAW;\n        break;\n      case pc.BUFFER_STREAM:\n        glUsage = gl.STREAM_DRAW;\n        break;\n      case pc.BUFFER_GPUDYNAMIC:\n        if (this.device.webgl2) {\n          glUsage = gl.DYNAMIC_COPY;\n        } else {\n          glUsage = gl.STATIC_DRAW;\n        }\n        break;\n    }\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufferId);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.storage, glUsage);\n  }, setData:function(data) {\n    if (data.byteLength !== this.numBytes) {\n      console.error(\"IndexBuffer: wrong initial data size: expected \" + this.numBytes + \", got \" + data.byteLength);\n      return false;\n    }\n    this.storage = data;\n    this.unlock();\n    return true;\n  }};\n  return {IndexBuffer:IndexBuffer};\n}());\npc.extend(pc, function() {\n  var TransformFeedback = function(inputBuffer, usage) {\n    usage = usage || pc.BUFFER_GPUDYNAMIC;\n    this.device = inputBuffer.device;\n    var gl = this.device.gl;\n    this._inputBuffer = inputBuffer;\n    if (usage === pc.BUFFER_GPUDYNAMIC && inputBuffer.usage !== usage) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, inputBuffer.bufferId);\n      gl.bufferData(gl.ARRAY_BUFFER, inputBuffer.storage, gl.DYNAMIC_COPY);\n    }\n    this._outputBuffer = new pc.VertexBuffer(inputBuffer.device, inputBuffer.format, inputBuffer.numVertices, usage, inputBuffer.storage);\n  };\n  TransformFeedback.createShader = function(graphicsDevice, vsCode, name) {\n    return pc.shaderChunks.createShaderFromCode(graphicsDevice, vsCode, null, name, true);\n  };\n  TransformFeedback.prototype = {destroy:function() {\n    this._outputBuffer.destroy();\n  }, process:function(shader, swap) {\n    if (swap === undefined) {\n      swap = true;\n    }\n    var device = this.device;\n    device.setRenderTarget(null);\n    device.updateBegin();\n    device.setVertexBuffer(this._inputBuffer, 0);\n    device.setRaster(false);\n    device.setTransformFeedbackBuffer(this._outputBuffer);\n    device.setShader(shader);\n    device.draw({type:pc.PRIMITIVE_POINTS, base:0, count:this._inputBuffer.numVertices, indexed:false});\n    device.setTransformFeedbackBuffer(null);\n    device.setRaster(true);\n    device.updateEnd();\n    if (swap) {\n      var tmp = this._inputBuffer.bufferId;\n      this._inputBuffer.bufferId = this._outputBuffer.bufferId;\n      this._outputBuffer.bufferId = tmp;\n    }\n  }};\n  Object.defineProperty(TransformFeedback.prototype, \"inputBuffer\", {get:function() {\n    return this._inputBuffer;\n  }});\n  Object.defineProperty(TransformFeedback.prototype, \"outputBuffer\", {get:function() {\n    return this._outputBuffer;\n  }});\n  return {TransformFeedback:TransformFeedback};\n}());\npc.extend(pc, function() {\n  var Texture = function(graphicsDevice, options) {\n    this.device = graphicsDevice;\n    this.name = null;\n    this._width = 4;\n    this._height = 4;\n    this._depth = 1;\n    this._pot = true;\n    this._format = pc.PIXELFORMAT_R8_G8_B8_A8;\n    this.rgbm = false;\n    this._cubemap = false;\n    this._volume = false;\n    this.fixCubemapSeams = false;\n    this._flipY = true;\n    this._mipmaps = true;\n    this._minFilter = pc.FILTER_LINEAR_MIPMAP_LINEAR;\n    this._magFilter = pc.FILTER_LINEAR;\n    this._anisotropy = 1;\n    this._addressU = pc.ADDRESS_REPEAT;\n    this._addressV = pc.ADDRESS_REPEAT;\n    this._addressW = pc.ADDRESS_REPEAT;\n    this._compareOnRead = false;\n    this._compareFunc = pc.FUNC_LESS;\n    if (options !== undefined) {\n      this._width = options.width !== undefined ? options.width : this._width;\n      this._height = options.height !== undefined ? options.height : this._height;\n      this._pot = pc.math.powerOfTwo(this._width) && pc.math.powerOfTwo(this._height);\n      this._format = options.format !== undefined ? options.format : this._format;\n      this.rgbm = options.rgbm !== undefined ? options.rgbm : this.rgbm;\n      if (options.mipmaps !== undefined) {\n        this._mipmaps = options.mipmaps;\n      } else {\n        this._mipmaps = options.autoMipmap !== undefined ? options.autoMipmap : this._mipmaps;\n      }\n      this._cubemap = options.cubemap !== undefined ? options.cubemap : this._cubemap;\n      this.fixCubemapSeams = options.fixCubemapSeams !== undefined ? options.fixCubemapSeams : this.fixCubemapSeams;\n      this._minFilter = options.minFilter !== undefined ? options.minFilter : this._minFilter;\n      this._magFilter = options.magFilter !== undefined ? options.magFilter : this._magFilter;\n      this._anisotropy = options.anisotropy !== undefined ? options.anisotropy : this._anisotropy;\n      this._addressU = options.addressU !== undefined ? options.addressU : this._addressU;\n      this._addressV = options.addressV !== undefined ? options.addressV : this._addressV;\n      this._compareOnRead = options.compareOnRead !== undefined ? options.compareOnRead : this._compareOnRead;\n      this._compareFunc = options._compareFunc !== undefined ? options._compareFunc : this._compareFunc;\n      this._flipY = options.flipY !== undefined ? options.flipY : this._flipY;\n      if (graphicsDevice.webgl2) {\n        this._depth = options.depth !== undefined ? options.depth : this._depth;\n        this._volume = options.volume !== undefined ? options.volume : this._volume;\n        this._addressW = options.addressW !== undefined ? options.addressW : this._addressW;\n      }\n    }\n    this._compressed = this._format === pc.PIXELFORMAT_DXT1 || this._format === pc.PIXELFORMAT_DXT3 || this._format === pc.PIXELFORMAT_DXT5 || this._format >= pc.PIXELFORMAT_ETC1;\n    this._invalid = false;\n    this._lockedLevel = -1;\n    this._levels = this._cubemap ? [[null, null, null, null, null, null]] : [null];\n    this.dirtyAll();\n    this._gpuSize = 0;\n    this.device.textures.push(this);\n  };\n  Object.defineProperty(Texture.prototype, \"minFilter\", {get:function() {\n    return this._minFilter;\n  }, set:function(v) {\n    if (this._minFilter !== v) {\n      this._minFilter = v;\n      this._minFilterDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"magFilter\", {get:function() {\n    return this._magFilter;\n  }, set:function(v) {\n    if (this._magFilter !== v) {\n      this._magFilter = v;\n      this._magFilterDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"addressU\", {get:function() {\n    return this._addressU;\n  }, set:function(v) {\n    if (this._addressU !== v) {\n      this._addressU = v;\n      this._addressUDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"addressV\", {get:function() {\n    return this._addressV;\n  }, set:function(v) {\n    if (this._addressV !== v) {\n      this._addressV = v;\n      this._addressVDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"addressW\", {get:function() {\n    return this._addressW;\n  }, set:function(addressW) {\n    if (!this.device.webgl2) {\n      return;\n    }\n    if (!this._volume) {\n      logWARNING(\"Can't set W addressing mode for a non-3D texture.\");\n      return;\n    }\n    if (addressW !== this._addressW) {\n      this._addressW = addressW;\n      this._addressWDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"compareOnRead\", {get:function() {\n    return this._compareOnRead;\n  }, set:function(v) {\n    if (this._compareOnRead !== v) {\n      this._compareOnRead = v;\n      this._compareModeDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"compareFunc\", {get:function() {\n    return this._compareFunc;\n  }, set:function(v) {\n    if (this._compareFunc !== v) {\n      this._compareFunc = v;\n      this._compareModeDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"autoMipmap\", {get:function() {\n    return this._mipmaps;\n  }, set:function(v) {\n    this._mipmaps = v;\n  }});\n  Object.defineProperty(Texture.prototype, \"mipmaps\", {get:function() {\n    return this._mipmaps;\n  }, set:function(v) {\n    if (this._mipmaps !== v) {\n      this._mipmaps = v;\n      this._minFilterDirty = true;\n      if (v) {\n        this._needsMipmapsUpload = true;\n      }\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"anisotropy\", {get:function() {\n    return this._anisotropy;\n  }, set:function(v) {\n    if (this._anisotropy !== v) {\n      this._anisotropy = v;\n      this._anisotropyDirty = true;\n    }\n  }});\n  Object.defineProperty(Texture.prototype, \"width\", {get:function() {\n    return this._width;\n  }});\n  Object.defineProperty(Texture.prototype, \"height\", {get:function() {\n    return this._height;\n  }});\n  Object.defineProperty(Texture.prototype, \"depth\", {get:function() {\n    return this._depth;\n  }});\n  Object.defineProperty(Texture.prototype, \"format\", {get:function() {\n    return this._format;\n  }});\n  Object.defineProperty(Texture.prototype, \"cubemap\", {get:function() {\n    return this._cubemap;\n  }});\n  Object.defineProperty(Texture.prototype, \"volume\", {get:function() {\n    return this._volume;\n  }});\n  Object.defineProperty(Texture.prototype, \"flipY\", {get:function() {\n    return this._flipY;\n  }, set:function(flipY) {\n    if (this._flipY !== flipY) {\n      this._flipY = flipY;\n      this._needsUpload = true;\n    }\n  }});\n  pc.extend(Texture.prototype, {destroy:function() {\n    var device = this.device;\n    var idx = device.textures.indexOf(this);\n    if (idx !== -1) {\n      device.textures.splice(idx, 1);\n    }\n    if (this._glTextureId) {\n      var gl = this.device.gl;\n      gl.deleteTexture(this._glTextureId);\n      this.device._vram.tex -= this._gpuSize;\n      this._glTextureId = null;\n    }\n  }, dirtyAll:function() {\n    this._glTextureId = undefined;\n    this._levelsUpdated = this._cubemap ? [[true, true, true, true, true, true]] : [true];\n    this._needsUpload = true;\n    this._needsMipmapsUpload = this._mipmaps;\n    this._mipmapsUploaded = false;\n    this._minFilterDirty = true;\n    this._magFilterDirty = true;\n    this._addressUDirty = true;\n    this._addressVDirty = true;\n    this._addressWDirty = this._volume;\n    this._anisotropyDirty = true;\n    this._compareModeDirty = true;\n  }, lock:function(options) {\n    options = options || {level:0, face:0, mode:pc.TEXTURELOCK_WRITE};\n    if (options.level === undefined) {\n      options.level = 0;\n    }\n    if (options.face === undefined) {\n      options.face = 0;\n    }\n    if (options.mode === undefined) {\n      options.mode = pc.TEXTURELOCK_WRITE;\n    }\n    this._lockedLevel = options.level;\n    if (this._levels[options.level] === null) {\n      switch(this._format) {\n        case pc.PIXELFORMAT_A8:\n        case pc.PIXELFORMAT_L8:\n          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth);\n          break;\n        case pc.PIXELFORMAT_L8_A8:\n          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 2);\n          break;\n        case pc.PIXELFORMAT_R5_G6_B5:\n        case pc.PIXELFORMAT_R5_G5_B5_A1:\n        case pc.PIXELFORMAT_R4_G4_B4_A4:\n          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth);\n          break;\n        case pc.PIXELFORMAT_R8_G8_B8:\n          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 3);\n          break;\n        case pc.PIXELFORMAT_R8_G8_B8_A8:\n          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 4);\n          break;\n        case pc.PIXELFORMAT_DXT1:\n          this._levels[options.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 8 * this._depth);\n          break;\n        case pc.PIXELFORMAT_DXT3:\n        case pc.PIXELFORMAT_DXT5:\n          this._levels[options.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 16 * this._depth);\n          break;\n        case pc.PIXELFORMAT_RGB16F:\n          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth * 3);\n          break;\n        case pc.PIXELFORMAT_RGB32F:\n          this._levels[options.level] = new Float32Array(this._width * this._height * this._depth * 3);\n          break;\n        case pc.PIXELFORMAT_RGBA16F:\n          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth * 4);\n          break;\n        case pc.PIXELFORMAT_RGBA32F:\n          this._levels[options.level] = new Float32Array(this._width * this._height * this._depth * 4);\n          break;\n      }\n    }\n    return this._levels[options.level];\n  }, setSource:function(source) {\n    var i;\n    var invalid = false;\n    var width, height;\n    if (this._cubemap) {\n      if (source[0]) {\n        width = source[0].width || 0;\n        height = source[0].height || 0;\n        for (i = 0; i < 6; i++) {\n          if (!source[i] || source[i].width !== width || source[i].height !== height || !(source[i] instanceof HTMLImageElement) && !(source[i] instanceof HTMLCanvasElement) && !(source[i] instanceof HTMLVideoElement)) {\n            invalid = true;\n            break;\n          }\n        }\n      } else {\n        invalid = true;\n      }\n      if (!invalid) {\n        for (i = 0; i < 6; i++) {\n          if (this._levels[0][i] !== source[i]) {\n            this._levelsUpdated[0][i] = true;\n          }\n        }\n      }\n    } else {\n      if (!(source instanceof HTMLImageElement) && !(source instanceof HTMLCanvasElement) && !(source instanceof HTMLVideoElement)) {\n        invalid = true;\n      }\n      if (!invalid) {\n        if (source !== this._levels[0]) {\n          this._levelsUpdated[0] = true;\n        }\n        width = source.width;\n        height = source.height;\n      }\n    }\n    if (invalid) {\n      this._width = 4;\n      this._height = 4;\n      this._pot = true;\n      if (this._cubemap) {\n        for (i = 0; i < 6; i++) {\n          this._levels[0][i] = null;\n          this._levelsUpdated[0][i] = true;\n        }\n      } else {\n        this._levels[0] = null;\n        this._levelsUpdated[0] = true;\n      }\n    } else {\n      this._width = width;\n      this._height = height;\n      this._pot = pc.math.powerOfTwo(this._width) && pc.math.powerOfTwo(this._height);\n      this._levels[0] = source;\n    }\n    if (this._invalid !== invalid || !invalid) {\n      this._invalid = invalid;\n      this.upload();\n    }\n  }, getSource:function() {\n    return this._levels[0];\n  }, unlock:function() {\n    logASSERT(this._lockedLevel !== -1, \"Attempting to unlock a texture that is not locked\");\n    this.upload();\n    this._lockedLevel = -1;\n  }, upload:function() {\n    this._needsUpload = true;\n    this._needsMipmapsUpload = this._mipmaps;\n  }, getDds:function() {\n    if (this.format !== pc.PIXELFORMAT_R8_G8_B8_A8) {\n      console.error(\"This format is not implemented yet\");\n    }\n    var fsize = 128;\n    var i = 0;\n    var j;\n    var face;\n    while (this._levels[i]) {\n      var mipSize;\n      if (!this.cubemap) {\n        mipSize = this._levels[i].length;\n        if (!mipSize) {\n          console.error(\"No byte array for mip \" + i);\n          return;\n        }\n        fsize += mipSize;\n      } else {\n        for (face = 0; face < 6; face++) {\n          if (!this._levels[i][face]) {\n            console.error(\"No level data for mip \" + i + \", face \" + face);\n            return;\n          }\n          mipSize = this._levels[i][face].length;\n          if (!mipSize) {\n            console.error(\"No byte array for mip \" + i + \", face \" + face);\n            return;\n          }\n          fsize += mipSize;\n        }\n      }\n      fsize += this._levels[i].length;\n      i++;\n    }\n    var buff = new ArrayBuffer(fsize);\n    var header = new Uint32Array(buff, 0, 128 / 4);\n    var DDS_MAGIC = 542327876;\n    var DDS_HEADER_SIZE = 124;\n    var DDS_FLAGS_REQUIRED = 1 | 2 | 4 | 4096 | 524288;\n    var DDS_FLAGS_MIPMAP = 131072;\n    var DDS_PIXELFORMAT_SIZE = 32;\n    var DDS_PIXELFLAGS_RGBA8 = 1 | 64;\n    var DDS_CAPS_REQUIRED = 4096;\n    var DDS_CAPS_MIPMAP = 4194304;\n    var DDS_CAPS_COMPLEX = 8;\n    var DDS_CAPS2_CUBEMAP = 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768;\n    var flags = DDS_FLAGS_REQUIRED;\n    if (this._levels.length > 1) {\n      flags |= DDS_FLAGS_MIPMAP;\n    }\n    var caps = DDS_CAPS_REQUIRED;\n    if (this._levels.length > 1) {\n      caps |= DDS_CAPS_MIPMAP;\n    }\n    if (this._levels.length > 1 || this.cubemap) {\n      caps |= DDS_CAPS_COMPLEX;\n    }\n    var caps2 = this.cubemap ? DDS_CAPS2_CUBEMAP : 0;\n    header[0] = DDS_MAGIC;\n    header[1] = DDS_HEADER_SIZE;\n    header[2] = flags;\n    header[3] = this.height;\n    header[4] = this.width;\n    header[5] = this.width * this.height * 4;\n    header[6] = 0;\n    header[7] = this._levels.length;\n    for (i = 0; i < 11; i++) {\n      header[8 + i] = 0;\n    }\n    header[19] = DDS_PIXELFORMAT_SIZE;\n    header[20] = DDS_PIXELFLAGS_RGBA8;\n    header[21] = 0;\n    header[22] = 32;\n    header[23] = 16711680;\n    header[24] = 65280;\n    header[25] = 255;\n    header[26] = 4278190080;\n    header[27] = caps;\n    header[28] = caps2;\n    header[29] = 0;\n    header[30] = 0;\n    header[31] = 0;\n    var offset = 128;\n    var level, mip;\n    if (!this.cubemap) {\n      for (i = 0; i < this._levels.length; i++) {\n        level = this._levels[i];\n        mip = new Uint8Array(buff, offset, level.length);\n        for (j = 0; j < level.length; j++) {\n          mip[j] = level[j];\n        }\n        offset += level.length;\n      }\n    } else {\n      for (face = 0; face < 6; face++) {\n        for (i = 0; i < this._levels.length; i++) {\n          level = this._levels[i][face];\n          mip = new Uint8Array(buff, offset, level.length);\n          for (j = 0; j < level.length; j++) {\n            mip[j] = level[j];\n          }\n          offset += level.length;\n        }\n      }\n    }\n    return buff;\n  }});\n  return {Texture:Texture};\n}());\npc.extend(pc, function() {\n  var defaultOptions = {depth:true, face:0};\n  var RenderTarget = function(options, _arg2, _arg3) {\n    if (options instanceof pc.GraphicsDevice) {\n      this._colorBuffer = _arg2;\n      options = _arg3;\n    } else {\n      this._colorBuffer = options.colorBuffer;\n    }\n    this._glFrameBuffer = null;\n    this._glDepthBuffer = null;\n    options = options !== undefined ? options : defaultOptions;\n    this._depthBuffer = options.depthBuffer;\n    this._face = options.face !== undefined ? options.face : 0;\n    if (this._depthBuffer) {\n      var format = this._depthBuffer._format;\n      if (format === pc.PIXELFORMAT_DEPTH) {\n        this._depth = true;\n        this._stencil = false;\n      } else {\n        if (format === pc.PIXELFORMAT_DEPTHSTENCIL) {\n          this._depth = true;\n          this._stencil = true;\n        } else {\n          this._depth = false;\n          this._stencil = false;\n        }\n      }\n    } else {\n      this._depth = options.depth !== undefined ? options.depth : true;\n      this._stencil = options.stencil !== undefined ? options.stencil : false;\n    }\n    this._samples = options.samples !== undefined ? options.samples : 1;\n    this.autoResolve = options.autoResolve !== undefined ? options.autoResolve : true;\n    this._glResolveFrameBuffer = null;\n    this._glMsaaColorBuffer = null;\n    this._glMsaaDepthBuffer = null;\n  };\n  RenderTarget.prototype = {destroy:function() {\n    if (!this._device) {\n      return;\n    }\n    var device = this._device;\n    var idx = device.targets.indexOf(this);\n    if (idx !== -1) {\n      device.targets.splice(idx, 1);\n    }\n    var gl = device.gl;\n    if (this._glFrameBuffer) {\n      gl.deleteFramebuffer(this._glFrameBuffer);\n      this._glFrameBuffer = null;\n    }\n    if (this._glDepthBuffer) {\n      gl.deleteRenderbuffer(this._glDepthBuffer);\n      this._glDepthBuffer = null;\n    }\n    if (this._glResolveFrameBuffer) {\n      gl.deleteFramebuffer(this._glResolveFrameBuffer);\n      this._glResolveFrameBuffer = null;\n    }\n    if (this._glMsaaColorBuffer) {\n      gl.deleteRenderbuffer(this._glMsaaColorBuffer);\n      this._glMsaaColorBuffer = null;\n    }\n    if (this._glMsaaDepthBuffer) {\n      gl.deleteRenderbuffer(this._glMsaaDepthBuffer);\n      this._glMsaaDepthBuffer = null;\n    }\n  }, resolve:function(color, depth) {\n    if (!this._device) {\n      return;\n    }\n    if (!this._device.webgl2) {\n      return;\n    }\n    var gl = this._device.gl;\n    if (color === undefined) {\n      color = true;\n    }\n    if (depth === undefined && this._depthBuffer) {\n      depth = true;\n    }\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._glFrameBuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._glResolveFrameBuffer);\n    gl.blitFramebuffer(0, 0, this.width, this.height, 0, 0, this.width, this.height, (color ? gl.COLOR_BUFFER_BIT : 0) | (depth ? gl.DEPTH_BUFFER_BIT : 0), gl.NEAREST);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._glFrameBuffer);\n  }, copy:function(source, color, depth) {\n    if (!this._device) {\n      if (source._device) {\n        this._device = source._device;\n      } else {\n        return false;\n      }\n    }\n    return this._device.copyRenderTarget(source, this, color, depth);\n  }};\n  Object.defineProperty(RenderTarget.prototype, \"colorBuffer\", {get:function() {\n    return this._colorBuffer;\n  }});\n  Object.defineProperty(RenderTarget.prototype, \"depthBuffer\", {get:function() {\n    return this._depthBuffer;\n  }});\n  Object.defineProperty(RenderTarget.prototype, \"face\", {get:function() {\n    return this._face;\n  }});\n  Object.defineProperty(RenderTarget.prototype, \"width\", {get:function() {\n    if (this._colorBuffer) {\n      return this._colorBuffer.width;\n    } else {\n      return this._depthBuffer.width;\n    }\n  }});\n  Object.defineProperty(RenderTarget.prototype, \"height\", {get:function() {\n    if (this._colorBuffer) {\n      return this._colorBuffer.height;\n    } else {\n      return this._depthBuffer.height;\n    }\n  }});\n  return {RenderTarget:RenderTarget};\n}());\npc.extend(pc, function() {\n  var ShaderInput = function(graphicsDevice, name, type, locationId) {\n    this.locationId = locationId;\n    this.scopeId = graphicsDevice.scope.resolve(name);\n    this.version = new pc.Version;\n    if (type === pc.UNIFORMTYPE_FLOAT) {\n      if (name.substr(name.length - 3) === \"[0]\") {\n        type = pc.UNIFORMTYPE_FLOATARRAY;\n      }\n    }\n    this.dataType = type;\n    this.value = [null, null, null, null];\n    this.array = [];\n  };\n  return {ShaderInput:ShaderInput};\n}());\npc.extend(pc, function() {\n  function addLineNumbers(src) {\n    var chunks = src.split(\"\\n\");\n    for (var i = 0, len = chunks.length; i < len; i++) {\n      chunks[i] = i + 1 + \":\\t\" + chunks[i];\n    }\n    return chunks.join(\"\\n\");\n  }\n  function createShader(gl, type, src) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n    return shader;\n  }\n  function createProgram(gl, vertexShader, fragmentShader) {\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    return program;\n  }\n  var Shader = function(graphicsDevice, definition) {\n    this.device = graphicsDevice;\n    this.definition = definition;\n    this._refCount = 0;\n    this.compile();\n    this.device.shaders.push(this);\n  };\n  Shader.prototype = {compile:function() {\n    this.ready = false;\n    var gl = this.device.gl;\n    this.vshader = createShader(gl, gl.VERTEX_SHADER, this.definition.vshader);\n    this.fshader = createShader(gl, gl.FRAGMENT_SHADER, this.definition.fshader);\n    this.program = createProgram(gl, this.vshader, this.fshader);\n    this.device._shaderStats.vsCompiled++;\n    this.device._shaderStats.fsCompiled++;\n    this.device._shaderStats.linked++;\n    if (this.definition.tag === pc.SHADERTAG_MATERIAL) {\n      this.device._shaderStats.materialShaders++;\n    }\n  }, link:function() {\n    var gl = this.device.gl;\n    var retValue = true;\n    if (this.device.webgl2 && this.definition.useTransformFeedback) {\n      var attrs = this.definition.attributes;\n      var outNames = [];\n      for (var attr in attrs) {\n        if (attrs.hasOwnProperty(attr)) {\n          outNames.push(\"out_\" + attr);\n        }\n      }\n      gl.transformFeedbackVaryings(this.program, outNames, gl.INTERLEAVED_ATTRIBS);\n    }\n    gl.linkProgram(this.program);\n    if (!gl.getShaderParameter(this.vshader, gl.COMPILE_STATUS)) {\n      logERROR(\"Failed to compile vertex shader:\\n\\n\" + addLineNumbers(this.definition.vshader) + \"\\n\\n\" + gl.getShaderInfoLog(this.vshader));\n      retValue = false;\n    }\n    if (!gl.getShaderParameter(this.fshader, gl.COMPILE_STATUS)) {\n      logERROR(\"Failed to compile fragment shader:\\n\\n\" + addLineNumbers(this.definition.fshader) + \"\\n\\n\" + gl.getShaderInfoLog(this.fshader));\n      retValue = false;\n    }\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      logERROR(\"Failed to link shader program. Error: \" + gl.getProgramInfoLog(this.program));\n      retValue = false;\n    }\n    gl.deleteShader(this.vshader);\n    gl.deleteShader(this.fshader);\n    this.attributes = [];\n    this.uniforms = [];\n    this.samplers = [];\n    var i = 0;\n    var info, location;\n    var _typeToPc = {};\n    _typeToPc[gl.BOOL] = pc.UNIFORMTYPE_BOOL;\n    _typeToPc[gl.INT] = pc.UNIFORMTYPE_INT;\n    _typeToPc[gl.FLOAT] = pc.UNIFORMTYPE_FLOAT;\n    _typeToPc[gl.FLOAT_VEC2] = pc.UNIFORMTYPE_VEC2;\n    _typeToPc[gl.FLOAT_VEC3] = pc.UNIFORMTYPE_VEC3;\n    _typeToPc[gl.FLOAT_VEC4] = pc.UNIFORMTYPE_VEC4;\n    _typeToPc[gl.INT_VEC2] = pc.UNIFORMTYPE_IVEC2;\n    _typeToPc[gl.INT_VEC3] = pc.UNIFORMTYPE_IVEC3;\n    _typeToPc[gl.INT_VEC4] = pc.UNIFORMTYPE_IVEC4;\n    _typeToPc[gl.BOOL_VEC2] = pc.UNIFORMTYPE_BVEC2;\n    _typeToPc[gl.BOOL_VEC3] = pc.UNIFORMTYPE_BVEC3;\n    _typeToPc[gl.BOOL_VEC4] = pc.UNIFORMTYPE_BVEC4;\n    _typeToPc[gl.FLOAT_MAT2] = pc.UNIFORMTYPE_MAT2;\n    _typeToPc[gl.FLOAT_MAT3] = pc.UNIFORMTYPE_MAT3;\n    _typeToPc[gl.FLOAT_MAT4] = pc.UNIFORMTYPE_MAT4;\n    _typeToPc[gl.SAMPLER_2D] = pc.UNIFORMTYPE_TEXTURE2D;\n    _typeToPc[gl.SAMPLER_CUBE] = pc.UNIFORMTYPE_TEXTURECUBE;\n    if (this.device.webgl2) {\n      _typeToPc[gl.SAMPLER_2D_SHADOW] = pc.UNIFORMTYPE_TEXTURE2D_SHADOW;\n      _typeToPc[gl.SAMPLER_CUBE_SHADOW] = pc.UNIFORMTYPE_TEXTURECUBE_SHADOW;\n      _typeToPc[gl.SAMPLER_3D] = pc.UNIFORMTYPE_TEXTURE3D;\n    }\n    var numAttributes = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n    while (i < numAttributes) {\n      info = gl.getActiveAttrib(this.program, i++);\n      location = gl.getAttribLocation(this.program, info.name);\n      if (this.definition.attributes[info.name] === undefined) {\n        console.error('Vertex shader attribute \"' + info.name + '\" is not mapped to a semantic in shader definition.');\n      }\n      this.attributes.push(new pc.ShaderInput(this.device, this.definition.attributes[info.name], _typeToPc[info.type], location));\n    }\n    i = 0;\n    var numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n    while (i < numUniforms) {\n      info = gl.getActiveUniform(this.program, i++);\n      location = gl.getUniformLocation(this.program, info.name);\n      if (info.type === gl.SAMPLER_2D || info.type === gl.SAMPLER_CUBE || this.device.webgl2 && (info.type === gl.SAMPLER_2D_SHADOW || info.type === gl.SAMPLER_CUBE_SHADOW || info.type === gl.SAMPLER_3D)) {\n        this.samplers.push(new pc.ShaderInput(this.device, info.name, _typeToPc[info.type], location));\n      } else {\n        this.uniforms.push(new pc.ShaderInput(this.device, info.name, _typeToPc[info.type], location));\n      }\n    }\n    this.ready = true;\n    return retValue;\n  }, destroy:function() {\n    var device = this.device;\n    var idx = device.shaders.indexOf(this);\n    if (idx !== -1) {\n      device.shaders.splice(idx, 1);\n    }\n    if (this.program) {\n      var gl = device.gl;\n      gl.deleteProgram(this.program);\n      this.program = null;\n      this.device.removeShaderFromCache(this);\n    }\n  }};\n  return {Shader:Shader};\n}());\npc.extend(pc, function() {\n  var ProgramLibrary = function(device) {\n    this._device = device;\n    this._cache = {};\n    this._generators = {};\n    this._isClearingCache = false;\n  };\n  ProgramLibrary.prototype.register = function(name, generator) {\n    if (!this.isRegistered(name)) {\n      this._generators[name] = generator;\n    }\n  };\n  ProgramLibrary.prototype.unregister = function(name) {\n    if (this.isRegistered(name)) {\n      delete this._generators[name];\n    }\n  };\n  ProgramLibrary.prototype.isRegistered = function(name) {\n    var generator = this._generators[name];\n    return generator !== undefined;\n  };\n  ProgramLibrary.prototype.getProgram = function(name, options) {\n    var generator = this._generators[name];\n    if (generator === undefined) {\n      logERROR(\"No program library functions registered for: \" + name);\n      return null;\n    }\n    var gd = this._device;\n    var key = generator.generateKey(gd, options);\n    var shader = this._cache[key];\n    if (!shader) {\n      var shaderDefinition = generator.createShaderDefinition(gd, options);\n      shader = this._cache[key] = new pc.Shader(gd, shaderDefinition);\n    }\n    return shader;\n  };\n  ProgramLibrary.prototype.clearCache = function() {\n    var cache = this._cache;\n    this._isClearingCache = true;\n    for (var key in cache) {\n      if (cache.hasOwnProperty(key)) {\n        cache[key].destroy();\n      }\n    }\n    this._cache = {};\n    this._isClearingCache = false;\n  };\n  ProgramLibrary.prototype.removeFromCache = function(shader) {\n    if (this._isClearingCache) {\n      return;\n    }\n    var cache = this._cache;\n    for (var key in cache) {\n      if (cache.hasOwnProperty(key)) {\n        if (cache[key] === shader) {\n          delete cache[key];\n          break;\n        }\n      }\n    }\n  };\n  return {ProgramLibrary:ProgramLibrary};\n}());\npc.extend(pc, function() {\n  var EVENT_RESIZE = \"resizecanvas\";\n  function UnsupportedBrowserError(message) {\n    this.name = \"UnsupportedBrowserError\";\n    this.message = message || \"\";\n  }\n  UnsupportedBrowserError.prototype = Error.prototype;\n  function ContextCreationError(message) {\n    this.name = \"ContextCreationError\";\n    this.message = message || \"\";\n  }\n  ContextCreationError.prototype = Error.prototype;\n  var _downsampleImage = function(image, size) {\n    var srcW = image.width;\n    var srcH = image.height;\n    if (srcW > size || srcH > size) {\n      var scale = size / Math.max(srcW, srcH);\n      var dstW = Math.floor(srcW * scale);\n      var dstH = Math.floor(srcH * scale);\n      console.warn(\"Image dimensions larger than max supported texture size of \" + size + \". \" + \"Resizing from \" + srcW + \", \" + srcH + \" to \" + dstW + \", \" + dstH + \".\");\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = dstW;\n      canvas.height = dstH;\n      var context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, srcW, srcH, 0, 0, dstW, dstH);\n      return canvas;\n    }\n    return image;\n  };\n  function _isIE() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var trident = navigator.userAgent.match(/Trident.*rv:11\\./);\n    return msie > 0 || !!trident;\n  }\n  var _pixelFormat2Size = null;\n  function gpuTexSize(gl, tex) {\n    if (!_pixelFormat2Size) {\n      _pixelFormat2Size = {};\n      _pixelFormat2Size[pc.PIXELFORMAT_A8] = 1;\n      _pixelFormat2Size[pc.PIXELFORMAT_L8] = 1;\n      _pixelFormat2Size[pc.PIXELFORMAT_L8_A8] = 1;\n      _pixelFormat2Size[pc.PIXELFORMAT_R5_G6_B5] = 2;\n      _pixelFormat2Size[pc.PIXELFORMAT_R5_G5_B5_A1] = 2;\n      _pixelFormat2Size[pc.PIXELFORMAT_R4_G4_B4_A4] = 2;\n      _pixelFormat2Size[pc.PIXELFORMAT_R8_G8_B8] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_R8_G8_B8_A8] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_RGB16F] = 8;\n      _pixelFormat2Size[pc.PIXELFORMAT_RGBA16F] = 8;\n      _pixelFormat2Size[pc.PIXELFORMAT_RGB32F] = 16;\n      _pixelFormat2Size[pc.PIXELFORMAT_RGBA32F] = 16;\n      _pixelFormat2Size[pc.PIXELFORMAT_R32F] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_DEPTH] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_DEPTHSTENCIL] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_111110F] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_SRGB] = 4;\n      _pixelFormat2Size[pc.PIXELFORMAT_SRGBA] = 4;\n    }\n    var mips = 1;\n    if (tex._pot && (tex._mipmaps || tex._minFilter === pc.FILTER_NEAREST_MIPMAP_NEAREST || tex._minFilter === pc.FILTER_NEAREST_MIPMAP_LINEAR || tex._minFilter === pc.FILTER_LINEAR_MIPMAP_NEAREST || tex._minFilter === pc.FILTER_LINEAR_MIPMAP_LINEAR) && !(tex._compressed && tex._levels.length === 1)) {\n      mips = Math.round(Math.log2(Math.max(tex._width, tex._height)) + 1);\n    }\n    var mipWidth = tex._width;\n    var mipHeight = tex._height;\n    var mipDepth = tex._depth;\n    var size = 0;\n    for (var i = 0; i < mips; i++) {\n      if (!tex._compressed) {\n        size += mipWidth * mipHeight * mipDepth * _pixelFormat2Size[tex._format];\n      } else {\n        if (tex._format === pc.PIXELFORMAT_ETC1) {\n          size += Math.floor((mipWidth + 3) / 4) * Math.floor((mipHeight + 3) / 4) * 8 * mipDepth;\n        } else {\n          if (tex._format === pc.PIXELFORMAT_PVRTC_2BPP_RGB_1 || tex._format === pc.PIXELFORMAT_PVRTC_2BPP_RGBA_1) {\n            size += Math.max(mipWidth, 16) * Math.max(mipHeight, 8) / 4 * mipDepth;\n          } else {\n            if (tex._format === pc.PIXELFORMAT_PVRTC_4BPP_RGB_1 || tex._format === pc.PIXELFORMAT_PVRTC_4BPP_RGBA_1) {\n              size += Math.max(mipWidth, 8) * Math.max(mipHeight, 8) / 2 * mipDepth;\n            } else {\n              var DXT_BLOCK_WIDTH = 4;\n              var DXT_BLOCK_HEIGHT = 4;\n              var blockSize = tex._format === pc.PIXELFORMAT_DXT1 ? 8 : 16;\n              var numBlocksAcross = Math.floor((mipWidth + DXT_BLOCK_WIDTH - 1) / DXT_BLOCK_WIDTH);\n              var numBlocksDown = Math.floor((mipHeight + DXT_BLOCK_HEIGHT - 1) / DXT_BLOCK_HEIGHT);\n              var numBlocks = numBlocksAcross * numBlocksDown;\n              size += numBlocks * blockSize * mipDepth;\n            }\n          }\n        }\n      }\n      mipWidth = Math.max(mipWidth * 0.5, 1);\n      mipHeight = Math.max(mipHeight * 0.5, 1);\n      mipDepth = Math.max(mipDepth * 0.5, 1);\n    }\n    if (tex._cubemap) {\n      size *= 6;\n    }\n    return size;\n  }\n  function testRenderable(gl, pixelFormat) {\n    var __texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, __texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    var __width = 2;\n    var __height = 2;\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, __width, __height, 0, gl.RGBA, pixelFormat, null);\n    var __fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, __fbo);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, __texture, 0);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n      gl.deleteTexture(__texture);\n      return false;\n    }\n    gl.deleteTexture(__texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return true;\n  }\n  function testUnsignedByteAttribute(gl) {\n    var storage = new ArrayBuffer(16);\n    var bufferId = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);\n    gl.bufferData(gl.ARRAY_BUFFER, storage, gl.STATIC_DRAW);\n    gl.getError();\n    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, false, 4, 0);\n    var supported = gl.getError() === 0;\n    gl.deleteBuffer(bufferId);\n    return supported;\n  }\n  var GraphicsDevice = function(canvas, options) {\n    var i;\n    this.canvas = canvas;\n    this.shader = null;\n    this.indexBuffer = null;\n    this.vertexBuffers = [];\n    this.vbOffsets = [];\n    this._enableAutoInstancing = false;\n    this.autoInstancingMaxObjects = 16384;\n    this.attributesInvalidated = true;\n    this.boundBuffer = null;\n    this.instancedAttribs = {};\n    this.enabledAttributes = {};\n    this.transformFeedbackBuffer = null;\n    this.activeFramebuffer = null;\n    this.activeTexture = 0;\n    this.textureUnits = [];\n    this._maxPixelRatio = 1;\n    this.renderTarget = null;\n    this.feedback = null;\n    this._width = 0;\n    this._height = 0;\n    this.updateClientRect();\n    if (!window.WebGLRenderingContext) {\n      throw new pc.UnsupportedBrowserError;\n    }\n    this.shaders = [];\n    this.buffers = [];\n    this.textures = [];\n    this.targets = [];\n    this.contextLost = false;\n    canvas.addEventListener(\"webglcontextlost\", function(event) {\n      event.preventDefault();\n      this.contextLost = true;\n      this.fire(\"devicelost\");\n    }.bind(this), false);\n    canvas.addEventListener(\"webglcontextrestored\", function() {\n      this.initializeContext();\n      this.contextLost = false;\n      this.fire(\"devicerestored\");\n    }.bind(this), false);\n    var preferWebGl2 = options && options.preferWebGl2 !== undefined ? options.preferWebGl2 : true;\n    var names = preferWebGl2 ? [\"webgl2\", \"experimental-webgl2\", \"webgl\", \"experimental-webgl\"] : [\"webgl\", \"experimental-webgl\"];\n    var gl = null;\n    options = options || {};\n    options.stencil = true;\n    for (i = 0; i < names.length; i++) {\n      try {\n        gl = canvas.getContext(names[i], options);\n      } catch (e) {\n      }\n      if (gl) {\n        this.webgl2 = preferWebGl2 && i < 2;\n        break;\n      }\n    }\n    if (!gl) {\n      throw new pc.ContextCreationError;\n    }\n    this.gl = gl;\n    this.initializeExtensions();\n    this.initializeCapabilities();\n    this.initializeRenderState();\n    (function() {\n      this.defaultClearOptions = {color:[0, 0, 0, 1], depth:1, stencil:0, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH};\n      this.glAddress = [gl.REPEAT, gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT];\n      this.glBlendEquation = [gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, this.webgl2 ? gl.MIN : this.extBlendMinmax ? this.extBlendMinmax.MIN_EXT : gl.FUNC_ADD, this.webgl2 ? gl.MAX : this.extBlendMinmax ? this.extBlendMinmax.MAX_EXT : gl.FUNC_ADD];\n      this.glBlendFunction = [gl.ZERO, gl.ONE, gl.SRC_COLOR, gl.ONE_MINUS_SRC_COLOR, gl.DST_COLOR, gl.ONE_MINUS_DST_COLOR, gl.SRC_ALPHA, gl.SRC_ALPHA_SATURATE, gl.ONE_MINUS_SRC_ALPHA, gl.DST_ALPHA, gl.ONE_MINUS_DST_ALPHA];\n      this.glComparison = [gl.NEVER, gl.LESS, gl.EQUAL, gl.LEQUAL, gl.GREATER, gl.NOTEQUAL, gl.GEQUAL, gl.ALWAYS];\n      this.glStencilOp = [gl.KEEP, gl.ZERO, gl.REPLACE, gl.INCR, gl.INCR_WRAP, gl.DECR, gl.DECR_WRAP, gl.INVERT];\n      this.glClearFlag = [0, gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.COLOR_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT];\n      this.glCull = [0, gl.BACK, gl.FRONT, gl.FRONT_AND_BACK];\n      this.glFilter = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];\n      this.glPrimitive = [gl.POINTS, gl.LINES, gl.LINE_LOOP, gl.LINE_STRIP, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN];\n      this.glType = [gl.BYTE, gl.UNSIGNED_BYTE, gl.SHORT, gl.UNSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT, gl.FLOAT];\n      var scopeX, scopeY, scopeZ, scopeW;\n      var uniformValue;\n      this.commitFunction = [];\n      this.commitFunction[pc.UNIFORMTYPE_BOOL] = function(uniform, value) {\n        if (uniform.value !== value) {\n          gl.uniform1i(uniform.locationId, value);\n          uniform.value = value;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_INT] = this.commitFunction[pc.UNIFORMTYPE_BOOL];\n      this.commitFunction[pc.UNIFORMTYPE_FLOAT] = function(uniform, value) {\n        if (uniform.value !== value) {\n          gl.uniform1f(uniform.locationId, value);\n          uniform.value = value;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_VEC2] = function(uniform, value) {\n        uniformValue = uniform.value;\n        scopeX = value[0];\n        scopeY = value[1];\n        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY) {\n          gl.uniform2fv(uniform.locationId, value);\n          uniformValue[0] = scopeX;\n          uniformValue[1] = scopeY;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_VEC3] = function(uniform, value) {\n        uniformValue = uniform.value;\n        scopeX = value[0];\n        scopeY = value[1];\n        scopeZ = value[2];\n        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ) {\n          gl.uniform3fv(uniform.locationId, value);\n          uniformValue[0] = scopeX;\n          uniformValue[1] = scopeY;\n          uniformValue[2] = scopeZ;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_VEC4] = function(uniform, value) {\n        uniformValue = uniform.value;\n        scopeX = value[0];\n        scopeY = value[1];\n        scopeZ = value[2];\n        scopeW = value[3];\n        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ || uniformValue[3] !== scopeW) {\n          gl.uniform4fv(uniform.locationId, value);\n          uniformValue[0] = scopeX;\n          uniformValue[1] = scopeY;\n          uniformValue[2] = scopeZ;\n          uniformValue[3] = scopeW;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_IVEC2] = function(uniform, value) {\n        uniformValue = uniform.value;\n        scopeX = value[0];\n        scopeY = value[1];\n        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY) {\n          gl.uniform2iv(uniform.locationId, value);\n          uniformValue[0] = scopeX;\n          uniformValue[1] = scopeY;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_BVEC2] = this.commitFunction[pc.UNIFORMTYPE_IVEC2];\n      this.commitFunction[pc.UNIFORMTYPE_IVEC3] = function(uniform, value) {\n        uniformValue = uniform.value;\n        scopeX = value[0];\n        scopeY = value[1];\n        scopeZ = value[2];\n        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ) {\n          gl.uniform3iv(uniform.locationId, value);\n          uniformValue[0] = scopeX;\n          uniformValue[1] = scopeY;\n          uniformValue[2] = scopeZ;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_BVEC3] = this.commitFunction[pc.UNIFORMTYPE_IVEC3];\n      this.commitFunction[pc.UNIFORMTYPE_IVEC4] = function(uniform, value) {\n        uniformValue = uniform.value;\n        scopeX = value[0];\n        scopeY = value[1];\n        scopeZ = value[2];\n        scopeW = value[3];\n        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ || uniformValue[3] !== scopeW) {\n          gl.uniform4iv(uniform.locationId, value);\n          uniformValue[0] = scopeX;\n          uniformValue[1] = scopeY;\n          uniformValue[2] = scopeZ;\n          uniformValue[3] = scopeW;\n        }\n      };\n      this.commitFunction[pc.UNIFORMTYPE_BVEC4] = this.commitFunction[pc.UNIFORMTYPE_IVEC4];\n      this.commitFunction[pc.UNIFORMTYPE_MAT2] = function(uniform, value) {\n        gl.uniformMatrix2fv(uniform.locationId, false, value);\n      };\n      this.commitFunction[pc.UNIFORMTYPE_MAT3] = function(uniform, value) {\n        gl.uniformMatrix3fv(uniform.locationId, false, value);\n      };\n      this.commitFunction[pc.UNIFORMTYPE_MAT4] = function(uniform, value) {\n        gl.uniformMatrix4fv(uniform.locationId, false, value);\n      };\n      this.commitFunction[pc.UNIFORMTYPE_FLOATARRAY] = function(uniform, value) {\n        gl.uniform1fv(uniform.locationId, value);\n      };\n      this.scope = new pc.ScopeSpace(\"Device\");\n      this.programLib = new pc.ProgramLibrary(this);\n      for (var generator in pc.programlib) {\n        this.programLib.register(generator, pc.programlib[generator]);\n      }\n      pc.events.attach(this);\n      this.supportsBoneTextures = this.extTextureFloat && this.maxVertexTextures > 0;\n      this.useTexCubeLod = this.extTextureLod && this.samplerCount < 16;\n      var numUniforms = this.vertexUniformsCount;\n      numUniforms -= 4 * 4;\n      numUniforms -= 8;\n      numUniforms -= 1;\n      numUniforms -= 4 * 4;\n      this.boneLimit = Math.floor(numUniforms / 4);\n      this.boneLimit = Math.min(this.boneLimit, 128);\n      if (this.unmaskedRenderer === \"Mali-450 MP\") {\n        this.boneLimit = 34;\n      }\n      if (this.unmaskedRenderer === \"Apple A8 GPU\") {\n        this.forceCpuParticles = true;\n      }\n      this._drawCallsPerFrame = 0;\n      this._shaderSwitchesPerFrame = 0;\n      this._primsPerFrame = [];\n      for (i = pc.PRIMITIVE_POINTS; i <= pc.PRIMITIVE_TRIFAN; i++) {\n        this._primsPerFrame[i] = 0;\n      }\n      this._renderTargetCreationTime = 0;\n      this._vram = {tex:0, vb:0, ib:0};\n      this._shaderStats = {vsCompiled:0, fsCompiled:0, linked:0, materialShaders:0, compileTime:0};\n      this.supportsUnsignedByte = testUnsignedByteAttribute(gl);\n      this.constantTexSource = this.scope.resolve(\"source\");\n      if (!pc._benchmarked) {\n        if (this.extTextureFloat) {\n          if (this.webgl2) {\n            this.extTextureFloatRenderable = this.extColorBufferFloat;\n          } else {\n            this.extTextureFloatRenderable = testRenderable(gl, gl.FLOAT);\n          }\n        }\n        if (this.extTextureHalfFloat) {\n          if (this.webgl2) {\n            this.extTextureHalfFloatRenderable = this.extColorBufferFloat;\n          } else {\n            this.extTextureHalfFloatRenderable = testRenderable(gl, this.extTextureHalfFloat.HALF_FLOAT_OES);\n          }\n        }\n        if (this.extTextureFloatRenderable) {\n          var device = this;\n          var chunks = pc.shaderChunks;\n          var test1 = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.precisionTestPS, \"ptest1\");\n          var test2 = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.precisionTest2PS, \"ptest2\");\n          var size = 1;\n          var tex = new pc.Texture(device, {format:pc.PIXELFORMAT_RGBA32F, width:size, height:size, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});\n          var targ = new pc.RenderTarget(device, tex, {depth:false});\n          pc.drawQuadWithShader(device, targ, test1);\n          var tex2 = new pc.Texture(device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:size, height:size, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});\n          var targ2 = new pc.RenderTarget(device, tex2, {depth:false});\n          this.constantTexSource.setValue(tex);\n          pc.drawQuadWithShader(device, targ2, test2);\n          var pixels = new Uint8Array(size * size * 4);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, targ2._glFrameBuffer);\n          gl.readPixels(0, 0, size, size, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n          var x = pixels[0] / 255.0;\n          var y = pixels[1] / 255.0;\n          var z = pixels[2] / 255.0;\n          var w = pixels[3] / 255.0;\n          var f = x / (256.0 * 256.0 * 256.0) + y / (256.0 * 256.0) + z / 256.0 + w;\n          this.extTextureFloatHighPrecision = f === 0.0;\n          tex.destroy();\n          targ.destroy();\n          tex2.destroy();\n          targ2.destroy();\n          pc.destroyPostEffectQuad();\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n        pc.extTextureFloatRenderable = this.extTextureFloatRenderable;\n        pc.extTextureHalfFloatRenderable = this.extTextureHalfFloatRenderable;\n        pc.extTextureFloatHighPrecision = this.extTextureFloatHighPrecision;\n        pc._benchmarked = true;\n      } else {\n        this.extTextureFloatRenderable = pc.extTextureFloatRenderable;\n        this.extTextureHalfFloatRenderable = pc.extTextureHalfFloatRenderable;\n        this.extTextureFloatHighPrecision = pc.extTextureFloatHighPrecision;\n      }\n    }).call(this);\n  };\n  GraphicsDevice.prototype = {getPrecision:function() {\n    var gl = this.gl;\n    var precision = \"highp\";\n    if (gl.getShaderPrecisionFormat) {\n      var vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);\n      var vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);\n      var fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n      var fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);\n      var highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0;\n      var mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;\n      if (!highpAvailable) {\n        if (mediumpAvailable) {\n          precision = \"mediump\";\n        } else {\n          precision = \"lowp\";\n        }\n      }\n    }\n    return precision;\n  }, initializeExtensions:function() {\n    var gl = this.gl;\n    if (this.webgl2) {\n      this.extBlendMinmax = true;\n      this.extDrawBuffers = true;\n      this.extInstancing = true;\n      this.extStandardDerivatives = true;\n      this.extTextureFloat = true;\n      this.extTextureHalfFloat = true;\n      this.extTextureHalfFloatLinear = true;\n      this.extTextureLod = true;\n      this.extUintElement = true;\n    } else {\n      this.extBlendMinmax = gl.getExtension(\"EXT_blend_minmax\");\n      this.extDrawBuffers = gl.getExtension(\"EXT_draw_buffers\");\n      this.extInstancing = gl.getExtension(\"ANGLE_instanced_arrays\");\n      this.extStandardDerivatives = gl.getExtension(\"OES_standard_derivatives\");\n      this.extTextureFloat = gl.getExtension(\"OES_texture_float\");\n      this.extTextureHalfFloat = gl.getExtension(\"OES_texture_half_float\");\n      this.extTextureHalfFloatLinear = gl.getExtension(\"OES_texture_half_float_linear\");\n      this.extTextureLod = gl.getExtension(\"EXT_shader_texture_lod\");\n      this.extUintElement = gl.getExtension(\"OES_element_index_uint\");\n    }\n    this.extRendererInfo = gl.getExtension(\"WEBGL_debug_renderer_info\");\n    this.extTextureFloatLinear = gl.getExtension(\"OES_texture_float_linear\");\n    this.extColorBufferFloat = gl.getExtension(\"EXT_color_buffer_float\");\n    this.extTextureFilterAnisotropic = gl.getExtension(\"EXT_texture_filter_anisotropic\") || gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");\n    this.extCompressedTextureETC1 = gl.getExtension(\"WEBGL_compressed_texture_etc1\");\n    this.extCompressedTexturePVRTC = gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n    this.extCompressedTextureS3TC = gl.getExtension(\"WEBGL_compressed_texture_s3tc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");\n    if (this.extCompressedTextureS3TC && _isIE()) {\n      this.extCompressedTextureS3TC = null;\n    }\n  }, initializeCapabilities:function() {\n    var gl = this.gl;\n    this.maxPrecision = this.precision = this.getPrecision();\n    var contextAttribs = gl.getContextAttributes();\n    this.supportsMsaa = contextAttribs.antialias;\n    this.supportsStencil = contextAttribs.stencil;\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    this.maxRenderBufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n    this.samplerCount = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    this.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    this.vertexUniformsCount = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this.fragmentUniformsCount = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n    this.unmaskedRenderer = this.extRendererInfo ? gl.getParameter(this.extRendererInfo.UNMASKED_RENDERER_WEBGL) : \"\";\n    this.unmaskedVendor = this.extRendererInfo ? gl.getParameter(this.extRendererInfo.UNMASKED_VENDOR_WEBGL) : \"\";\n    if (this.webgl2) {\n      this.maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);\n      this.maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);\n      this.maxVolumeSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);\n    } else {\n      this.maxDrawBuffers = this.extDrawBuffers ? gl.getParameter(this.extDrawBuffers.MAX_DRAW_BUFFERS_EXT) : 1;\n      this.maxColorAttachments = this.extDrawBuffers ? gl.getParameter(this.extDrawBuffers.MAX_COLOR_ATTACHMENTS_EXT) : 1;\n      this.maxVolumeSize = 1;\n    }\n  }, initializeRenderState:function() {\n    var gl = this.gl;\n    this.blending = false;\n    gl.disable(gl.BLEND);\n    this.blendSrc = pc.BLENDMODE_ONE;\n    this.blendDst = pc.BLENDMODE_ZERO;\n    this.blendSrcAlpha = pc.BLENDMODE_ONE;\n    this.blendDstAlpha = pc.BLENDMODE_ZERO;\n    this.separateAlphaBlend = false;\n    this.blendEquation = pc.BLENDEQUATION_ADD;\n    this.blendAlphaEquation = pc.BLENDEQUATION_ADD;\n    this.separateAlphaEquation = false;\n    gl.blendFunc(gl.ONE, gl.ZERO);\n    gl.blendEquation(gl.FUNC_ADD);\n    this.writeRed = true;\n    this.writeGreen = true;\n    this.writeBlue = true;\n    this.writeAlpha = true;\n    gl.colorMask(true, true, true, true);\n    this.cullMode = pc.CULLFACE_BACK;\n    gl.enable(gl.CULL_FACE);\n    gl.cullFace(gl.BACK);\n    this.depthTest = true;\n    gl.enable(gl.DEPTH_TEST);\n    this.depthFunc = pc.FUNC_LESSEQUAL;\n    gl.depthFunc(gl.LEQUAL);\n    this.depthWrite = true;\n    gl.depthMask(true);\n    this.stencil = false;\n    gl.disable(gl.STENCIL_TEST);\n    this.stencilFuncFront = this.stencilFuncBack = pc.FUNC_ALWAYS;\n    this.stencilRefFront = this.stencilRefBack = 0;\n    this.stencilMaskFront = this.stencilMaskBack = 255;\n    gl.stencilFunc(gl.ALWAYS, 0, 255);\n    this.stencilFailFront = this.stencilFailBack = pc.STENCILOP_KEEP;\n    this.stencilZfailFront = this.stencilZfailBack = pc.STENCILOP_KEEP;\n    this.stencilZpassFront = this.stencilZpassBack = pc.STENCILOP_KEEP;\n    this.stencilWriteMaskFront = 255;\n    this.stencilWriteMaskBack = 255;\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    gl.stencilMask(255);\n    this.alphaToCoverage = false;\n    if (this.webgl2) {\n      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      gl.disable(gl.RASTERIZER_DISCARD);\n    }\n    this.raster = true;\n    this.depthBiasEnabled = false;\n    gl.disable(gl.POLYGON_OFFSET_FILL);\n    this.clearDepth = 1;\n    gl.clearDepth(1);\n    this.clearRed = 0;\n    this.clearBlue = 0;\n    this.clearGreen = 0;\n    this.clearAlpha = 0;\n    gl.clearColor(0, 0, 0, 0);\n    this.clearStencil = 0;\n    gl.clearStencil(0);\n    this.vx = this.vy = this.vw = this.vh = 0;\n    this.sx = this.sy = this.sw = this.sh = 0;\n    if (this.webgl2) {\n      gl.hint(gl.FRAGMENT_SHADER_DERIVATIVE_HINT, gl.NICEST);\n    } else {\n      if (this.extStandardDerivatives) {\n        gl.hint(this.extStandardDerivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl.NICEST);\n      }\n    }\n    gl.enable(gl.SCISSOR_TEST);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n  }, initializeContext:function() {\n    this.initializeExtensions();\n    this.initializeCapabilities();\n    this.initializeRenderState();\n    var i, len;\n    for (i = 0, len = this.shaders.length; i < len; i++) {\n      this.shaders[i].compile();\n    }\n    this.shader = null;\n    for (i = 0, len = this.buffers.length; i < len; i++) {\n      this.buffers[i].bufferId = undefined;\n      this.buffers[i].unlock();\n    }\n    this.boundBuffer = null;\n    this.indexBuffer = null;\n    this.attributesInvalidated = true;\n    this.enabledAttributes = {};\n    this.vertexBuffers = [];\n    for (i = 0, len = this.textures.length; i < len; i++) {\n      var texture = this.textures[i];\n      texture.dirtyAll();\n    }\n    this.activeTexture = 0;\n    this.textureUnits = [];\n    for (i = 0, len = this.targets.length; i < len; i++) {\n      this.targets[i]._glFrameBuffer = undefined;\n      this.targets[i]._glDepthBuffer = undefined;\n      this.targets[i]._glResolveFrameBuffer = undefined;\n      this.targets[i]._glMsaaColorBuffer = undefined;\n      this.targets[i]._glMsaaDepthBuffer = undefined;\n    }\n    this.renderTarget = null;\n    this.activeFramebuffer = null;\n    this.feedback = null;\n    this.transformFeedbackBuffer = null;\n  }, updateClientRect:function() {\n    this.clientRect = this.canvas.getBoundingClientRect();\n  }, setViewport:function(x, y, w, h) {\n    if (this.vx !== x || this.vy !== y || this.vw !== w || this.vh !== h) {\n      this.gl.viewport(x, y, w, h);\n      this.vx = x;\n      this.vy = y;\n      this.vw = w;\n      this.vh = h;\n    }\n  }, setScissor:function(x, y, w, h) {\n    if (this.sx !== x || this.sy !== y || this.sw !== w || this.sh !== h) {\n      this.gl.scissor(x, y, w, h);\n      this.sx = x;\n      this.sy = y;\n      this.sw = w;\n      this.sh = h;\n    }\n  }, getProgramLibrary:function() {\n    return this.programLib;\n  }, setProgramLibrary:function(programLib) {\n    this.programLib = programLib;\n  }, setFramebuffer:function(fb) {\n    if (this.activeFramebuffer !== fb) {\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb);\n      this.activeFramebuffer = fb;\n    }\n  }, _checkFbo:function() {\n    var gl = this.gl;\n    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    switch(status) {\n      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n        console.error(\"ERROR: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\");\n        break;\n      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n        console.error(\"ERROR: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\");\n        break;\n      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n        console.error(\"ERROR: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\");\n        break;\n      case gl.FRAMEBUFFER_UNSUPPORTED:\n        console.error(\"ERROR: FRAMEBUFFER_UNSUPPORTED\");\n        break;\n      case gl.FRAMEBUFFER_COMPLETE:\n        break;\n      default:\n        break;\n    }\n  }, copyRenderTarget:function(source, dest, color, depth) {\n    var gl = this.gl;\n    if (!this.webgl2 && depth) {\n      return false;\n    }\n    if (color) {\n      if (!dest) {\n        if (!source._colorBuffer) {\n          return false;\n        }\n      } else {\n        if (!source._colorBuffer || !dest._colorBuffer) {\n          return false;\n        }\n        if (source._colorBuffer._format !== dest._colorBuffer._format) {\n          return false;\n        }\n      }\n    }\n    if (depth) {\n      if (!source._depthBuffer || !dest._depthBuffer) {\n        return false;\n      }\n      if (source._depthBuffer._format !== dest._depthBuffer._format) {\n        return false;\n      }\n    }\n    if (this.webgl2 && dest) {\n      var prevRt = this.renderTarget;\n      this.renderTarget = dest;\n      this.updateBegin();\n      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, source ? source._glFrameBuffer : null);\n      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dest._glFrameBuffer);\n      var w = source ? source.width : dest.width;\n      var h = source ? source.height : dest.height;\n      gl.blitFramebuffer(0, 0, w, h, 0, 0, w, h, (color ? gl.COLOR_BUFFER_BIT : 0) | (depth ? gl.DEPTH_BUFFER_BIT : 0), gl.NEAREST);\n      this.renderTarget = prevRt;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, prevRt ? prevRt._glFrameBuffer : null);\n    } else {\n      if (!this._copyShader) {\n        var chunks = pc.shaderChunks;\n        this._copyShader = chunks.createShaderFromCode(this, chunks.fullscreenQuadVS, chunks.outputTex2DPS, \"outputTex2D\");\n      }\n      this.constantTexSource.setValue(source._colorBuffer);\n      pc.drawQuadWithShader(this, dest, this._copyShader);\n    }\n    return true;\n  }, updateBegin:function() {\n    var gl = this.gl;\n    this.boundBuffer = null;\n    this.indexBuffer = null;\n    var target = this.renderTarget;\n    if (target) {\n      if (!target._glFrameBuffer) {\n        target._device = this;\n        target._glFrameBuffer = gl.createFramebuffer();\n        this.setFramebuffer(target._glFrameBuffer);\n        var colorBuffer = target._colorBuffer;\n        if (colorBuffer) {\n          if (!colorBuffer._glTextureId) {\n            colorBuffer._width = Math.min(colorBuffer.width, this.maxRenderBufferSize);\n            colorBuffer._height = Math.min(colorBuffer.height, this.maxRenderBufferSize);\n            this.setTexture(colorBuffer, 0);\n          }\n          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, colorBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, colorBuffer._glTextureId, 0);\n        }\n        var depthBuffer = target._depthBuffer;\n        if (depthBuffer && this.webgl2) {\n          if (!depthBuffer._glTextureId) {\n            depthBuffer._width = Math.min(depthBuffer.width, this.maxRenderBufferSize);\n            depthBuffer._height = Math.min(depthBuffer.height, this.maxRenderBufferSize);\n            this.setTexture(depthBuffer, 0);\n          }\n          if (target._stencil) {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, depthBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, target._depthBuffer._glTextureId, 0);\n          } else {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, depthBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, target._depthBuffer._glTextureId, 0);\n          }\n        } else {\n          if (target._depth) {\n            var willRenderMsaa = target._samples > 1 && this.webgl2;\n            if (!willRenderMsaa) {\n              if (!target._glDepthBuffer) {\n                target._glDepthBuffer = gl.createRenderbuffer();\n              }\n              gl.bindRenderbuffer(gl.RENDERBUFFER, target._glDepthBuffer);\n              if (target._stencil) {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, target.width, target.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, target._glDepthBuffer);\n              } else {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target._glDepthBuffer);\n              }\n              gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n            }\n          }\n        }\n        if (this.webgl2 && target._samples > 1) {\n          target._glResolveFrameBuffer = target._glFrameBuffer;\n          target._glFrameBuffer = gl.createFramebuffer();\n          this.setFramebuffer(target._glFrameBuffer);\n          if (colorBuffer) {\n            if (!target._glMsaaColorBuffer) {\n              target._glMsaaColorBuffer = gl.createRenderbuffer();\n            }\n            gl.bindRenderbuffer(gl.RENDERBUFFER, target._glMsaaColorBuffer);\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, colorBuffer._glInternalFormat, target.width, target.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, target._glMsaaColorBuffer);\n          }\n          if (target._depth) {\n            if (!target._glMsaaDepthBuffer) {\n              target._glMsaaDepthBuffer = gl.createRenderbuffer();\n            }\n            gl.bindRenderbuffer(gl.RENDERBUFFER, target._glMsaaDepthBuffer);\n            if (target._stencil) {\n              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, gl.DEPTH24_STENCIL8, target.width, target.height);\n              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, target._glMsaaDepthBuffer);\n            } else {\n              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, gl.DEPTH_COMPONENT32F, target.width, target.height);\n              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target._glMsaaDepthBuffer);\n            }\n          }\n        }\n        this.targets.push(target);\n      } else {\n        this.setFramebuffer(target._glFrameBuffer);\n      }\n    } else {\n      this.setFramebuffer(null);\n    }\n    for (var i = 0; i < 16; i++) {\n      this.textureUnits[i] = null;\n    }\n  }, updateEnd:function() {\n    var gl = this.gl;\n    var target = this.renderTarget;\n    if (target) {\n      var colorBuffer = target._colorBuffer;\n      if (colorBuffer && colorBuffer._glTextureId && colorBuffer.mipmaps && colorBuffer._pot) {\n        gl.bindTexture(colorBuffer._glTarget, colorBuffer._glTextureId);\n        gl.generateMipmap(colorBuffer._glTarget);\n      }\n      if (this.webgl2 && target._samples > 1 && target.autoResolve) {\n        target.resolve();\n      }\n    }\n  }, initializeTexture:function(texture) {\n    var gl = this.gl;\n    var ext;\n    texture._glTextureId = gl.createTexture();\n    texture._glTarget = texture._cubemap ? gl.TEXTURE_CUBE_MAP : texture._volume ? gl.TEXTURE_3D : gl.TEXTURE_2D;\n    switch(texture._format) {\n      case pc.PIXELFORMAT_A8:\n        texture._glFormat = gl.ALPHA;\n        texture._glInternalFormat = gl.ALPHA;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n      case pc.PIXELFORMAT_L8:\n        texture._glFormat = gl.LUMINANCE;\n        texture._glInternalFormat = gl.LUMINANCE;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n      case pc.PIXELFORMAT_L8_A8:\n        texture._glFormat = gl.LUMINANCE_ALPHA;\n        texture._glInternalFormat = gl.LUMINANCE_ALPHA;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n      case pc.PIXELFORMAT_R5_G6_B5:\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = gl.RGB;\n        texture._glPixelType = gl.UNSIGNED_SHORT_5_6_5;\n        break;\n      case pc.PIXELFORMAT_R5_G5_B5_A1:\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = gl.RGBA;\n        texture._glPixelType = gl.UNSIGNED_SHORT_5_5_5_1;\n        break;\n      case pc.PIXELFORMAT_R4_G4_B4_A4:\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = gl.RGBA;\n        texture._glPixelType = gl.UNSIGNED_SHORT_4_4_4_4;\n        break;\n      case pc.PIXELFORMAT_R8_G8_B8:\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = this.webgl2 ? gl.RGB8 : gl.RGB;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n      case pc.PIXELFORMAT_R8_G8_B8_A8:\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = this.webgl2 ? gl.RGBA8 : gl.RGBA;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n      case pc.PIXELFORMAT_DXT1:\n        ext = this.extCompressedTextureS3TC;\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n        break;\n      case pc.PIXELFORMAT_DXT3:\n        ext = this.extCompressedTextureS3TC;\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = ext.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n        break;\n      case pc.PIXELFORMAT_DXT5:\n        ext = this.extCompressedTextureS3TC;\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = ext.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        break;\n      case pc.PIXELFORMAT_ETC1:\n        ext = this.extCompressedTextureETC1;\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = ext.COMPRESSED_RGB_ETC1_WEBGL;\n        break;\n      case pc.PIXELFORMAT_PVRTC_2BPP_RGB_1:\n        ext = this.extCompressedTexturePVRTC;\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = ext.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n        break;\n      case pc.PIXELFORMAT_PVRTC_2BPP_RGBA_1:\n        ext = this.extCompressedTexturePVRTC;\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = ext.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n        break;\n      case pc.PIXELFORMAT_PVRTC_4BPP_RGB_1:\n        ext = this.extCompressedTexturePVRTC;\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = ext.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n        break;\n      case pc.PIXELFORMAT_PVRTC_4BPP_RGBA_1:\n        ext = this.extCompressedTexturePVRTC;\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = ext.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n        break;\n      case pc.PIXELFORMAT_RGB16F:\n        ext = this.extTextureHalfFloat;\n        texture._glFormat = gl.RGB;\n        if (this.webgl2) {\n          texture._glInternalFormat = gl.RGB16F;\n          texture._glPixelType = gl.HALF_FLOAT;\n        } else {\n          texture._glInternalFormat = gl.RGB;\n          texture._glPixelType = ext.HALF_FLOAT_OES;\n        }\n        break;\n      case pc.PIXELFORMAT_RGBA16F:\n        ext = this.extTextureHalfFloat;\n        texture._glFormat = gl.RGBA;\n        if (this.webgl2) {\n          texture._glInternalFormat = gl.RGBA16F;\n          texture._glPixelType = gl.HALF_FLOAT;\n        } else {\n          texture._glInternalFormat = gl.RGBA;\n          texture._glPixelType = ext.HALF_FLOAT_OES;\n        }\n        break;\n      case pc.PIXELFORMAT_RGB32F:\n        texture._glFormat = gl.RGB;\n        if (this.webgl2) {\n          texture._glInternalFormat = gl.RGB32F;\n        } else {\n          texture._glInternalFormat = gl.RGB;\n        }\n        texture._glPixelType = gl.FLOAT;\n        break;\n      case pc.PIXELFORMAT_RGBA32F:\n        texture._glFormat = gl.RGBA;\n        if (this.webgl2) {\n          texture._glInternalFormat = gl.RGBA32F;\n        } else {\n          texture._glInternalFormat = gl.RGBA;\n        }\n        texture._glPixelType = gl.FLOAT;\n        break;\n      case pc.PIXELFORMAT_R32F:\n        texture._glFormat = gl.RED;\n        texture._glInternalFormat = gl.R32F;\n        texture._glPixelType = gl.FLOAT;\n        break;\n      case pc.PIXELFORMAT_DEPTH:\n        if (this.webgl2) {\n          texture._glFormat = gl.DEPTH_COMPONENT;\n          texture._glInternalFormat = gl.DEPTH_COMPONENT32F;\n          texture._glPixelType = gl.FLOAT;\n        } else {\n          texture._glFormat = gl.DEPTH_COMPONENT;\n          texture._glInternalFormat = gl.DEPTH_COMPONENT;\n          texture._glPixelType = gl.UNSIGNED_SHORT;\n        }\n        break;\n      case pc.PIXELFORMAT_DEPTHSTENCIL:\n        texture._glFormat = gl.DEPTH_STENCIL;\n        texture._glInternalFormat = gl.DEPTH24_STENCIL8;\n        texture._glPixelType = gl.UNSIGNED_INT_24_8;\n        break;\n      case pc.PIXELFORMAT_111110F:\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = gl.R11F_G11F_B10F;\n        texture._glPixelType = gl.FLOAT;\n        break;\n      case pc.PIXELFORMAT_SRGB:\n        texture._glFormat = gl.RGB;\n        texture._glInternalFormat = gl.SRGB8;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n      case pc.PIXELFORMAT_SRGBA:\n        texture._glFormat = gl.RGBA;\n        texture._glInternalFormat = gl.SRGB8_ALPHA8;\n        texture._glPixelType = gl.UNSIGNED_BYTE;\n        break;\n    }\n  }, uploadTexture:function(texture) {\n    var gl = this.gl;\n    if (!texture._needsUpload && (texture._needsMipmapsUpload && texture._mipmapsUploaded || !texture._pot)) {\n      return;\n    }\n    var mipLevel = 0;\n    var mipObject;\n    var resMult;\n    while (texture._levels[mipLevel] || mipLevel === 0) {\n      if (!texture._needsUpload && mipLevel === 0) {\n        mipLevel++;\n        continue;\n      } else {\n        if (mipLevel && (!texture._needsMipmapsUpload || !texture._mipmaps)) {\n          break;\n        }\n      }\n      mipObject = texture._levels[mipLevel];\n      if (mipLevel == 1 && !texture._compressed) {\n        gl.generateMipmap(texture._glTarget);\n        texture._mipmapsUploaded = true;\n      }\n      if (texture._cubemap) {\n        var face;\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        if (mipObject[0] instanceof HTMLCanvasElement || mipObject[0] instanceof HTMLImageElement || mipObject[0] instanceof HTMLVideoElement) {\n          for (face = 0; face < 6; face++) {\n            if (!texture._levelsUpdated[0][face]) {\n              continue;\n            }\n            var src = mipObject[face];\n            if (src instanceof HTMLImageElement) {\n              if (src.width > this.maxCubeMapSize || src.height > this.maxCubeMapSize) {\n                src = _downsampleImage(src, this.maxCubeMapSize);\n                if (mipLevel === 0) {\n                  texture.width = src.width;\n                  texture.height = src.height;\n                }\n              }\n            }\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, texture._glInternalFormat, texture._glFormat, texture._glPixelType, src);\n          }\n        } else {\n          resMult = 1 / Math.pow(2, mipLevel);\n          for (face = 0; face < 6; face++) {\n            if (!texture._levelsUpdated[0][face]) {\n              continue;\n            }\n            var texData = mipObject[face];\n            if (texture._compressed) {\n              gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texData);\n            } else {\n              gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texture._glFormat, texture._glPixelType, texData);\n            }\n          }\n        }\n      } else {\n        if (texture._volume) {\n          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n          resMult = 1 / Math.pow(2, mipLevel);\n          if (texture._compressed) {\n            gl.compressedTexImage3D(gl.TEXTURE_3D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), Math.max(texture._depth * resMult, 1), 0, mipObject);\n          } else {\n            gl.texImage3D(gl.TEXTURE_3D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), Math.max(texture._depth * resMult, 1), 0, texture._glFormat, texture._glPixelType, mipObject);\n          }\n        } else {\n          if (mipObject instanceof HTMLCanvasElement || mipObject instanceof HTMLImageElement || mipObject instanceof HTMLVideoElement) {\n            if (mipObject instanceof HTMLImageElement) {\n              if (mipObject.width > this.maxTextureSize || mipObject.height > this.maxTextureSize) {\n                mipObject = _downsampleImage(mipObject, this.maxTextureSize);\n                if (mipLevel === 0) {\n                  texture.width = mipObject.width;\n                  texture.height = mipObject.height;\n                }\n              }\n            }\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture._flipY);\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n            gl.texImage2D(gl.TEXTURE_2D, mipLevel, texture._glInternalFormat, texture._glFormat, texture._glPixelType, mipObject);\n          } else {\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n            resMult = 1 / Math.pow(2, mipLevel);\n            if (texture._compressed) {\n              gl.compressedTexImage2D(gl.TEXTURE_2D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, mipObject);\n            } else {\n              gl.texImage2D(gl.TEXTURE_2D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texture._glFormat, texture._glPixelType, mipObject);\n            }\n          }\n          if (mipLevel === 0) {\n            texture._mipmapsUploaded = false;\n          } else {\n            texture._mipmapsUploaded = true;\n          }\n        }\n      }\n      mipLevel++;\n    }\n    if (texture._needsUpload) {\n      if (texture._cubemap) {\n        for (var i = 0; i < 6; i++) {\n          texture._levelsUpdated[0][i] = false;\n        }\n      } else {\n        texture._levelsUpdated[0] = false;\n      }\n    }\n    if (!texture._compressed && texture._mipmaps && texture._needsMipmapsUpload && texture._pot && texture._levels.length === 1) {\n      gl.generateMipmap(texture._glTarget);\n      texture._mipmapsUploaded = true;\n    }\n    if (texture._gpuSize) {\n      this._vram.tex -= texture._gpuSize;\n    }\n    texture._gpuSize = gpuTexSize(gl, texture);\n    this._vram.tex += texture._gpuSize;\n  }, setTexture:function(texture, textureUnit) {\n    var gl = this.gl;\n    if (!texture._glTextureId) {\n      this.initializeTexture(texture);\n    }\n    var paramDirty = texture._minFilterDirty || texture._magFilterDirty || texture._addressUDirty || texture._addressVDirty || texture._addressWDirty || texture._anisotropyDirty || texture._compareModeDirty;\n    if (this.textureUnits[textureUnit] !== texture || paramDirty) {\n      if (this.activeTexture !== textureUnit) {\n        gl.activeTexture(gl.TEXTURE0 + textureUnit);\n        this.activeTexture = textureUnit;\n      }\n      gl.bindTexture(texture._glTarget, texture._glTextureId);\n      this.textureUnits[textureUnit] = texture;\n    }\n    if (paramDirty) {\n      if (texture._minFilterDirty) {\n        var filter = texture._minFilter;\n        if (!texture._pot || !texture._mipmaps || texture._compressed && texture._levels.length === 1) {\n          if (filter === pc.FILTER_NEAREST_MIPMAP_NEAREST || filter === pc.FILTER_NEAREST_MIPMAP_LINEAR) {\n            filter = pc.FILTER_NEAREST;\n          } else {\n            if (filter === pc.FILTER_LINEAR_MIPMAP_NEAREST || filter === pc.FILTER_LINEAR_MIPMAP_LINEAR) {\n              filter = pc.FILTER_LINEAR;\n            }\n          }\n        }\n        gl.texParameteri(texture._glTarget, gl.TEXTURE_MIN_FILTER, this.glFilter[filter]);\n        texture._minFilterDirty = false;\n      }\n      if (texture._magFilterDirty) {\n        gl.texParameteri(texture._glTarget, gl.TEXTURE_MAG_FILTER, this.glFilter[texture._magFilter]);\n        texture._magFilterDirty = false;\n      }\n      if (texture._addressUDirty) {\n        if (this.webgl2) {\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_S, this.glAddress[texture._addressU]);\n        } else {\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_S, this.glAddress[texture._pot ? texture._addressU : pc.ADDRESS_CLAMP_TO_EDGE]);\n        }\n        texture._addressUDirty = false;\n      }\n      if (texture._addressVDirty) {\n        if (this.webgl2) {\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_T, this.glAddress[texture._addressV]);\n        } else {\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_T, this.glAddress[texture._pot ? texture._addressV : pc.ADDRESS_CLAMP_TO_EDGE]);\n        }\n        texture._addressVDirty = false;\n      }\n      if (this.webgl2) {\n        if (texture._addressWDirty) {\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_R, this.glAddress[texture._addressW]);\n          texture._addressWDirty = false;\n        }\n        if (texture._compareModeDirty) {\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_COMPARE_MODE, texture._compareOnRead ? gl.COMPARE_REF_TO_TEXTURE : gl.NONE);\n          gl.texParameteri(texture._glTarget, gl.TEXTURE_COMPARE_FUNC, this.glComparison[texture._compareFunc]);\n          texture._compareModeDirty = false;\n        }\n      }\n      if (texture._anisotropyDirty) {\n        var ext = this.extTextureFilterAnisotropic;\n        if (ext) {\n          gl.texParameterf(texture._glTarget, ext.TEXTURE_MAX_ANISOTROPY_EXT, Math.max(1, Math.min(Math.round(texture._anisotropy), this.maxAnisotropy)));\n        }\n        texture._anisotropyDirty = false;\n      }\n    }\n    if (texture._needsUpload || texture._needsMipmapsUpload) {\n      this.uploadTexture(texture);\n      texture._needsUpload = false;\n      texture._needsMipmapsUpload = false;\n    }\n  }, draw:function(primitive, numInstances) {\n    var gl = this.gl;\n    var i, j, len;\n    var sampler, samplerValue, texture, numTextures;\n    var uniform, scopeId, uniformVersion, programVersion, locationId;\n    var shader = this.shader;\n    var samplers = shader.samplers;\n    var uniforms = shader.uniforms;\n    if (numInstances > 1) {\n      this.boundBuffer = null;\n      this.attributesInvalidated = true;\n    }\n    if (this.attributesInvalidated) {\n      var attribute, element, vertexBuffer, vbOffset, bufferId;\n      var attributes = shader.attributes;\n      for (i = 0, len = attributes.length; i < len; i++) {\n        attribute = attributes[i];\n        element = attribute.scopeId.value;\n        if (element !== null) {\n          vertexBuffer = this.vertexBuffers[element.stream];\n          vbOffset = this.vbOffsets[element.stream] || 0;\n          bufferId = vertexBuffer.bufferId;\n          if (this.boundBuffer !== bufferId) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);\n            this.boundBuffer = bufferId;\n          }\n          locationId = attribute.locationId;\n          if (!this.enabledAttributes[locationId]) {\n            gl.enableVertexAttribArray(locationId);\n            this.enabledAttributes[locationId] = true;\n          }\n          gl.vertexAttribPointer(locationId, element.numComponents, this.glType[element.dataType], element.normalize, element.stride, element.offset + vbOffset);\n          if (element.stream === 1 && numInstances > 1) {\n            if (!this.instancedAttribs[locationId]) {\n              this.extInstancing.vertexAttribDivisorANGLE(locationId, 1);\n              this.instancedAttribs[locationId] = true;\n            }\n          } else {\n            if (this.instancedAttribs[locationId]) {\n              this.extInstancing.vertexAttribDivisorANGLE(locationId, 0);\n              this.instancedAttribs[locationId] = false;\n            }\n          }\n        }\n      }\n      this.attributesInvalidated = false;\n    }\n    var textureUnit = 0;\n    for (i = 0, len = samplers.length; i < len; i++) {\n      sampler = samplers[i];\n      samplerValue = sampler.scopeId.value;\n      if (!samplerValue) {\n        continue;\n      }\n      if (samplerValue instanceof pc.Texture) {\n        texture = samplerValue;\n        this.setTexture(texture, textureUnit);\n        if (sampler.slot !== textureUnit) {\n          gl.uniform1i(sampler.locationId, textureUnit);\n          sampler.slot = textureUnit;\n        }\n        textureUnit++;\n      } else {\n        sampler.array.length = 0;\n        numTextures = samplerValue.length;\n        for (j = 0; j < numTextures; j++) {\n          texture = samplerValue[j];\n          this.setTexture(texture, textureUnit);\n          sampler.array[j] = textureUnit;\n          textureUnit++;\n        }\n        gl.uniform1iv(sampler.locationId, sampler.array);\n      }\n    }\n    for (i = 0, len = uniforms.length; i < len; i++) {\n      uniform = uniforms[i];\n      scopeId = uniform.scopeId;\n      uniformVersion = uniform.version;\n      programVersion = scopeId.versionObject.version;\n      if (uniformVersion.globalId !== programVersion.globalId || uniformVersion.revision !== programVersion.revision) {\n        uniformVersion.globalId = programVersion.globalId;\n        uniformVersion.revision = programVersion.revision;\n        if (scopeId.value !== null) {\n          this.commitFunction[uniform.dataType](uniform, scopeId.value);\n        }\n      }\n    }\n    this._drawCallsPerFrame++;\n    this._primsPerFrame[primitive.type] += primitive.count * (numInstances > 1 ? numInstances : 1);\n    if (this.webgl2 && this.transformFeedbackBuffer) {\n      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.transformFeedbackBuffer.bufferId);\n      gl.beginTransformFeedback(gl.POINTS);\n    }\n    if (primitive.indexed) {\n      if (numInstances > 1) {\n        this.extInstancing.drawElementsInstancedANGLE(this.glPrimitive[primitive.type], primitive.count, this.indexBuffer.glFormat, primitive.base * 2, numInstances);\n        this.boundBuffer = null;\n        this.attributesInvalidated = true;\n      } else {\n        gl.drawElements(this.glPrimitive[primitive.type], primitive.count, this.indexBuffer.glFormat, primitive.base * this.indexBuffer.bytesPerIndex);\n      }\n    } else {\n      if (numInstances > 1) {\n        this.extInstancing.drawArraysInstancedANGLE(this.glPrimitive[primitive.type], primitive.base, primitive.count, numInstances);\n        this.boundBuffer = null;\n        this.attributesInvalidated = true;\n      } else {\n        gl.drawArrays(this.glPrimitive[primitive.type], primitive.base, primitive.count);\n      }\n    }\n    if (this.webgl2 && this.transformFeedbackBuffer) {\n      gl.endTransformFeedback();\n      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n    }\n  }, clear:function(options) {\n    var defaultOptions = this.defaultClearOptions;\n    options = options || defaultOptions;\n    var flags = options.flags == undefined ? defaultOptions.flags : options.flags;\n    if (flags !== 0) {\n      var gl = this.gl;\n      if (flags & pc.CLEARFLAG_COLOR) {\n        var color = options.color == undefined ? defaultOptions.color : options.color;\n        this.setClearColor(color[0], color[1], color[2], color[3]);\n      }\n      if (flags & pc.CLEARFLAG_DEPTH) {\n        var depth = options.depth == undefined ? defaultOptions.depth : options.depth;\n        this.setClearDepth(depth);\n        if (!this.depthWrite) {\n          gl.depthMask(true);\n        }\n      }\n      if (flags & pc.CLEARFLAG_STENCIL) {\n        var stencil = options.stencil == undefined ? defaultOptions.stencil : options.stencil;\n        this.setClearStencil(stencil);\n      }\n      gl.clear(this.glClearFlag[flags]);\n      if (flags & pc.CLEARFLAG_DEPTH) {\n        if (!this.depthWrite) {\n          gl.depthMask(false);\n        }\n      }\n    }\n  }, readPixels:function(x, y, w, h, pixels) {\n    var gl = this.gl;\n    gl.readPixels(x, y, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n  }, setClearDepth:function(depth) {\n    if (depth !== this.clearDepth) {\n      this.gl.clearDepth(depth);\n      this.clearDepth = depth;\n    }\n  }, setClearColor:function(r, g, b, a) {\n    if (r !== this.clearRed || g !== this.clearGreen || b !== this.clearBlue || a !== this.clearAlpha) {\n      this.gl.clearColor(r, g, b, a);\n      this.clearRed = r;\n      this.clearGreen = g;\n      this.clearBlue = b;\n      this.clearAlpha = a;\n    }\n  }, setClearStencil:function(value) {\n    if (value !== this.clearStencil) {\n      this.gl.clearStencil(value);\n      this.clearStencil = value;\n    }\n  }, setRenderTarget:function(renderTarget) {\n    this.renderTarget = renderTarget;\n  }, getRenderTarget:function() {\n    return this.renderTarget;\n  }, getDepthTest:function() {\n    return this.depthTest;\n  }, setDepthTest:function(depthTest) {\n    if (this.depthTest !== depthTest) {\n      var gl = this.gl;\n      if (depthTest) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      this.depthTest = depthTest;\n    }\n  }, setDepthFunc:function(func) {\n    if (this.depthFunc === func) {\n      return;\n    }\n    this.gl.depthFunc(this.glComparison[func]);\n    this.depthFunc = func;\n  }, getDepthWrite:function() {\n    return this.depthWrite;\n  }, setDepthWrite:function(writeDepth) {\n    if (this.depthWrite !== writeDepth) {\n      this.gl.depthMask(writeDepth);\n      this.depthWrite = writeDepth;\n    }\n  }, setColorWrite:function(writeRed, writeGreen, writeBlue, writeAlpha) {\n    if (this.writeRed !== writeRed || this.writeGreen !== writeGreen || this.writeBlue !== writeBlue || this.writeAlpha !== writeAlpha) {\n      this.gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);\n      this.writeRed = writeRed;\n      this.writeGreen = writeGreen;\n      this.writeBlue = writeBlue;\n      this.writeAlpha = writeAlpha;\n    }\n  }, setAlphaToCoverage:function(state) {\n    if (!this.webgl2) {\n      return;\n    }\n    if (this.alphaToCoverage === state) {\n      return;\n    }\n    this.alphaToCoverage = state;\n    if (state) {\n      this.gl.enable(this.gl.SAMPLE_ALPHA_TO_COVERAGE);\n    } else {\n      this.gl.disable(this.gl.SAMPLE_ALPHA_TO_COVERAGE);\n    }\n  }, setTransformFeedbackBuffer:function(tf) {\n    if (this.transformFeedbackBuffer === tf) {\n      return;\n    }\n    this.transformFeedbackBuffer = tf;\n    if (this.webgl2) {\n      var gl = this.gl;\n      if (tf) {\n        if (!this.feedback) {\n          this.feedback = gl.createTransformFeedback();\n        }\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.feedback);\n      } else {\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n      }\n    }\n  }, setRaster:function(on) {\n    if (this.raster === on) {\n      return;\n    }\n    this.raster = on;\n    if (this.webgl2) {\n      if (on) {\n        this.gl.disable(this.gl.RASTERIZER_DISCARD);\n      } else {\n        this.gl.enable(this.gl.RASTERIZER_DISCARD);\n      }\n    }\n  }, setDepthBias:function(on) {\n    if (this.depthBiasEnabled === on) {\n      return;\n    }\n    this.depthBiasEnabled = on;\n    if (on) {\n      this.gl.enable(this.gl.POLYGON_OFFSET_FILL);\n    } else {\n      this.gl.disable(this.gl.POLYGON_OFFSET_FILL);\n    }\n  }, setDepthBiasValues:function(constBias, slopeBias) {\n    this.gl.polygonOffset(slopeBias, constBias);\n  }, getBlending:function() {\n    return this.blending;\n  }, setBlending:function(blending) {\n    if (this.blending !== blending) {\n      var gl = this.gl;\n      if (blending) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      this.blending = blending;\n    }\n  }, setStencilTest:function(enable) {\n    if (this.stencil !== enable) {\n      var gl = this.gl;\n      if (enable) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      this.stencil = enable;\n    }\n  }, setStencilFunc:function(func, ref, mask) {\n    if (this.stencilFuncFront !== func || this.stencilRefFront !== ref || this.stencilMaskFront !== mask || this.stencilFuncBack !== func || this.stencilRefBack !== ref || this.stencilMaskBack !== mask) {\n      var gl = this.gl;\n      gl.stencilFunc(this.glComparison[func], ref, mask);\n      this.stencilFuncFront = this.stencilFuncBack = func;\n      this.stencilRefFront = this.stencilRefBack = ref;\n      this.stencilMaskFront = this.stencilMaskBack = mask;\n    }\n  }, setStencilFuncFront:function(func, ref, mask) {\n    if (this.stencilFuncFront !== func || this.stencilRefFront !== ref || this.stencilMaskFront !== mask) {\n      var gl = this.gl;\n      gl.stencilFuncSeparate(gl.FRONT, this.glComparison[func], ref, mask);\n      this.stencilFuncFront = func;\n      this.stencilRefFront = ref;\n      this.stencilMaskFront = mask;\n    }\n  }, setStencilFuncBack:function(func, ref, mask) {\n    if (this.stencilFuncBack !== func || this.stencilRefBack !== ref || this.stencilMaskBack !== mask) {\n      var gl = this.gl;\n      gl.stencilFuncSeparate(gl.BACK, this.glComparison[func], ref, mask);\n      this.stencilFuncBack = func;\n      this.stencilRefBack = ref;\n      this.stencilMaskBack = mask;\n    }\n  }, setStencilOperation:function(fail, zfail, zpass, writeMask) {\n    if (this.stencilFailFront !== fail || this.stencilZfailFront !== zfail || this.stencilZpassFront !== zpass || this.stencilFailBack !== fail || this.stencilZfailBack !== zfail || this.stencilZpassBack !== zpass) {\n      this.gl.stencilOp(this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);\n      this.stencilFailFront = this.stencilFailBack = fail;\n      this.stencilZfailFront = this.stencilZfailBack = zfail;\n      this.stencilZpassFront = this.stencilZpassBack = zpass;\n    }\n    if (this.stencilWriteMaskFront !== writeMask || this.stencilWriteMaskBack !== writeMask) {\n      this.gl.stencilMask(writeMask);\n      this.stencilWriteMaskFront = writeMask;\n      this.stencilWriteMaskBack = writeMask;\n    }\n  }, setStencilOperationFront:function(fail, zfail, zpass, writeMask) {\n    if (this.stencilFailFront !== fail || this.stencilZfailFront !== zfail || this.stencilZpassFront !== zpass) {\n      this.gl.stencilOpSeparate(this.gl.FRONT, this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);\n      this.stencilFailFront = fail;\n      this.stencilZfailFront = zfail;\n      this.stencilZpassFront = zpass;\n    }\n    if (this.stencilWriteMaskFront !== writeMask) {\n      this.gl.stencilMaskSeparate(this.gl.FRONT, writeMask);\n      this.stencilWriteMaskFront = writeMask;\n    }\n  }, setStencilOperationBack:function(fail, zfail, zpass, writeMask) {\n    if (this.stencilFailBack !== fail || this.stencilZfailBack !== zfail || this.stencilZpassBack !== zpass) {\n      this.gl.stencilOpSeparate(this.gl.BACK, this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);\n      this.stencilFailBack = fail;\n      this.stencilZfailBack = zfail;\n      this.stencilZpassBack = zpass;\n    }\n    if (this.stencilWriteMaskBack !== writeMask) {\n      this.gl.stencilMaskSeparate(this.gl.BACK, writeMask);\n      this.stencilWriteMaskBack = writeMask;\n    }\n  }, setBlendFunction:function(blendSrc, blendDst) {\n    if (this.blendSrc !== blendSrc || this.blendDst !== blendDst || this.separateAlphaBlend) {\n      this.gl.blendFunc(this.glBlendFunction[blendSrc], this.glBlendFunction[blendDst]);\n      this.blendSrc = blendSrc;\n      this.blendDst = blendDst;\n      this.separateAlphaBlend = false;\n    }\n  }, setBlendFunctionSeparate:function(blendSrc, blendDst, blendSrcAlpha, blendDstAlpha) {\n    if (this.blendSrc !== blendSrc || this.blendDst !== blendDst || this.blendSrcAlpha !== blendSrcAlpha || this.blendDstAlpha !== blendDstAlpha || !this.separateAlphaBlend) {\n      this.gl.blendFuncSeparate(this.glBlendFunction[blendSrc], this.glBlendFunction[blendDst], this.glBlendFunction[blendSrcAlpha], this.glBlendFunction[blendDstAlpha]);\n      this.blendSrc = blendSrc;\n      this.blendDst = blendDst;\n      this.blendSrcAlpha = blendSrcAlpha;\n      this.blendDstAlpha = blendDstAlpha;\n      this.separateAlphaBlend = true;\n    }\n  }, setBlendEquation:function(blendEquation) {\n    if (this.blendEquation !== blendEquation || this.separateAlphaEquation) {\n      this.gl.blendEquation(this.glBlendEquation[blendEquation]);\n      this.blendEquation = blendEquation;\n      this.separateAlphaEquation = false;\n    }\n  }, setBlendEquationSeparate:function(blendEquation, blendAlphaEquation) {\n    if (this.blendEquation !== blendEquation || this.blendAlphaEquation !== blendAlphaEquation || !this.separateAlphaEquation) {\n      this.gl.blendEquationSeparate(this.glBlendEquation[blendEquation], this.glBlendEquation[blendAlphaEquation]);\n      this.blendEquation = blendEquation;\n      this.blendAlphaEquation = blendAlphaEquation;\n      this.separateAlphaEquation = true;\n    }\n  }, setCullMode:function(cullMode) {\n    if (this.cullMode !== cullMode) {\n      if (cullMode === pc.CULLFACE_NONE) {\n        this.gl.disable(this.gl.CULL_FACE);\n      } else {\n        if (this.cullMode === pc.CULLFACE_NONE) {\n          this.gl.enable(this.gl.CULL_FACE);\n        }\n        var mode = this.glCull[cullMode];\n        if (this.cullFace !== mode) {\n          this.gl.cullFace(mode);\n          this.cullFace = mode;\n        }\n      }\n      this.cullMode = cullMode;\n    }\n  }, getCullMode:function() {\n    return this.cullMode;\n  }, setIndexBuffer:function(indexBuffer) {\n    if (this.indexBuffer !== indexBuffer) {\n      this.indexBuffer = indexBuffer;\n      var gl = this.gl;\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer ? indexBuffer.bufferId : null);\n    }\n  }, setVertexBuffer:function(vertexBuffer, stream, vbOffset) {\n    if (this.vertexBuffers[stream] !== vertexBuffer || this.vbOffsets[stream] !== vbOffset) {\n      this.vertexBuffers[stream] = vertexBuffer;\n      this.vbOffsets[stream] = vbOffset;\n      var vertexFormat = vertexBuffer.getFormat();\n      var i = 0;\n      var elements = vertexFormat.elements;\n      var numElements = elements.length;\n      while (i < numElements) {\n        var vertexElement = elements[i++];\n        vertexElement.stream = stream;\n        vertexElement.scopeId.setValue(vertexElement);\n      }\n      this.attributesInvalidated = true;\n    }\n  }, setShader:function(shader) {\n    if (shader !== this.shader) {\n      this.shader = shader;\n      if (!shader.ready) {\n        if (!shader.link()) {\n          return false;\n        }\n      }\n      this._shaderSwitchesPerFrame++;\n      this.gl.useProgram(shader.program);\n      this.attributesInvalidated = true;\n    }\n    return true;\n  }, getHdrFormat:function() {\n    if (this.extTextureHalfFloatRenderable) {\n      return pc.PIXELFORMAT_RGB16F;\n    } else {\n      if (this.extTextureFloatRenderable) {\n        return pc.PIXELFORMAT_RGB32F;\n      }\n    }\n    return pc.PIXELFORMAT_R8_G8_B8_A8;\n  }, getBoneLimit:function() {\n    return this.boneLimit;\n  }, setBoneLimit:function(maxBones) {\n    this.boneLimit = maxBones;\n  }, enableValidation:function(enable) {\n    console.warn(\"enableValidation: This function is deprecated and will be removed shortly.\");\n  }, validate:function() {\n    console.warn(\"validate: This function is deprecated and will be removed shortly.\");\n  }, resizeCanvas:function(width, height) {\n    this._width = width;\n    this._height = height;\n    var ratio = Math.min(this._maxPixelRatio, window.devicePixelRatio);\n    width *= ratio;\n    height *= ratio;\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.fire(EVENT_RESIZE, width, height);\n  }, setResolution:function(width, height) {\n    this._width = width;\n    this._height = height;\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.fire(EVENT_RESIZE, width, height);\n  }, clearShaderCache:function() {\n    this.programLib.clearCache();\n  }, removeShaderFromCache:function(shader) {\n    this.programLib.removeFromCache(shader);\n  }, destroy:function() {\n    if (this.webgl2 && this.feedback) {\n      this.gl.deleteTransformFeedback(this.feedback);\n    }\n  }};\n  Object.defineProperty(GraphicsDevice.prototype, \"width\", {get:function() {\n    return this.gl.drawingBufferWidth || this.canvas.width;\n  }});\n  Object.defineProperty(GraphicsDevice.prototype, \"height\", {get:function() {\n    return this.gl.drawingBufferHeight || this.canvas.height;\n  }});\n  Object.defineProperty(GraphicsDevice.prototype, \"fullscreen\", {get:function() {\n    return !!document.fullscreenElement;\n  }, set:function(fullscreen) {\n    if (fullscreen) {\n      var canvas = this.gl.canvas;\n      canvas.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n  }});\n  Object.defineProperty(GraphicsDevice.prototype, \"enableAutoInstancing\", {get:function() {\n    return this._enableAutoInstancing;\n  }, set:function(value) {\n    this._enableAutoInstancing = value && this.extInstancing;\n  }});\n  Object.defineProperty(GraphicsDevice.prototype, \"maxAnisotropy\", {get:function() {\n    var maxAniso;\n    return function() {\n      if (maxAniso === undefined) {\n        maxAniso = 1;\n        var gl = this.gl;\n        var glExt = this.extTextureFilterAnisotropic;\n        if (glExt) {\n          maxAniso = gl.getParameter(glExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        }\n      }\n      return maxAniso;\n    };\n  }()});\n  Object.defineProperty(GraphicsDevice.prototype, \"maxPixelRatio\", {get:function() {\n    return this._maxPixelRatio;\n  }, set:function(ratio) {\n    this._maxPixelRatio = ratio;\n    this.resizeCanvas(this._width, this._height);\n  }});\n  return {UnsupportedBrowserError:UnsupportedBrowserError, ContextCreationError:ContextCreationError, GraphicsDevice:GraphicsDevice, precalculatedTangents:true};\n}());\npc.extend(pc, function() {\n  var shaderChunks = {};\n  var attrib2Semantic = {vertex_position:pc.SEMANTIC_POSITION, vertex_normal:pc.SEMANTIC_NORMAL, vertex_tangent:pc.SEMANTIC_TANGENT, vertex_texCoord0:pc.SEMANTIC_TEXCOORD0, vertex_texCoord1:pc.SEMANTIC_TEXCOORD1, vertex_texCoord2:pc.SEMANTIC_TEXCOORD2, vertex_texCoord3:pc.SEMANTIC_TEXCOORD3, vertex_texCoord4:pc.SEMANTIC_TEXCOORD4, vertex_texCoord5:pc.SEMANTIC_TEXCOORD5, vertex_texCoord6:pc.SEMANTIC_TEXCOORD6, vertex_texCoord7:pc.SEMANTIC_TEXCOORD7, vertex_color:pc.SEMANTIC_COLOR, vertex_boneIndices:pc.SEMANTIC_BLENDINDICES, \n  vertex_boneWeights:pc.SEMANTIC_BLENDWEIGHT};\n  shaderChunks.collectAttribs = function(vsCode) {\n    var attribs = {};\n    var attrs = 0;\n    var found = vsCode.indexOf(\"attribute\");\n    while (found >= 0) {\n      if (found > 0 && vsCode[found - 1] === \"/\") {\n        break;\n      }\n      var endOfLine = vsCode.indexOf(\";\", found);\n      var startOfAttribName = vsCode.lastIndexOf(\" \", endOfLine);\n      var attribName = vsCode.substr(startOfAttribName + 1, endOfLine - (startOfAttribName + 1));\n      var semantic = attrib2Semantic[attribName];\n      if (semantic !== undefined) {\n        attribs[attribName] = semantic;\n      } else {\n        attribs[attribName] = \"ATTR\" + attrs;\n        attrs++;\n      }\n      found = vsCode.indexOf(\"attribute\", found + 1);\n    }\n    return attribs;\n  };\n  shaderChunks.createShader = function(device, vsName, psName, useTransformFeedback) {\n    var vsCode = shaderChunks[vsName];\n    var psCode = pc.programlib.precisionCode(device) + \"\\n\" + shaderChunks[psName];\n    var attribs = this.collectAttribs(vsCode);\n    if (device.webgl2) {\n      vsCode = pc.programlib.versionCode(device) + this.gles3VS + vsCode;\n      psCode = pc.programlib.versionCode(device) + this.gles3PS + psCode;\n    }\n    return new pc.Shader(device, {attributes:attribs, vshader:vsCode, fshader:psCode, useTransformFeedback:useTransformFeedback});\n  };\n  shaderChunks.createShaderFromCode = function(device, vsCode, psCode, uName, useTransformFeedback) {\n    var shaderCache = device.programLib._cache;\n    var cached = shaderCache[uName];\n    if (cached !== undefined) {\n      return cached;\n    }\n    psCode = pc.programlib.precisionCode(device) + \"\\n\" + (psCode || pc.programlib.dummyFragmentCode());\n    var attribs = this.collectAttribs(vsCode);\n    if (device.webgl2) {\n      vsCode = pc.programlib.versionCode(device) + this.gles3VS + vsCode;\n      psCode = pc.programlib.versionCode(device) + this.gles3PS + psCode;\n    }\n    shaderCache[uName] = new pc.Shader(device, {attributes:attribs, vshader:vsCode, fshader:psCode, useTransformFeedback:useTransformFeedback});\n    return shaderCache[uName];\n  };\n  return {shaderChunks:shaderChunks};\n}());\npc.extend(pc, function() {\n  var _postEffectQuadVB = null;\n  var _postEffectQuadDraw = {type:pc.PRIMITIVE_TRISTRIP, base:0, count:4, indexed:false};\n  function drawQuadWithShader(device, target, shader, rect, scissorRect, useBlend) {\n    if (_postEffectQuadVB === null) {\n      var vertexFormat = new pc.VertexFormat(device, [{semantic:pc.SEMANTIC_POSITION, components:2, type:pc.TYPE_FLOAT32}]);\n      _postEffectQuadVB = new pc.VertexBuffer(device, vertexFormat, 4);\n      var iterator = new pc.VertexIterator(_postEffectQuadVB);\n      iterator.element[pc.SEMANTIC_POSITION].set(-1.0, -1.0);\n      iterator.next();\n      iterator.element[pc.SEMANTIC_POSITION].set(1.0, -1.0);\n      iterator.next();\n      iterator.element[pc.SEMANTIC_POSITION].set(-1.0, 1.0);\n      iterator.next();\n      iterator.element[pc.SEMANTIC_POSITION].set(1.0, 1.0);\n      iterator.end();\n    }\n    var oldRt = device.renderTarget;\n    device.setRenderTarget(target);\n    device.updateBegin();\n    var x, y, w, h;\n    var sx, sy, sw, sh;\n    if (!rect) {\n      w = target ? target.width : device.width;\n      h = target ? target.height : device.height;\n      x = 0;\n      y = 0;\n    } else {\n      x = rect.x;\n      y = rect.y;\n      w = rect.z;\n      h = rect.w;\n    }\n    if (!scissorRect) {\n      sx = x;\n      sy = y;\n      sw = w;\n      sh = h;\n    } else {\n      sx = scissorRect.x;\n      sy = scissorRect.y;\n      sw = scissorRect.z;\n      sh = scissorRect.w;\n    }\n    device.setViewport(x, y, w, h);\n    device.setScissor(sx, sy, sw, sh);\n    var oldDepthTest = device.getDepthTest();\n    var oldDepthWrite = device.getDepthWrite();\n    var oldCull = device.getCullMode();\n    device.setDepthTest(false);\n    device.setDepthWrite(false);\n    device.setCullMode(pc.CULLFACE_NONE);\n    if (!useBlend) {\n      device.setBlending(false);\n    }\n    device.setVertexBuffer(_postEffectQuadVB, 0);\n    device.setShader(shader);\n    device.draw(_postEffectQuadDraw);\n    device.setDepthTest(oldDepthTest);\n    device.setDepthWrite(oldDepthWrite);\n    device.setCullMode(oldCull);\n    device.updateEnd();\n    device.setRenderTarget(oldRt);\n    device.updateBegin();\n  }\n  function destroyPostEffectQuad() {\n    _postEffectQuadVB = null;\n  }\n  return {drawQuadWithShader:drawQuadWithShader, destroyPostEffectQuad:destroyPostEffectQuad};\n}());\npc.extend(pc, function() {\n  function fixChrome() {\n    var endTime = Date.now() + 10;\n    while (Date.now() < endTime) {\n    }\n  }\n  function syncToCpu(device, targ, face) {\n    var tex = targ._colorBuffer;\n    if (tex.format != pc.PIXELFORMAT_R8_G8_B8_A8) {\n      return;\n    }\n    var pixels = new Uint8Array(tex.width * tex.height * 4);\n    var gl = device.gl;\n    device.setFramebuffer(targ._glFrameBuffer);\n    gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    if (!tex._levels) {\n      tex._levels = [];\n    }\n    if (!tex._levels[0]) {\n      tex._levels[0] = [];\n    }\n    tex._levels[0][face] = pixels;\n  }\n  function prefilterCubemap(options) {\n    var device = options.device;\n    var sourceCubemap = options.sourceCubemap;\n    var method = options.method;\n    var samples = options.samples;\n    var cpuSync = options.cpuSync;\n    var chromeFix = options.chromeFix;\n    if (cpuSync && !sourceCubemap._levels[0]) {\n      console.error(\"ERROR: prefilter: cubemap must have _levels\");\n      return;\n    }\n    var chunks = pc.shaderChunks;\n    var rgbmSource = sourceCubemap.rgbm;\n    var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.rgbmPS + chunks.prefilterCubemapPS.replace(/\\$METHOD/g, method === 0 ? \"cos\" : \"phong\").replace(/\\$NUMSAMPLES/g, samples).replace(/\\$textureCube/g, rgbmSource ? \"textureCubeRGBM\" : \"textureCube\"), \"prefilter\" + method + \"\" + samples + \"\" + rgbmSource);\n    var shader2 = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.outputCubemapPS, \"outputCubemap\");\n    var constantTexSource = device.scope.resolve(\"source\");\n    var constantParams = device.scope.resolve(\"params\");\n    var params = new pc.Vec4;\n    var size = sourceCubemap.width;\n    var format = sourceCubemap.format;\n    var cmapsList = [[], options.filteredFixed, options.filteredRgbm, options.filteredFixedRgbm];\n    var gloss = method === 0 ? [0.9, 0.85, 0.7, 0.4, 0.25] : [512, 128, 32, 8, 2];\n    var mipSize = [64, 32, 16, 8, 4];\n    var numMips = 5;\n    var targ;\n    var i, face, pass;\n    var rgbFormat = format === pc.PIXELFORMAT_R8_G8_B8;\n    var isImg = false;\n    var nextCubemap, cubemap;\n    if (cpuSync) {\n      isImg = sourceCubemap._levels[0][0] instanceof HTMLImageElement;\n    }\n    if ((rgbFormat || isImg) && cpuSync) {\n      format = pc.PIXELFORMAT_R8_G8_B8_A8;\n      nextCubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:rgbmSource, format:format, width:size, height:size, mipmaps:false});\n      for (face = 0; face < 6; face++) {\n        targ = new pc.RenderTarget(device, nextCubemap, {face:face, depth:false});\n        params.x = face;\n        params.y = 0;\n        constantTexSource.setValue(sourceCubemap);\n        constantParams.setValue(params.data);\n        if (chromeFix) {\n          fixChrome();\n        }\n        pc.drawQuadWithShader(device, targ, shader2);\n        syncToCpu(device, targ, face);\n      }\n      sourceCubemap = nextCubemap;\n    }\n    if (size > 128) {\n      var log128 = Math.round(Math.log2(128));\n      var logSize = Math.round(Math.log2(size));\n      var steps = logSize - log128;\n      for (i = 0; i < steps; i++) {\n        size = sourceCubemap.width * 0.5;\n        var sampleGloss = method === 0 ? 1 : Math.pow(2, Math.round(Math.log2(gloss[0]) + (steps - i) * 2));\n        nextCubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:rgbmSource, format:format, width:size, height:size, mipmaps:false});\n        for (face = 0; face < 6; face++) {\n          targ = new pc.RenderTarget(device, nextCubemap, {face:face, depth:false});\n          params.x = face;\n          params.y = sampleGloss;\n          params.z = size;\n          params.w = rgbmSource ? 3 : 0;\n          constantTexSource.setValue(sourceCubemap);\n          constantParams.setValue(params.data);\n          if (chromeFix) {\n            fixChrome();\n          }\n          pc.drawQuadWithShader(device, targ, shader2);\n          if (i === steps - 1 && cpuSync) {\n            syncToCpu(device, targ, face);\n          }\n        }\n        sourceCubemap = nextCubemap;\n      }\n    }\n    options.sourceCubemap = sourceCubemap;\n    var sourceCubemapRgbm = null;\n    if (!rgbmSource && options.filteredFixedRgbm) {\n      nextCubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:true, format:pc.PIXELFORMAT_R8_G8_B8_A8, width:size, height:size, mipmaps:false});\n      for (face = 0; face < 6; face++) {\n        targ = new pc.RenderTarget(device, nextCubemap, {face:face, depth:false});\n        params.x = face;\n        params.w = 2;\n        constantTexSource.setValue(sourceCubemap);\n        constantParams.setValue(params.data);\n        if (chromeFix) {\n          fixChrome();\n        }\n        pc.drawQuadWithShader(device, targ, shader2);\n        syncToCpu(device, targ, face);\n      }\n      sourceCubemapRgbm = nextCubemap;\n    }\n    var unblurredGloss = method === 0 ? 1 : 2048;\n    var startPass = method === 0 ? 0 : -1;\n    cmapsList[startPass] = [];\n    for (i = 0; i < numMips; i++) {\n      for (pass = startPass; pass < cmapsList.length; pass++) {\n        if (cmapsList[pass] != null) {\n          cmapsList[pass][i] = new pc.gfx.Texture(device, {cubemap:true, rgbm:pass < 2 ? rgbmSource : true, format:pass < 2 ? format : pc.PIXELFORMAT_R8_G8_B8_A8, fixCubemapSeams:pass === 1 || pass === 3, width:mipSize[i], height:mipSize[i], mipmaps:false});\n        }\n      }\n    }\n    for (pass = startPass; pass < cmapsList.length; pass++) {\n      if (cmapsList[pass] != null) {\n        if (pass > 1 && rgbmSource) {\n          cmapsList[pass] = cmapsList[pass - 2];\n          continue;\n        }\n        for (i = 0; i < numMips; i++) {\n          for (face = 0; face < 6; face++) {\n            targ = new pc.RenderTarget(device, cmapsList[pass][i], {face:face, depth:false});\n            params.x = face;\n            params.y = pass < 0 ? unblurredGloss : gloss[i];\n            params.z = mipSize[i];\n            params.w = rgbmSource ? 3 : pass;\n            constantTexSource.setValue(i === 0 ? sourceCubemap : method === 0 ? cmapsList[0][i - 1] : cmapsList[-1][i - 1]);\n            constantParams.setValue(params.data);\n            if (chromeFix) {\n              fixChrome();\n            }\n            pc.drawQuadWithShader(device, targ, shader);\n            if (cpuSync) {\n              syncToCpu(device, targ, face);\n            }\n          }\n        }\n      }\n    }\n    options.filtered = cmapsList[0];\n    var mips;\n    if (cpuSync && options.singleFilteredFixed) {\n      mips = [sourceCubemap, options.filteredFixed[0], options.filteredFixed[1], options.filteredFixed[2], options.filteredFixed[3], options.filteredFixed[4], options.filteredFixed[5]];\n      cubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:rgbmSource, fixCubemapSeams:true, format:format, width:128, height:128, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});\n      for (i = 0; i < 6; i++) {\n        cubemap._levels[i] = mips[i]._levels[0];\n      }\n      cubemap.upload();\n      cubemap._prefilteredMips = true;\n      options.singleFilteredFixed = cubemap;\n    }\n    if (cpuSync && options.singleFilteredFixedRgbm && options.filteredFixedRgbm) {\n      mips = [sourceCubemapRgbm, options.filteredFixedRgbm[0], options.filteredFixedRgbm[1], options.filteredFixedRgbm[2], options.filteredFixedRgbm[3], options.filteredFixedRgbm[4], options.filteredFixedRgbm[5]];\n      cubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:true, fixCubemapSeams:true, format:pc.PIXELFORMAT_R8_G8_B8_A8, width:128, height:128, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});\n      for (i = 0; i < 6; i++) {\n        cubemap._levels[i] = mips[i]._levels[0];\n      }\n      cubemap.upload();\n      cubemap._prefilteredMips = true;\n      options.singleFilteredFixedRgbm = cubemap;\n    }\n  }\n  function areaElement(x, y) {\n    return Math.atan2(x * y, Math.sqrt(x * x + y * y + 1));\n  }\n  function texelCoordSolidAngle(u, v, size) {\n    var _u = 2.0 * (u + 0.5) / size - 1.0;\n    var _v = 2.0 * (v + 0.5) / size - 1.0;\n    _u *= 1.0 - 1.0 / size;\n    _v *= 1.0 - 1.0 / size;\n    var invResolution = 1.0 / size;\n    var x0 = _u - invResolution;\n    var y0 = _v - invResolution;\n    var x1 = _u + invResolution;\n    var y1 = _v + invResolution;\n    var solidAngle = areaElement(x0, y0) - areaElement(x0, y1) - areaElement(x1, y0) + areaElement(x1, y1);\n    if (u === 0 && v === 0 || u === size - 1 && v === 0 || u === 0 && v === size - 1 || u === size - 1 && v === size - 1) {\n      solidAngle /= 3;\n    } else {\n      if (u === 0 || v === 0 || u === size - 1 || v === size - 1) {\n        solidAngle *= 0.5;\n      }\n    }\n    return solidAngle;\n  }\n  function shFromCubemap(source, dontFlipX) {\n    var face;\n    var cubeSize = source.width;\n    var x, y;\n    if (source.format != pc.PIXELFORMAT_R8_G8_B8_A8) {\n      console.error(\"ERROR: SH: cubemap must be RGBA8\");\n      return;\n    }\n    if (!source._levels[0]) {\n      console.error(\"ERROR: SH: cubemap must be synced to CPU\");\n      return;\n    }\n    if (!source._levels[0][0].length) {\n      if (source._levels[0][0] instanceof HTMLImageElement) {\n        var device = pc.Application.getApplication().graphicsDevice;\n        var gl = device.gl;\n        var chunks = pc.shaderChunks;\n        var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.fullscreenQuadPS, \"fsQuadSimple\");\n        var constantTexSource = device.scope.resolve(\"source\");\n        for (face = 0; face < 6; face++) {\n          var img = source._levels[0][face];\n          var tex = new pc.Texture(device, {cubemap:false, rgbm:false, format:source.format, width:cubeSize, height:cubeSize, mipmaps:false});\n          tex._levels[0] = img;\n          tex.upload();\n          var tex2 = new pc.Texture(device, {cubemap:false, rgbm:false, format:source.format, width:cubeSize, height:cubeSize, mipmaps:false});\n          var targ = new pc.RenderTarget(device, tex2, {depth:false});\n          constantTexSource.setValue(tex);\n          pc.drawQuadWithShader(device, targ, shader);\n          var pixels = new Uint8Array(cubeSize * cubeSize * 4);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, targ._glFrameBuffer);\n          gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n          source._levels[0][face] = pixels;\n        }\n      } else {\n        console.error(\"ERROR: SH: cubemap must be composed of arrays or images\");\n        return;\n      }\n    }\n    var dirs = [];\n    for (y = 0; y < cubeSize; y++) {\n      for (x = 0; x < cubeSize; x++) {\n        var u = x / (cubeSize - 1) * 2 - 1;\n        var v = y / (cubeSize - 1) * 2 - 1;\n        dirs[y * cubeSize + x] = (new pc.Vec3(u, v, 1.0)).normalize();\n      }\n    }\n    var sh = new Float32Array(9 * 3);\n    var coef1 = 0;\n    var coef2 = 1 * 3;\n    var coef3 = 2 * 3;\n    var coef4 = 3 * 3;\n    var coef5 = 4 * 3;\n    var coef6 = 5 * 3;\n    var coef7 = 6 * 3;\n    var coef8 = 7 * 3;\n    var coef9 = 8 * 3;\n    var nx = 0;\n    var px = 1;\n    var ny = 2;\n    var py = 3;\n    var nz = 4;\n    var pz = 5;\n    var addr, c, a, value, weight, dir, dx, dy, dz;\n    var weight1, weight2, weight3, weight4, weight5;\n    var accum = 0;\n    for (face = 0; face < 6; face++) {\n      for (y = 0; y < cubeSize; y++) {\n        for (x = 0; x < cubeSize; x++) {\n          addr = y * cubeSize + x;\n          weight = texelCoordSolidAngle(x, y, cubeSize);\n          weight1 = weight * 4 / 17;\n          weight2 = weight * 8 / 17;\n          weight3 = weight * 15 / 17;\n          weight4 = weight * 5 / 68;\n          weight5 = weight * 15 / 68;\n          dir = dirs[addr];\n          if (face == nx) {\n            dx = dir.z;\n            dy = -dir.y;\n            dz = -dir.x;\n          } else {\n            if (face == px) {\n              dx = -dir.z;\n              dy = -dir.y;\n              dz = dir.x;\n            } else {\n              if (face == ny) {\n                dx = dir.x;\n                dy = dir.z;\n                dz = dir.y;\n              } else {\n                if (face == py) {\n                  dx = dir.x;\n                  dy = -dir.z;\n                  dz = -dir.y;\n                } else {\n                  if (face == nz) {\n                    dx = dir.x;\n                    dy = -dir.y;\n                    dz = dir.z;\n                  } else {\n                    if (face == pz) {\n                      dx = -dir.x;\n                      dy = -dir.y;\n                      dz = -dir.z;\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (!dontFlipX) {\n            dx = -dx;\n          }\n          a = source._levels[0][face][addr * 4 + 3] / 255.0;\n          for (c = 0; c < 3; c++) {\n            value = source._levels[0][face][addr * 4 + c] / 255.0;\n            if (source.rgbm) {\n              value *= a * 8.0;\n              value *= value;\n            } else {\n              value = Math.pow(value, 2.2);\n            }\n            sh[coef1 + c] += value * weight1;\n            sh[coef2 + c] += value * weight2 * dx;\n            sh[coef3 + c] += value * weight2 * dy;\n            sh[coef4 + c] += value * weight2 * dz;\n            sh[coef5 + c] += value * weight3 * dx * dz;\n            sh[coef6 + c] += value * weight3 * dz * dy;\n            sh[coef7 + c] += value * weight3 * dy * dx;\n            sh[coef8 + c] += value * weight4 * (3.0 * dz * dz - 1.0);\n            sh[coef9 + c] += value * weight5 * (dx * dx - dy * dy);\n            accum += weight;\n          }\n        }\n      }\n    }\n    for (c = 0; c < sh.length; c++) {\n      sh[c] *= 4 * Math.PI / accum;\n    }\n    return sh;\n  }\n  return {prefilterCubemap:prefilterCubemap, shFromCubemap:shFromCubemap};\n}());\npc.extend(pc, function() {\n  var dpMult = 2.0;\n  function paraboloidFromCubemap(device, sourceCubemap, fixSeamsAmount, dontFlipX) {\n    var chunks = pc.shaderChunks;\n    var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, (sourceCubemap.fixCubemapSeams ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS) + chunks.genParaboloidPS, \"genParaboloid\");\n    var constantTexSource = device.scope.resolve(\"source\");\n    var constantParams = device.scope.resolve(\"params\");\n    var params = new pc.Vec4;\n    var size = sourceCubemap.width;\n    var rgbmSource = sourceCubemap.rgbm;\n    var format = sourceCubemap.format;\n    size = Math.max(size, 8) * dpMult;\n    var tex = new pc.gfx.Texture(device, {rgbm:rgbmSource, format:format, width:size * 2, height:size, mipmaps:false});\n    var targ = new pc.RenderTarget(device, tex, {depth:false});\n    params.x = fixSeamsAmount;\n    params.y = dontFlipX ? -1.0 : 1.0;\n    constantTexSource.setValue(sourceCubemap);\n    constantParams.setValue(params.data);\n    pc.drawQuadWithShader(device, targ, shader);\n    return tex;\n  }\n  function getDpAtlasRect(rect, mip) {\n    rect.x = pc.math.clamp(mip - 2.0, 0, 1) * 0.5;\n    var t = mip - rect.x * 6.0;\n    var i = 1.0 - rect.x;\n    rect.y = Math.min(t * 0.5, 0.75) * i + rect.x;\n    rect.z = (1.0 - pc.math.clamp(t, 0, 1) * 0.5) * i;\n    rect.w = rect.z * 0.5;\n    return 1.0 / rect.z;\n  }\n  function generateDpAtlas(device, sixCubemaps, dontFlipX) {\n    var dp, rect;\n    rect = new pc.Vec4;\n    var params = new pc.Vec4;\n    var size = sixCubemaps[0].width * 2 * dpMult;\n    var chunks = pc.shaderChunks;\n    var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.dpAtlasQuadPS, \"dpAtlasQuad\");\n    var constantTexSource = device.scope.resolve(\"source\");\n    var constantParams = device.scope.resolve(\"params\");\n    var tex = new pc.gfx.Texture(device, {rgbm:sixCubemaps[0].rgbm, format:sixCubemaps[0].format, width:size, height:size, mipmaps:false});\n    var targ = new pc.RenderTarget(device, tex, {depth:false});\n    var borderSize = 2;\n    var mip0Width = size;\n    var scaleFactor = (mip0Width + borderSize) / mip0Width - 1;\n    var scaleAmount;\n    for (var i = 0; i < 6; i++) {\n      dp = pc.paraboloidFromCubemap(device, sixCubemaps[i], i, dontFlipX);\n      constantTexSource.setValue(dp);\n      scaleAmount = getDpAtlasRect(rect, i);\n      params.x = scaleAmount * scaleFactor;\n      params.y = params.x * 2;\n      params.x += 1;\n      params.y += 1;\n      constantParams.setValue(params.data);\n      rect.x *= size;\n      rect.y *= size;\n      rect.z *= size;\n      rect.w *= size;\n      pc.drawQuadWithShader(device, targ, shader, rect);\n    }\n    return tex;\n  }\n  return {paraboloidFromCubemap:paraboloidFromCubemap, generateDpAtlas:generateDpAtlas};\n}());\npc.shaderChunks.alphaTestPS = \"uniform float alpha_ref;\\nvoid alphaTest(float a) {\\n    if (a < alpha_ref) discard;\\n}\\n\";\npc.shaderChunks.ambientConstantPS = \"\\nvoid addAmbient() {\\n    dDiffuseLight += light_globalAmbient;\\n}\\n\";\npc.shaderChunks.ambientPrefilteredCubePS = \"#ifndef PMREM4\\n#define PMREM4\\nuniform samplerCube texture_prefilteredCubeMap4;\\n#endif\\nvoid addAmbient() {\\n    vec3 fixedReflDir = fixSeamsStatic(dNormalW, 1.0 - 1.0 / 4.0);\\n    fixedReflDir.x *= -1.0;\\n    dDiffuseLight += processEnvironment($DECODE(textureCube(texture_prefilteredCubeMap4, fixedReflDir)).rgb);\\n}\\n\";\npc.shaderChunks.ambientPrefilteredCubeLodPS = \"#ifndef PMREM4\\n#define PMREM4\\n#extension GL_EXT_shader_texture_lod : enable\\nuniform samplerCube texture_prefilteredCubeMap128;\\n#endif\\nvoid addAmbient() {\\n    vec3 fixedReflDir = fixSeamsStatic(dNormalW, 1.0 - 1.0 / 4.0);\\n    fixedReflDir.x *= -1.0;\\n    dDiffuseLight += processEnvironment($DECODE( textureCubeLodEXT(texture_prefilteredCubeMap128, fixedReflDir, 5.0) ).rgb);\\n}\\n\";\npc.shaderChunks.ambientSHPS = \"uniform vec3 ambientSH[9];\\nvoid addAmbient() {\\n    vec3 n = dNormalW;\\n    vec3 color =\\n                        ambientSH[0] +\\n                        ambientSH[1] * n.x +\\n                        ambientSH[2] * n.y +\\n                        ambientSH[3] * n.z +\\n                        ambientSH[4] * n.x * n.z +\\n                        ambientSH[5] * n.z * n.y +\\n                        ambientSH[6] * n.y * n.x +\\n                        ambientSH[7] * (3.0 * n.z * n.z - 1.0) +\\n                        ambientSH[8] * (n.x * n.x - n.y * n.y);\\n    dDiffuseLight += processEnvironment(max(color, vec3(0.0)));\\n}\\n\";\npc.shaderChunks.aoPS = \"#ifdef MAPTEXTURE\\nuniform sampler2D texture_aoMap;\\n#endif\\nvoid applyAO() {\\n    dAo = 1.0;\\n    #ifdef MAPTEXTURE\\n        dAo *= texture2D(texture_aoMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        dAo *= saturate(vVertexColor.$VC);\\n    #endif\\n    dDiffuseLight *= dAo;\\n}\\n\";\npc.shaderChunks.aoSpecOccPS = \"uniform float material_occludeSpecularIntensity;\\nvoid occludeSpecular() {\\n    // approximated specular occlusion from AO\\n    float specPow = exp2(dGlossiness * 11.0);\\n    // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx\\n    float specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);\\n    specOcc = mix(1.0, specOcc, material_occludeSpecularIntensity);\\n    dSpecularLight *= specOcc;\\n    dReflection *= specOcc;\\n}\\n\";\npc.shaderChunks.aoSpecOccConstPS = \"void occludeSpecular() {\\n    // approximated specular occlusion from AO\\n    float specPow = exp2(dGlossiness * 11.0);\\n    // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx\\n    float specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);\\n    dSpecularLight *= specOcc;\\n    dReflection *= specOcc;\\n}\\n\";\npc.shaderChunks.aoSpecOccConstSimplePS = \"void occludeSpecular() {\\n    float specOcc = dAo;\\n    dSpecularLight *= specOcc;\\n    dReflection *= specOcc;\\n}\\n\";\npc.shaderChunks.aoSpecOccSimplePS = \"uniform float material_occludeSpecularIntensity;\\nvoid occludeSpecular() {\\n    float specOcc = mix(1.0, dAo, material_occludeSpecularIntensity);\\n    dSpecularLight *= specOcc;\\n    dReflection *= specOcc;\\n}\\n\";\npc.shaderChunks.bakeDirLmEndPS = \"\\n    vec4 dirLm = texture2D(texture_dirLightMap, vUv1);\\n    if (bakeDir > 0.5) {\\n        if (dAtten > 0.00001) {\\n            dirLm.xyz = dirLm.xyz * 2.0 - vec3(1.0);\\n            dAtten = saturate(dAtten);\\n            gl_FragColor.rgb = normalize(dLightDirNormW.xyz*dAtten + dirLm.xyz*dirLm.w) * 0.5 + vec3(0.5);\\n            gl_FragColor.a = dirLm.w + dAtten;\\n            gl_FragColor.a = max(gl_FragColor.a, 1.0 / 255.0);\\n        } else {\\n            gl_FragColor = dirLm;\\n        }\\n    } else {\\n        gl_FragColor.rgb = dirLm.xyz;\\n        gl_FragColor.a = max(dirLm.w, dAtten > 0.00001? (1.0/255.0) : 0.0);\\n    }\\n\";\npc.shaderChunks.bakeLmEndPS = \"\\ngl_FragColor.rgb = dDiffuseLight;\\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(0.5));\\ngl_FragColor.rgb /= 8.0;\\ngl_FragColor.a = clamp( max( max( gl_FragColor.r, gl_FragColor.g ), max( gl_FragColor.b, 1.0 / 255.0 ) ), 0.0,1.0 );\\ngl_FragColor.a = ceil(gl_FragColor.a * 255.0) / 255.0;\\ngl_FragColor.rgb /= gl_FragColor.a;\\n\";\npc.shaderChunks.basePS = \"\\nuniform vec3 view_position;\\nuniform vec3 light_globalAmbient;\\nfloat square(float x) {\\n    return x*x;\\n}\\nfloat saturate(float x) {\\n    return clamp(x, 0.0, 1.0);\\n}\\nvec3 saturate(vec3 x) {\\n    return clamp(x, vec3(0.0), vec3(1.0));\\n}\\n\";\npc.shaderChunks.baseVS = \"\\nattribute vec3 vertex_position;\\nattribute vec3 vertex_normal;\\nattribute vec4 vertex_tangent;\\nattribute vec2 vertex_texCoord0;\\nattribute vec2 vertex_texCoord1;\\nattribute vec4 vertex_color;\\nuniform mat4 matrix_viewProjection;\\nuniform mat4 matrix_model;\\nuniform mat3 matrix_normal;\\nvec3 dPositionW;\\nmat4 dModelMatrix;\\nmat3 dNormalMatrix;\\nvec3 dLightPosW;\\nvec3 dLightDirNormW;\\nvec3 dNormalW;\\n\";\npc.shaderChunks.biasConstPS = \"#define SHADOWBIAS\\nfloat getShadowBias(float resolution, float maxBias) {\\n    return maxBias;\\n}\\n\";\npc.shaderChunks.blurVSMPS = \"\\nvarying vec2 vUv0;\\nuniform sampler2D source;\\nuniform vec2 pixelOffset;\\n#ifdef GAUSS\\nuniform float weight[SAMPLES];\\n#endif\\n#ifdef PACKED\\nfloat decodeFloatRG(vec2 rg) {\\n    return rg.y*(1.0/255.0) + rg.x;\\n}\\nvec2 encodeFloatRG( float v ) {\\n  vec2 enc = vec2(1.0, 255.0) * v;\\n  enc = fract(enc);\\n  enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\\n  return enc;\\n}\\n#endif\\nvoid main(void) {\\n    vec3 moments = vec3(0.0);\\n    vec2 uv = vUv0 - pixelOffset * (float(SAMPLES) * 0.5);\\n    for(int i=0; i<SAMPLES; i++) {\\n        vec4 c = texture2D(source, uv + pixelOffset * float(i));\\n        #ifdef PACKED\\n        c.xy = vec2(decodeFloatRG(c.xy), decodeFloatRG(c.zw));\\n        #endif\\n        #ifdef GAUSS\\n        moments += c.xyz * weight[i];\\n        #else\\n        moments += c.xyz;\\n        #endif\\n    }\\n    #ifndef GAUSS\\n    moments /= float(SAMPLES);\\n    #endif\\n    #ifdef PACKED\\n    gl_FragColor = vec4(encodeFloatRG(moments.x), encodeFloatRG(moments.y));\\n    #else\\n    gl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);\\n    #endif\\n}\\n\";\npc.shaderChunks.combineDiffusePS = \"vec3 combineColor() {\\n    return dAlbedo * dDiffuseLight;\\n}\\n\";\npc.shaderChunks.combineDiffuseSpecularPS = \"vec3 combineColor() {\\n    return mix(dAlbedo * dDiffuseLight, dSpecularLight + dReflection.rgb * dReflection.a, dSpecularity);\\n}\\n\";\npc.shaderChunks.combineDiffuseSpecularNoConservePS = \"vec3 combineColor() {\\n    return dAlbedo * dDiffuseLight + (dSpecularLight + dReflection.rgb * dReflection.a) * dSpecularity;\\n}\\n\";\npc.shaderChunks.combineDiffuseSpecularNoReflPS = \"vec3 combineColor() {\\n    return dAlbedo * dDiffuseLight + dSpecularLight * dSpecularity;\\n}\\n\";\npc.shaderChunks.combineDiffuseSpecularNoReflSeparateAmbientPS = \"uniform vec3 material_ambient;\\nvec3 combineColor() {\\n    return (dDiffuseLight - light_globalAmbient) * dAlbedo + dSpecularLight * dSpecularity + material_ambient * light_globalAmbient;\\n}\\n\";\npc.shaderChunks.combineDiffuseSpecularOldPS = \"vec3 combineColor() {\\n    return mix(dAlbedo * dDiffuseLight + dSpecularLight * dSpecularity, dReflection.rgb, dReflection.a);\\n}\\n\";\npc.shaderChunks.cookiePS = \"vec4 getCookie2D(sampler2D tex, mat4 transform, float intensity) {\\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\\n    projPos.xy /= projPos.w;\\n    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);\\n}\\nvec4 getCookie2DClip(sampler2D tex, mat4 transform, float intensity) {\\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\\n    projPos.xy /= projPos.w;\\n    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);\\n    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);\\n}\\nvec4 getCookie2DXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {\\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\\n    projPos.xy /= projPos.w;\\n    projPos.xy += cookieOffset;\\n    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);\\n    return mix(vec4(1.0), texture2D(tex, uv), intensity);\\n}\\nvec4 getCookie2DClipXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {\\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\\n    projPos.xy /= projPos.w;\\n    projPos.xy += cookieOffset;\\n    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);\\n    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);\\n    return mix(vec4(1.0), texture2D(tex, uv), intensity);\\n}\\nvec4 getCookieCube(samplerCube tex, mat4 transform, float intensity) {\\n    return mix(vec4(1.0), textureCube(tex, dLightDirNormW * mat3(transform)), intensity);\\n}\\n\";\npc.shaderChunks.cubeMapProjectBoxPS = \"uniform vec3 envBoxMin, envBoxMax;\\nvec3 cubeMapProject(vec3 nrdir) {\\n    vec3 rbmax = (envBoxMax - vPositionW) / nrdir;\\n    vec3 rbmin = (envBoxMin - vPositionW) / nrdir;\\n    vec3 rbminmax;\\n    rbminmax.x = nrdir.x>0.0? rbmax.x : rbmin.x;\\n    rbminmax.y = nrdir.y>0.0? rbmax.y : rbmin.y;\\n    rbminmax.z = nrdir.z>0.0? rbmax.z : rbmin.z;\\n    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\\n    vec3 posonbox = vPositionW + nrdir * fa;\\n    vec3 envBoxPos = (envBoxMin + envBoxMax) * 0.5;\\n    return posonbox - envBoxPos;\\n}\\n\";\npc.shaderChunks.cubeMapProjectNonePS = \"vec3 cubeMapProject(vec3 dir) {\\n    return dir;\\n}\\n\";\npc.shaderChunks.diffusePS = \"#ifdef MAPCOLOR\\nuniform vec3 material_diffuse;\\n#endif\\n#ifdef MAPTEXTURE\\nuniform sampler2D texture_diffuseMap;\\n#endif\\nvoid getAlbedo() {\\n    dAlbedo = vec3(1.0);\\n    #ifdef MAPCOLOR\\n        dAlbedo *= material_diffuse.rgb;\\n    #endif\\n    #ifdef MAPTEXTURE\\n        dAlbedo *= texture2DSRGB(texture_diffuseMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        dAlbedo *= gammaCorrectInput(saturate(vVertexColor.$VC));\\n    #endif\\n}\\n\";\npc.shaderChunks.dilatePS = \"varying vec2 vUv0;\\nuniform sampler2D source;\\nuniform vec2 pixelOffset;\\nvoid main(void) {\\n    vec4 c = texture2D(source, vUv0);\\n    c = c.a>0.0? c : texture2D(source, vUv0 - pixelOffset);\\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, -pixelOffset.y));\\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, -pixelOffset.y));\\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, 0));\\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, 0));\\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, pixelOffset.y));\\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, pixelOffset.y));\\n    c = c.a>0.0? c : texture2D(source, vUv0 + pixelOffset);\\n    gl_FragColor = c;\\n}\\n\";\npc.shaderChunks.dpAtlasQuadPS = \"varying vec2 vUv0;\\nuniform sampler2D source;\\nuniform vec4 params;\\nvoid main(void) {\\n    vec2 uv = vUv0;\\n    uv = uv * 2.0 - vec2(1.0);\\n    uv *= params.xy;\\n    uv = uv * 0.5 + 0.5;\\n    gl_FragColor = texture2D(source, uv);\\n}\\n\";\npc.shaderChunks.emissivePS = \"#ifdef MAPCOLOR\\nuniform vec3 material_emissive;\\n#endif\\n#ifdef MAPFLOAT\\nuniform float material_emissiveIntensity;\\n#endif\\n#ifdef MAPTEXTURE\\nuniform sampler2D texture_emissiveMap;\\n#endif\\nvec3 getEmission() {\\n    vec3 emission = vec3(1.0);\\n    #ifdef MAPFLOAT\\n        emission *= material_emissiveIntensity;\\n    #endif\\n    #ifdef MAPCOLOR\\n        emission *= material_emissive;\\n    #endif\\n    #ifdef MAPTEXTURE\\n        emission *= $texture2DSAMPLE(texture_emissiveMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        emission *= gammaCorrectInput(saturate(vVertexColor.$VC));\\n    #endif\\n    return emission;\\n}\\n\";\npc.shaderChunks.endPS = \"   gl_FragColor.rgb = combineColor();\\n   gl_FragColor.rgb += getEmission();\\n   gl_FragColor.rgb = addFog(gl_FragColor.rgb);\\n   #ifndef HDR\\n    gl_FragColor.rgb = toneMap(gl_FragColor.rgb);\\n    gl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);\\n   #endif\\n\";\npc.shaderChunks.envConstPS = \"vec3 processEnvironment(vec3 color) {\\n    return color;\\n}\\n\";\npc.shaderChunks.envMultiplyPS = \"uniform float skyboxIntensity;\\nvec3 processEnvironment(vec3 color) {\\n    return color * skyboxIntensity;\\n}\\n\";\npc.shaderChunks.extensionPS = \"\";\npc.shaderChunks.extensionVS = \"\\n\";\npc.shaderChunks.falloffInvSquaredPS = \"float getFalloffInvSquared(float lightRadius) {\\n    float sqrDist = dot(dLightDirW, dLightDirW);\\n    float falloff = 1.0 / (sqrDist + 1.0);\\n    float invRadius = 1.0 / lightRadius;\\n    falloff *= 16.0;\\n    falloff *= square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );\\n    return falloff;\\n}\\n\";\npc.shaderChunks.falloffLinearPS = \"float getFalloffLinear(float lightRadius) {\\n    float d = length(dLightDirW);\\n    return max(((lightRadius - d) / lightRadius), 0.0);\\n}\\n\";\npc.shaderChunks.fixCubemapSeamsNonePS = \"vec3 fixSeams(vec3 vec, float mipmapIndex) {\\n    return vec;\\n}\\nvec3 fixSeams(vec3 vec) {\\n    return vec;\\n}\\nvec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {\\n    return vec;\\n}\\n\";\npc.shaderChunks.fixCubemapSeamsStretchPS = \"vec3 fixSeams(vec3 vec, float mipmapIndex) {\\n    float scale = 1.0 - exp2(mipmapIndex) / 128.0;\\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\\n    if (abs(vec.x) != M) vec.x *= scale;\\n    if (abs(vec.y) != M) vec.y *= scale;\\n    if (abs(vec.z) != M) vec.z *= scale;\\n    return vec;\\n}\\nvec3 fixSeams(vec3 vec) {\\n    float scale = 1.0 - 1.0 / 128.0;\\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\\n    if (abs(vec.x) != M) vec.x *= scale;\\n    if (abs(vec.y) != M) vec.y *= scale;\\n    if (abs(vec.z) != M) vec.z *= scale;\\n    return vec;\\n}\\nvec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {\\n    float scale = invRecMipSize;\\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\\n    if (abs(vec.x) != M) vec.x *= scale;\\n    if (abs(vec.y) != M) vec.y *= scale;\\n    if (abs(vec.z) != M) vec.z *= scale;\\n    return vec;\\n}\\n\";\npc.shaderChunks.fogExpPS = \"uniform vec3 fog_color;\\nuniform float fog_density;\\nvec3 addFog(vec3 color) {\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = exp(-depth * fog_density);\\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\\n    return mix(fog_color, color, fogFactor);\\n}\\n\";\npc.shaderChunks.fogExp2PS = \"uniform vec3 fog_color;\\nuniform float fog_density;\\nvec3 addFog(vec3 color) {\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = exp(-depth * depth * fog_density * fog_density);\\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\\n    return mix(fog_color, color, fogFactor);\\n}\\n\";\npc.shaderChunks.fogLinearPS = \"uniform vec3 fog_color;\\nuniform float fog_start;\\nuniform float fog_end;\\nvec3 addFog(vec3 color) {\\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\\n    float fogFactor = (fog_end - depth) / (fog_end - fog_start);\\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\\n    fogFactor = gammaCorrectInput(fogFactor);\\n    return mix(fog_color, color, fogFactor);\\n}\\n\";\npc.shaderChunks.fogNonePS = \"vec3 addFog(vec3 color) {\\n    return color;\\n}\\n\";\npc.shaderChunks.fresnelSchlickPS = \"// Schlick's approximation\\nuniform float material_fresnelFactor; // unused\\nvoid getFresnel() {\\n    float fresnel = 1.0 - max(dot(dNormalW, dViewDirW), 0.0);\\n    float fresnel2 = fresnel * fresnel;\\n    fresnel *= fresnel2 * fresnel2;\\n    fresnel *= dGlossiness * dGlossiness;\\n    dSpecularity = dSpecularity + (1.0 - dSpecularity) * fresnel;\\n}\\n\";\npc.shaderChunks.fullscreenQuadPS = \"varying vec2 vUv0;\\nuniform sampler2D source;\\nvoid main(void) {\\n    gl_FragColor = texture2D(source, vUv0);\\n}\\n\";\npc.shaderChunks.fullscreenQuadVS = \"attribute vec2 vertex_position;\\nvarying vec2 vUv0;\\nvoid main(void)\\n{\\n    gl_Position = vec4(vertex_position, 0.5, 1.0);\\n    vUv0 = vertex_position.xy*0.5+0.5;\\n}\\n\";\npc.shaderChunks.gamma1_0PS = \"vec4 texture2DSRGB(sampler2D tex, vec2 uv) {\\n    return texture2D(tex, uv);\\n}\\nvec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {\\n    return texture2D(tex, uv, bias);\\n}\\nvec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {\\n    return textureCube(tex, uvw);\\n}\\nvec3 gammaCorrectOutput(vec3 color) {\\n    return color;\\n}\\nvec3 gammaCorrectInput(vec3 color) {\\n    return color;\\n}\\nfloat gammaCorrectInput(float color) {\\n    return color;\\n}\\nvec4 gammaCorrectInput(vec4 color) {\\n    return color;\\n}\\n\";\npc.shaderChunks.gamma2_2PS = \"vec3 gammaCorrectInput(vec3 color) {\\n    return pow(color, vec3(2.2));\\n}\\nfloat gammaCorrectInput(float color) {\\n    return pow(color, 2.2);\\n}\\nvec4 gammaCorrectInput(vec4 color) {\\n    return vec4(pow(color.rgb, vec3(2.2)), color.a);\\n}\\nvec4 texture2DSRGB(sampler2D tex, vec2 uv) {\\n    vec4 rgba = texture2D(tex, uv);\\n    rgba.rgb = gammaCorrectInput(rgba.rgb);\\n    return rgba;\\n}\\nvec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {\\n    vec4 rgba = texture2D(tex, uv, bias);\\n    rgba.rgb = gammaCorrectInput(rgba.rgb);\\n    return rgba;\\n}\\nvec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {\\n    vec4 rgba = textureCube(tex, uvw);\\n    rgba.rgb = gammaCorrectInput(rgba.rgb);\\n    return rgba;\\n}\\nvec3 gammaCorrectOutput(vec3 color) {\\n#ifdef HDR\\n    return color;\\n#else\\n    color += vec3(0.0000001);\\n    return pow(color, vec3(0.45));\\n#endif\\n}\\n\";\npc.shaderChunks.genParaboloidPS = \"varying vec2 vUv0;\\nuniform samplerCube source;\\nuniform vec4 params; // x = mip\\nvoid main(void) {\\n    vec2 uv = vUv0;\\n    float side = uv.x < 0.5? 1.0 : -1.0;\\n    vec2 tc;\\n    tc.x = fract(uv.x * 2.0) * 2.0 - 1.0;\\n    tc.y = uv.y * 2.0 - 1.0;\\n    // scale projection a bit to have a little overlap for filtering\\n    const float scale = 1.1;\\n    tc *= scale;\\n    vec3 dir;\\n    dir.y = (dot(tc, tc) - 1.0) * side; // from 1.0 center to 0.0 borders quadratically\\n    dir.xz = tc * -2.0;\\n    dir.x *= -side * params.y; // flip original cubemap x instead of doing it at runtime\\n    dir = fixSeams(dir, params.x);\\n    vec4 color = textureCube(source, dir, -100.0);\\n    gl_FragColor = color;\\n}\\n\";\npc.shaderChunks.gles3PS = \"#define varying in\\nout highp vec4 pc_fragColor;\\n#define gl_FragColor pc_fragColor\\n#define texture2D texture\\n#define textureCube texture\\n#define texture2DProj textureProj\\n#define texture2DLodEXT textureLod\\n#define texture2DProjLodEXT textureProjLod\\n#define textureCubeLodEXT textureLod\\n#define texture2DGradEXT textureGrad\\n#define texture2DProjGradEXT textureProjGrad\\n#define textureCubeGradEXT textureGrad\\n#define GL2\\n\";\npc.shaderChunks.gles3VS = \"#define attribute in\\n#define varying out\\n#define texture2D texture\\n#define GL2\\n#define VERTEXSHADER\\n\";\npc.shaderChunks.glossPS = \"#ifdef MAPFLOAT\\nuniform float material_shininess;\\n#endif\\n#ifdef MAPTEXTURE\\nuniform sampler2D texture_glossMap;\\n#endif\\nvoid getGlossiness() {\\n    dGlossiness = 1.0;\\n    #ifdef MAPFLOAT\\n        dGlossiness *= material_shininess;\\n    #endif\\n    #ifdef MAPTEXTURE\\n        dGlossiness *= texture2D(texture_glossMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        dGlossiness *= saturate(vVertexColor.$VC);\\n    #endif\\n    dGlossiness += 0.0000001;\\n}\\n\";\npc.shaderChunks.instancingVS = \"\\nattribute vec4 instance_line1;\\nattribute vec4 instance_line2;\\nattribute vec4 instance_line3;\\nattribute vec4 instance_line4;\\n\";\npc.shaderChunks.lightDiffuseLambertPS = \"float getLightDiffuse() {\\n    return max(dot(dNormalW, -dLightDirNormW), 0.0);\\n}\\n\";\npc.shaderChunks.lightDirPointPS = \"void getLightDirPoint(vec3 lightPosW) {\\n    dLightDirW = vPositionW - lightPosW;\\n    dLightDirNormW = normalize(dLightDirW);\\n    dLightPosW = lightPosW;\\n}\\n\";\npc.shaderChunks.lightmapDirPS = \"uniform sampler2D texture_lightMap;\\nuniform sampler2D texture_dirLightMap;\\nvoid addLightMap() {\\n    vec3 color = $texture2DSAMPLE(texture_lightMap, $UV).$CH;\\n    vec4 dir = texture2D(texture_dirLightMap, $UV);\\n    if (dot(dir.xyz,vec3(1.0)) < 0.00001) {\\n        dDiffuseLight += color;\\n        return;\\n    }\\n    dLightDirNormW = normalize(dir.xyz * 2.0 - vec3(1.0));\\n    float vlight = saturate(dot(dLightDirNormW, -dVertexNormalW));\\n    float flight = saturate(dot(dLightDirNormW, -dNormalW));\\n    float nlight = (flight / max(vlight,0.01)) * 0.5;\\n    dDiffuseLight += color * nlight * 2.0;\\n}\\nvoid addDirLightMap() {\\n    vec4 dir = texture2D(texture_dirLightMap, $UV);\\n    if (dot(dir.xyz,vec3(1.0)) < 0.00001) return;\\n    vec3 color = $texture2DSAMPLE(texture_lightMap, $UV).$CH;\\n    dLightDirNormW = normalize(dir.xyz * 2.0 - vec3(1.0));\\n    dSpecularLight += vec3(getLightSpecular()) * color;\\n}\\n\";\npc.shaderChunks.lightmapSinglePS = \"#ifdef MAPTEXTURE\\nuniform sampler2D texture_lightMap;\\n#endif\\nvoid addLightMap() {\\n    vec3 lm = vec3(1.0);\\n    #ifdef MAPTEXTURE\\n        lm *= $texture2DSAMPLE(texture_lightMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        lm *= saturate(vVertexColor.$VC);\\n    #endif\\n    \\n    dDiffuseLight += lm;\\n}\\n\";\npc.shaderChunks.lightmapSingleVertPS = \"void addLightMap() {\\n    dDiffuseLight += saturate(vVertexColor.$CH);\\n}\\n\";\npc.shaderChunks.lightSpecularBlinnPS = \"// Energy-conserving (hopefully) Blinn-Phong\\nfloat getLightSpecular() {\\n    vec3 h = normalize( -dLightDirNormW + dViewDirW );\\n    float nh = max( dot( h, dNormalW ), 0.0 );\\n    float specPow = exp2(dGlossiness * 11.0); // glossiness is linear, power is not; 0 - 2048\\n    specPow = antiAliasGlossiness(specPow);\\n    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little\\n    specPow = max(specPow, 0.0001);\\n    return pow(nh, specPow) * (specPow + 2.0) / 8.0;\\n}\\n\";\npc.shaderChunks.lightSpecularPhongPS = \"float getLightSpecular() {\\n    float specPow = dGlossiness;\\n    specPow = antiAliasGlossiness(specPow);\\n    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little\\n    return pow(max(dot(dReflDirW, -dLightDirNormW), 0.0), specPow + 0.0001);\\n}\\n\";\npc.shaderChunks.metalnessPS = \"void processMetalness(float metalness) {\\n    const float dielectricF0 = 0.04;\\n    dSpecularity = mix(vec3(dielectricF0), dAlbedo, metalness);\\n    dAlbedo *= 1.0 - metalness;\\n}\\n#ifdef MAPFLOAT\\nuniform float material_metalness;\\n#endif\\n#ifdef MAPTEXTURE\\nuniform sampler2D texture_metalnessMap;\\n#endif\\nvoid getSpecularity() {\\n    float metalness = 1.0;\\n    #ifdef MAPFLOAT\\n        metalness *= material_metalness;\\n    #endif\\n    #ifdef MAPTEXTURE\\n        metalness *= texture2D(texture_metalnessMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        metalness *= saturate(vVertexColor.$VC);\\n    #endif\\n    processMetalness(metalness);\\n}\\n\";\npc.shaderChunks.msdfPS = \"uniform sampler2D texture_msdfMap;\\n#ifdef GL_OES_standard_derivatives\\n#define USE_FWIDTH\\n#endif\\n#ifdef GL2\\n#define USE_FWIDTH\\n#endif\\nfloat median(float r, float g, float b) {\\n    return max(min(r, g), min(max(r, g), b));\\n}\\nfloat map (float min, float max, float v) {\\n    return (v - min) / (max - min);\\n}\\n// msdf way\\n// vec4 applyMsdf(vec4 color) {\\n//     vec3 tsample = texture(texture_msdfMap, vUv0).rgb;\\n   \\n//     // separate\\n//     vec2 msdfUnit = 4.0 / vec2(512.0, 256.0);\\n//     float sigDist = median(tsample.r, tsample.g, tsample.b) - 0.5;\\n//     sigDist *= dot(msdfUnit, 0.5/fwidth(vUv0));\\n//     float distance = clamp(sigDist + 0.5, 0.0, 1.0);\\n//     return mix(vec4(0.0), color, distance);\\n// }\\nuniform float font_sdfIntensity; // intensity is used to boost the value read from the SDF, 0 is no boost, 1.0 is max boost\\nuniform float font_pxrange;      // the number of pixels between inside and outside the font in SDF\\nuniform float font_textureWidth; // the width of the texture atlas\\nvec4 applyMsdf(vec4 color) {\\n    float font_size = 16.0; // TODO fix this\\n    // sample the field\\n    vec3 tsample = texture2D(texture_msdfMap, vUv0).rgb;\\n    // get the signed distance value\\n    float sigDist = median(tsample.r, tsample.g, tsample.b);\\n    #ifdef USE_FWIDTH\\n        // smoothing depends on size of texture on screen\\n        vec2 w = fwidth(vUv0);\\n        float smoothing = clamp(map(0.0, 2.0 * font_pxrange / font_textureWidth, w.x), 0.0, 0.5);\\n    #else\\n        // smoothing gets smaller as the font size gets bigger\\n        // don't have fwidth we can approximate from font size, this doesn't account for scaling\\n        // so a big font scaled down will be wrong...\\n        float smoothing = clamp(2.0 * font_pxrange / font_size, 0.0, 0.5);\\n        // for small fonts we remap the distance field to intensify it\\n        // float mapMin = 0.05;\\n        // float mapMax = clamp(((font_size * 0.4 / 40.0) + 0.52), mapMin, 1.0);\\n    #endif\\n    float mapMin = 0.05;\\n    float mapMax = clamp(1.0 - font_sdfIntensity, mapMin, 1.0);\\n    \\n    // remap to a smaller range (used on smaller font sizes)\\n    sigDist = map(mapMin, mapMax, sigDist);\\n    float center = 0.5;\\n    // calculate smoothing and use to generate opacity\\n    // float smoothing = clamp(font_smoothing * (1.0-roy), 0.0, center);\\n    float opacity = smoothstep(center-smoothing, center+smoothing, sigDist);\\n    // return final color\\n    return mix(vec4(0.0), color, opacity);\\n}\";\npc.shaderChunks.normalVS = \"vec3 getNormal() {\\n    #ifdef SKIN\\n        dNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);\\n    #elif defined(INSTANCING)\\n        dNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);\\n    #else\\n        dNormalMatrix = matrix_normal;\\n    #endif\\n    return normalize(dNormalMatrix * vertex_normal);\\n}\\n\";\npc.shaderChunks.normalInstancedVS = \"vec3 getNormal() {\\n    dNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);\\n    return normalize(dNormalMatrix * vertex_normal);\\n}\\n\";\npc.shaderChunks.normalMapPS = \"uniform sampler2D texture_normalMap;\\nuniform float material_bumpiness;\\nvoid getNormal() {\\n    vec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\\n    dNormalMap = normalMap;\\n    dNormalW = dTBN * normalMap;\\n}\\n\";\npc.shaderChunks.normalMapFloatPS = \"uniform sampler2D texture_normalMap;\\nuniform float material_bumpiness;\\nvoid getNormal() {\\n    vec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\\n    dNormalMap = normalMap;\\n    normalMap = normalize(mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness));\\n    dNormalW = dTBN * normalMap;\\n}\\n\";\npc.shaderChunks.normalMapFloatTBNfastPS = \"uniform sampler2D texture_normalMap;\\nuniform float material_bumpiness;\\nvoid getNormal() {\\n    vec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\\n    dNormalMap = normalMap;\\n    normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness);\\n    dNormalW = normalize(dTBN * normalMap);\\n}\\n\";\npc.shaderChunks.normalSkinnedVS = \"vec3 getNormal() {\\n    dNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);\\n    return normalize(dNormalMatrix * vertex_normal);\\n}\\n\";\npc.shaderChunks.normalVertexPS = \"void getNormal() {\\n    dNormalW = normalize(dVertexNormalW);\\n}\\n\";\npc.shaderChunks.normalXYPS = \"vec3 unpackNormal(vec4 nmap) {\\n    vec3 normal;\\n    normal.xy = nmap.wy * 2.0 - 1.0;\\n    normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));\\n    return normal;\\n}\\n\";\npc.shaderChunks.normalXYZPS = \"vec3 unpackNormal(vec4 nmap) {\\n    return nmap.xyz * 2.0 - 1.0;\\n}\\n\";\npc.shaderChunks.opacityPS = \"#ifdef MAPFLOAT\\nuniform float material_opacity;\\n#endif\\n#ifdef MAPTEXTURE\\nuniform sampler2D texture_opacityMap;\\n#endif\\nvoid getOpacity() {\\n    dAlpha = 1.0;\\n    #ifdef MAPFLOAT\\n        dAlpha *= material_opacity;\\n    #endif\\n    #ifdef MAPTEXTURE\\n        dAlpha *= texture2D(texture_opacityMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        dAlpha *= saturate(vVertexColor.$VC);\\n    #endif\\n}\\n\";\npc.shaderChunks.outputAlphaPS = \"gl_FragColor.a = dAlpha;\\n\";\npc.shaderChunks.outputAlphaOpaquePS = \"gl_FragColor.a = 1.0;\\n\";\npc.shaderChunks.outputAlphaPremulPS = \"gl_FragColor.rgb *= dAlpha;\\ngl_FragColor.a = dAlpha;\\n\";\npc.shaderChunks.outputCubemapPS = \"varying vec2 vUv0;\\nuniform samplerCube source;\\nuniform vec4 params;\\nfloat saturate(float x) {\\n    return clamp(x, 0.0, 1.0);\\n}\\nvec4 encodeRGBM(vec4 color) { // modified RGBM\\n    color.rgb = pow(color.rgb, vec3(0.5));\\n    color.rgb *= 1.0 / 8.0;\\n    color.a = saturate( max( max( color.r, color.g ), max( color.b, 1.0 / 255.0 ) ) );\\n    color.a = ceil(color.a * 255.0) / 255.0;\\n    color.rgb /= color.a;\\n    return color;\\n}\\nvoid main(void) {\\n    vec2 st = vUv0 * 2.0 - 1.0;\\n    float face = params.x;\\n    vec3 vec;\\n    if (face==0.0) {\\n        vec = vec3(1, -st.y, -st.x);\\n    } else if (face==1.0) {\\n        vec = vec3(-1, -st.y, st.x);\\n    } else if (face==2.0) {\\n        vec = vec3(st.x, 1, st.y);\\n    } else if (face==3.0) {\\n        vec = vec3(st.x, -1, -st.y);\\n    } else if (face==4.0) {\\n        vec = vec3(st.x, -st.y, 1);\\n    } else {\\n        vec = vec3(-st.x, -st.y, -1);\\n    }\\n    gl_FragColor = textureCube(source, vec);\\n    if (params.w >= 2.0) gl_FragColor = encodeRGBM(gl_FragColor);\\n}\\n\";\npc.shaderChunks.outputTex2DPS = \"varying vec2 vUv0;\\nuniform sampler2D source;\\nvoid main(void) {\\n    gl_FragColor = texture2D(source, vUv0);\\n}\\n\";\npc.shaderChunks.packDepthPS = \"// Packing a float in GLSL with multiplication and mod\\n// http://blog.gradientstudios.com/2012/08/23/shadow-map-improvement\\nvec4 packFloat(float depth) {\\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\\n    // combination of mod and multiplication and division works better\\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\\n    res -= res.xxyz * bit_mask;\\n    return res;\\n}\\n\";\npc.shaderChunks.packDepthMaskPS = \"vec4 packFloat(float depth) {\\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\\n    // combination of mod and multiplication and division works better\\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\\n    res.x = 0.0;\\n    res -= res.xxyz * bit_mask;\\n    return res;\\n}\\n\";\npc.shaderChunks.parallaxPS = \"uniform sampler2D texture_heightMap;\\nuniform float material_heightMapFactor;\\nvoid getParallax() {\\n    float parallaxScale = material_heightMapFactor;\\n    float height = texture2D(texture_heightMap, $UV).$CH;\\n    height = height * parallaxScale - parallaxScale*0.5;\\n    vec3 viewDirT = dViewDirW * dTBN;\\n    viewDirT.z += 0.42;\\n    dUvOffset = height * (viewDirT.xy / viewDirT.z);\\n}\\n\";\npc.shaderChunks.particlePS = \"varying vec4 texCoordsAlphaLife;\\nuniform sampler2D colorMap;\\nuniform sampler2D internalTex3;\\nuniform float graphSampleSize;\\nuniform float graphNumSamples;\\n#ifndef CAMERAPLANES\\n#define CAMERAPLANES\\nuniform vec4 camera_params;\\n#endif\\nuniform float softening;\\nuniform float colorMult;\\nfloat saturate(float x) {\\n    return clamp(x, 0.0, 1.0);\\n}\\n#ifndef UNPACKFLOAT\\n#define UNPACKFLOAT\\nfloat unpackFloat(vec4 rgbaDepth) {\\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\\n    float depth = dot(rgbaDepth, bitShift);\\n    return depth;\\n}\\n#endif\\nvoid main(void) {\\n    vec4 tex         = texture2DSRGB(colorMap, texCoordsAlphaLife.xy);\\n    vec4 ramp     = texture2DSRGB(internalTex3, vec2(texCoordsAlphaLife.w, 0.0));\\n    ramp.rgb *= colorMult;\\n    ramp.a += texCoordsAlphaLife.z;\\n    vec3 rgb =     tex.rgb * ramp.rgb;\\n    float a =         tex.a * ramp.a;\\n\";\npc.shaderChunks.particleVS = \"\\nvec3 unpack3NFloats(float src) {\\n    float r = fract(src);\\n    float g = fract(src * 256.0);\\n    float b = fract(src * 65536.0);\\n    return vec3(r, g, b);\\n}\\nfloat saturate(float x) {\\n    return clamp(x, 0.0, 1.0);\\n}\\nvec4 tex1Dlod_lerp(sampler2D tex, vec2 tc) {\\n    return mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );\\n}\\nvec4 tex1Dlod_lerp(sampler2D tex, vec2 tc, out vec3 w) {\\n    vec4 a = texture2D(tex,tc);\\n    vec4 b = texture2D(tex,tc + graphSampleSize);\\n    float c = fract(tc.x*graphNumSamples);\\n    vec3 unpackedA = unpack3NFloats(a.w);\\n    vec3 unpackedB = unpack3NFloats(b.w);\\n    w = mix(unpackedA, unpackedB, c);\\n    return mix(a, b, c);\\n}\\nvec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix) {\\n    float c = cos(pRotation);\\n    float s = sin(pRotation);\\n    mat2 m = mat2(c, -s, s, c);\\n    rotMatrix = m;\\n    return m * quadXY;\\n}\\nvec3 billboard(vec3 InstanceCoords, vec2 quadXY) {\\n    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;\\n    return pos;\\n}\\nvoid main(void) {\\n    vec3 meshLocalPos = particle_vertexData.xyz;\\n    float id = floor(particle_vertexData.w);\\n    float rndFactor = fract(sin(id + 1.0 + seed));\\n    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));\\n    float uv = id / numParticlesPot;\\n    readInput(uv);\\n    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used\\n    float particleLifetime = lifetime;\\n    if (inLife <= 0.0 || inLife > particleLifetime || !inShow) meshLocalPos = vec3(0.0);\\n    vec2 quadXY = meshLocalPos.xy;\\n    float nlife = clamp(inLife / particleLifetime, 0.0, 1.0);\\n    vec3 paramDiv;\\n    vec4 params = tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\\n    float scale = params.y;\\n    float scaleDiv = paramDiv.x;\\n    float alphaDiv = paramDiv.z;\\n    scale += (scaleDiv * 2.0 - 1.0) * scaleDivMult * fract(rndFactor*10000.0);\\n    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5,    (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0),    nlife);\\n    vec3 particlePos = inPos;\\n    vec3 particlePosMoved = vec3(0.0);\\n    mat2 rotMatrix;\\n\";\npc.shaderChunks.particleAnimFrameClampVS = \"\\n    float animFrame = min(floor(texCoordsAlphaLife.w * animTexParams.z), animTexParams.w);\\n\";\npc.shaderChunks.particleAnimFrameLoopVS = \"\\n    float animFrame = floor(texCoordsAlphaLife.w * animTexParams.z);\\n\";\npc.shaderChunks.particleAnimTexVS = \"\\n    float atlasX = animFrame * animTexParams.x;\\n    float atlasY = floor(atlasX) * animTexParams.y;\\n    atlasX = fract(atlasX);\\n    texCoordsAlphaLife.xy *= animTexParams.xy;\\n    texCoordsAlphaLife.xy += vec2(atlasX, atlasY);\\n    texCoordsAlphaLife.y = 1.0 - texCoordsAlphaLife.y;\\n\";\npc.shaderChunks.particleInputFloatPS = \"void readInput(float uv) {\\n    vec4 tex = texture2D(particleTexIN, vec2(uv, 0.25));\\n    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.75));\\n    inPos = tex.xyz;\\n    inVel = tex2.xyz;\\n    inAngle = (tex.w < 0.0? -tex.w : tex.w) - 1000.0;\\n    inShow = tex.w >= 0.0;\\n    inLife = tex2.w;\\n}\\n\";\npc.shaderChunks.particleInputRgba8PS = \"//RG=X, BA=Y\\n//RG=Z, BA=A\\n//RGB=V, A=visMode\\n//RGBA=life\\n#define PI2 6.283185307179586\\nuniform vec3 inBoundsSize;\\nuniform vec3 inBoundsCenter;\\nuniform float maxVel;\\nfloat decodeFloatRG(vec2 rg) {\\n    return rg.y*(1.0/255.0) + rg.x;\\n}\\nfloat decodeFloatRGBA( vec4 rgba ) {\\n  return dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\\n}\\nvoid readInput(float uv) {\\n    vec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));\\n    vec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));\\n    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));\\n    vec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));\\n    inPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));\\n    inPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;\\n    inVel = tex2.xyz;\\n    inVel = (inVel - vec3(0.5)) * maxVel;\\n    inAngle = decodeFloatRG(tex1.ba) * PI2;\\n    inShow = tex2.a > 0.5;\\n    inLife = decodeFloatRGBA(tex3);\\n    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\\n    float maxPosLife = lifetime+1.0;\\n    inLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;\\n}\\n\";\npc.shaderChunks.particleOutputFloatPS = \"void writeOutput() {\\n    if (gl_FragCoord.y<1.0) {\\n        gl_FragColor = vec4(outPos, (outAngle + 1000.0) * visMode);\\n    } else {\\n        gl_FragColor = vec4(outVel, outLife);\\n    }\\n}\\n\";\npc.shaderChunks.particleOutputRgba8PS = \"uniform vec3 outBoundsMul;\\nuniform vec3 outBoundsAdd;\\nvec2 encodeFloatRG( float v ) {\\n  vec2 enc = vec2(1.0, 255.0) * v;\\n  enc = fract(enc);\\n  enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\\n  return enc;\\n}\\nvec4 encodeFloatRGBA( float v ) {\\n  vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;\\n  enc = fract(enc);\\n  enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);\\n  return enc;\\n}\\nvoid writeOutput() {\\n    //outPos = (outPos - outBoundsCenter) / outBoundsSize + vec3(0.5);\\n    outPos = outPos * outBoundsMul + outBoundsAdd;\\n    outAngle = fract(outAngle / PI2);\\n    outVel = (outVel / maxVel) + vec3(0.5); // TODO: mul\\n    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\\n    float maxPosLife = lifetime+1.0;\\n    outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);\\n    if (gl_FragCoord.y < 1.0) {\\n        gl_FragColor = vec4(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));\\n    } else if (gl_FragCoord.y < 2.0) {\\n        gl_FragColor = vec4(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));\\n    } else if (gl_FragCoord.y < 3.0) {\\n        gl_FragColor = vec4(outVel, visMode*0.5+0.5);\\n    } else {\\n        gl_FragColor = encodeFloatRGBA(outLife);\\n    }\\n}\\n\";\npc.shaderChunks.particleUpdaterAABBPS = \"uniform mat3 spawnBounds;\\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\\n    return emitterPos + spawnBounds * (inBounds - vec3(0.5));\\n}\\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\\n    localVelocity -= vec3(0, 0, initialVelocity);\\n}\\n\";\npc.shaderChunks.particleUpdaterEndPS = \"\\n    writeOutput();\\n}\\n\";\npc.shaderChunks.particleUpdaterInitPS = \"varying vec2 vUv0;\\nuniform sampler2D particleTexIN;\\nuniform sampler2D internalTex0;\\nuniform sampler2D internalTex1;\\nuniform sampler2D internalTex2;\\nuniform mat3 emitterMatrix;\\nuniform vec3 emitterScale;\\nuniform vec3 emitterPos, frameRandom, localVelocityDivMult, velocityDivMult;\\nuniform float delta, rate, rateDiv, lifetime, numParticles, rotSpeedDivMult, seed;\\nuniform float startAngle, startAngle2;\\nuniform float initialVelocity;\\nuniform float graphSampleSize;\\nuniform float graphNumSamples;\\nvec3 inPos;\\nvec3 inVel;\\nfloat inAngle;\\nbool inShow;\\nfloat inLife;\\nfloat visMode;\\nvec3 outPos;\\nvec3 outVel;\\nfloat outAngle;\\nbool outShow;\\nfloat outLife;\\n\";\npc.shaderChunks.particleUpdaterNoRespawnPS = \"    if (outLife >= lifetime) {\\n        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);\\n        visMode = -1.0;\\n    }\\n\";\npc.shaderChunks.particleUpdaterOnStopPS = \"    visMode = outLife < 0.0? -1.0: visMode;\\n\";\npc.shaderChunks.particleUpdaterRespawnPS = \"    if (outLife >= lifetime) {\\n        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);\\n        visMode = 1.0;\\n    }\\n    visMode = outLife < 0.0? 1.0: visMode;\\n\";\npc.shaderChunks.particleUpdaterSpherePS = \"uniform float spawnBoundsSphere;\\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\\n    float rnd4 = fract(rndFactor * 1000.0);\\n    return emitterPos + normalize(inBounds.xyz - vec3(0.5)) * rnd4 * spawnBoundsSphere;\\n}\\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\\n    localVelocity += normalize(inBounds - vec3(0.5)) * initialVelocity;\\n}\\n\";\npc.shaderChunks.particleUpdaterStartPS = \"float saturate(float x) {\\n    return clamp(x, 0.0, 1.0);\\n}\\nvec3 unpack3NFloats(float src) {\\n    float r = fract(src);\\n    float g = fract(src * 256.0);\\n    float b = fract(src * 65536.0);\\n    return vec3(r, g, b);\\n}\\nvec3 tex1Dlod_lerp(sampler2D tex, vec2 tc, out vec3 w) {\\n    vec4 a = texture2D(tex, tc);\\n    vec4 b = texture2D(tex, tc + graphSampleSize);\\n    float c = fract(tc.x * graphNumSamples);\\n    vec3 unpackedA = unpack3NFloats(a.w);\\n    vec3 unpackedB = unpack3NFloats(b.w);\\n    w = mix(unpackedA, unpackedB, c);\\n    return mix(a.xyz, b.xyz, c);\\n}\\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\\nvec4 hash41(float p) {\\n    vec4 p4 = fract(vec4(p) * HASHSCALE4);\\n    p4 += dot(p4, p4.wzxy+19.19);\\n    return fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));\\n}\\nvoid main(void)\\n{\\n    if (gl_FragCoord.x > numParticles) discard;\\n    readInput(vUv0.x);\\n    visMode = inShow? 1.0 : -1.0;\\n    vec4 rndFactor = hash41(gl_FragCoord.x + seed);\\n    float particleRate = rate + rateDiv * rndFactor.x;\\n    outLife = inLife + delta;\\n    float nlife = clamp(outLife / lifetime, 0.0, 1.0);\\n    vec3 localVelocityDiv;\\n    vec3 velocityDiv;\\n    vec3 paramDiv;\\n    vec3 localVelocity = tex1Dlod_lerp(internalTex0, vec2(nlife, 0), localVelocityDiv);\\n    vec3 velocity =      tex1Dlod_lerp(internalTex1, vec2(nlife, 0), velocityDiv);\\n    vec3 params =        tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\\n    float rotSpeed = params.x;\\n    float rotSpeedDiv = paramDiv.y;\\n    localVelocity +=    (localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;\\n    velocity +=         (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;\\n    rotSpeed +=         (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;\\n    addInitialVelocity(localVelocity, rndFactor.xyz);\\n    outVel = emitterMatrix * localVelocity.xyz + velocity.xyz * emitterScale;\\n    outPos = inPos + outVel * delta;\\n    outAngle = inAngle + rotSpeed * delta;\\n    bool respawn = outLife <= 0.0 || outLife >= lifetime;\\n    outPos = respawn? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : outPos;\\n    outAngle = respawn? mix(startAngle, startAngle2, rndFactor.x) : outAngle;\\n    outVel = respawn? vec3(0.0) : outVel;\\n\";\npc.shaderChunks.particle_billboardVS = \"\\n    quadXY = rotate(quadXY, inAngle, rotMatrix);\\n    vec3 localPos = billboard(particlePos, quadXY);\\n\";\npc.shaderChunks.particle_blendAddPS = \"\\n    rgb *= saturate(gammaCorrectInput(a));\\n    if ((rgb.r + rgb.g + rgb.b) < 0.000001) discard;\\n\";\npc.shaderChunks.particle_blendMultiplyPS = \"\\n    rgb = mix(vec3(1.0), rgb, vec3(a));\\n    if (rgb.r + rgb.g + rgb.b > 2.99) discard;\\n\";\npc.shaderChunks.particle_blendNormalPS = \"\\n    if (a < 0.01) discard;\\n\";\npc.shaderChunks.particle_cpuVS = \"attribute vec4 particle_vertexData;     // XYZ = world pos, W = life\\nattribute vec4 particle_vertexData2;     // X = angle, Y = scale, Z = alpha, W = velocity.x\\nattribute vec4 particle_vertexData3;     // XYZ = particle local pos, W = velocity.y\\nattribute vec2 particle_vertexData4;     // X = velocity.z, W = particle ID\\nuniform mat4 matrix_viewProjection;\\nuniform mat4 matrix_model;\\n#ifndef VIEWMATRIX\\n#define VIEWMATRIX\\nuniform mat4 matrix_view;\\n#endif\\nuniform mat3 matrix_normal;\\nuniform mat4 matrix_viewInverse;\\nuniform float numParticles;\\nuniform float lifetime;\\nuniform float stretch;\\n//uniform float graphSampleSize;\\n//uniform float graphNumSamples;\\nuniform vec3 wrapBounds, emitterScale;\\nuniform sampler2D texLifeAndSourcePosOUT;\\nuniform sampler2D internalTex0;\\nuniform sampler2D internalTex1;\\nuniform sampler2D internalTex2;\\nuniform vec3 emitterPos;\\nvarying vec4 texCoordsAlphaLife;\\nvec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)\\n{\\n    float c = cos(pRotation);\\n    float s = sin(pRotation);\\n    //vec4 rotationMatrix = vec4(c, -s, s, c);\\n    mat2 m = mat2(c, -s, s, c);\\n    rotMatrix = m;\\n    return m * quadXY;\\n}\\nvec3 billboard(vec3 InstanceCoords, vec2 quadXY)\\n{\\n    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;\\n    return pos;\\n}\\nvoid main(void)\\n{\\n    vec3 particlePos = particle_vertexData.xyz;\\n    vec3 inPos = particlePos;\\n    vec3 vertPos = particle_vertexData3.xyz;\\n    vec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData4.x);\\n    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used\\n    vec2 quadXY = vertPos.xy;\\n    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);\\n    mat2 rotMatrix;\\n    float inAngle = particle_vertexData2.x;\\n    vec3 particlePosMoved = vec3(0.0);\\n    vec3 meshLocalPos = particle_vertexData3.xyz;\\n\";\npc.shaderChunks.particle_cpu_endVS = \"\\n    localPos *= particle_vertexData2.y * emitterScale;\\n    localPos += particlePos;\\n    gl_Position = matrix_viewProjection * vec4(localPos, 1.0);\\n\";\npc.shaderChunks.particle_endPS = \"    rgb = addFog(rgb);\\n    rgb = toneMap(rgb);\\n    rgb = gammaCorrectOutput(rgb);\\n    gl_FragColor = vec4(rgb, a);\\n}\\n\";\npc.shaderChunks.particle_endVS = \"\\n    localPos *= scale * emitterScale;\\n    localPos += particlePos;\\n    gl_Position = matrix_viewProjection * vec4(localPos.xyz, 1.0);\\n\";\npc.shaderChunks.particle_halflambertPS = \"\\n    vec3 negNormal = normal*0.5+0.5;\\n    vec3 posNormal = -normal*0.5+0.5;\\n    negNormal *= negNormal;\\n    posNormal *= posNormal;\\n\";\npc.shaderChunks.particle_initVS = \"attribute vec4 particle_vertexData; // XYZ = particle position, W = particle ID + random factor\\nuniform mat4 matrix_viewProjection;\\nuniform mat4 matrix_model;\\nuniform mat3 matrix_normal;\\nuniform mat4 matrix_viewInverse;\\n#ifndef VIEWMATRIX\\n#define VIEWMATRIX\\nuniform mat4 matrix_view;\\n#endif\\nuniform float numParticles, numParticlesPot;\\nuniform float graphSampleSize;\\nuniform float graphNumSamples;\\nuniform float stretch;\\nuniform vec3 wrapBounds;\\nuniform vec3 emitterScale, emitterPos;\\nuniform float rate, rateDiv, lifetime, deltaRandomnessStatic, scaleDivMult, alphaDivMult, seed, delta;\\nuniform sampler2D particleTexOUT, particleTexIN;\\nuniform sampler2D internalTex0;\\nuniform sampler2D internalTex1;\\nuniform sampler2D internalTex2;\\n#ifndef CAMERAPLANES\\n#define CAMERAPLANES\\nuniform vec4 camera_params;\\n#endif\\nvarying vec4 texCoordsAlphaLife;\\nvec3 inPos;\\nvec3 inVel;\\nfloat inAngle;\\nbool inShow;\\nfloat inLife;\\n\";\npc.shaderChunks.particle_lambertPS = \"\\n    vec3 negNormal = max(normal, vec3(0.0));\\n    vec3 posNormal = max(-normal, vec3(0.0));\\n\";\npc.shaderChunks.particle_lightingPS = \"\\n    vec3 light = negNormal.x*lightCube[0] + posNormal.x*lightCube[1] +\\n                        negNormal.y*lightCube[2] + posNormal.y*lightCube[3] +\\n                        negNormal.z*lightCube[4] + posNormal.z*lightCube[5];\\n    rgb *= light;\\n\";\npc.shaderChunks.particle_localShiftVS = \"    particlePos += emitterPos;\\n\";\npc.shaderChunks.particle_meshVS = \"\\n    vec3 localPos = meshLocalPos;\\n    localPos.xy = rotate(localPos.xy, inAngle, rotMatrix);\\n    localPos.yz = rotate(localPos.yz, inAngle, rotMatrix);\\n    billboard(particlePos, quadXY);\\n\";\npc.shaderChunks.particle_normalVS = \"\\n    Normal = normalize(localPos + matrix_viewInverse[2].xyz);\\n\";\npc.shaderChunks.particle_normalMapPS = \"\\n    vec3 normalMap         = normalize( texture2D(normalMap, texCoordsAlphaLife.xy).xyz * 2.0 - 1.0 );\\n    vec3 normal = ParticleMat * normalMap;\\n\";\npc.shaderChunks.particle_pointAlongVS = \"    inAngle = atan(velocityV.x, velocityV.y); // not the fastest way, but easier to plug in; TODO: create rot matrix right from vectors\\n\";\npc.shaderChunks.particle_softPS = \"\\n    float depth = getLinearScreenDepth();\\n    float particleDepth = vDepth;\\n    float depthDiff = saturate(abs(particleDepth - depth) * softening);\\n    a *= depthDiff;\\n\";\npc.shaderChunks.particle_softVS = \"\\n    vDepth = getLinearDepth(localPos);\\n\";\npc.shaderChunks.particle_stretchVS = \"    vec3 moveDir = inVel * stretch;\\n    vec3 posPrev = inPos - moveDir;\\n    posPrev += particlePosMoved;\\n    vec2 centerToVertexV = normalize((mat3(matrix_view) * localPos).xy);\\n    float interpolation = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;\\n    particlePos = mix(particlePos, posPrev, interpolation);\\n\";\npc.shaderChunks.particle_TBNVS = \"\\n    mat3 rot3 = mat3(rotMatrix[0][0], rotMatrix[0][1], 0.0,        rotMatrix[1][0], rotMatrix[1][1], 0.0,        0.0, 0.0, 1.0);\\n    ParticleMat = mat3(-matrix_viewInverse[0].xyz, -matrix_viewInverse[1].xyz, matrix_viewInverse[2].xyz) * rot3;\\n\";\npc.shaderChunks.particle_wrapVS = \"\\n    vec3 origParticlePos = particlePos;\\n    particlePos -= matrix_model[3].xyz;\\n    particlePos = mod(particlePos, wrapBounds) - wrapBounds * 0.5;\\n    particlePos += matrix_model[3].xyz;\\n    particlePosMoved = particlePos - origParticlePos;\\n\";\npc.shaderChunks.precisionTestPS = \"void main(void) {\\n    gl_FragColor = vec4(2147483648.0);\\n}\\n\";\npc.shaderChunks.precisionTest2PS = \"uniform sampler2D source;\\nvec4 packFloat(float depth) {\\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\\n    res -= res.xxyz * bit_mask;\\n    return res;\\n}\\nvoid main(void) {\\n    float c = texture2D(source, vec2(0.0)).r;\\n    float diff = abs(c - 2147483648.0) / 2147483648.0;\\n    gl_FragColor = packFloat(diff);\\n}\\n\";\npc.shaderChunks.prefilterCubemapPS = \"varying vec2 vUv0;\\nuniform samplerCube source;\\nuniform vec4 params;\\nfloat saturate(float x) {\\n    return clamp(x, 0.0, 1.0);\\n}\\nfloat rnd(vec2 uv) {\\n    return fract(sin(dot(uv, vec2(12.9898, 78.233) * 2.0)) * 43758.5453);\\n}\\nconst float PI = 3.14159265358979;\\nvec3 hemisphereSample_cos(vec2 uv, mat3 vecSpace, vec3 cubeDir, float gloss) { // cos + lerped cone size (better than just lerped)\\n    float phi = uv.y * 2.0 * PI;\\n    float cosTheta = sqrt(1.0 - uv.x);\\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\n    vec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\\n    return normalize(mix(vecSpace * sampleDir, cubeDir, params.y));\\n}\\nvec3 hemisphereSample_phong(vec2 uv, mat3 vecSpace, vec3 cubeDir, float specPow) {\\n    float phi = uv.y * 2.0 * PI;\\n    float cosTheta = pow(1.0 - uv.x, 1.0 / (specPow + 1.0));\\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\n    vec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\\n    return vecSpace * sampleDir;\\n}\\nmat3 matrixFromVector(vec3 n) { // frisvad\\n    float a = 1.0 / (1.0 + n.z);\\n    float b = -n.x * n.y * a;\\n    vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\\n    vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\\n    return mat3(b1, b2, n);\\n}\\nvec4 encodeRGBM(vec3 color) { // modified RGBM\\n    vec4 encoded;\\n    encoded.rgb = pow(color.rgb, vec3(0.5));\\n    encoded.rgb *= 1.0 / 8.0;\\n    encoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );\\n    encoded.a = ceil(encoded.a * 255.0) / 255.0;\\n    encoded.rgb /= encoded.a;\\n    return encoded;\\n}\\nvoid main(void) {\\n    vec2 st = vUv0 * 2.0 - 1.0;\\n    if (params.w==1.0 || params.w==3.0) {\\n        st = 2.0 * floor(gl_FragCoord.xy) / (params.z - 1.0) - 1.0;\\n    }\\n    float face = params.x;\\n    vec3 vec;\\n    if (face==0.0) {\\n        vec = vec3(1, -st.y, -st.x);\\n    } else if (face==1.0) {\\n        vec = vec3(-1, -st.y, st.x);\\n    } else if (face==2.0) {\\n        vec = vec3(st.x, 1, st.y);\\n    } else if (face==3.0) {\\n        vec = vec3(st.x, -1, -st.y);\\n    } else if (face==4.0) {\\n        vec = vec3(st.x, -st.y, 1);\\n    } else {\\n        vec = vec3(-st.x, -st.y, -1);\\n    }\\n    mat3 vecSpace = matrixFromVector(normalize(vec));\\n    vec3 color = vec3(0.0);\\n    const int samples = $NUMSAMPLES;\\n    vec3 vect;\\n    for(int i=0; i<samples; i++) {\\n        float sini = sin(float(i));\\n        float cosi = cos(float(i));\\n        float rand = rnd(vec2(sini, cosi));\\n        vect = hemisphereSample_$METHOD(vec2(float(i) / float(samples), rand), vecSpace, vec, params.y);\\n        color += $textureCube(source, vect).rgb;\\n    }\\n    color /= float(samples);\\n    gl_FragColor = params.w < 2.0? vec4(color, 1.0) : encodeRGBM(color);\\n}\\n\";\npc.shaderChunks.reflDirPS = \"void getReflDir() {\\n    dReflDirW = normalize(-reflect(dViewDirW, dNormalW));\\n}\\n\";\npc.shaderChunks.reflectionCubePS = \"uniform samplerCube texture_cubeMap;\\nuniform float material_reflectivity;\\nvoid addReflection() {\\n    vec3 lookupVec = fixSeams(cubeMapProject(dReflDirW));\\n    lookupVec.x *= -1.0;\\n    dReflection += vec4($textureCubeSAMPLE(texture_cubeMap, lookupVec).rgb, material_reflectivity);\\n}\\n\";\npc.shaderChunks.reflectionDpAtlasPS = \"uniform sampler2D texture_sphereMap;\\nuniform float material_reflectivity;\\nvec2 getDpAtlasUv(vec2 uv, float mip) {\\n    vec4 rect;\\n    float sx = saturate(mip - 2.0);\\n    rect.x = sx * 0.5;\\n    float t = mip - rect.x * 6.0;\\n    float i = 1.0 - rect.x;\\n    rect.y = min(t * 0.5, 0.75) * i + rect.x;\\n    float st = saturate(t);\\n    rect.z = (1.0 - st * 0.5) * i;\\n    rect.w = rect.z * 0.5;\\n    float rcRectZ = 1.0 / rect.z;\\n    float scaleFactor = 0.00390625 * rcRectZ; // 0.0078125 = (256 + 2) / 256 - 1, 0.00390625 same for 512\\n    vec2 scale = vec2(scaleFactor, scaleFactor * 2.0);\\n    uv = uv * (vec2(1.0) - scale) + scale * 0.5;\\n    uv = uv * rect.zw + rect.xy;\\n    return uv;\\n}\\nvoid addReflection() {\\n    vec3 reflDir = normalize(cubeMapProject(dReflDirW));\\n    // Convert vector to DP coords\\n    bool up = reflDir.y > 0.0;\\n    float scale = 0.90909090909090909090909090909091;// 1.0 / 1.1;\\n    vec3 reflDirWarp = reflDir.xzx * vec3(-0.25, 0.5, 0.25);\\n    float reflDirVer = abs(reflDir.y) + 1.0;\\n    reflDirWarp /= reflDirVer;\\n    reflDirWarp *= scale;\\n    reflDirWarp = vec3(0.75, 0.5, 0.25) - reflDirWarp;\\n    vec2 tc = up? reflDirWarp.xy : reflDirWarp.zy;\\n    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level\\n    float mip = floor(bias);\\n    vec3 tex1 = $texture2DSAMPLE(texture_sphereMap, getDpAtlasUv(tc, mip)).rgb;\\n    mip = min(mip + 1.0, 5.0);\\n    vec3 tex2 = $texture2DSAMPLE(texture_sphereMap, getDpAtlasUv(tc, mip)).rgb;\\n    tex1 = mix(tex1, tex2, fract(bias));\\n    tex1 = processEnvironment(tex1);\\n    dReflection += vec4(tex1, material_reflectivity);\\n}\\n\";\npc.shaderChunks.reflectionPrefilteredCubePS = \"uniform samplerCube texture_prefilteredCubeMap128;\\nuniform samplerCube texture_prefilteredCubeMap64;\\nuniform samplerCube texture_prefilteredCubeMap32;\\nuniform samplerCube texture_prefilteredCubeMap16;\\nuniform samplerCube texture_prefilteredCubeMap8;\\n#ifndef PMREM4\\n#define PMREM4\\nuniform samplerCube texture_prefilteredCubeMap4;\\n#endif\\nuniform float material_reflectivity;\\nvoid addReflection() {\\n    // Unfortunately, WebGL doesn't allow us using textureCubeLod. Therefore bunch of nasty workarounds is required.\\n    // We fix mip0 to 128x128, so code is rather static.\\n    // Mips smaller than 4x4 aren't great even for diffuse. Don't forget that we don't have bilinear filtering between different faces.\\n    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level\\n    int index1 = int(bias);\\n    int index2 = int(min(bias + 1.0, 7.0));\\n    vec3 fixedReflDir = fixSeams(cubeMapProject(dReflDirW), bias);\\n    fixedReflDir.x *= -1.0;\\n    vec4 cubes[6];\\n    cubes[0] = textureCube(texture_prefilteredCubeMap128, fixedReflDir);\\n    cubes[1] = textureCube(texture_prefilteredCubeMap64, fixedReflDir);\\n    cubes[2] = textureCube(texture_prefilteredCubeMap32, fixedReflDir);\\n    cubes[3] = textureCube(texture_prefilteredCubeMap16, fixedReflDir);\\n    cubes[4] = textureCube(texture_prefilteredCubeMap8, fixedReflDir);\\n    cubes[5] = textureCube(texture_prefilteredCubeMap4, fixedReflDir);\\n    // Also we don't have dynamic indexing in PS, so...\\n    vec4 cube[2];\\n    for(int i = 0; i < 6; i++) {\\n        if (i == index1) {\\n            cube[0] = cubes[i];\\n        }\\n        if (i == index2) {\\n            cube[1] = cubes[i];\\n        }\\n    }\\n    // another variant\\n    /*if (index1==0){ cube[0]=cubes[0];\\n    }else if (index1==1){ cube[0]=cubes[1];\\n    }else if (index1==2){ cube[0]=cubes[2];\\n    }else if (index1==3){ cube[0]=cubes[3];\\n    }else if (index1==4){ cube[0]=cubes[4];\\n    }else if (index1==5){ cube[0]=cubes[5];}\\n    if (index2==0){ cube[1]=cubes[0];\\n    }else if (index2==1){ cube[1]=cubes[1];\\n    }else if (index2==2){ cube[1]=cubes[2];\\n    }else if (index2==3){ cube[1]=cubes[3];\\n    }else if (index2==4){ cube[1]=cubes[4];\\n    }else if (index2==5){ cube[1]=cubes[5];}*/\\n    vec4 cubeFinal = mix(cube[0], cube[1], fract(bias));\\n    vec3 refl = processEnvironment($DECODE(cubeFinal).rgb);\\n    dReflection += vec4(refl, material_reflectivity);\\n}\\n\";\npc.shaderChunks.reflectionPrefilteredCubeLodPS = \"\\n#ifndef PMREM4\\n#define PMREM4\\n#extension GL_EXT_shader_texture_lod : enable\\nuniform samplerCube texture_prefilteredCubeMap128;\\n#endif\\nuniform float material_reflectivity;\\nvoid addReflection() {\\n    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level\\n    vec3 fixedReflDir = fixSeams(cubeMapProject(dReflDirW), bias);\\n    fixedReflDir.x *= -1.0;\\n    vec3 refl = processEnvironment($DECODE( textureCubeLodEXT(texture_prefilteredCubeMap128, fixedReflDir, bias) ).rgb);\\n    dReflection += vec4(refl, material_reflectivity);\\n}\\n\";\npc.shaderChunks.reflectionSpherePS = \"#ifndef VIEWMATRIX\\n#define VIEWMATRIX\\nuniform mat4 matrix_view;\\n#endif\\nuniform sampler2D texture_sphereMap;\\nuniform float material_reflectivity;\\nvoid addReflection() {\\n    vec3 reflDirV = (mat3(matrix_view) * dReflDirW).xyz;\\n    float m = 2.0 * sqrt( dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z+1.0)*(reflDirV.z+1.0) );\\n    vec2 sphereMapUv = reflDirV.xy / m + 0.5;\\n    dReflection += vec4($texture2DSAMPLE(texture_sphereMap, sphereMapUv).rgb, material_reflectivity);\\n}\\n\";\npc.shaderChunks.reflectionSphereLowPS = \"uniform sampler2D texture_sphereMap;\\nuniform float material_reflectivity;\\nvoid addReflection() {\\n    vec3 reflDirV = vNormalV;\\n    vec2 sphereMapUv = reflDirV.xy * 0.5 + 0.5;\\n    dReflection += vec4($texture2DSAMPLE(texture_sphereMap, sphereMapUv).rgb, material_reflectivity);\\n}\\n\";\npc.shaderChunks.refractionPS = \"uniform float material_refraction, material_refractionIndex;\\nvec3 refract2(vec3 viewVec, vec3 Normal, float IOR) {\\n    float vn = dot(viewVec, Normal);\\n    float k = 1.0 - IOR * IOR * (1.0 - vn * vn);\\n    vec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * Normal;\\n    return refrVec;\\n}\\nvoid addRefraction() {\\n    // use same reflection code with refraction vector\\n    vec3 tmp = dReflDirW;\\n    vec4 tmp2 = dReflection;\\n    dReflection = vec4(0.0);\\n    dReflDirW = refract2(-dViewDirW, dNormalW, material_refractionIndex);\\n    addReflection();\\n    dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * dAlbedo, material_refraction);\\n    dReflDirW = tmp;\\n    dReflection = tmp2;\\n}\\n\";\npc.shaderChunks.rgbmPS = \"vec3 decodeRGBM(vec4 rgbm) {\\n    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;\\n    return color * color;\\n}\\nvec3 texture2DRGBM(sampler2D tex, vec2 uv) {\\n    return decodeRGBM(texture2D(tex, uv));\\n}\\nvec3 textureCubeRGBM(samplerCube tex, vec3 uvw) {\\n    return decodeRGBM(textureCube(tex, uvw));\\n}\\n\";\npc.shaderChunks.screenDepthPS = \"uniform sampler2D uDepthMap;\\n#ifndef SCREENSIZE\\n#define SCREENSIZE\\nuniform vec4 uScreenSize;\\n#endif\\n#ifndef VIEWMATRIX\\n#define VIEWMATRIX\\nuniform mat4 matrix_view;\\n#endif\\n#ifndef CAMERAPLANES\\n#define CAMERAPLANES\\nuniform vec4 camera_params; // 1 / camera_far,      camera_far,     (1 - f / n) / 2,        (1 + f / n) / 2\\n#endif\\n#ifdef GL2\\n    float linearizeDepth(float z) {\\n        z = z * 2.0 - 1.0;\\n        return 1.0 / (camera_params.z * z + camera_params.w);\\n    }\\n#else\\n    #ifndef UNPACKFLOAT\\n    #define UNPACKFLOAT\\n    float unpackFloat(vec4 rgbaDepth) {\\n        const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\\n        return dot(rgbaDepth, bitShift);\\n    }\\n    #endif\\n#endif\\n// Retrieves rendered linear camera depth by UV\\nfloat getLinearScreenDepth(vec2 uv) {\\n    #ifdef GL2\\n        return linearizeDepth(texture2D(uDepthMap, uv).r) * camera_params.y;\\n    #else\\n        return unpackFloat(texture2D(uDepthMap, uv)) * camera_params.y;\\n    #endif\\n}\\n#ifndef VERTEXSHADER\\n// Retrieves rendered linear camera depth under the current pixel\\nfloat getLinearScreenDepth() {\\n    vec2 uv = gl_FragCoord.xy * uScreenSize.zw;\\n    return getLinearScreenDepth(uv);\\n}\\n#endif\\n// Generates linear camera depth for the given world position\\nfloat getLinearDepth(vec3 pos) {\\n    return -(matrix_view * vec4(pos, 1.0)).z;\\n}\\n\";\npc.shaderChunks.shadowCommonPS = \"void normalOffsetPointShadow(vec4 shadowParams) {\\n    float distScale = length(dLightDirW);\\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale; //0.02\\n    vec3 dir = wPos - dLightPosW;\\n    dLightDirW = dir;\\n}\\n\";\npc.shaderChunks.shadowCoordPS = \"void _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\\n    dShadowCoord = (shadowMatrix * vec4(wPos, 1.0)).xyz;\\n    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001;\\n    #ifdef SHADOWBIAS\\n        dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\\n    #endif\\n}\\nvoid _getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {\\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\\n    projPos.xy /= projPos.w;\\n    dShadowCoord.xy = projPos.xy;\\n    dShadowCoord.z = length(dLightDirW) * shadowParams.w;\\n    #ifdef SHADOWBIAS\\n        dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\\n    #endif\\n}\\nvoid getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {\\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);\\n}\\nvoid getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams) {\\n    _getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);\\n}\\nvoid getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {\\n    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?\\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\\n    _getShadowCoordPersp(shadowMatrix, shadowParams, wPos);\\n}\\nvoid getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0); //0.08\\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);\\n}\\n\";\npc.shaderChunks.shadowCoordVS = \"void getLightDirPoint(vec3 lightPosW) {\\n    vec3 lightDirW = vPositionW - lightPosW;\\n    dLightDirNormW = normalize(lightDirW);\\n    dLightPosW = lightPosW;\\n}\\nvoid _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\\n    vMainShadowUv = projPos;\\n}\\nvoid _getShadowCoordPersp(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\\n    vMainShadowUv = projPos;\\n}\\nvoid getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {\\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);\\n}\\nvoid getShadowCoordPersp(mat4 shadowMatrix, vec3 shadowParams) {\\n    _getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);\\n}\\nvoid getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\\n    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?\\n    vec3 wPos = vPositionW + dNormalW * shadowParams.y * clamp(1.0 - dot(dNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\\n    _getShadowCoordPersp(shadowMatrix, shadowParams, wPos);\\n}\\nvoid getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\\n    vec3 wPos = vPositionW + dNormalW * shadowParams.y * clamp(1.0 - dot(dNormalW, -dLightDirNormW), 0.0, 1.0); //0.08\\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);\\n}\\n\";\npc.shaderChunks.shadowCoordPerspZbufferPS = \"void _getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {\\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\\n    projPos.xyz /= projPos.w;\\n    dShadowCoord = projPos.xyz;\\n    // depth bias is already applied on render\\n}\\nvoid getShadowCoordPerspZbufferNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {\\n    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?\\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\\n    _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);\\n}\\nvoid getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams) {\\n    _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, vPositionW);\\n}\\n\";\npc.shaderChunks.shadowEVSMPS = \"float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\\n    vec3 moments = texture2D(tex, texCoords).xyz;\\n    return calculateEVSM(moments, Z, vsmBias, exponent);\\n}\\nfloat getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {\\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\\n}\\nfloat getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {\\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);\\n}\\n\";\npc.shaderChunks.shadowEVSMnPS = \"float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\\n    float pixelSize = 1.0 / resolution;\\n    texCoords -= vec2(pixelSize);\\n    vec3 s00 = texture2D(tex, texCoords).xyz;\\n    vec3 s10 = texture2D(tex, texCoords + vec2(pixelSize, 0)).xyz;\\n    vec3 s01 = texture2D(tex, texCoords + vec2(0, pixelSize)).xyz;\\n    vec3 s11 = texture2D(tex, texCoords + vec2(pixelSize)).xyz;\\n    vec2 fr = fract(texCoords * resolution);\\n    vec3 h0 = mix(s00, s10, fr.x);\\n    vec3 h1 = mix(s01, s11, fr.x);\\n    vec3 moments = mix(h0, h1, fr.y);\\n    return calculateEVSM(moments, Z, vsmBias, exponent);\\n}\\nfloat getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {\\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\\n}\\nfloat getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {\\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);\\n}\\n\";\npc.shaderChunks.shadowStandardPS = \"vec3 lessThan2(vec3 a, vec3 b) {\\n    return clamp((b - a)*1000.0, 0.0, 1.0); // softer version\\n}\\n#ifndef UNPACKFLOAT\\n#define UNPACKFLOAT\\nfloat unpackFloat(vec4 rgbaDepth) {\\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\\n    return dot(rgbaDepth, bitShift);\\n}\\n#endif\\n// ----- Direct/Spot Sampling -----\\n#ifdef GL2\\n    float _getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {\\n        float z = dShadowCoord.z;\\n        vec2 uv = dShadowCoord.xy * shadowParams.x; // 1 unit - 1 texel\\n        float shadowMapSizeInv = 1.0 / shadowParams.x;\\n        vec2 base_uv = floor(uv + 0.5);\\n        float s = (uv.x + 0.5 - base_uv.x);\\n        float t = (uv.y + 0.5 - base_uv.y);\\n        base_uv -= vec2(0.5);\\n        base_uv *= shadowMapSizeInv;\\n        float sum = 0.0;\\n        float uw0 = (3.0 - 2.0 * s);\\n        float uw1 = (1.0 + 2.0 * s);\\n        float u0 = (2.0 - s) / uw0 - 1.0;\\n        float u1 = s / uw1 + 1.0;\\n        float vw0 = (3.0 - 2.0 * t);\\n        float vw1 = (1.0 + 2.0 * t);\\n        float v0 = (2.0 - t) / vw0 - 1.0;\\n        float v1 = t / vw1 + 1.0;\\n        u0 = u0 * shadowMapSizeInv + base_uv.x;\\n        v0 = v0 * shadowMapSizeInv + base_uv.y;\\n        u1 = u1 * shadowMapSizeInv + base_uv.x;\\n        v1 = v1 * shadowMapSizeInv + base_uv.y;\\n        sum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));\\n        sum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));\\n        sum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));\\n        sum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));\\n        sum *= 1.0f / 16.0;\\n        return sum;\\n    }\\n    float getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {\\n        return _getShadowPCF3x3(shadowMap, shadowParams);\\n    }\\n    float getShadowSpotPCF3x3(sampler2DShadow shadowMap, vec4 shadowParams) {\\n        return _getShadowPCF3x3(shadowMap, shadowParams.xyz);\\n    }\\n#else\\n    float _xgetShadowPCF3x3(mat3 depthKernel, sampler2D shadowMap, vec3 shadowParams) {\\n        mat3 shadowKernel;\\n        vec3 shadowCoord = dShadowCoord;\\n        vec3 shadowZ = vec3(shadowCoord.z);\\n        shadowKernel[0] = vec3(greaterThan(depthKernel[0], shadowZ));\\n        shadowKernel[1] = vec3(greaterThan(depthKernel[1], shadowZ));\\n        shadowKernel[2] = vec3(greaterThan(depthKernel[2], shadowZ));\\n        vec2 fractionalCoord = fract( shadowCoord.xy * shadowParams.x );\\n        shadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\\n        shadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\\n        vec4 shadowValues;\\n        shadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\\n        shadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\\n        shadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\\n        shadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\\n        return dot( shadowValues, vec4( 1.0 ) ) * 0.25;\\n    }\\n    float _getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {\\n        vec3 shadowCoord = dShadowCoord;\\n        float xoffset = 1.0 / shadowParams.x; // 1/shadow map width\\n        float dx0 = -xoffset;\\n        float dx1 = xoffset;\\n        mat3 depthKernel;\\n        depthKernel[0][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx0)));\\n        depthKernel[0][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, 0.0)));\\n        depthKernel[0][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx1)));\\n        depthKernel[1][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx0)));\\n        depthKernel[1][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy));\\n        depthKernel[1][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx1)));\\n        depthKernel[2][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx0)));\\n        depthKernel[2][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, 0.0)));\\n        depthKernel[2][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx1)));\\n        return _xgetShadowPCF3x3(depthKernel, shadowMap, shadowParams);\\n    }\\n    float getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {\\n        return _getShadowPCF3x3(shadowMap, shadowParams);\\n    }\\n    float getShadowSpotPCF3x3(sampler2D shadowMap, vec4 shadowParams) {\\n        return _getShadowPCF3x3(shadowMap, shadowParams.xyz);\\n    }\\n#endif\\n// ----- Point Sampling -----\\nfloat _getShadowPoint(samplerCube shadowMap, vec4 shadowParams, vec3 dir) {\\n    vec3 tc = normalize(dir);\\n    vec3 tcAbs = abs(tc);\\n    vec4 dirX = vec4(1,0,0, tc.x);\\n    vec4 dirY = vec4(0,1,0, tc.y);\\n    float majorAxisLength = tc.z;\\n    if ((tcAbs.x > tcAbs.y) && (tcAbs.x > tcAbs.z)) {\\n        dirX = vec4(0,0,1, tc.z);\\n        dirY = vec4(0,1,0, tc.y);\\n        majorAxisLength = tc.x;\\n    } else if ((tcAbs.y > tcAbs.x) && (tcAbs.y > tcAbs.z)) {\\n        dirX = vec4(1,0,0, tc.x);\\n        dirY = vec4(0,0,1, tc.z);\\n        majorAxisLength = tc.y;\\n    }\\n    float shadowParamsInFaceSpace = ((1.0/shadowParams.x) * 2.0) * abs(majorAxisLength);\\n    vec3 xoffset = (dirX.xyz * shadowParamsInFaceSpace);\\n    vec3 yoffset = (dirY.xyz * shadowParamsInFaceSpace);\\n    vec3 dx0 = -xoffset;\\n    vec3 dy0 = -yoffset;\\n    vec3 dx1 = xoffset;\\n    vec3 dy1 = yoffset;\\n    mat3 shadowKernel;\\n    mat3 depthKernel;\\n    depthKernel[0][0] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy0));\\n    depthKernel[0][1] = unpackFloat(textureCube(shadowMap, tc + dx0));\\n    depthKernel[0][2] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy1));\\n    depthKernel[1][0] = unpackFloat(textureCube(shadowMap, tc + dy0));\\n    depthKernel[1][1] = unpackFloat(textureCube(shadowMap, tc));\\n    depthKernel[1][2] = unpackFloat(textureCube(shadowMap, tc + dy1));\\n    depthKernel[2][0] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy0));\\n    depthKernel[2][1] = unpackFloat(textureCube(shadowMap, tc + dx1));\\n    depthKernel[2][2] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy1));\\n    vec3 shadowZ = vec3(length(dir) * shadowParams.w + shadowParams.z);\\n    shadowKernel[0] = vec3(lessThan2(depthKernel[0], shadowZ));\\n    shadowKernel[1] = vec3(lessThan2(depthKernel[1], shadowZ));\\n    shadowKernel[2] = vec3(lessThan2(depthKernel[2], shadowZ));\\n    vec2 uv = (vec2(dirX.w, dirY.w) / abs(majorAxisLength)) * 0.5;\\n    vec2 fractionalCoord = fract( uv * shadowParams.x );\\n    shadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\\n    shadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\\n    vec4 shadowValues;\\n    shadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\\n    shadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\\n    shadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\\n    shadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\\n    return 1.0 - dot( shadowValues, vec4( 1.0 ) ) * 0.25;\\n}\\nfloat getShadowPointPCF3x3(samplerCube shadowMap, vec4 shadowParams) {\\n    return _getShadowPoint(shadowMap, shadowParams, dLightDirW);\\n}\\n\";\npc.shaderChunks.shadowStandardGL2PS = \"float _getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {\\n    // http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/\\n    float z = dShadowCoord.z;\\n    vec2 uv = dShadowCoord.xy * shadowParams.x; // 1 unit - 1 texel\\n    float shadowMapSizeInv = 1.0 / shadowParams.x;\\n    vec2 base_uv = floor(uv + 0.5);\\n    float s = (uv.x + 0.5 - base_uv.x);\\n    float t = (uv.y + 0.5 - base_uv.y);\\n    base_uv -= vec2(0.5);\\n    base_uv *= shadowMapSizeInv;\\n    float uw0 = (4.0 - 3.0 * s);\\n    float uw1 = 7.0;\\n    float uw2 = (1.0 + 3.0 * s);\\n    float u0 = (3.0 - 2.0 * s) / uw0 - 2.0;\\n    float u1 = (3.0 + s) / uw1;\\n    float u2 = s / uw2 + 2.0;\\n    float vw0 = (4.0 - 3.0 * t);\\n    float vw1 = 7.0;\\n    float vw2 = (1.0 + 3.0 * t);\\n    float v0 = (3.0 - 2.0 * t) / vw0 - 2.0;\\n    float v1 = (3.0 + t) / vw1;\\n    float v2 = t / vw2 + 2.0;\\n    float sum = 0.0;\\n    u0 = u0 * shadowMapSizeInv + base_uv.x;\\n    v0 = v0 * shadowMapSizeInv + base_uv.y;\\n    u1 = u1 * shadowMapSizeInv + base_uv.x;\\n    v1 = v1 * shadowMapSizeInv + base_uv.y;\\n    u2 = u2 * shadowMapSizeInv + base_uv.x;\\n    v2 = v2 * shadowMapSizeInv + base_uv.y;\\n    sum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));\\n    sum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));\\n    sum += uw2 * vw0 * texture(shadowMap, vec3(u2, v0, z));\\n    sum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));\\n    sum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));\\n    sum += uw2 * vw1 * texture(shadowMap, vec3(u2, v1, z));\\n    sum += uw0 * vw2 * texture(shadowMap, vec3(u0, v2, z));\\n    sum += uw1 * vw2 * texture(shadowMap, vec3(u1, v2, z));\\n    sum += uw2 * vw2 * texture(shadowMap, vec3(u2, v2, z));\\n    sum *= 1.0f / 144.0;\\n    sum = gammaCorrectInput(sum); // gives softer gradient\\n    sum = saturate(sum);\\n    return sum;\\n}\\nfloat getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {\\n    return _getShadowPCF5x5(shadowMap, shadowParams);\\n}\\nfloat getShadowSpotPCF5x5(sampler2DShadow shadowMap, vec4 shadowParams) {\\n    return _getShadowPCF5x5(shadowMap, shadowParams.xyz);\\n}\\n\";\npc.shaderChunks.shadowStandardGL2VSPS = \"float getShadowPCF5x5VS(sampler2DShadow shadowMap, vec3 shadowParams) {\\n    dShadowCoord = vMainShadowUv.xyz;\\n    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001; // prevent going to dark after the far plane\\n    return _getShadowPCF5x5(shadowMap, shadowParams);\\n}\\n\";\npc.shaderChunks.shadowStandardVSPS = \"#ifdef GL2\\n#define SHADOW_SAMPLERVS sampler2DShadow\\n#else\\n#define SHADOW_SAMPLERVS sampler2D\\n#endif\\nfloat getShadowPCF3x3VS(SHADOW_SAMPLERVS shadowMap, vec3 shadowParams) {\\n    dShadowCoord = vMainShadowUv.xyz;\\n    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001;\\n    #ifdef SHADOWBIAS\\n        dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\\n    #endif\\n    return _getShadowPCF3x3(shadowMap, shadowParams);\\n}\\n\";\npc.shaderChunks.shadowVSM8PS = \"float calculateVSM8(vec3 moments, float Z, float vsmBias) {\\n    float VSMBias = vsmBias;//0.01 * 0.25;\\n    float depthScale = VSMBias * Z;\\n    float minVariance1 = depthScale * depthScale;\\n    return chebyshevUpperBound(moments.xy, Z, minVariance1, 0.1);\\n}\\nfloat decodeFloatRG(vec2 rg) {\\n    return rg.y*(1.0/255.0) + rg.x;\\n}\\nfloat VSM8(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\\n    vec4 c = texture2D(tex, texCoords);\\n    vec3 moments = vec3(decodeFloatRG(c.xy), decodeFloatRG(c.zw), 0.0);\\n    return calculateVSM8(moments, Z, vsmBias);\\n}\\nfloat getShadowVSM8(sampler2D shadowMap, vec3 shadowParams, float exponent) {\\n    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, 0.0);\\n}\\nfloat getShadowSpotVSM8(sampler2D shadowMap, vec4 shadowParams, float exponent) {\\n    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, 0.0);\\n}\\n\";\npc.shaderChunks.shadowVSMVSPS = \"float getShadowVSM$VS(sampler2D shadowMap, vec3 shadowParams, float exponent) {\\n    dShadowCoord = vMainShadowUv.xyz;\\n    dShadowCoord.z += shadowParams.z;\\n    dShadowCoord.xyz /= vMainShadowUv.w;\\n    dShadowCoord.z = min(dShadowCoord.z, 1.0);\\n    return $VSM(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\\n}\\n\";\npc.shaderChunks.shadowVSM_commonPS = \"float linstep(float a, float b, float v) {\\n    return saturate((v - a) / (b - a));\\n}\\nfloat reduceLightBleeding(float pMax, float amount) {\\n  // Remove the [0, amount] tail and linearly rescale (amount, 1].\\n   return linstep(amount, 1.0, pMax);\\n}\\nfloat chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {\\n    // Compute variance\\n    float variance = moments.y - (moments.x * moments.x);\\n    variance = max(variance, minVariance);\\n    // Compute probabilistic upper bound\\n    float d = mean - moments.x;\\n    float pMax = variance / (variance + (d * d));\\n    pMax = reduceLightBleeding(pMax, lightBleedingReduction);\\n    // One-tailed Chebyshev\\n    return (mean <= moments.x ? 1.0 : pMax);\\n}\\nfloat calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {\\n    Z = 2.0 * Z - 1.0;\\n    float warpedDepth = exp(exponent * Z);\\n    moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);\\n    float VSMBias = vsmBias;//0.01 * 0.25;\\n    float depthScale = VSMBias * exponent * warpedDepth;\\n    float minVariance1 = depthScale * depthScale;\\n    return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);\\n}\\n\";\npc.shaderChunks.skinBatchConstVS = \"attribute float vertex_boneIndices;\\nuniform mat4 matrix_pose[BONE_LIMIT];\\nmat4 getBoneMatrix(const in float i) {\\n    mat4 bone = matrix_pose[int(i)];\\n    return bone;\\n}\\n\";\npc.shaderChunks.skinBatchTexVS = \"attribute float vertex_boneIndices;\\nuniform sampler2D texture_poseMap;\\nuniform vec2 texture_poseMapSize;\\nmat4 getBoneMatrix(const in float i) {\\n    float j = i * 4.0;\\n    float x = mod(j, float(texture_poseMapSize.x));\\n    float y = floor(j / float(texture_poseMapSize.x));\\n    float dx = 1.0 / float(texture_poseMapSize.x);\\n    float dy = 1.0 / float(texture_poseMapSize.y);\\n    y = dy * (y + 0.5);\\n    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));\\n    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));\\n    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));\\n    vec4 v4 = texture2D(texture_poseMap, vec2(dx * (x + 3.5), y));\\n    mat4 bone = mat4(v1, v2, v3, v4);\\n    return bone;\\n}\\n\";\npc.shaderChunks.skinConstVS = \"attribute vec4 vertex_boneWeights;\\nattribute vec4 vertex_boneIndices;\\nuniform mat4 matrix_pose[BONE_LIMIT];\\nmat4 getBoneMatrix(const in float i)\\n{\\n    mat4 bone = matrix_pose[int(i)];\\n    return bone;\\n}\\n\";\npc.shaderChunks.skinTexVS = \"attribute vec4 vertex_boneWeights;\\nattribute vec4 vertex_boneIndices;\\nuniform sampler2D texture_poseMap;\\nuniform vec2 texture_poseMapSize;\\nmat4 getBoneMatrix(const in float i)\\n{\\n    float j = i * 4.0;\\n    float x = mod(j, float(texture_poseMapSize.x));\\n    float y = floor(j / float(texture_poseMapSize.x));\\n    float dx = 1.0 / float(texture_poseMapSize.x);\\n    float dy = 1.0 / float(texture_poseMapSize.y);\\n    y = dy * (y + 0.5);\\n    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));\\n    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));\\n    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));\\n    vec4 v4 = texture2D(texture_poseMap, vec2(dx * (x + 3.5), y));\\n    mat4 bone = mat4(v1, v2, v3, v4);\\n    return bone;\\n}\\n\";\npc.shaderChunks.skyboxPS = \"varying vec3 vViewDir;\\nuniform samplerCube texture_cubeMap;\\nvoid main(void) {\\n    gl_FragColor = textureCube(texture_cubeMap, fixSeams(vViewDir));\\n}\\n\";\npc.shaderChunks.skyboxVS = \"attribute vec3 aPosition;\\n#ifndef VIEWMATRIX\\n#define VIEWMATRIX\\nuniform mat4 matrix_view;\\n#endif\\nuniform mat4 matrix_projection;\\nvarying vec3 vViewDir;\\nvoid main(void)\\n{\\n    mat4 view = matrix_view;\\n    view[3][0] = view[3][1] = view[3][2] = 0.0;\\n    gl_Position = matrix_projection * view * vec4(aPosition, 1.0);\\n    // Force skybox to far Z, regardless of the clip planes on the camera\\n    // Subtract a tiny fudge factor to ensure floating point errors don't\\n    // still push pixels beyond far Z. See:\\n    // http://www.opengl.org/discussion_boards/showthread.php/171867-skybox-problem\\n    gl_Position.z = gl_Position.w - 0.00001;\\n    vViewDir = aPosition;\\n    vViewDir.x *= -1.0;\\n}\\n\";\npc.shaderChunks.skyboxHDRPS = \"varying vec3 vViewDir;\\nuniform samplerCube texture_cubeMap;\\nvoid main(void) {\\n    vec3 color = processEnvironment($textureCubeSAMPLE(texture_cubeMap, fixSeamsStatic(vViewDir, $FIXCONST)).rgb);\\n    color = toneMap(color);\\n    color = gammaCorrectOutput(color);\\n    gl_FragColor = vec4(color, 1.0);\\n}\\n\";\npc.shaderChunks.skyboxPrefilteredCubePS = \"varying vec3 vViewDir;\\nuniform samplerCube texture_cubeMap;\\nvec3 fixSeamsStretch(vec3 vec, float mipmapIndex, float cubemapSize) {\\n    float scale = 1.0 - exp2(mipmapIndex) / cubemapSize;\\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\\n    if (abs(vec.x) != M) vec.x *= scale;\\n    if (abs(vec.y) != M) vec.y *= scale;\\n    if (abs(vec.z) != M) vec.z *= scale;\\n    return vec;\\n}\\nvoid main(void) {\\n    vec3 color = textureCubeRGBM(texture_cubeMap, fixSeamsStretch(vViewDir, 0.0, 128.0));\\n    color = toneMap(color);\\n    color = gammaCorrectOutput(color);\\n    gl_FragColor = vec4(color, 1.0);\\n}\\n\";\npc.shaderChunks.specularPS = \"#ifdef MAPCOLOR\\nuniform vec3 material_specular;\\n#endif\\n#ifdef MAPTEXTURE\\nuniform sampler2D texture_specularMap;\\n#endif\\nvoid getSpecularity() {\\n    dSpecularity = vec3(1.0);\\n    #ifdef MAPCOLOR\\n        dSpecularity *= material_specular;\\n    #endif\\n    #ifdef MAPTEXTURE\\n        dSpecularity *= texture2D(texture_specularMap, $UV).$CH;\\n    #endif\\n    #ifdef MAPVERTEX\\n        dSpecularity *= saturate(vVertexColor.$VC);\\n    #endif\\n}\\n\";\npc.shaderChunks.specularAaNonePS = \"float antiAliasGlossiness(float power) {\\n    return power;\\n}\\n\";\npc.shaderChunks.specularAaToksvigPS = \"float antiAliasGlossiness(float power) {\\n    float rlen = 1.0 / saturate(length(dNormalMap));\\n    float toksvig = 1.0 / (1.0 + power * (rlen - 1.0));\\n    return power * toksvig;\\n}\\n\";\npc.shaderChunks.specularAaToksvigFloatPS = \"float antiAliasGlossiness(float power) {\\n    float rlen = 1.0 / saturate(length(dNormalMap));\\n    float toksvig = 1.0 / (1.0 + power * (rlen - 1.0));\\n    return power * mix(1.0, toksvig, material_bumpiness);\\n}\\n\";\npc.shaderChunks.spotPS = \"float getSpotEffect(vec3 lightSpotDirW, float lightInnerConeAngle, float lightOuterConeAngle) {\\n    float cosAngle = dot(dLightDirNormW, lightSpotDirW);\\n    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);\\n}\\n\";\npc.shaderChunks.startPS = \"\\nvoid main(void) {\\n    dDiffuseLight = vec3(0);\\n    dSpecularLight = vec3(0);\\n    dReflection = vec4(0);\\n    dSpecularity = vec3(0);\\n\";\npc.shaderChunks.startVS = \"\\nvoid main(void) {\\n    gl_Position = getPosition();\\n\";\npc.shaderChunks.storeEVSMPS = \"float exponent = VSM_EXPONENT;\\ndepth = 2.0 * depth - 1.0;\\ndepth =  exp(exponent * depth);\\ngl_FragColor = vec4(depth, depth*depth, 1.0, 1.0);\\n\";\npc.shaderChunks.tangentBinormalVS = \"\\nvec3 getTangent() {\\n    return normalize(dNormalMatrix * vertex_tangent.xyz);\\n}\\nvec3 getBinormal() {\\n    return cross(vNormalW, vTangentW) * vertex_tangent.w;\\n}\\n\";\npc.shaderChunks.TBNPS = \"void getTBN() {\\n    dTBN = mat3(normalize(dTangentW), normalize(dBinormalW), normalize(dVertexNormalW));\\n}\\n\";\npc.shaderChunks.TBNfastPS = \"void getTBN() {\\n    dTBN = mat3(dTangentW, dBinormalW, dVertexNormalW);\\n}\\n\";\npc.shaderChunks.tonemappingAcesPS = \"uniform float exposure;\\nvec3 toneMap(vec3 color) {\\n    float tA = 2.51;\\n    float tB = 0.03;\\n    float tC = 2.43;\\n    float tD = 0.59;\\n    float tE = 0.14;\\n    vec3 x = color * exposure;\\n    return (x*(tA*x+tB))/(x*(tC*x+tD)+tE);\\n}\\n\";\npc.shaderChunks.tonemappingAces2PS = \"uniform float exposure;\\n// ACES approximation by Stephen Hill\\n// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\\nconst mat3 ACESInputMat = mat3(\\n    0.59719, 0.35458, 0.04823,\\n    0.07600, 0.90834, 0.01566,\\n    0.02840, 0.13383, 0.83777\\n);\\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\\nconst mat3 ACESOutputMat = mat3(\\n     1.60475, -0.53108, -0.07367,\\n    -0.10208,  1.10813, -0.00605,\\n    -0.00327, -0.07276,  1.07602\\n);\\nvec3 RRTAndODTFit(vec3 v) {\\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\\n    return a / b;\\n}\\nvec3 toneMap(vec3 color) {\\n    color *= exposure;\\n    color = color * ACESInputMat;\\n    // Apply RRT and ODT\\n    color = RRTAndODTFit(color);\\n    color = color * ACESOutputMat;\\n    // Clamp to [0, 1]\\n    color = clamp(color, 0.0, 1.0);\\n    return color;\\n}\\n\";\npc.shaderChunks.tonemappingFilmicPS = \"const float A =  0.15;\\nconst float B =  0.50;\\nconst float C =  0.10;\\nconst float D =  0.20;\\nconst float E =  0.02;\\nconst float F =  0.30;\\nconst float W =  11.2;\\nuniform float exposure;\\nvec3 uncharted2Tonemap(vec3 x) {\\n   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\\n}\\nvec3 toneMap(vec3 color) {\\n    color = uncharted2Tonemap(color * exposure);\\n    vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));\\n    color = color * whiteScale;\\n    return color;\\n}\\n\";\npc.shaderChunks.tonemappingHejlPS = \"uniform float exposure;\\nvec3 toneMap(vec3 color) {\\n    color *= exposure;\\n    const float  A = 0.22, B = 0.3, C = .1, D = 0.2, E = .01, F = 0.3;\\n    const float Scl = 1.25;\\n    vec3 h = max( vec3(0.0), color - vec3(0.004) );\\n    return (h*((Scl*A)*h+Scl*vec3(C*B,C*B,C*B))+Scl*vec3(D*E,D*E,D*E)) / (h*(A*h+vec3(B,B,B))+vec3(D*F,D*F,D*F)) - Scl*vec3(E/F,E/F,E/F);\\n}\\n\";\npc.shaderChunks.tonemappingLinearPS = \"uniform float exposure;\\nvec3 toneMap(vec3 color) {\\n    return color * exposure;\\n}\\n\";\npc.shaderChunks.tonemappingNonePS = \"vec3 toneMap(vec3 color) {\\n    return color;\\n}\\n\";\npc.shaderChunks.transformVS = \"#ifdef PIXELSNAP\\n    uniform vec4 uScreenSize;\\n#endif\\n#ifdef NINESLICED\\n    #ifndef NINESLICE\\n    #define NINESLICE\\n    uniform vec4 innerOffset;\\n    uniform vec2 outerScale;\\n    uniform vec4 atlasRect;\\n    varying vec2 vTiledUv;\\n    #endif\\n#endif\\nmat4 getModelMatrix() {\\n    #ifdef DYNAMICBATCH\\n        return getBoneMatrix(vertex_boneIndices);\\n    #elif defined(SKIN)\\n        return matrix_model * (getBoneMatrix(vertex_boneIndices.x) * vertex_boneWeights.x +\\n               getBoneMatrix(vertex_boneIndices.y) * vertex_boneWeights.y +\\n               getBoneMatrix(vertex_boneIndices.z) * vertex_boneWeights.z +\\n               getBoneMatrix(vertex_boneIndices.w) * vertex_boneWeights.w);\\n    #elif defined(INSTANCING)\\n        return mat4(instance_line1, instance_line2, instance_line3, instance_line4);\\n    #else\\n        return matrix_model;\\n    #endif\\n}\\nvec4 getPosition() {\\n    dModelMatrix = getModelMatrix();\\n    vec3 localPos = vertex_position;\\n    #ifdef NINESLICED\\n        // outer and inner vertices are at the same position, scale both\\n        localPos.xz *= outerScale;\\n        // offset inner vertices inside\\n        // (original vertices must be in [-1;1] range)\\n        vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\\n        vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\\n        localPos.xz += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\\n        vTiledUv = (localPos.xz - outerScale + innerOffset.xy) * -0.5 + 1.0; // uv = local pos - inner corner\\n        localPos.xz *= -0.5; // move from -1;1 to -0.5;0.5\\n        localPos = localPos.xzy;\\n    #endif\\n    vec4 posW = dModelMatrix * vec4(localPos, 1.0);\\n    #ifdef SCREENSPACE\\n        posW.zw = vec2(0.0, 1.0);\\n    #endif\\n    dPositionW = posW.xyz;\\n    vec4 screenPos;\\n    #ifdef UV1LAYOUT\\n        screenPos = vec4(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1);\\n    #else\\n        #ifdef SCREENSPACE\\n            screenPos = posW;\\n        #else\\n            screenPos = matrix_viewProjection * posW;\\n        #endif\\n        #ifdef PIXELSNAP\\n            // snap vertex to a pixel boundary\\n            screenPos.xy = (screenPos.xy * 0.5) + 0.5;\\n            screenPos.xy *= uScreenSize.xy;\\n            screenPos.xy = floor(screenPos.xy);\\n            screenPos.xy *= uScreenSize.zw;\\n            screenPos.xy = (screenPos.xy * 2.0) - 1.0;\\n        #endif\\n    #endif\\n    return screenPos;\\n}\\nvec3 getWorldPosition() {\\n    return dPositionW;\\n}\\n\";\npc.shaderChunks.transformDeclVS = \"attribute vec3 vertex_position;\\nuniform mat4 matrix_model;\\nuniform mat4 matrix_viewProjection;\\nvec3 dPositionW;\\nmat4 dModelMatrix;\\n\";\npc.shaderChunks.uv0VS = \"\\nvec2 getUv0() {\\n    return vertex_texCoord0;\\n}\\n\";\npc.shaderChunks.uv1VS = \"\\nvec2 getUv1() {\\n    return vertex_texCoord1;\\n}\\n\";\npc.shaderChunks.uv9SliceVS = \"#ifndef NINESLICE\\n#define NINESLICE\\nuniform vec4 innerOffset;\\nuniform vec2 outerScale;\\nuniform vec4 atlasRect;\\nvarying vec2 vTiledUv;\\n#endif\\nvarying vec2 vMask;\\nvec2 getUv0() {\\n    vec2 uv = vertex_position.xz;\\n    // offset inner vertices inside\\n    // (original vertices must be in [-1;1] range)\\n    vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\\n    vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\\n    uv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\\n    uv = uv * -0.5 + 0.5;\\n    uv = uv * atlasRect.zw + atlasRect.xy;\\n    vMask = vertex_texCoord0.xy;\\n    return uv;\\n}\\n\";\npc.shaderChunks.viewDirPS = \"void getViewDir() {\\n    dViewDirW = normalize(view_position - vPositionW);\\n}\\n\";\npc.shaderChunks.viewNormalVS = \"\\n#ifndef VIEWMATRIX\\n#define VIEWMATRIX\\nuniform mat4 matrix_view;\\n#endif\\nvec3 getViewNormal() {\\n    return mat3(matrix_view) * vNormalW;\\n}\\n\";\npc.programlib = {gammaCode:function(value) {\n  if (value === pc.GAMMA_SRGB || value === pc.GAMMA_SRGBFAST) {\n    return pc.shaderChunks.gamma2_2PS;\n  } else {\n    if (value === pc.GAMMA_SRGBHDR) {\n      return \"#define HDR\\n\" + pc.shaderChunks.gamma2_2PS;\n    }\n  }\n  return pc.shaderChunks.gamma1_0PS;\n}, tonemapCode:function(value) {\n  if (value === pc.TONEMAP_FILMIC) {\n    return pc.shaderChunks.tonemappingFilmicPS;\n  } else {\n    if (value === pc.TONEMAP_LINEAR) {\n      return pc.shaderChunks.tonemappingLinearPS;\n    } else {\n      if (value === pc.TONEMAP_HEJL) {\n        return pc.shaderChunks.tonemappingHejlPS;\n      } else {\n        if (value === pc.TONEMAP_ACES) {\n          return pc.shaderChunks.tonemappingAcesPS;\n        } else {\n          if (value === pc.TONEMAP_ACES2) {\n            return pc.shaderChunks.tonemappingAces2PS;\n          }\n        }\n      }\n    }\n  }\n  return pc.shaderChunks.tonemappingNonePS;\n}, fogCode:function(value) {\n  if (value === \"linear\") {\n    return pc.shaderChunks.fogLinearPS;\n  } else {\n    if (value === \"exp\") {\n      return pc.shaderChunks.fogExpPS;\n    } else {\n      if (value === \"exp2\") {\n        return pc.shaderChunks.fogExp2PS;\n      } else {\n        return pc.shaderChunks.fogNonePS;\n      }\n    }\n  }\n}, skinCode:function(device, chunks) {\n  if (!chunks) {\n    chunks = pc.shaderChunks;\n  }\n  if (device.supportsBoneTextures) {\n    return chunks.skinTexVS;\n  } else {\n    return \"#define BONE_LIMIT \" + device.getBoneLimit() + \"\\n\" + chunks.skinConstVS;\n  }\n}, precisionCode:function(device) {\n  var pcode = \"precision \" + device.precision + \" float;\\n\";\n  if (device.webgl2) {\n    pcode += \"#ifdef GL2\\nprecision \" + device.precision + \" sampler2DShadow;\\n#endif\\n\";\n  }\n  return pcode;\n}, versionCode:function(device) {\n  return device.webgl2 ? \"#version 300 es\\n\" : \"\";\n}, dummyFragmentCode:function() {\n  return \"void main(void) {gl_FragColor = vec4(0.0);}\";\n}, begin:function() {\n  return \"void main(void)\\n{\\n\";\n}, end:function() {\n  return \"}\\n\";\n}};\npc.programlib.basic = {generateKey:function(device, options) {\n  var key = \"basic\";\n  if (options.fog) {\n    key += \"_fog\";\n  }\n  if (options.alphaTest) {\n    key += \"_atst\";\n  }\n  if (options.vertexColors) {\n    key += \"_vcol\";\n  }\n  if (options.diffuseMap) {\n    key += \"_diff\";\n  }\n  key += \"_\" + options.pass;\n  return key;\n}, createShaderDefinition:function(device, options) {\n  var attributes = {vertex_position:pc.SEMANTIC_POSITION};\n  if (options.skin) {\n    attributes.vertex_boneWeights = pc.SEMANTIC_BLENDWEIGHT;\n    attributes.vertex_boneIndices = pc.SEMANTIC_BLENDINDICES;\n  }\n  if (options.vertexColors) {\n    attributes.vertex_color = pc.SEMANTIC_COLOR;\n  }\n  if (options.diffuseMap) {\n    attributes.vertex_texCoord0 = pc.SEMANTIC_TEXCOORD0;\n  }\n  var chunks = pc.shaderChunks;\n  var code = \"\";\n  code += chunks.transformDeclVS;\n  if (options.skin) {\n    code += pc.programlib.skinCode(device);\n    code += chunks.transformSkinnedVS;\n  } else {\n    code += chunks.transformVS;\n  }\n  if (options.vertexColors) {\n    code += \"attribute vec4 vertex_color;\\n\";\n    code += \"varying vec4 vColor;\\n\";\n  }\n  if (options.diffuseMap) {\n    code += \"attribute vec2 vertex_texCoord0;\\n\";\n    code += \"varying vec2 vUv0;\\n\";\n  }\n  if (options.pass === pc.SHADER_DEPTH) {\n    code += \"varying float vDepth;\\n\";\n    code += \"#ifndef VIEWMATRIX\\n\";\n    code += \"#define VIEWMATRIX\\n\";\n    code += \"uniform mat4 matrix_view;\\n\";\n    code += \"#endif\\n\";\n    code += \"#ifndef CAMERAPLANES\\n\";\n    code += \"#define CAMERAPLANES\\n\";\n    code += \"uniform vec4 camera_params;\\n\\n\";\n    code += \"#endif\\n\";\n  }\n  code += pc.programlib.begin();\n  code += \"   gl_Position = getPosition();\\n\";\n  if (options.pass === pc.SHADER_DEPTH) {\n    code += \"    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z * camera_params.x;\\n\";\n  }\n  if (options.vertexColors) {\n    code += \"    vColor = vertex_color;\\n\";\n  }\n  if (options.diffuseMap) {\n    code += \"    vUv0 = vertex_texCoord0;\\n\";\n  }\n  code += pc.programlib.end();\n  var vshader = code;\n  code = pc.programlib.precisionCode(device);\n  if (options.vertexColors) {\n    code += \"varying vec4 vColor;\\n\";\n  } else {\n    code += \"uniform vec4 uColor;\\n\";\n  }\n  if (options.diffuseMap) {\n    code += \"varying vec2 vUv0;\\n\";\n    code += \"uniform sampler2D texture_diffuseMap;\\n\";\n  }\n  if (options.fog) {\n    code += pc.programlib.fogCode(options.fog);\n  }\n  if (options.alphatest) {\n    code += chunks.alphaTestPS;\n  }\n  if (options.pass === pc.SHADER_DEPTH) {\n    code += \"varying float vDepth;\\n\";\n    code += chunks.packDepthPS;\n  }\n  code += pc.programlib.begin();\n  if (options.vertexColors) {\n    code += \"    gl_FragColor = vColor;\\n\";\n  } else {\n    code += \"    gl_FragColor = uColor;\\n\";\n  }\n  if (options.diffuseMap) {\n    code += \"    gl_FragColor *= texture2D(texture_diffuseMap, vUv0);\\n\";\n  }\n  if (options.alphatest) {\n    code += \"   alphaTest(gl_FragColor.a);\\n\";\n  }\n  if (options.pass === pc.SHADER_PICK) {\n  } else {\n    if (options.pass === pc.SHADER_DEPTH) {\n      code += \"    gl_FragColor = packFloat(vDepth);\\n\";\n    } else {\n      if (options.fog) {\n        code += \"   glFragColor.rgb = addFog(gl_FragColor.rgb);\\n\";\n      }\n    }\n  }\n  code += pc.programlib.end();\n  var fshader = code;\n  return {attributes:attributes, vshader:vshader, fshader:fshader};\n}};\npc.programlib.particle = {generateKey:function(device, options) {\n  var key = \"particle\";\n  for (var prop in options) {\n    if (options.hasOwnProperty(prop)) {\n      key += options[prop];\n    }\n  }\n  return key;\n}, _animTex:function(options, chunk) {\n  var vshader = \"\";\n  vshader += options.animTexLoop ? chunk.particleAnimFrameLoopVS : chunk.particleAnimFrameClampVS;\n  vshader += chunk.particleAnimTexVS;\n  return vshader;\n}, createShaderDefinition:function(device, options) {\n  var chunk = pc.shaderChunks;\n  var vshader = \"\";\n  var fshader = pc.programlib.precisionCode(device) + \"\\n\";\n  if (device.webgl2) {\n    vshader += \"#define GL2\\n\";\n    fshader += \"#define GL2\\n\";\n  }\n  vshader += \"#define VERTEXSHADER\\n\";\n  if (options.animTex) {\n    vshader += \"\\nuniform vec4 animTexParams;\\n\";\n  }\n  if (options.normal == 2) {\n    vshader += \"\\nvarying mat3 ParticleMat;\\n\";\n  }\n  if (options.normal == 1) {\n    vshader += \"\\nvarying vec3 Normal;\\n\";\n  }\n  if (options.soft) {\n    vshader += \"\\nvarying float vDepth;\\n\";\n  }\n  if (!options.useCpu) {\n    vshader += chunk.particle_initVS;\n    vshader += options.pack8 ? chunk.particleInputRgba8PS : chunk.particleInputFloatPS;\n    if (options.soft > 0) {\n      vshader += chunk.screenDepthPS;\n    }\n    vshader += chunk.particleVS;\n    if (options.localSpace) {\n      vshader += chunk.particle_localShiftVS;\n    }\n    if (options.animTex) {\n      vshader += this._animTex(options, chunk);\n    }\n    if (options.wrap) {\n      vshader += chunk.particle_wrapVS;\n    }\n    if (options.alignToMotion) {\n      vshader += chunk.particle_pointAlongVS;\n    }\n    vshader += options.mesh ? chunk.particle_meshVS : chunk.particle_billboardVS;\n    if (options.normal == 1) {\n      vshader += chunk.particle_normalVS;\n    }\n    if (options.normal == 2) {\n      vshader += chunk.particle_TBNVS;\n    }\n    if (options.stretch > 0.0) {\n      vshader += chunk.particle_stretchVS;\n    }\n    vshader += chunk.particle_endVS;\n    if (options.soft > 0) {\n      vshader += chunk.particle_softVS;\n    }\n  } else {\n    if (options.soft > 0) {\n      vshader += chunk.screenDepthPS;\n    }\n    vshader += chunk.particle_cpuVS;\n    if (options.localSpace) {\n      vshader += chunk.particle_localShiftVS;\n    }\n    if (options.animTex) {\n      vshader += this._animTex(options, chunk);\n    }\n    if (options.alignToMotion) {\n      vshader += chunk.particle_pointAlongVS;\n    }\n    vshader += options.mesh ? chunk.particle_meshVS : chunk.particle_billboardVS;\n    if (options.normal == 1) {\n      vshader += chunk.particle_normalVS;\n    }\n    if (options.normal == 2) {\n      vshader += chunk.particle_TBNVS;\n    }\n    if (options.stretch > 0.0) {\n      vshader += chunk.particle_stretchVS;\n    }\n    vshader += chunk.particle_cpu_endVS;\n    if (options.soft > 0) {\n      vshader += chunk.particle_softVS;\n    }\n  }\n  vshader += \"}\\n\";\n  if (options.normal > 0) {\n    if (options.normal == 1) {\n      fshader += \"\\nvarying vec3 Normal;\\n\";\n    } else {\n      if (options.normal == 2) {\n        fshader += \"\\nvarying mat3 ParticleMat;\\n\";\n      }\n    }\n    fshader += \"\\nuniform vec3 lightCube[6];\\n\";\n  }\n  if (options.soft) {\n    fshader += \"\\nvarying float vDepth;\\n\";\n  }\n  if (options.normal === 0 && options.fog === \"none\") {\n    options.srgb = false;\n  }\n  fshader += pc.programlib.gammaCode(options.gamma);\n  fshader += pc.programlib.tonemapCode(options.toneMap);\n  if (options.fog === \"linear\") {\n    fshader += chunk.fogLinearPS;\n  } else {\n    if (options.fog === \"exp\") {\n      fshader += chunk.fogExpPS;\n    } else {\n      if (options.fog === \"exp2\") {\n        fshader += chunk.fogExp2PS;\n      } else {\n        fshader += chunk.fogNonePS;\n      }\n    }\n  }\n  if (options.normal == 2) {\n    fshader += \"\\nuniform sampler2D normalMap;\\n\";\n  }\n  if (options.soft > 0) {\n    fshader += chunk.screenDepthPS;\n  }\n  fshader += chunk.particlePS;\n  if (options.soft > 0) {\n    fshader += chunk.particle_softPS;\n  }\n  if (options.normal == 1) {\n    fshader += \"\\nvec3 normal = Normal;\\n\";\n  }\n  if (options.normal == 2) {\n    fshader += chunk.particle_normalMapPS;\n  }\n  if (options.normal > 0) {\n    fshader += options.halflambert ? chunk.particle_halflambertPS : chunk.particle_lambertPS;\n  }\n  if (options.normal > 0) {\n    fshader += chunk.particle_lightingPS;\n  }\n  if (options.blend == pc.BLEND_NORMAL) {\n    fshader += chunk.particle_blendNormalPS;\n  } else {\n    if (options.blend == pc.BLEND_ADDITIVE) {\n      fshader += chunk.particle_blendAddPS;\n    } else {\n      if (options.blend == pc.BLEND_MULTIPLICATIVE) {\n        fshader += chunk.particle_blendMultiplyPS;\n      }\n    }\n  }\n  fshader += chunk.particle_endPS;\n  var attributes = pc.shaderChunks.collectAttribs(vshader);\n  return {attributes:attributes, vshader:vshader, fshader:fshader};\n}};\nvar _oldChunkWarn = function(oldName, newName) {\n};\nvar _oldChunkFloat = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef MAPFLOAT\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkColor = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef MAPCOLOR\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTex = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef MAPTEXTURE\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTexColor = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"#undef MAPTEXTURECOLOR\\n#ifdef MAPTEXTURE\\n#ifdef MAPCOLOR\\n#define MAPTEXTURECOLOR\\n#endif\\n#endif\\n\" + \"#ifdef MAPTEXTURECOLOR\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTexFloat = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"#undef MAPTEXTUREFLOAT\\n#ifdef MAPTEXTURE\\n#ifdef MAPFLOAT\\n#define MAPTEXTUREFLOAT\\n#endif\\n#endif\\n\" + \"#ifdef MAPTEXTUREFLOAT\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkVert = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef MAPVERTEX\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkVertColor = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"#undef MAPVERTEXCOLOR\\n#ifdef MAPVERTEX\\n#ifdef MAPCOLOR\\n#define MAPVERTEXCOLOR\\n#endif\\n#endif\\n\" + \"#ifdef MAPVERTEXCOLOR\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkVertFloat = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"#undef MAPVERTEXFLOAT\\n#ifdef MAPVERTEX\\n#ifdef MAPFLOAT\\n#define MAPVERTEXFLOAT\\n#endif\\n#endif\\n\" + \"#ifdef MAPVERTEXFLOAT\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformSkin = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef SKIN\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformDynbatch = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef DYNAMICBATCH\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformInstanced = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef INSTANCING\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformPixelSnap = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef PIXELSNAP\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformScreenSpace = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef SCREENSPACE\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformScreenSpaceBatch = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"#undef SCREENSPACEBATCH\\n#ifdef SCREENSPACE\\n#ifdef BATCH\\n#define SCREENSPACEBATCH\\n#endif\\n#endif\\n\" + \"#ifdef SCREENSPACEBATCH\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\nvar _oldChunkTransformUv1 = function(s, o, p) {\n  _oldChunkWarn(p, o);\n  return \"\\n#ifdef UV1LAYOUT\\n\" + s + \"\\n#else\\n\" + pc.shaderChunks[o] + \"\\n#endif\\n\";\n};\npc.programlib.standard = {_oldChunkToNew:{aoTexPS:{n:\"aoPS\", f:_oldChunkTex}, aoVertPS:{n:\"aoPS\", f:_oldChunkVert}, diffuseConstPS:{n:\"diffusePS\", f:_oldChunkColor}, diffuseTexPS:{n:\"diffusePS\", f:_oldChunkTex}, diffuseTexConstPS:{n:\"diffusePS\", f:_oldChunkTexColor}, diffuseVertPS:{n:\"diffusePS\", f:_oldChunkVert}, diffuseVertConstPS:{n:\"diffusePS\", f:_oldChunkVertColor}, emissiveConstPS:{n:\"emissivePS\", f:_oldChunkColor}, emissiveTexPS:{n:\"emissivePS\", f:_oldChunkTex}, emissiveTexConstPS:{n:\"emissivePS\", \nf:_oldChunkTexColor}, emissiveTexConstFloatPS:{n:\"emissivePS\", f:_oldChunkTexFloat}, emissiveVertPS:{n:\"emissivePS\", f:_oldChunkVert}, emissiveVertConstPS:{n:\"emissivePS\", f:_oldChunkVertColor}, emissiveVertConstFloatPS:{n:\"emissivePS\", f:_oldChunkVertFloat}, glossConstPS:{n:\"glossPS\", f:_oldChunkFloat}, glossTexPS:{n:\"glossPS\", f:_oldChunkTex}, glossTexConstPS:{n:\"glossPS\", f:_oldChunkTexFloat}, glossVertPS:{n:\"glossPS\", f:_oldChunkVert}, glossVertConstPS:{n:\"glossPS\", f:_oldChunkVertFloat}, metalnessConstPS:{n:\"metalnessPS\", \nf:_oldChunkFloat}, metalnessTexPS:{n:\"metalnessPS\", f:_oldChunkTex}, metalnessTexConstPS:{n:\"metalnessPS\", f:_oldChunkTexFloat}, metalnessVertPS:{n:\"metalnessPS\", f:_oldChunkVert}, metalnessVertConstPS:{n:\"metalnessPS\", f:_oldChunkVertFloat}, opacityConstPS:{n:\"opacityPS\", f:_oldChunkFloat}, opacityTexPS:{n:\"opacityPS\", f:_oldChunkTex}, opacityTexConstPS:{n:\"opacityPS\", f:_oldChunkTexFloat}, opacityVertPS:{n:\"opacityPS\", f:_oldChunkVert}, opacityVertConstPS:{n:\"opacityPS\", f:_oldChunkVertFloat}, \nspecularConstPS:{n:\"specularPS\", f:_oldChunkColor}, specularTexPS:{n:\"specularPS\", f:_oldChunkTex}, specularTexConstPS:{n:\"specularPS\", f:_oldChunkTexColor}, specularVertPS:{n:\"specularPS\", f:_oldChunkVert}, specularVertConstPS:{n:\"specularPS\", f:_oldChunkVertColor}, transformBatchSkinnedVS:{n:\"transformVS\", f:_oldChunkTransformDynbatch}, transformInstancedVS:{n:\"transformVS\", f:_oldChunkTransformInstanced}, transformPixelSnapVS:{n:\"transformVS\", f:_oldChunkTransformPixelSnap}, transformScreenSpaceVS:{n:\"transformVS\", \nf:_oldChunkTransformScreenSpace}, transformScreenSpaceBatchSkinned:{n:\"transformVS\", f:_oldChunkTransformScreenSpaceBatch}, transformSkinned:{n:\"transformVS\", f:_oldChunkTransformSkin}, transformUv1:{n:\"transformVS\", f:_oldChunkTransformUv1}}, generateKey:function(device, options) {\n  var props = [];\n  var key = \"standard\";\n  var light;\n  for (var prop in options) {\n    if (options.hasOwnProperty(prop)) {\n      if (prop === \"chunks\") {\n        for (var p in options[prop]) {\n          if (options[prop].hasOwnProperty(p)) {\n            props.push(p + options.chunks[p]);\n          }\n        }\n      } else {\n        if (options[prop]) {\n          props.push(prop);\n        }\n      }\n    }\n  }\n  props.sort();\n  for (prop in props) {\n    if (props.hasOwnProperty(prop)) {\n      key += props[prop] + options[props[prop]];\n    }\n  }\n  if (options.lights) {\n    for (var i = 0; i < options.lights.length; i++) {\n      light = options.lights[i];\n      key += light.key;\n    }\n  }\n  return pc.hashCode(key);\n}, _correctChannel:function(p, chan) {\n  if (pc._matTex2D[p] > 0) {\n    if (pc._matTex2D[p] < chan.length) {\n      return chan.substring(0, pc._matTex2D[p]);\n    } else {\n      if (pc._matTex2D[p] > chan.length) {\n        var str = chan;\n        var chr = str.charAt(str.length - 1);\n        var addLen = pc._matTex2D[p] - str.length;\n        for (var i = 0; i < addLen; i++) {\n          str += chr;\n        }\n        return str;\n      }\n    }\n    return chan;\n  }\n}, _setMapTransform:function(codes, name, id, uv) {\n  codes[0] += \"uniform vec4 texture_\" + name + \"MapTransform;\\n\";\n  var checkId = id + uv * 100;\n  if (!codes[3][checkId]) {\n    codes[1] += \"varying vec2 vUV\" + uv + \"_\" + id + \";\\n\";\n    codes[2] += \"   vUV\" + uv + \"_\" + id + \" = uv\" + uv + \" * texture_\" + name + \"MapTransform.xy + texture_\" + name + \"MapTransform.zw;\\n\";\n    codes[3][checkId] = true;\n  }\n  return codes;\n}, _uvSource:function(id, uv) {\n  return id === 0 ? \"vUv\" + uv : \"vUV\" + uv + \"_\" + id;\n}, _addMapDef:function(name, enabled) {\n  var s = \"\\n#undef \" + name + \"\\n\";\n  if (enabled) {\n    s += \" #define \" + name + \"\\n\";\n  }\n  return s;\n}, _addMapDefs:function(float, color, vertex, map) {\n  var s = \"\";\n  s += this._addMapDef(\"MAPFLOAT\", float);\n  s += this._addMapDef(\"MAPCOLOR\", color);\n  s += this._addMapDef(\"MAPVERTEX\", vertex);\n  s += this._addMapDef(\"MAPTEXTURE\", map);\n  return s;\n}, _addMap:function(p, options, chunks, uvOffset, subCode, format) {\n  var mname = p + \"Map\";\n  var tint = options[p + \"Tint\"];\n  var vert = options[p + \"VertexColor\"];\n  var tex = options[mname];\n  if (!subCode) {\n    subCode = chunks[p + \"PS\"];\n  }\n  if (tex) {\n    var uname = mname + \"Uv\";\n    var tname = mname + \"Transform\";\n    var cname = mname + \"Channel\";\n    var uv = this._uvSource(options[tname], options[uname]) + uvOffset;\n    subCode = subCode.replace(/\\$UV/g, uv).replace(/\\$CH/g, options[cname]);\n    if (format !== undefined) {\n      var fmt = format === 0 ? \"texture2DSRGB\" : format === 1 ? \"texture2DRGBM\" : \"texture2D\";\n      subCode = subCode.replace(/\\$texture2DSAMPLE/g, fmt);\n    }\n  }\n  if (vert) {\n    var vcname = p + \"VertexColorChannel\";\n    subCode = subCode.replace(/\\$VC/g, options[vcname]);\n  }\n  subCode = this._addMapDefs(tint === 1, tint === 3, vert, tex) + subCode;\n  return subCode.replace(/\\$/g, \"\");\n}, _nonPointShadowMapProjection:function(device, light, shadowCoordArgs) {\n  if (!light._normalOffsetBias || light._isVsm) {\n    if (light._type === pc.LIGHTTYPE_SPOT) {\n      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives)) {\n        return \"       getShadowCoordPerspZbuffer\" + shadowCoordArgs;\n      } else {\n        return \"       getShadowCoordPersp\" + shadowCoordArgs;\n      }\n    } else {\n      return \"       getShadowCoordOrtho\" + shadowCoordArgs;\n    }\n  } else {\n    if (light._type === pc.LIGHTTYPE_SPOT) {\n      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives)) {\n        return \"       getShadowCoordPerspZbufferNormalOffset\" + shadowCoordArgs;\n      } else {\n        return \"       getShadowCoordPerspNormalOffset\" + shadowCoordArgs;\n      }\n    } else {\n      return \"       getShadowCoordOrthoNormalOffset\" + shadowCoordArgs;\n    }\n  }\n}, _addVaryingIfNeeded:function(code, type, name) {\n  return code.indexOf(name) >= 0 ? \"varying \" + type + \" \" + name + \";\\n\" : \"\";\n}, createShaderDefinition:function(device, options) {\n  var i, p;\n  var lighting = options.lights.length > 0;\n  if (options.dirLightMap) {\n    lighting = true;\n    options.useSpecular = true;\n  }\n  if (options.shadingModel === pc.SPECULAR_PHONG) {\n    options.fresnelModel = 0;\n    options.specularAntialias = false;\n    options.prefilteredCubemap = false;\n    options.dpAtlas = false;\n    options.ambientSH = false;\n  } else {\n    options.fresnelModel = options.fresnelModel === 0 ? pc.FRESNEL_SCHLICK : options.fresnelModel;\n  }\n  var cubemapReflection = options.cubeMap || options.prefilteredCubemap && options.useSpecular && (!options.sphereMap && !options.dpAtlas);\n  var reflections = options.sphereMap || cubemapReflection || options.dpAtlas;\n  var useTangents = pc.precalculatedTangents;\n  var useTexCubeLod = options.useTexCubeLod;\n  if (options.cubeMap) {\n    options.sphereMap = null;\n  }\n  if (options.dpAtlas) {\n    options.prefilteredCubemap = null;\n  }\n  if (!options.useSpecular) {\n    options.specularMap = options.glossMap = null;\n  }\n  var needsNormal = lighting || reflections || options.ambientSH || options.prefilteredCubemap || options.heightMap;\n  var shadowPass = options.pass >= pc.SHADER_SHADOW && options.pass <= 17;\n  this.options = options;\n  var code = \"\";\n  var codeBody = \"\";\n  var varyings = \"\";\n  var chunks = pc.shaderChunks;\n  var lightType;\n  var shadowCoordArgs;\n  var chunk;\n  var attributes = {vertex_position:pc.SEMANTIC_POSITION};\n  if (options.chunks) {\n    var customChunks = {};\n    var newP;\n    for (p in chunks) {\n      if (chunks.hasOwnProperty(p)) {\n        if (!options.chunks[p]) {\n          customChunks[p] = chunks[p];\n        } else {\n          chunk = options.chunks[p];\n          if (chunk.indexOf(\"vertex_normal\") >= 0) {\n            attributes.vertex_normal = pc.SEMANTIC_NORMAL;\n          }\n          if (chunk.indexOf(\"vertex_tangent\") >= 0) {\n            attributes.vertex_tangent = pc.SEMANTIC_TANGENT;\n          }\n          if (chunk.indexOf(\"vertex_texCoord0\") >= 0) {\n            attributes.vertex_texCoord0 = pc.SEMANTIC_TEXCOORD0;\n          }\n          if (chunk.indexOf(\"vertex_texCoord1\") >= 0) {\n            attributes.vertex_texCoord1 = pc.SEMANTIC_TEXCOORD1;\n          }\n          if (chunk.indexOf(\"vertex_color\") >= 0) {\n            attributes.vertex_color = pc.SEMANTIC_COLOR;\n          }\n          if (chunk.indexOf(\"vertex_boneWeights\") >= 0) {\n            attributes.vertex_boneWeights = pc.SEMANTIC_BLENDWEIGHT;\n          }\n          if (chunk.indexOf(\"vertex_boneIndices\") >= 0) {\n            attributes.vertex_boneIndices = pc.SEMANTIC_BLENDINDICES;\n          }\n          customChunks[p] = chunk;\n        }\n      }\n    }\n    for (p in options.chunks) {\n      newP = this._oldChunkToNew[p];\n      if (newP) {\n        customChunks[newP.n] = newP.f(options.chunks[p], newP.n, p);\n      }\n    }\n    chunks = customChunks;\n  }\n  code += chunks.baseVS;\n  var mainShadowLight = -1;\n  if (!options.noShadow && !options.twoSidedLighting) {\n    for (i = 0; i < options.lights.length; i++) {\n      lightType = options.lights[i]._type;\n      if (options.lights[i].castShadows) {\n        if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {\n          code += \"uniform mat4 light\" + i + \"_shadowMatrixVS;\\n\";\n          code += \"uniform vec3 light\" + i + \"_shadowParamsVS;\\n\";\n          code += \"uniform vec3 light\" + i + (lightType === pc.LIGHTTYPE_DIRECTIONAL ? \"_directionVS\" : \"_positionVS\") + \";\\n\";\n          mainShadowLight = i;\n          break;\n        }\n      }\n    }\n    if (mainShadowLight >= 0) {\n      code += chunks.shadowCoordVS;\n    }\n  }\n  codeBody += \"   vPositionW    = getWorldPosition();\\n\";\n  if (options.pass === pc.SHADER_DEPTH) {\n    code += \"varying float vDepth;\\n\";\n    code += \"#ifndef VIEWMATRIX\\n\";\n    code += \"#define VIEWMATRIX\\n\";\n    code += \"uniform mat4 matrix_view;\\n\";\n    code += \"#endif\\n\";\n    code += \"#ifndef CAMERAPLANES\\n\";\n    code += \"#define CAMERAPLANES\\n\";\n    code += \"uniform vec4 camera_params;\\n\\n\";\n    code += \"#endif\\n\";\n    codeBody += \"    vDepth = -(matrix_view * vec4(vPositionW,1.0)).z * camera_params.x;\\n\";\n  }\n  if (options.useInstancing) {\n    attributes.instance_line1 = pc.SEMANTIC_TEXCOORD2;\n    attributes.instance_line2 = pc.SEMANTIC_TEXCOORD3;\n    attributes.instance_line3 = pc.SEMANTIC_TEXCOORD4;\n    attributes.instance_line4 = pc.SEMANTIC_TEXCOORD5;\n    code += chunks.instancingVS;\n  }\n  if (needsNormal) {\n    attributes.vertex_normal = pc.SEMANTIC_NORMAL;\n    codeBody += \"   vNormalW    = dNormalW = getNormal();\\n\";\n    if (options.sphereMap && device.fragmentUniformsCount <= 16) {\n      code += chunks.viewNormalVS;\n      codeBody += \"   vNormalV    = getViewNormal();\\n\";\n    }\n    if ((options.heightMap || options.normalMap) && useTangents) {\n      attributes.vertex_tangent = pc.SEMANTIC_TANGENT;\n      code += chunks.tangentBinormalVS;\n      codeBody += \"   vTangentW   = getTangent();\\n\";\n      codeBody += \"   vBinormalW  = getBinormal();\\n\";\n    }\n    if (mainShadowLight >= 0) {\n      lightType = options.lights[mainShadowLight]._type;\n      if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {\n        codeBody += \"   dLightDirNormW = light\" + mainShadowLight + \"_directionVS;\\n\";\n      } else {\n        codeBody += \"   getLightDirPoint(light\" + mainShadowLight + \"_positionVS);\\n\";\n      }\n      shadowCoordArgs = \"(light\" + mainShadowLight + \"_shadowMatrixVS, light\" + mainShadowLight + \"_shadowParamsVS);\\n\";\n      codeBody += this._nonPointShadowMapProjection(device, options.lights[mainShadowLight], shadowCoordArgs);\n    }\n  }\n  var useUv = [];\n  var useUnmodifiedUv = [];\n  var maxUvSets = 2;\n  var cname, mname, tname, uname;\n  for (p in pc._matTex2D) {\n    mname = p + \"Map\";\n    if (options[p + \"VertexColor\"]) {\n      cname = p + \"VertexColorChannel\";\n      options[cname] = this._correctChannel(p, options[cname]);\n    }\n    if (options[mname]) {\n      cname = mname + \"Channel\";\n      tname = mname + \"Transform\";\n      uname = mname + \"Uv\";\n      options[uname] = Math.min(options[uname], maxUvSets - 1);\n      options[cname] = this._correctChannel(p, options[cname]);\n      var uvSet = options[uname];\n      useUv[uvSet] = true;\n      useUnmodifiedUv[uvSet] = useUnmodifiedUv[uvSet] || options[mname] && !options[tname];\n    }\n  }\n  if (options.forceUv1) {\n    useUv[1] = true;\n  }\n  for (i = 0; i < maxUvSets; i++) {\n    if (useUv[i]) {\n      attributes[\"vertex_texCoord\" + i] = pc[\"SEMANTIC_TEXCOORD\" + i];\n      code += chunks[\"uv\" + i + \"VS\"];\n      codeBody += \"   vec2 uv\" + i + \" = getUv\" + i + \"();\\n\";\n    }\n    if (useUnmodifiedUv[i]) {\n      codeBody += \"   vUv\" + i + \" = uv\" + i + \";\\n\";\n    }\n  }\n  var codes = [code, varyings, codeBody, []];\n  for (p in pc._matTex2D) {\n    mname = p + \"Map\";\n    if (options[mname]) {\n      tname = mname + \"Transform\";\n      if (options[tname]) {\n        uname = mname + \"Uv\";\n        this._setMapTransform(codes, p, options[tname], options[uname]);\n      }\n    }\n  }\n  code = codes[0];\n  varyings = codes[1];\n  codeBody = codes[2];\n  if (options.vertexColors) {\n    attributes.vertex_color = pc.SEMANTIC_COLOR;\n    codeBody += \"   vVertexColor = vertex_color;\\n\";\n  }\n  if (options.skin) {\n    attributes.vertex_boneWeights = pc.SEMANTIC_BLENDWEIGHT;\n    attributes.vertex_boneIndices = pc.SEMANTIC_BLENDINDICES;\n    code += pc.programlib.skinCode(device, chunks);\n    code += \"#define SKIN\\n\";\n  } else {\n    if (options.useInstancing) {\n      code += \"#define INSTANCING\\n\";\n    }\n  }\n  if (options.screenSpace) {\n    code += \"#define SCREENSPACE\\n\";\n  }\n  if (options.pixelSnap) {\n    code += \"#define PIXELSNAP\\n\";\n  }\n  code += chunks.transformVS;\n  if (needsNormal) {\n    code += chunks.normalVS;\n  }\n  code += \"\\n\";\n  code += chunks.startVS;\n  code += codeBody;\n  code += \"}\";\n  var vshader = code;\n  var oldVars = varyings;\n  varyings = \"\";\n  varyings += this._addVaryingIfNeeded(code, \"vec4\", \"vMainShadowUv\");\n  varyings += this._addVaryingIfNeeded(code, \"vec4\", \"vVertexColor\");\n  varyings += this._addVaryingIfNeeded(code, \"vec3\", \"vPositionW\");\n  varyings += this._addVaryingIfNeeded(code, \"vec3\", \"vNormalV\");\n  varyings += this._addVaryingIfNeeded(code, \"vec3\", \"vNormalW\");\n  varyings += this._addVaryingIfNeeded(code, \"vec3\", \"vTangentW\");\n  varyings += this._addVaryingIfNeeded(code, \"vec3\", \"vBinormalW\");\n  varyings += this._addVaryingIfNeeded(code, \"vec2\", \"vUv0\");\n  varyings += this._addVaryingIfNeeded(code, \"vec2\", \"vUv1\");\n  varyings += oldVars;\n  vshader = varyings + vshader;\n  var startCode = \"\";\n  if (device.webgl2) {\n    startCode = pc.programlib.versionCode(device);\n    if (chunks.extensionVS) {\n      startCode += chunks.extensionVS + \"\\n\";\n    }\n    vshader = startCode + chunks.gles3VS + vshader;\n  } else {\n    if (chunks.extensionVS) {\n      startCode = chunks.extensionVS + \"\\n\";\n    }\n    vshader = startCode + vshader;\n  }\n  if (options.forceFragmentPrecision && options.forceFragmentPrecision != \"highp\" && options.forceFragmentPrecision !== \"mediump\" && options.forceFragmentPrecision !== \"lowp\") {\n    options.forceFragmentPrecision = null;\n  }\n  if (options.forceFragmentPrecision) {\n    if (options.forceFragmentPrecision === \"highp\" && device.maxPrecision !== \"highp\") {\n      options.forceFragmentPrecision = \"mediump\";\n    }\n    if (options.forceFragmentPrecision === \"mediump\" && device.maxPrecision === \"lowp\") {\n      options.forceFragmentPrecision = \"lowp\";\n    }\n  }\n  var fshader;\n  code = \"\";\n  if (device.webgl2) {\n    code += pc.programlib.versionCode(device);\n  }\n  if (device.extStandardDerivatives && !device.webgl2) {\n    code += \"#extension GL_OES_standard_derivatives : enable\\n\\n\";\n  }\n  if (chunks.extensionPS) {\n    code += chunks.extensionPS + \"\\n\";\n  }\n  if (device.webgl2) {\n    code += chunks.gles3PS;\n  }\n  code += options.forceFragmentPrecision ? \"precision \" + options.forceFragmentPrecision + \" float;\\n\\n\" : pc.programlib.precisionCode(device);\n  if (options.pass === pc.SHADER_PICK) {\n    code += \"uniform vec4 uColor;\";\n    code += varyings;\n    if (options.alphaTest) {\n      code += \"float dAlpha;\\n\";\n      code += this._addMap(\"opacity\", options, chunks, \"\");\n      code += chunks.alphaTestPS;\n    }\n    code += pc.programlib.begin();\n    if (options.alphaTest) {\n      code += \"   getOpacity();\\n\";\n      code += \"   alphaTest(dAlpha);\\n\";\n    }\n    code += \"    gl_FragColor = uColor;\\n\";\n    code += pc.programlib.end();\n    return {attributes:attributes, vshader:vshader, fshader:code};\n  } else {\n    if (options.pass === pc.SHADER_DEPTH) {\n      code += \"varying float vDepth;\\n\";\n      code += varyings;\n      code += chunks.packDepthPS;\n      if (options.alphaTest) {\n        code += \"float dAlpha;\\n\";\n        code += this._addMap(\"opacity\", options, chunks, \"\");\n        code += chunks.alphaTestPS;\n      }\n      code += pc.programlib.begin();\n      if (options.alphaTest) {\n        code += \"   getOpacity();\\n\";\n        code += \"   alphaTest(dAlpha);\\n\";\n      }\n      code += \"    gl_FragColor = packFloat(vDepth);\\n\";\n      code += pc.programlib.end();\n      return {attributes:attributes, vshader:vshader, fshader:code};\n    } else {\n      if (shadowPass) {\n        var smode = options.pass - pc.SHADER_SHADOW;\n        var numShadowModes = 5;\n        lightType = Math.floor(smode / numShadowModes);\n        var shadowType = smode - lightType * numShadowModes;\n        if (device.extStandardDerivatives && !device.webgl2) {\n          code += \"uniform vec2 polygonOffset;\\n\";\n        }\n        if (shadowType === pc.SHADOW_VSM32) {\n          if (device.extTextureFloatHighPrecision) {\n            code += \"#define VSM_EXPONENT 15.0\\n\\n\";\n          } else {\n            code += \"#define VSM_EXPONENT 5.54\\n\\n\";\n          }\n        } else {\n          if (shadowType === pc.SHADOW_VSM16) {\n            code += \"#define VSM_EXPONENT 5.54\\n\\n\";\n          }\n        }\n        if (lightType !== pc.LIGHTTYPE_DIRECTIONAL) {\n          code += \"uniform vec3 view_position;\\n\";\n          code += \"uniform float light_radius;\\n\";\n        }\n        code += varyings;\n        if (options.alphaTest) {\n          code += \"float dAlpha;\\n\";\n          code += this._addMap(\"opacity\", options, chunks, \"\");\n          code += chunks.alphaTestPS;\n        }\n        if (shadowType === pc.SHADOW_PCF3 && (!device.webgl2 || lightType === pc.LIGHTTYPE_POINT)) {\n          code += chunks.packDepthPS;\n        } else {\n          if (shadowType === pc.SHADOW_VSM8) {\n            code += \"vec2 encodeFloatRG( float v ) {\\n\";\n            code += \"    vec2 enc = vec2(1.0, 255.0) * v;\\n\";\n            code += \"    enc = fract(enc);\\n\";\n            code += \"    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\\n\";\n            code += \"    return enc;\\n\";\n            code += \"}\\n\\n\";\n          }\n        }\n        code += pc.programlib.begin();\n        if (options.alphaTest) {\n          code += \"   getOpacity();\\n\";\n          code += \"   alphaTest(dAlpha);\\n\";\n        }\n        var isVsm = shadowType === pc.SHADOW_VSM8 || shadowType === pc.SHADOW_VSM16 || shadowType === pc.SHADOW_VSM32;\n        if (lightType === pc.LIGHTTYPE_POINT || isVsm && lightType !== pc.LIGHTTYPE_DIRECTIONAL) {\n          code += \"   float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);\\n\";\n        } else {\n          code += \"   float depth = gl_FragCoord.z;\\n\";\n        }\n        if (shadowType === pc.SHADOW_PCF3 && (!device.webgl2 || lightType === pc.LIGHTTYPE_POINT)) {\n          if (device.extStandardDerivatives && !device.webgl2) {\n            code += \"   float minValue = 2.3374370500153186e-10; //(1.0 / 255.0) / (256.0 * 256.0 * 256.0);\\n\";\n            code += \"   depth += polygonOffset.x * max(abs(dFdx(depth)), abs(dFdy(depth))) + minValue * polygonOffset.y;\\n\";\n            code += \"   gl_FragColor = packFloat(depth);\\n\";\n          } else {\n            code += \"   gl_FragColor = packFloat(depth);\\n\";\n          }\n        } else {\n          if (shadowType === pc.SHADOW_PCF3 || shadowType === pc.SHADOW_PCF5) {\n            code += \"   gl_FragColor = vec4(1.0);\\n\";\n          } else {\n            if (shadowType === pc.SHADOW_VSM8) {\n              code += \"   gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));\\n\";\n            } else {\n              code += chunks.storeEVSMPS;\n            }\n          }\n        }\n        code += pc.programlib.end();\n        return {attributes:attributes, vshader:vshader, fshader:code};\n      }\n    }\n  }\n  if (options.customFragmentShader) {\n    fshader = code + options.customFragmentShader;\n    return {attributes:attributes, vshader:vshader, fshader:fshader, tag:pc.SHADERTAG_MATERIAL};\n  }\n  code += varyings;\n  code += chunks.basePS;\n  var codeBegin = code;\n  code = \"\";\n  var numShadowLights = 0;\n  var shadowTypeUsed = [];\n  var useVsm = false;\n  var usePerspZbufferShadow = false;\n  var light;\n  for (i = 0; i < options.lights.length; i++) {\n    light = options.lights[i];\n    lightType = light._type;\n    code += \"uniform vec3 light\" + i + \"_color;\\n\";\n    if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {\n      code += \"uniform vec3 light\" + i + \"_direction;\\n\";\n    } else {\n      code += \"uniform vec3 light\" + i + \"_position;\\n\";\n      code += \"uniform float light\" + i + \"_radius;\\n\";\n      if (lightType === pc.LIGHTTYPE_SPOT) {\n        code += \"uniform vec3 light\" + i + \"_direction;\\n\";\n        code += \"uniform float light\" + i + \"_innerConeAngle;\\n\";\n        code += \"uniform float light\" + i + \"_outerConeAngle;\\n\";\n      }\n    }\n    if (light.castShadows && !options.noShadow) {\n      code += \"uniform mat4 light\" + i + \"_shadowMatrix;\\n\";\n      if (lightType !== pc.LIGHTTYPE_DIRECTIONAL) {\n        code += \"uniform vec4 light\" + i + \"_shadowParams;\\n\";\n      } else {\n        code += \"uniform vec3 light\" + i + \"_shadowParams;\\n\";\n      }\n      if (lightType === pc.LIGHTTYPE_POINT) {\n        code += \"uniform samplerCube light\" + i + \"_shadowMap;\\n\";\n      } else {\n        if (light._isPcf && device.webgl2) {\n          code += \"uniform sampler2DShadow light\" + i + \"_shadowMap;\\n\";\n        } else {\n          code += \"uniform sampler2D light\" + i + \"_shadowMap;\\n\";\n        }\n      }\n      numShadowLights++;\n      shadowTypeUsed[light._shadowType] = true;\n      if (light._isVsm) {\n        useVsm = true;\n      }\n      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives) && lightType === pc.LIGHTTYPE_SPOT) {\n        usePerspZbufferShadow = true;\n      }\n    }\n    if (light._cookie) {\n      if (light._cookie._cubemap) {\n        if (lightType === pc.LIGHTTYPE_POINT) {\n          code += \"uniform samplerCube light\" + i + \"_cookie;\\n\";\n          code += \"uniform float light\" + i + \"_cookieIntensity;\\n\";\n          if (!light.castShadows || options.noShadow) {\n            code += \"uniform mat4 light\" + i + \"_shadowMatrix;\\n\";\n          }\n        }\n      } else {\n        if (lightType === pc.LIGHTTYPE_SPOT) {\n          code += \"uniform sampler2D light\" + i + \"_cookie;\\n\";\n          code += \"uniform float light\" + i + \"_cookieIntensity;\\n\";\n          if (!light.castShadows || options.noShadow) {\n            code += \"uniform mat4 light\" + i + \"_shadowMatrix;\\n\";\n          }\n          if (light._cookieTransform) {\n            code += \"uniform vec4 light\" + i + \"_cookieMatrix;\\n\";\n            code += \"uniform vec2 light\" + i + \"_cookieOffset;\\n\";\n          }\n        }\n      }\n    }\n  }\n  code += \"\\n\";\n  var uvOffset = options.heightMap ? \" + dUvOffset\" : \"\";\n  var tbn = options.fastTbn ? chunks.TBNfastPS : chunks.TBNPS;\n  if (needsNormal) {\n    if (options.normalMap && useTangents) {\n      code += options.packedNormal ? chunks.normalXYPS : chunks.normalXYZPS;\n      var uv = this._uvSource(options.normalMapTransform, options.normalMapUv) + uvOffset;\n      if (options.needsNormalFloat) {\n        code += (options.fastTbn ? chunks.normalMapFloatTBNfastPS : chunks.normalMapFloatPS).replace(/\\$UV/g, uv);\n      } else {\n        code += chunks.normalMapPS.replace(/\\$UV/g, uv);\n      }\n      code += tbn;\n    } else {\n      code += chunks.normalVertexPS;\n    }\n  }\n  code += pc.programlib.gammaCode(options.gamma);\n  code += pc.programlib.tonemapCode(options.toneMap);\n  code += pc.programlib.fogCode(options.fog);\n  if (options.useRgbm) {\n    code += chunks.rgbmPS;\n  }\n  if (cubemapReflection || options.prefilteredCubemap) {\n    code += options.fixSeams ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS;\n  }\n  if (needsNormal) {\n    code += options.cubeMapProjection > 0 ? chunks.cubeMapProjectBoxPS : chunks.cubeMapProjectNonePS;\n    code += options.skyboxIntensity ? chunks.envMultiplyPS : chunks.envConstPS;\n  }\n  code += this._addMap(\"diffuse\", options, chunks, uvOffset);\n  if (options.blendType !== pc.BLEND_NONE || options.alphaTest || options.alphaToCoverage) {\n    code += this._addMap(\"opacity\", options, chunks, uvOffset);\n  }\n  code += this._addMap(\"emissive\", options, chunks, uvOffset, null, options.emissiveFormat);\n  if (options.useSpecular && (lighting || reflections)) {\n    if (options.specularAntialias && options.normalMap) {\n      if (options.needsNormalFloat && needsNormal) {\n        code += chunks.specularAaToksvigFloatPS;\n      } else {\n        code += chunks.specularAaToksvigPS;\n      }\n    } else {\n      code += chunks.specularAaNonePS;\n    }\n    code += this._addMap(options.useMetalness ? \"metalness\" : \"specular\", options, chunks, uvOffset);\n    code += this._addMap(\"gloss\", options, chunks, uvOffset);\n    if (options.fresnelModel > 0) {\n      if (options.fresnelModel === pc.FRESNEL_SIMPLE) {\n        code += chunks.fresnelSimplePS;\n      } else {\n        if (options.fresnelModel === pc.FRESNEL_SCHLICK) {\n          code += chunks.fresnelSchlickPS;\n        } else {\n          if (options.fresnelModel === pc.FRESNEL_COMPLEX) {\n            code += chunks.fresnelComplexPS;\n          }\n        }\n      }\n    }\n  }\n  if (options.heightMap) {\n    if (!options.normalMap) {\n      code += tbn;\n    }\n    code += this._addMap(\"height\", options, chunks, \"\", chunks.parallaxPS);\n  }\n  var useAo = options.aoMap || options.aoVertexColor;\n  if (useAo) {\n    code += this._addMap(\"ao\", options, chunks, uvOffset, options.aoVertexColor ? chunks.aoVertPS : chunks.aoTexPS);\n    if (options.occludeSpecular) {\n      if (options.occludeSpecular === pc.SPECOCC_AO) {\n        code += options.occludeSpecularFloat ? chunks.aoSpecOccSimplePS : chunks.aoSpecOccConstSimplePS;\n      } else {\n        code += options.occludeSpecularFloat ? chunks.aoSpecOccPS : chunks.aoSpecOccConstPS;\n      }\n    }\n  }\n  var reflectionDecode = options.rgbmReflection ? \"decodeRGBM\" : options.hdrReflection ? \"\" : \"gammaCorrectInput\";\n  if (cubemapReflection) {\n    if (options.prefilteredCubemap) {\n      if (useTexCubeLod) {\n        code += chunks.reflectionPrefilteredCubeLodPS.replace(/\\$DECODE/g, reflectionDecode);\n      } else {\n        code += chunks.reflectionPrefilteredCubePS.replace(/\\$DECODE/g, reflectionDecode);\n      }\n    } else {\n      code += chunks.reflectionCubePS.replace(/\\$textureCubeSAMPLE/g, options.rgbmReflection ? \"textureCubeRGBM\" : options.hdrReflection ? \"textureCube\" : \"textureCubeSRGB\");\n    }\n  }\n  if (options.sphereMap) {\n    var scode = device.fragmentUniformsCount > 16 ? chunks.reflectionSpherePS : chunks.reflectionSphereLowPS;\n    scode = scode.replace(/\\$texture2DSAMPLE/g, options.rgbmReflection ? \"texture2DRGBM\" : options.hdrReflection ? \"texture2D\" : \"texture2DSRGB\");\n    code += scode;\n  }\n  if (options.dpAtlas) {\n    code += chunks.reflectionDpAtlasPS.replace(/\\$texture2DSAMPLE/g, options.rgbmReflection ? \"texture2DRGBM\" : options.hdrReflection ? \"texture2D\" : \"texture2DSRGB\");\n  }\n  if ((cubemapReflection || options.sphereMap || options.dpAtlas) && options.refraction) {\n    code += chunks.refractionPS;\n  }\n  if (numShadowLights > 0) {\n    if (shadowTypeUsed[pc.SHADOW_PCF3]) {\n      code += chunks.shadowStandardPS;\n    }\n    if (shadowTypeUsed[pc.SHADOW_PCF5]) {\n      code += chunks.shadowStandardGL2PS;\n    }\n    if (useVsm) {\n      code += chunks.shadowVSM_commonPS;\n      if (shadowTypeUsed[pc.SHADOW_VSM8]) {\n        code += chunks.shadowVSM8PS;\n      }\n      if (shadowTypeUsed[pc.SHADOW_VSM16]) {\n        code += device.extTextureHalfFloatLinear ? chunks.shadowEVSMPS.replace(/\\$/g, \"16\") : chunks.shadowEVSMnPS.replace(/\\$/g, \"16\");\n      }\n      if (shadowTypeUsed[pc.SHADOW_VSM32]) {\n        code += device.extTextureFloatLinear ? chunks.shadowEVSMPS.replace(/\\$/g, \"32\") : chunks.shadowEVSMnPS.replace(/\\$/g, \"32\");\n      }\n    }\n    if (device.webgl2 || device.extStandardDerivatives) {\n    } else {\n      code += chunks.biasConstPS;\n    }\n    code += chunks.shadowCoordPS + chunks.shadowCommonPS;\n    if (usePerspZbufferShadow) {\n      code += chunks.shadowCoordPerspZbufferPS;\n    }\n    if (mainShadowLight >= 0) {\n      if (shadowTypeUsed[pc.SHADOW_PCF3]) {\n        code += chunks.shadowStandardVSPS;\n      }\n      if (shadowTypeUsed[pc.SHADOW_PCF5]) {\n        code += chunks.shadowStandardGL2VSPS;\n      }\n      if (useVsm) {\n        if (shadowTypeUsed[pc.SHADOW_VSM8]) {\n          code += chunks.shadowVSMVSPS.replace(/\\$VSM/g, \"VSM8\").replace(/\\$/g, \"8\");\n        }\n        if (shadowTypeUsed[pc.SHADOW_VSM16]) {\n          code += chunks.shadowVSMVSPS.replace(/\\$VSM/g, \"VSM16\").replace(/\\$/g, \"16\");\n        }\n        if (shadowTypeUsed[pc.SHADOW_VSM32]) {\n          code += chunks.shadowVSMVSPS.replace(/\\$VSM/g, \"VSM32\").replace(/\\$/g, \"32\");\n        }\n      }\n    }\n  }\n  if (lighting) {\n    code += chunks.lightDiffuseLambertPS;\n  }\n  var useOldAmbient = false;\n  if (options.useSpecular) {\n    if (lighting) {\n      code += options.shadingModel === pc.SPECULAR_PHONG ? chunks.lightSpecularPhongPS : chunks.lightSpecularBlinnPS;\n    }\n    if (options.sphereMap || cubemapReflection || options.dpAtlas || options.fresnelModel > 0) {\n      if (options.fresnelModel > 0) {\n        if (options.conserveEnergy) {\n          code += chunks.combineDiffuseSpecularPS;\n        } else {\n          code += chunks.combineDiffuseSpecularNoConservePS;\n        }\n      } else {\n        code += chunks.combineDiffuseSpecularOldPS;\n      }\n    } else {\n      if (options.diffuseMap) {\n        code += chunks.combineDiffuseSpecularNoReflPS;\n      } else {\n        code += chunks.combineDiffuseSpecularNoReflSeparateAmbientPS;\n        useOldAmbient = true;\n      }\n    }\n  } else {\n    code += chunks.combineDiffusePS;\n  }\n  var addAmbient = true;\n  if (options.lightMap || options.lightVertexColor) {\n    code += this._addMap(\"light\", options, chunks, uvOffset, options.dirLightMap ? chunks.lightmapDirPS : chunks.lightmapSinglePS, options.lightMapFormat);\n    addAmbient = options.lightMapWithoutAmbient;\n  }\n  if (addAmbient) {\n    var ambientDecode = options.rgbmAmbient ? \"decodeRGBM\" : options.hdrAmbient ? \"\" : \"gammaCorrectInput\";\n    if (options.ambientSH) {\n      code += chunks.ambientSHPS;\n    } else {\n      if (options.prefilteredCubemap) {\n        if (useTexCubeLod) {\n          code += chunks.ambientPrefilteredCubeLodPS.replace(/\\$DECODE/g, ambientDecode);\n        } else {\n          code += chunks.ambientPrefilteredCubePS.replace(/\\$DECODE/g, ambientDecode);\n        }\n      } else {\n        code += chunks.ambientConstantPS;\n      }\n    }\n  }\n  if (options.ambientTint && !useOldAmbient) {\n    code += \"uniform vec3 material_ambient;\\n\";\n  }\n  if (options.alphaTest) {\n    code += chunks.alphaTestPS;\n  }\n  if (options.msdf) {\n    code += chunks.msdfPS;\n  }\n  if (needsNormal) {\n    code += chunks.viewDirPS;\n    if (options.useSpecular) {\n      code += chunks.reflDirPS;\n    }\n  }\n  var hasPointLights = false;\n  var usesLinearFalloff = false;\n  var usesInvSquaredFalloff = false;\n  var usesSpot = false;\n  var usesCookie = false;\n  var usesCookieNow;\n  code += chunks.startPS;\n  if (needsNormal) {\n    if (options.twoSidedLighting) {\n      code += \"   dVertexNormalW = gl_FrontFacing ? vNormalW : -vNormalW;\\n\";\n    } else {\n      code += \"   dVertexNormalW = vNormalW;\\n\";\n    }\n    if (options.heightMap || options.normalMap) {\n      if (options.twoSidedLighting) {\n        code += \"   dTangentW = gl_FrontFacing ? vTangentW : -vTangentW;\\n\";\n        code += \"   dBinormalW = gl_FrontFacing ? vBinormalW : -vBinormalW;\\n\";\n      } else {\n        code += \"   dTangentW = vTangentW;\\n\";\n        code += \"   dBinormalW = vBinormalW;\\n\";\n      }\n    }\n  }\n  var opacityParallax = false;\n  if (options.blendType === pc.BLEND_NONE && !options.alphaTest && !options.alphaToCoverage) {\n    code += \"   dAlpha = 1.0;\\n\";\n  } else {\n    if (options.heightMap && options.opacityMap) {\n      opacityParallax = true;\n    } else {\n      code += \"   getOpacity();\\n\";\n      if (options.alphaTest) {\n        code += \"   alphaTest(dAlpha);\\n\";\n      }\n    }\n  }\n  if (needsNormal) {\n    code += \"   getViewDir();\\n\";\n    if (options.heightMap || options.normalMap) {\n      code += \"   getTBN();\\n\";\n    }\n    if (options.heightMap) {\n      code += \"   getParallax();\\n\";\n    }\n    if (opacityParallax) {\n      code += \"   getOpacity();\\n\";\n      if (options.alphaTest) {\n        code += \"   alphaTest(dAlpha);\\n\";\n      }\n    }\n    code += \"   getNormal();\\n\";\n    if (options.useSpecular) {\n      code += \"   getReflDir();\\n\";\n    }\n  }\n  code += \"   getAlbedo();\\n\";\n  if (lighting && options.useSpecular || reflections) {\n    code += \"   getSpecularity();\\n\";\n    code += \"   getGlossiness();\\n\";\n    if (options.fresnelModel > 0) {\n      code += \"   getFresnel();\\n\";\n    }\n  }\n  if (addAmbient) {\n    code += \"   addAmbient();\\n\";\n  }\n  if (options.ambientTint && !useOldAmbient) {\n    code += \"   dDiffuseLight *= material_ambient;\\n\";\n  }\n  if (useAo && !options.occludeDirect) {\n    code += \"    applyAO();\\n\";\n  }\n  if (options.lightMap || options.lightVertexColor) {\n    code += \"   addLightMap();\\n\";\n  }\n  if (lighting || reflections) {\n    if (cubemapReflection || options.sphereMap || options.dpAtlas) {\n      code += \"   addReflection();\\n\";\n    }\n    if (options.dirLightMap) {\n      code += \"   addDirLightMap();\\n\";\n    }\n    for (i = 0; i < options.lights.length; i++) {\n      light = options.lights[i];\n      lightType = light._type;\n      usesCookieNow = false;\n      if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {\n        code += \"   dLightDirNormW = light\" + i + \"_direction;\\n\";\n        code += \"   dAtten = 1.0;\\n\";\n      } else {\n        if (light._cookie) {\n          if (lightType === pc.LIGHTTYPE_SPOT && !light._cookie._cubemap) {\n            usesCookie = true;\n            usesCookieNow = true;\n          } else {\n            if (lightType === pc.LIGHTTYPE_POINT && light._cookie._cubemap) {\n              usesCookie = true;\n              usesCookieNow = true;\n            }\n          }\n        }\n        code += \"   getLightDirPoint(light\" + i + \"_position);\\n\";\n        hasPointLights = true;\n        if (usesCookieNow) {\n          if (lightType === pc.LIGHTTYPE_SPOT) {\n            code += \"   dAtten3 = getCookie2D\" + (light._cookieFalloff ? \"\" : \"Clip\") + (light._cookieTransform ? \"Xform\" : \"\") + \"(light\" + i + \"_cookie, light\" + i + \"_shadowMatrix, light\" + i + \"_cookieIntensity\" + (light._cookieTransform ? \", light\" + i + \"_cookieMatrix, light\" + i + \"_cookieOffset\" : \"\") + \").\" + light._cookieChannel + \";\\n\";\n          } else {\n            code += \"   dAtten3 = getCookieCube(light\" + i + \"_cookie, light\" + i + \"_shadowMatrix, light\" + i + \"_cookieIntensity).\" + light._cookieChannel + \";\\n\";\n          }\n        }\n        if (light._falloffMode === pc.LIGHTFALLOFF_LINEAR) {\n          code += \"   dAtten = getFalloffLinear(light\" + i + \"_radius);\\n\";\n          usesLinearFalloff = true;\n        } else {\n          code += \"   dAtten = getFalloffInvSquared(light\" + i + \"_radius);\\n\";\n          usesInvSquaredFalloff = true;\n        }\n        code += \"   if (dAtten > 0.00001) {\\n\";\n        if (lightType === pc.LIGHTTYPE_SPOT) {\n          if (!(usesCookieNow && !light._cookieFalloff)) {\n            code += \"       dAtten *= getSpotEffect(light\" + i + \"_direction, light\" + i + \"_innerConeAngle, light\" + i + \"_outerConeAngle);\\n\";\n            usesSpot = true;\n          }\n        }\n      }\n      code += \"       dAtten *= getLightDiffuse();\\n\";\n      if (light.castShadows && !options.noShadow) {\n        var shadowReadMode = null;\n        var evsmExp;\n        if (light._shadowType === pc.SHADOW_VSM8) {\n          shadowReadMode = \"VSM8\";\n          evsmExp = \"0.0\";\n        } else {\n          if (light._shadowType === pc.SHADOW_VSM16) {\n            shadowReadMode = \"VSM16\";\n            evsmExp = \"5.54\";\n          } else {\n            if (light._shadowType === pc.SHADOW_VSM32) {\n              shadowReadMode = \"VSM32\";\n              if (device.extTextureFloatHighPrecision) {\n                evsmExp = \"15.0\";\n              } else {\n                evsmExp = \"5.54\";\n              }\n            } else {\n              if (light._shadowType === pc.SHADOW_PCF5) {\n                shadowReadMode = \"PCF5x5\";\n              } else {\n                shadowReadMode = \"PCF3x3\";\n              }\n            }\n          }\n        }\n        if (shadowReadMode !== null) {\n          if (lightType === pc.LIGHTTYPE_POINT) {\n            shadowCoordArgs = \"(light\" + i + \"_shadowMap, light\" + i + \"_shadowParams);\\n\";\n            if (light._normalOffsetBias) {\n              code += \"       normalOffsetPointShadow(light\" + i + \"_shadowParams);\\n\";\n            }\n            code += \"       dAtten *= getShadowPoint\" + shadowReadMode + shadowCoordArgs;\n          } else {\n            if (mainShadowLight === i) {\n              shadowReadMode += \"VS\";\n            } else {\n              shadowCoordArgs = \"(light\" + i + \"_shadowMatrix, light\" + i + \"_shadowParams);\\n\";\n              code += this._nonPointShadowMapProjection(device, options.lights[i], shadowCoordArgs);\n            }\n            if (lightType === pc.LIGHTTYPE_SPOT) {\n              shadowReadMode = \"Spot\" + shadowReadMode;\n            }\n            code += \"       dAtten *= getShadow\" + shadowReadMode + \"(light\" + i + \"_shadowMap, light\" + i + \"_shadowParams\" + (light._isVsm ? \", \" + evsmExp : \"\") + \");\\n\";\n          }\n        }\n      }\n      code += \"       dDiffuseLight += dAtten * light\" + i + \"_color\" + (usesCookieNow ? \" * dAtten3\" : \"\") + \";\\n\";\n      if (options.useSpecular) {\n        code += \"       dAtten *= getLightSpecular();\\n\";\n        code += \"       dSpecularLight += dAtten * light\" + i + \"_color\" + (usesCookieNow ? \" * dAtten3\" : \"\") + \";\\n\";\n      }\n      if (lightType !== pc.LIGHTTYPE_DIRECTIONAL) {\n        code += \"   }\\n\";\n      }\n      code += \"\\n\";\n    }\n    if ((cubemapReflection || options.sphereMap || options.dpAtlas) && options.refraction) {\n      code += \"   addRefraction();\\n\";\n    }\n  }\n  code += \"\\n\";\n  if (useAo) {\n    if (options.occludeDirect) {\n      code += \"    applyAO();\\n\";\n    }\n    if (options.occludeSpecular) {\n      code += \"    occludeSpecular();\\n\";\n    }\n  }\n  code += chunks.endPS;\n  if (options.blendType === pc.BLEND_NORMAL || options.blendType === pc.BLEND_ADDITIVEALPHA || options.alphaToCoverage) {\n    code += chunks.outputAlphaPS;\n  } else {\n    if (options.blendType === pc.BLEND_PREMULTIPLIED) {\n      code += chunks.outputAlphaPremulPS;\n    } else {\n      code += chunks.outputAlphaOpaquePS;\n    }\n  }\n  if (options.msdf) {\n    code += \"   gl_FragColor = applyMsdf(gl_FragColor);\\n\";\n  }\n  code += \"\\n\";\n  code += pc.programlib.end();\n  if (hasPointLights) {\n    code = chunks.lightDirPointPS + code;\n  }\n  if (usesLinearFalloff) {\n    code = chunks.falloffLinearPS + code;\n  }\n  if (usesInvSquaredFalloff) {\n    code = chunks.falloffInvSquaredPS + code;\n  }\n  if (usesSpot) {\n    code = chunks.spotPS + code;\n  }\n  if (usesCookie) {\n    code = chunks.cookiePS + code;\n  }\n  var structCode = \"\";\n  if (code.includes(\"dReflection\")) {\n    structCode += \"vec4 dReflection;\\n\";\n  }\n  if (code.includes(\"dTBN\")) {\n    structCode += \"mat3 dTBN;\\n\";\n  }\n  if (code.includes(\"dAlbedo\")) {\n    structCode += \"vec3 dAlbedo;\\n\";\n  }\n  if (code.includes(\"dEmission\")) {\n    structCode += \"vec3 dEmission;\\n\";\n  }\n  if (code.includes(\"dNormalW\")) {\n    structCode += \"vec3 dNormalW;\\n\";\n  }\n  if (code.includes(\"dVertexNormalW\")) {\n    structCode += \"vec3 dVertexNormalW;\\n\";\n  }\n  if (code.includes(\"dTangentW\")) {\n    structCode += \"vec3 dTangentW;\\n\";\n  }\n  if (code.includes(\"dBinormalW\")) {\n    structCode += \"vec3 dBinormalW;\\n\";\n  }\n  if (code.includes(\"dViewDirW\")) {\n    structCode += \"vec3 dViewDirW;\\n\";\n  }\n  if (code.includes(\"dReflDirW\")) {\n    structCode += \"vec3 dReflDirW;\\n\";\n  }\n  if (code.includes(\"dDiffuseLight\")) {\n    structCode += \"vec3 dDiffuseLight;\\n\";\n  }\n  if (code.includes(\"dSpecularLight\")) {\n    structCode += \"vec3 dSpecularLight;\\n\";\n  }\n  if (code.includes(\"dLightDirNormW\")) {\n    structCode += \"vec3 dLightDirNormW;\\n\";\n  }\n  if (code.includes(\"dLightDirW\")) {\n    structCode += \"vec3 dLightDirW;\\n\";\n  }\n  if (code.includes(\"dLightPosW\")) {\n    structCode += \"vec3 dLightPosW;\\n\";\n  }\n  if (code.includes(\"dShadowCoord\")) {\n    structCode += \"vec3 dShadowCoord;\\n\";\n  }\n  if (code.includes(\"dNormalMap\")) {\n    structCode += \"vec3 dNormalMap;\\n\";\n  }\n  if (code.includes(\"dSpecularity\")) {\n    structCode += \"vec3 dSpecularity;\\n\";\n  }\n  if (code.includes(\"dUvOffset\")) {\n    structCode += \"vec2 dUvOffset;\\n\";\n  }\n  if (code.includes(\"dGlossiness\")) {\n    structCode += \"float dGlossiness;\\n\";\n  }\n  if (code.includes(\"dAlpha\")) {\n    structCode += \"float dAlpha;\\n\";\n  }\n  if (code.includes(\"dAtten\")) {\n    structCode += \"float dAtten;\\n\";\n  }\n  if (code.includes(\"dAtten3\")) {\n    structCode += \"vec3 dAtten3;\\n\";\n  }\n  if (code.includes(\"dAo\")) {\n    structCode += \"float dAo;\\n\";\n  }\n  if (code.includes(\"dMsdf\")) {\n    structCode += \"vec4 dMsdf;\\n\";\n  }\n  code = codeBegin + structCode + code;\n  fshader = code;\n  return {attributes:attributes, vshader:vshader, fshader:fshader, tag:pc.SHADERTAG_MATERIAL};\n}};\npc.programlib.skybox = {generateKey:function(device, options) {\n  var key = \"skybox\" + options.rgbm + \" \" + options.hdr + \" \" + options.fixSeams + \"\" + options.toneMapping + \"\" + options.gamma + \"\" + options.useIntensity + \"\" + options.mip;\n  return key;\n}, createShaderDefinition:function(device, options) {\n  var chunks = pc.shaderChunks;\n  var mip2size = [128, 64, 16, 8, 4, 2];\n  return {attributes:{aPosition:pc.SEMANTIC_POSITION}, vshader:chunks.skyboxVS, fshader:pc.programlib.precisionCode(device) + (options.mip ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS) + (options.useIntensity ? chunks.envMultiplyPS : chunks.envConstPS) + pc.programlib.gammaCode(options.gamma) + pc.programlib.tonemapCode(options.toneMapping) + chunks.rgbmPS + chunks.skyboxHDRPS.replace(/\\$textureCubeSAMPLE/g, options.rgbm ? \"textureCubeRGBM\" : options.hdr ? \"textureCube\" : \"textureCubeSRGB\").replace(/\\$FIXCONST/g, \n  1.0 - 1.0 / mip2size[options.mip] + \"\")};\n}};\npc.extend(pc, function() {\n  var primitive = {type:pc.PRIMITIVE_TRISTRIP, base:0, count:4, indexed:false};\n  var PostEffect = function(graphicsDevice) {\n    this.device = graphicsDevice;\n    this.shader = null;\n    this.depthMap = null;\n    this.vertexBuffer = pc.createFullscreenQuad(graphicsDevice);\n    this.needsDepthBuffer = false;\n  };\n  PostEffect.prototype = {render:function(inputTarget, outputTarget, rect) {\n  }};\n  function createFullscreenQuad(device) {\n    var vertexFormat = new pc.VertexFormat(device, [{semantic:pc.SEMANTIC_POSITION, components:2, type:pc.TYPE_FLOAT32}]);\n    var vertexBuffer = new pc.VertexBuffer(device, vertexFormat, 4);\n    var iterator = new pc.VertexIterator(vertexBuffer);\n    iterator.element[pc.SEMANTIC_POSITION].set(-1.0, -1.0);\n    iterator.next();\n    iterator.element[pc.SEMANTIC_POSITION].set(1.0, -1.0);\n    iterator.next();\n    iterator.element[pc.SEMANTIC_POSITION].set(-1.0, 1.0);\n    iterator.next();\n    iterator.element[pc.SEMANTIC_POSITION].set(1.0, 1.0);\n    iterator.end();\n    return vertexBuffer;\n  }\n  function drawFullscreenQuad(device, target, vertexBuffer, shader, rect) {\n    device.setRenderTarget(target);\n    device.updateBegin();\n    var w = target !== null ? target.width : device.width;\n    var h = target !== null ? target.height : device.height;\n    var x = 0;\n    var y = 0;\n    if (rect) {\n      x = rect.x * w;\n      y = rect.y * h;\n      w *= rect.z;\n      h *= rect.w;\n    }\n    device.setViewport(x, y, w, h);\n    device.setScissor(x, y, w, h);\n    var oldBlending = device.getBlending();\n    var oldDepthTest = device.getDepthTest();\n    var oldDepthWrite = device.getDepthWrite();\n    var oldCullMode = device.getCullMode();\n    var oldWR = device.writeRed;\n    var oldWG = device.writeGreen;\n    var oldWB = device.writeBlue;\n    var oldWA = device.writeAlpha;\n    device.setBlending(false);\n    device.setDepthTest(false);\n    device.setDepthWrite(false);\n    device.setCullMode(pc.CULLFACE_BACK);\n    device.setColorWrite(true, true, true, true);\n    device.setVertexBuffer(vertexBuffer, 0);\n    device.setShader(shader);\n    device.draw(primitive);\n    device.setBlending(oldBlending);\n    device.setDepthTest(oldDepthTest);\n    device.setDepthWrite(oldDepthWrite);\n    device.setCullMode(oldCullMode);\n    device.setColorWrite(oldWR, oldWG, oldWB, oldWA);\n    device.updateEnd();\n  }\n  return {PostEffect:PostEffect, createFullscreenQuad:createFullscreenQuad, drawFullscreenQuad:drawFullscreenQuad};\n}());\n(function() {\n  var enums = {BLEND_SUBTRACTIVE:0, BLEND_ADDITIVE:1, BLEND_NORMAL:2, BLEND_NONE:3, BLEND_PREMULTIPLIED:4, BLEND_MULTIPLICATIVE:5, BLEND_ADDITIVEALPHA:6, BLEND_MULTIPLICATIVE2X:7, BLEND_SCREEN:8, BLEND_MIN:9, BLEND_MAX:10, FOG_NONE:\"none\", FOG_LINEAR:\"linear\", FOG_EXP:\"exp\", FOG_EXP2:\"exp2\", FRESNEL_NONE:0, FRESNEL_SCHLICK:2, LAYER_HUD:0, LAYER_GIZMO:1, LAYER_FX:2, LAYER_WORLD:15, LAYERID_WORLD:0, LAYERID_DEPTH:1, LAYERID_SKYBOX:2, LAYERID_IMMEDIATE:3, LAYERID_UI:4, LIGHTTYPE_DIRECTIONAL:0, LIGHTTYPE_POINT:1, \n  LIGHTTYPE_SPOT:2, LIGHTFALLOFF_LINEAR:0, LIGHTFALLOFF_INVERSESQUARED:1, SHADOW_PCF3:0, SHADOW_DEPTH:0, SHADOW_VSM8:1, SHADOW_VSM16:2, SHADOW_VSM32:3, SHADOW_PCF5:4, BLUR_BOX:0, BLUR_GAUSSIAN:1, PARTICLESORT_NONE:0, PARTICLESORT_DISTANCE:1, PARTICLESORT_NEWER_FIRST:2, PARTICLESORT_OLDER_FIRST:3, PARTICLEMODE_GPU:0, PARTICLEMODE_CPU:1, EMITTERSHAPE_BOX:0, EMITTERSHAPE_SPHERE:1, PROJECTION_PERSPECTIVE:0, PROJECTION_ORTHOGRAPHIC:1, RENDERSTYLE_SOLID:0, RENDERSTYLE_WIREFRAME:1, RENDERSTYLE_POINTS:2, \n  CUBEPROJ_NONE:0, CUBEPROJ_BOX:1, SPECULAR_PHONG:0, SPECULAR_BLINN:1, GAMMA_NONE:0, GAMMA_SRGB:1, GAMMA_SRGBFAST:2, GAMMA_SRGBHDR:3, TONEMAP_LINEAR:0, TONEMAP_FILMIC:1, TONEMAP_HEJL:2, TONEMAP_ACES:3, TONEMAP_ACES2:4, SPECOCC_NONE:0, SPECOCC_AO:1, SPECOCC_GLOSSDEPENDENT:2, SHADERDEF_NOSHADOW:1, SHADERDEF_SKIN:2, SHADERDEF_UV0:4, SHADERDEF_UV1:8, SHADERDEF_VCOLOR:16, SHADERDEF_INSTANCING:32, SHADERDEF_LM:64, SHADERDEF_DIRLM:128, SHADERDEF_SCREENSPACE:256, LINEBATCH_WORLD:0, LINEBATCH_OVERLAY:1, LINEBATCH_GIZMO:2, \n  SHADOWUPDATE_NONE:0, SHADOWUPDATE_THISFRAME:1, SHADOWUPDATE_REALTIME:2, SORTKEY_FORWARD:0, SORTKEY_DEPTH:1, MASK_DYNAMIC:1, MASK_BAKED:2, MASK_LIGHTMAP:4, SHADER_FORWARD:0, SHADER_FORWARDHDR:1, SHADER_DEPTH:2, SHADER_SHADOW:3, SHADER_PICK:18, BAKE_COLOR:0, BAKE_COLORDIR:1, VIEW_CENTER:0, VIEW_LEFT:1, VIEW_RIGHT:2, SORTMODE_NONE:0, SORTMODE_MANUAL:1, SORTMODE_MATERIALMESH:2, SORTMODE_BACK2FRONT:3, SORTMODE_FRONT2BACK:4, COMPUPDATED_INSTANCES:1, COMPUPDATED_LIGHTS:2, COMPUPDATED_CAMERAS:4, COMPUPDATED_BLEND:8, \n  ASPECT_AUTO:0, ASPECT_MANUAL:1};\n  pc.extend(pc, enums);\n  pc.scene = {};\n  pc.extend(pc.scene, enums);\n})();\npc.extend(pc, function() {\n  var Scene = function Scene() {\n    this.root = null;\n    this._gravity = new pc.Vec3(0, -9.8, 0);\n    this._layers = null;\n    this._fog = pc.FOG_NONE;\n    this.fogColor = new pc.Color(0, 0, 0);\n    this.fogStart = 1;\n    this.fogEnd = 1000;\n    this.fogDensity = 0;\n    this.ambientLight = new pc.Color(0, 0, 0);\n    this._gammaCorrection = pc.GAMMA_NONE;\n    this._toneMapping = 0;\n    this.exposure = 1.0;\n    this._skyboxPrefiltered = [null, null, null, null, null, null];\n    this._skyboxCubeMap = null;\n    this.skyboxModel = null;\n    this._skyboxIntensity = 1;\n    this._skyboxMip = 0;\n    this.lightmapSizeMultiplier = 1;\n    this.lightmapMaxResolution = 2048;\n    this.lightmapMode = pc.BAKE_COLORDIR;\n    this._stats = {meshInstances:0, lights:0, dynamicLights:0, bakedLights:0, lastStaticPrepareFullTime:0, lastStaticPrepareSearchTime:0, lastStaticPrepareWriteTime:0, lastStaticPrepareTriAabbTime:0, lastStaticPrepareCombineTime:0, updateShadersTime:0};\n    this.updateShaders = true;\n    this.updateSkybox = true;\n    this._shaderVersion = 0;\n    this._statsUpdated = false;\n    this._models = [];\n    pc.events.attach(this);\n  };\n  Object.defineProperty(Scene.prototype, \"fog\", {get:function() {\n    return this._fog;\n  }, set:function(type) {\n    if (type !== this._fog) {\n      this._fog = type;\n      this.updateShaders = true;\n    }\n  }});\n  Object.defineProperty(Scene.prototype, \"gammaCorrection\", {get:function() {\n    return this._gammaCorrection;\n  }, set:function(value) {\n    if (value !== this._gammaCorrection) {\n      this._gammaCorrection = value;\n      this.updateShaders = true;\n    }\n  }});\n  Object.defineProperty(Scene.prototype, \"toneMapping\", {get:function() {\n    return this._toneMapping;\n  }, set:function(value) {\n    if (value !== this._toneMapping) {\n      this._toneMapping = value;\n      this.updateShaders = true;\n    }\n  }});\n  Object.defineProperty(Scene.prototype, \"skybox\", {get:function() {\n    return this._skyboxCubeMap;\n  }, set:function(value) {\n    this._skyboxCubeMap = value;\n    this._resetSkyboxModel();\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxIntensity\", {get:function() {\n    return this._skyboxIntensity;\n  }, set:function(value) {\n    this._skyboxIntensity = value;\n    this._resetSkyboxModel();\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxMip\", {get:function() {\n    return this._skyboxMip;\n  }, set:function(value) {\n    this._skyboxMip = value;\n    this._resetSkyboxModel();\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxPrefiltered128\", {get:function() {\n    return this._skyboxPrefiltered[0];\n  }, set:function(value) {\n    if (this._skyboxPrefiltered[0] === value) {\n      return;\n    }\n    this._skyboxPrefiltered[0] = value;\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxPrefiltered64\", {get:function() {\n    return this._skyboxPrefiltered[1];\n  }, set:function(value) {\n    if (this._skyboxPrefiltered[1] === value) {\n      return;\n    }\n    this._skyboxPrefiltered[1] = value;\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxPrefiltered32\", {get:function() {\n    return this._skyboxPrefiltered[2];\n  }, set:function(value) {\n    if (this._skyboxPrefiltered[2] === value) {\n      return;\n    }\n    this._skyboxPrefiltered[2] = value;\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxPrefiltered16\", {get:function() {\n    return this._skyboxPrefiltered[3];\n  }, set:function(value) {\n    if (this._skyboxPrefiltered[3] === value) {\n      return;\n    }\n    this._skyboxPrefiltered[3] = value;\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxPrefiltered8\", {get:function() {\n    return this._skyboxPrefiltered[4];\n  }, set:function(value) {\n    if (this._skyboxPrefiltered[4] === value) {\n      return;\n    }\n    this._skyboxPrefiltered[4] = value;\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"skyboxPrefiltered4\", {get:function() {\n    return this._skyboxPrefiltered[5];\n  }, set:function(value) {\n    if (this._skyboxPrefiltered[5] === value) {\n      return;\n    }\n    this._skyboxPrefiltered[5] = value;\n    this.updateShaders = true;\n  }});\n  Object.defineProperty(Scene.prototype, \"drawCalls\", {get:function() {\n    var drawCalls = this.layers._meshInstances;\n    if (!drawCalls.length) {\n      this.layers._update();\n      drawCalls = this.layers._meshInstances;\n    }\n    return drawCalls;\n  }, set:function(value) {\n  }});\n  Object.defineProperty(Scene.prototype, \"layers\", {get:function() {\n    return this._layers;\n  }, set:function(layers) {\n    var prev = this._layers;\n    this._layers = layers;\n    this.fire(\"set:layers\", prev, layers);\n  }});\n  Scene.prototype.applySettings = function(settings) {\n    this._gravity.set(settings.physics.gravity[0], settings.physics.gravity[1], settings.physics.gravity[2]);\n    this.ambientLight.set(settings.render.global_ambient[0], settings.render.global_ambient[1], settings.render.global_ambient[2]);\n    this._fog = settings.render.fog;\n    this.fogColor.set(settings.render.fog_color[0], settings.render.fog_color[1], settings.render.fog_color[2]);\n    this.fogStart = settings.render.fog_start;\n    this.fogEnd = settings.render.fog_end;\n    this.fogDensity = settings.render.fog_density;\n    this._gammaCorrection = settings.render.gamma_correction;\n    this._toneMapping = settings.render.tonemapping;\n    this.lightmapSizeMultiplier = settings.render.lightmapSizeMultiplier;\n    this.lightmapMaxResolution = settings.render.lightmapMaxResolution;\n    this.lightmapMode = settings.render.lightmapMode;\n    this.exposure = settings.render.exposure;\n    this._skyboxIntensity = settings.render.skyboxIntensity === undefined ? 1 : settings.render.skyboxIntensity;\n    this._skyboxMip = settings.render.skyboxMip === undefined ? 0 : settings.render.skyboxMip;\n    this._resetSkyboxModel();\n    this.updateShaders = true;\n  };\n  Scene.prototype._updateSkybox = function(device) {\n    var i;\n    if (this._skyboxCubeMap && !this.skyboxModel) {\n      var material = new pc.Material;\n      var scene = this;\n      material.updateShader = function(dev, sc, defs, staticLightList, pass) {\n        var library = device.getProgramLibrary();\n        var shader = library.getProgram(\"skybox\", {rgbm:scene._skyboxCubeMap.rgbm, hdr:scene._skyboxCubeMap.rgbm || scene._skyboxCubeMap.format === pc.PIXELFORMAT_RGBA32F, useIntensity:scene.skyboxIntensity !== 1, mip:scene._skyboxCubeMap.fixCubemapSeams ? scene.skyboxMip : 0, fixSeams:scene._skyboxCubeMap.fixCubemapSeams, gamma:pass === pc.SHADER_FORWARDHDR ? scene.gammaCorrection ? pc.GAMMA_SRGBHDR : pc.GAMMA_NONE : scene.gammaCorrection, toneMapping:pass === pc.SHADER_FORWARDHDR ? pc.TONEMAP_LINEAR : \n        scene.toneMapping});\n        this.setShader(shader);\n      };\n      material.updateShader();\n      var usedTex;\n      if (!this._skyboxCubeMap.fixCubemapSeams || !scene._skyboxMip) {\n        usedTex = this._skyboxCubeMap;\n      } else {\n        var mip2tex = [null, \"64\", \"16\", \"8\", \"4\"];\n        var mipTex = this[\"skyboxPrefiltered\" + mip2tex[scene._skyboxMip]];\n        if (mipTex) {\n          usedTex = mipTex;\n        }\n      }\n      material.setParameter(\"texture_cubeMap\", usedTex);\n      material.cull = pc.CULLFACE_NONE;\n      var skyLayer = this.layers.getLayerById(pc.LAYERID_SKYBOX);\n      if (skyLayer) {\n        var node = new pc.GraphNode;\n        var mesh = pc.createBox(device);\n        var meshInstance = new pc.MeshInstance(node, mesh, material);\n        meshInstance.cull = false;\n        meshInstance._noDepthDrawGl1 = true;\n        var model = new pc.Model;\n        model.graph = node;\n        model.meshInstances = [meshInstance];\n        this.skyboxModel = model;\n        skyLayer.addMeshInstances(model.meshInstances);\n        skyLayer.enabled = true;\n        this.skyLayer = skyLayer;\n        this.fire(\"set:skybox\", usedTex);\n      }\n    }\n  };\n  Scene.prototype._resetSkyboxModel = function() {\n    if (this.skyboxModel) {\n      this.skyLayer.removeMeshInstances(this.skyboxModel.meshInstances);\n      this.skyLayer.enabled = false;\n    }\n    this.skyboxModel = null;\n    this.updateSkybox = true;\n  };\n  Scene.prototype.setSkybox = function(cubemaps) {\n    var i;\n    if (!cubemaps) {\n      cubemaps = [null, null, null, null, null, null, null];\n    }\n    var different = false;\n    if (this._skyboxCubeMap !== cubemaps[0]) {\n      different = true;\n    }\n    if (!different) {\n      for (i = 0; i < 6 && !different; i++) {\n        if (this._skyboxPrefiltered[i] !== cubemaps[i + 1]) {\n          different = true;\n        }\n      }\n    }\n    if (!different) {\n      return;\n    }\n    for (i = 0; i < 6; i++) {\n      this._skyboxPrefiltered[i] = cubemaps[i + 1];\n    }\n    this.skybox = cubemaps[0];\n  };\n  Scene.prototype.destroy = function() {\n    this.skybox = null;\n  };\n  Scene.prototype.addModel = function(model) {\n    if (this.containsModel(model)) {\n      return;\n    }\n    var layer = this.layers.getLayerById(pc.LAYERID_WORLD);\n    if (!layer) {\n      return;\n    }\n    layer.addMeshInstances(model.meshInstances);\n    this._models.push(model);\n  };\n  Scene.prototype.addShadowCaster = function(model) {\n    var layer = this.layers.getLayerById(pc.LAYERID_WORLD);\n    if (!layer) {\n      return;\n    }\n    layer.addShadowCasters(model.meshInstances);\n  };\n  Scene.prototype.removeModel = function(model) {\n    var index = this._models.indexOf(model);\n    if (index !== -1) {\n      var layer = this.layers.getLayerById(pc.LAYERID_WORLD);\n      if (!layer) {\n        return;\n      }\n      layer.removeMeshInstances(model.meshInstances);\n      this._models.splice(index, 1);\n    }\n  };\n  Scene.prototype.removeShadowCasters = function(model) {\n    var layer = this.layers.getLayerById(pc.LAYERID_WORLD);\n    if (!layer) {\n      return;\n    }\n    layer.removeShadowCasters(model.meshInstances);\n  };\n  Scene.prototype.containsModel = function(model) {\n    return this._models.indexOf(model) >= 0;\n  };\n  Scene.prototype.getModels = function(model) {\n    return this._models;\n  };\n  return {Scene:Scene};\n}());\npc.extend(pc, function() {\n  var scaleShift = (new pc.Mat4).mul2((new pc.Mat4).setTranslate(0.5, 0.5, 0.5), (new pc.Mat4).setScale(0.5, 0.5, 0.5));\n  var opChanId = {r:1, g:2, b:3, a:4};\n  var pointLightRotations = [(new pc.Quat).setFromEulerAngles(0, 90, 180), (new pc.Quat).setFromEulerAngles(0, -90, 180), (new pc.Quat).setFromEulerAngles(90, 0, 0), (new pc.Quat).setFromEulerAngles(-90, 0, 0), (new pc.Quat).setFromEulerAngles(0, 180, 180), (new pc.Quat).setFromEulerAngles(0, 0, 180)];\n  var numShadowModes = 5;\n  var shadowMapCache = [{}, {}, {}, {}, {}];\n  var directionalShadowEpsilon = 0.01;\n  var pixelOffset = new pc.Vec2;\n  var blurScissorRect = {x:1, y:1, z:0, w:0};\n  var shadowCamView = new pc.Mat4;\n  var shadowCamViewProj = new pc.Mat4;\n  var c2sc = new pc.Mat4;\n  var viewInvMat = new pc.Mat4;\n  var viewMat = new pc.Mat4;\n  var viewMat3 = new pc.Mat3;\n  var viewProjMat = new pc.Mat4;\n  var projMat;\n  var viewInvL = new pc.Mat4;\n  var viewInvR = new pc.Mat4;\n  var viewL = new pc.Mat4;\n  var viewR = new pc.Mat4;\n  var viewPosL = new pc.Vec3;\n  var viewPosR = new pc.Vec3;\n  var projL, projR;\n  var viewMat3L = new pc.Mat4;\n  var viewMat3R = new pc.Mat4;\n  var viewProjMatL = new pc.Mat4;\n  var viewProjMatR = new pc.Mat4;\n  var frustumDiagonal = new pc.Vec3;\n  var tempSphere = {center:null, radius:0};\n  var meshPos;\n  var visibleSceneAabb = new pc.BoundingBox;\n  var lightBounds = new pc.BoundingBox;\n  var boneTextureSize = [0, 0];\n  var boneTexture, instancingData, modelMatrix, normalMatrix;\n  var shadowMapCubeCache = {};\n  var maxBlurSize = 25;\n  var keyA, keyB;\n  var frustumPoints = [];\n  for (var i = 0; i < 8; i++) {\n    frustumPoints.push(new pc.Vec3);\n  }\n  function _getFrustumPoints(camera, farClip, points) {\n    var nearClip = camera._nearClip;\n    var fov = camera._fov * Math.PI / 180.0;\n    var aspect = camera._aspect;\n    var projection = camera._projection;\n    var x, y;\n    if (projection === pc.PROJECTION_PERSPECTIVE) {\n      y = Math.tan(fov / 2.0) * nearClip;\n    } else {\n      y = camera._orthoHeight;\n    }\n    x = y * aspect;\n    points[0].x = x;\n    points[0].y = -y;\n    points[0].z = -nearClip;\n    points[1].x = x;\n    points[1].y = y;\n    points[1].z = -nearClip;\n    points[2].x = -x;\n    points[2].y = y;\n    points[2].z = -nearClip;\n    points[3].x = -x;\n    points[3].y = -y;\n    points[3].z = -nearClip;\n    if (projection === pc.PROJECTION_PERSPECTIVE) {\n      y = Math.tan(fov / 2.0) * farClip;\n      x = y * aspect;\n    }\n    points[4].x = x;\n    points[4].y = -y;\n    points[4].z = -farClip;\n    points[5].x = x;\n    points[5].y = y;\n    points[5].z = -farClip;\n    points[6].x = -x;\n    points[6].y = y;\n    points[6].z = -farClip;\n    points[7].x = -x;\n    points[7].y = -y;\n    points[7].z = -farClip;\n    return points;\n  }\n  function StaticArray(size) {\n    var data = new Array(size);\n    var obj = function(idx) {\n      return data[idx];\n    };\n    obj.size = 0;\n    obj.push = function(v) {\n      data[this.size] = v;\n      ++this.size;\n    };\n    obj.data = data;\n    return obj;\n  }\n  var intersectCache = {temp:[new pc.Vec3, new pc.Vec3, new pc.Vec3], vertices:new Array(3), negative:new StaticArray(3), positive:new StaticArray(3), intersections:new StaticArray(3), zCollection:new StaticArray(36)};\n  function _groupVertices(coord, face, smallerIsNegative) {\n    var intersections = intersectCache.intersections;\n    var small, large;\n    if (smallerIsNegative) {\n      small = intersectCache.negative;\n      large = intersectCache.positive;\n    } else {\n      small = intersectCache.positive;\n      large = intersectCache.negative;\n    }\n    intersections.size = 0;\n    small.size = 0;\n    large.size = 0;\n    var intersectCount = 0;\n    var v;\n    for (var j = 0; j < 3; ++j) {\n      v = intersectCache.vertices[j];\n      if (v[coord] < face) {\n        small.push(v);\n      } else {\n        if (v[coord] === face) {\n          intersections.push(intersectCache.temp[intersections.size].copy(v));\n        } else {\n          large.push(v);\n        }\n      }\n    }\n  }\n  function _triXFace(zs, x, y, faceTest, yMin, yMax) {\n    var negative = intersectCache.negative;\n    var positive = intersectCache.positive;\n    var intersections = intersectCache.intersections;\n    if (negative.size === 3) {\n      return false;\n    }\n    if (negative.size && positive.size) {\n      intersections.push(intersectCache.temp[intersections.size].lerp(negative(0), positive(0), (faceTest - negative(0)[x]) / (positive(0)[x] - negative(0)[x])));\n      if (negative.size === 2) {\n        intersections.push(intersectCache.temp[intersections.size].lerp(negative(1), positive(0), (faceTest - negative(1)[x]) / (positive(0)[x] - negative(1)[x])));\n      } else {\n        if (positive.size === 2) {\n          intersections.push(intersectCache.temp[intersections.size].lerp(negative(0), positive(1), (faceTest - negative(0)[x]) / (positive(1)[x] - negative(0)[x])));\n        }\n      }\n    }\n    if (intersections.size === 0) {\n      return true;\n    }\n    if (intersections.size === 1) {\n      if (yMin <= intersections(0)[y] && intersections(0)[y] <= yMax) {\n        zs.push(intersections(0).z);\n      }\n      return true;\n    }\n    if (intersections(1)[y] === intersections(0)[y]) {\n      if (yMin <= intersections(0)[y] && intersections(0)[y] <= yMax) {\n        zs.push(intersections(0).z);\n        zs.push(intersections(1).z);\n      }\n    } else {\n      var delta = (intersections(1).z - intersections(0).z) / (intersections(1)[y] - intersections(0)[y]);\n      if (intersections(0)[y] > yMax) {\n        zs.push(intersections(0).z + delta * (yMax - intersections(0)[y]));\n      } else {\n        if (intersections(0)[y] < yMin) {\n          zs.push(intersections(0).z + delta * (yMin - intersections(0)[y]));\n        } else {\n          zs.push(intersections(0).z);\n        }\n      }\n      if (intersections(1)[y] > yMax) {\n        zs.push(intersections(1).z + delta * (yMax - intersections(1)[y]));\n      } else {\n        if (intersections(1)[y] < yMin) {\n          zs.push(intersections(1).z + delta * (yMin - intersections(1)[y]));\n        } else {\n          zs.push(intersections(1).z);\n        }\n      }\n    }\n    return true;\n  }\n  var _sceneAABB_LS = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];\n  var iAABBTriIndexes = [0, 1, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 0, 2, 4, 2, 4, 6, 1, 3, 5, 3, 5, 7, 0, 1, 4, 1, 4, 5, 2, 3, 6, 3, 6, 7];\n  function _getZFromAABB(w2sc, aabbMin, aabbMax, lcamMinX, lcamMaxX, lcamMinY, lcamMaxY) {\n    _sceneAABB_LS[0].x = _sceneAABB_LS[1].x = _sceneAABB_LS[2].x = _sceneAABB_LS[3].x = aabbMin.x;\n    _sceneAABB_LS[1].y = _sceneAABB_LS[3].y = _sceneAABB_LS[7].y = _sceneAABB_LS[5].y = aabbMin.y;\n    _sceneAABB_LS[2].z = _sceneAABB_LS[3].z = _sceneAABB_LS[6].z = _sceneAABB_LS[7].z = aabbMin.z;\n    _sceneAABB_LS[4].x = _sceneAABB_LS[5].x = _sceneAABB_LS[6].x = _sceneAABB_LS[7].x = aabbMax.x;\n    _sceneAABB_LS[0].y = _sceneAABB_LS[2].y = _sceneAABB_LS[4].y = _sceneAABB_LS[6].y = aabbMax.y;\n    _sceneAABB_LS[0].z = _sceneAABB_LS[1].z = _sceneAABB_LS[4].z = _sceneAABB_LS[5].z = aabbMax.z;\n    for (var i = 0; i < 8; ++i) {\n      w2sc.transformPoint(_sceneAABB_LS[i], _sceneAABB_LS[i]);\n    }\n    var minz = 9999999999;\n    var maxz = -9999999999;\n    var vertices = intersectCache.vertices;\n    var positive = intersectCache.positive;\n    var zs = intersectCache.zCollection;\n    zs.size = 0;\n    for (var AABBTriIter = 0; AABBTriIter < 12; ++AABBTriIter) {\n      vertices[0] = _sceneAABB_LS[iAABBTriIndexes[AABBTriIter * 3 + 0]];\n      vertices[1] = _sceneAABB_LS[iAABBTriIndexes[AABBTriIter * 3 + 1]];\n      vertices[2] = _sceneAABB_LS[iAABBTriIndexes[AABBTriIter * 3 + 2]];\n      var verticesWithinBound = 0;\n      _groupVertices(\"x\", lcamMinX, true);\n      if (!_triXFace(zs, \"x\", \"y\", lcamMinX, lcamMinY, lcamMaxY)) {\n        continue;\n      }\n      verticesWithinBound += positive.size;\n      _groupVertices(\"x\", lcamMaxX, false);\n      if (!_triXFace(zs, \"x\", \"y\", lcamMaxX, lcamMinY, lcamMaxY)) {\n        continue;\n      }\n      verticesWithinBound += positive.size;\n      _groupVertices(\"y\", lcamMinY, true);\n      if (!_triXFace(zs, \"y\", \"x\", lcamMinY, lcamMinX, lcamMaxX)) {\n        continue;\n      }\n      verticesWithinBound += positive.size;\n      _groupVertices(\"y\", lcamMaxY, false);\n      _triXFace(zs, \"y\", \"x\", lcamMaxY, lcamMinX, lcamMaxX);\n      if (verticesWithinBound + positive.size == 12) {\n        zs.push(vertices[0].z);\n        zs.push(vertices[1].z);\n        zs.push(vertices[2].z);\n      }\n    }\n    var z;\n    for (var j = 0, len = zs.size; j < len; j++) {\n      z = zs(j);\n      if (z < minz) {\n        minz = z;\n      }\n      if (z > maxz) {\n        maxz = z;\n      }\n    }\n    return {min:minz, max:maxz};\n  }\n  function _getZFromAABBSimple(w2sc, aabbMin, aabbMax, lcamMinX, lcamMaxX, lcamMinY, lcamMaxY) {\n    _sceneAABB_LS[0].x = _sceneAABB_LS[1].x = _sceneAABB_LS[2].x = _sceneAABB_LS[3].x = aabbMin.x;\n    _sceneAABB_LS[1].y = _sceneAABB_LS[3].y = _sceneAABB_LS[7].y = _sceneAABB_LS[5].y = aabbMin.y;\n    _sceneAABB_LS[2].z = _sceneAABB_LS[3].z = _sceneAABB_LS[6].z = _sceneAABB_LS[7].z = aabbMin.z;\n    _sceneAABB_LS[4].x = _sceneAABB_LS[5].x = _sceneAABB_LS[6].x = _sceneAABB_LS[7].x = aabbMax.x;\n    _sceneAABB_LS[0].y = _sceneAABB_LS[2].y = _sceneAABB_LS[4].y = _sceneAABB_LS[6].y = aabbMax.y;\n    _sceneAABB_LS[0].z = _sceneAABB_LS[1].z = _sceneAABB_LS[4].z = _sceneAABB_LS[5].z = aabbMax.z;\n    var minz = 9999999999;\n    var maxz = -9999999999;\n    var z;\n    for (var i = 0; i < 8; ++i) {\n      w2sc.transformPoint(_sceneAABB_LS[i], _sceneAABB_LS[i]);\n      z = _sceneAABB_LS[i].z;\n      if (z < minz) {\n        minz = z;\n      }\n      if (z > maxz) {\n        maxz = z;\n      }\n    }\n    return {min:minz, max:maxz};\n  }\n  function getShadowFormat(device, shadowType) {\n    if (shadowType === pc.SHADOW_VSM32) {\n      return pc.PIXELFORMAT_RGBA32F;\n    } else {\n      if (shadowType === pc.SHADOW_VSM16) {\n        return pc.PIXELFORMAT_RGBA16F;\n      } else {\n        if (shadowType === pc.SHADOW_PCF5) {\n          return pc.PIXELFORMAT_DEPTH;\n        } else {\n          if (shadowType === pc.SHADOW_PCF3 && device.webgl2) {\n            return pc.PIXELFORMAT_DEPTH;\n          }\n        }\n      }\n    }\n    return pc.PIXELFORMAT_R8_G8_B8_A8;\n  }\n  function getShadowFiltering(device, shadowType) {\n    if (shadowType === pc.SHADOW_PCF3 && !device.webgl2) {\n      return pc.FILTER_NEAREST;\n    } else {\n      if (shadowType === pc.SHADOW_VSM32) {\n        return device.extTextureFloatLinear ? pc.FILTER_LINEAR : pc.FILTER_NEAREST;\n      } else {\n        if (shadowType === pc.SHADOW_VSM16) {\n          return device.extTextureHalfFloatLinear ? pc.FILTER_LINEAR : pc.FILTER_NEAREST;\n        }\n      }\n    }\n    return pc.FILTER_LINEAR;\n  }\n  function createShadowMap(device, width, height, shadowType) {\n    var format = getShadowFormat(device, shadowType);\n    var filter = getShadowFiltering(device, shadowType);\n    var shadowMap = new pc.Texture(device, {format:format, width:width, height:height, mipmaps:false, minFilter:filter, magFilter:filter, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});\n    if (shadowType === pc.SHADOW_PCF5 || shadowType === pc.SHADOW_PCF3 && device.webgl2) {\n      shadowMap.compareOnRead = true;\n      shadowMap.compareFunc = pc.FUNC_LESS;\n      return new pc.RenderTarget({depthBuffer:shadowMap});\n    }\n    return new pc.RenderTarget({colorBuffer:shadowMap, depth:true});\n  }\n  function createShadowCubeMap(device, size) {\n    var cubemap = new pc.Texture(device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:size, height:size, cubemap:true, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});\n    var targets = [];\n    var target;\n    for (var i = 0; i < 6; i++) {\n      target = new pc.RenderTarget({colorBuffer:cubemap, face:i, depth:true});\n      targets.push(target);\n    }\n    return targets;\n  }\n  function gauss(x, sigma) {\n    return Math.exp(-(x * x) / (2.0 * sigma * sigma));\n  }\n  function gaussWeights(kernelSize) {\n    if (kernelSize > maxBlurSize) {\n      kernelSize = maxBlurSize;\n    }\n    var sigma = (kernelSize - 1) / (2 * 3);\n    var i, values, sum, halfWidth;\n    halfWidth = (kernelSize - 1) * 0.5;\n    values = new Array(kernelSize);\n    sum = 0.0;\n    for (i = 0; i < kernelSize; ++i) {\n      values[i] = gauss(i - halfWidth, sigma);\n      sum += values[i];\n    }\n    for (i = 0; i < kernelSize; ++i) {\n      values[i] /= sum;\n    }\n    return values;\n  }\n  function createShadowCamera(device, shadowType, type) {\n    var flags = pc.CLEARFLAG_DEPTH;\n    var hwPcf = shadowType === pc.SHADOW_PCF5 || shadowType === pc.SHADOW_PCF3 && device.webgl2;\n    if (type === pc.LIGHTTYPE_POINT) {\n      hwPcf = false;\n    }\n    if (!hwPcf) {\n      flags |= pc.CLEARFLAG_COLOR;\n    }\n    var shadowCam = new pc.Camera;\n    if (shadowType >= pc.SHADOW_VSM8 && shadowType <= pc.SHADOW_VSM32) {\n      shadowCam.clearColor[0] = 0;\n      shadowCam.clearColor[1] = 0;\n      shadowCam.clearColor[2] = 0;\n      shadowCam.clearColor[3] = 0;\n    } else {\n      shadowCam.clearColor[0] = 1;\n      shadowCam.clearColor[1] = 1;\n      shadowCam.clearColor[2] = 1;\n      shadowCam.clearColor[3] = 1;\n    }\n    shadowCam.clearDepth = 1;\n    shadowCam.clearFlags = flags;\n    shadowCam.clearStencil = null;\n    shadowCam._node = new pc.GraphNode;\n    return shadowCam;\n  }\n  function getShadowMapFromCache(device, res, mode, layer) {\n    if (!layer) {\n      layer = 0;\n    }\n    var id = layer * 10000 + res;\n    var shadowBuffer = shadowMapCache[mode][id];\n    if (!shadowBuffer) {\n      shadowBuffer = createShadowMap(device, res, res, mode ? mode : pc.SHADOW_PCF3);\n      shadowMapCache[mode][id] = shadowBuffer;\n    }\n    return shadowBuffer;\n  }\n  function createShadowBuffer(device, light) {\n    var shadowBuffer;\n    if (light._type === pc.LIGHTTYPE_POINT) {\n      if (light._shadowType > pc.SHADOW_PCF3) {\n        light._shadowType = pc.SHADOW_PCF3;\n      }\n      if (light._cacheShadowMap) {\n        shadowBuffer = shadowMapCubeCache[light._shadowResolution];\n        if (!shadowBuffer) {\n          shadowBuffer = createShadowCubeMap(device, light._shadowResolution);\n          shadowMapCubeCache[light._shadowResolution] = shadowBuffer;\n        }\n      } else {\n        shadowBuffer = createShadowCubeMap(device, light._shadowResolution);\n      }\n      light._shadowCamera.renderTarget = shadowBuffer[0];\n      light._shadowCubeMap = shadowBuffer;\n    } else {\n      if (light._cacheShadowMap) {\n        shadowBuffer = getShadowMapFromCache(device, light._shadowResolution, light._shadowType);\n      } else {\n        shadowBuffer = createShadowMap(device, light._shadowResolution, light._shadowResolution, light._shadowType);\n      }\n      light._shadowCamera.renderTarget = shadowBuffer;\n    }\n    light._isCachedShadowMap = light._cacheShadowMap;\n  }\n  function getDepthKey(meshInstance) {\n    var material = meshInstance.material;\n    var x = meshInstance.skinInstance ? 10 : 0;\n    var y = 0;\n    if (material.opacityMap) {\n      var opChan = material.opacityMapChannel;\n      if (opChan) {\n        y = opChanId[opChan];\n      }\n    }\n    return x + y;\n  }\n  function ForwardRenderer(graphicsDevice) {\n    this.device = graphicsDevice;\n    var device = this.device;\n    this._shadowDrawCalls = 0;\n    this._forwardDrawCalls = 0;\n    this._skinDrawCalls = 0;\n    this._camerasRendered = 0;\n    this._materialSwitches = 0;\n    this._shadowMapUpdates = 0;\n    this._shadowMapTime = 0;\n    this._depthMapTime = 0;\n    this._forwardTime = 0;\n    this._cullTime = 0;\n    this._sortTime = 0;\n    this._skinTime = 0;\n    this._morphTime = 0;\n    this._instancingTime = 0;\n    var library = device.getProgramLibrary();\n    this.library = library;\n    this.frontToBack = false;\n    var scope = device.scope;\n    this.projId = scope.resolve(\"matrix_projection\");\n    this.viewId = scope.resolve(\"matrix_view\");\n    this.viewId3 = scope.resolve(\"matrix_view3\");\n    this.viewInvId = scope.resolve(\"matrix_viewInverse\");\n    this.viewProjId = scope.resolve(\"matrix_viewProjection\");\n    this.viewPosId = scope.resolve(\"view_position\");\n    this.nearClipId = scope.resolve(\"camera_near\");\n    this.farClipId = scope.resolve(\"camera_far\");\n    this.cameraParamsId = scope.resolve(\"camera_params\");\n    this.shadowMapLightRadiusId = scope.resolve(\"light_radius\");\n    this.fogColorId = scope.resolve(\"fog_color\");\n    this.fogStartId = scope.resolve(\"fog_start\");\n    this.fogEndId = scope.resolve(\"fog_end\");\n    this.fogDensityId = scope.resolve(\"fog_density\");\n    this.modelMatrixId = scope.resolve(\"matrix_model\");\n    this.normalMatrixId = scope.resolve(\"matrix_normal\");\n    this.poseMatrixId = scope.resolve(\"matrix_pose[0]\");\n    this.boneTextureId = scope.resolve(\"texture_poseMap\");\n    this.boneTextureSizeId = scope.resolve(\"texture_poseMapSize\");\n    this.alphaTestId = scope.resolve(\"alpha_ref\");\n    this.opacityMapId = scope.resolve(\"texture_opacityMap\");\n    this.ambientId = scope.resolve(\"light_globalAmbient\");\n    this.exposureId = scope.resolve(\"exposure\");\n    this.skyboxIntensityId = scope.resolve(\"skyboxIntensity\");\n    this.lightColorId = [];\n    this.lightDirId = [];\n    this.lightShadowMapId = [];\n    this.lightShadowMatrixId = [];\n    this.lightShadowParamsId = [];\n    this.lightShadowMatrixVsId = [];\n    this.lightShadowParamsVsId = [];\n    this.lightDirVsId = [];\n    this.lightRadiusId = [];\n    this.lightPosId = [];\n    this.lightInAngleId = [];\n    this.lightOutAngleId = [];\n    this.lightPosVsId = [];\n    this.lightCookieId = [];\n    this.lightCookieIntId = [];\n    this.lightCookieMatrixId = [];\n    this.lightCookieOffsetId = [];\n    this.depthMapId = scope.resolve(\"uDepthMap\");\n    this.screenSizeId = scope.resolve(\"uScreenSize\");\n    this._screenSize = new pc.Vec4;\n    this.sourceId = scope.resolve(\"source\");\n    this.pixelOffsetId = scope.resolve(\"pixelOffset\");\n    this.weightId = scope.resolve(\"weight[0]\");\n    var chunks = pc.shaderChunks;\n    this.blurVsmShaderCode = [chunks.blurVSMPS, \"#define GAUSS\\n\" + chunks.blurVSMPS];\n    var packed = \"#define PACKED\\n\";\n    this.blurPackedVsmShaderCode = [packed + this.blurVsmShaderCode[0], packed + this.blurVsmShaderCode[1]];\n    this.blurVsmShader = [{}, {}];\n    this.blurPackedVsmShader = [{}, {}];\n    this.blurVsmWeights = {};\n    this.polygonOffsetId = scope.resolve(\"polygonOffset\");\n    this.polygonOffset = new Float32Array(2);\n    this.fogColor = new Float32Array(3);\n    this.ambientColor = new Float32Array(3);\n  }\n  function mat3FromMat4(m3, m4) {\n    m3.data[0] = m4.data[0];\n    m3.data[1] = m4.data[1];\n    m3.data[2] = m4.data[2];\n    m3.data[3] = m4.data[4];\n    m3.data[4] = m4.data[5];\n    m3.data[5] = m4.data[6];\n    m3.data[6] = m4.data[8];\n    m3.data[7] = m4.data[9];\n    m3.data[8] = m4.data[10];\n  }\n  pc.extend(ForwardRenderer.prototype, {sortCompare:function(drawCallA, drawCallB) {\n    if (drawCallA.layer === drawCallB.layer) {\n      if (drawCallA.drawOrder && drawCallB.drawOrder) {\n        return drawCallA.drawOrder - drawCallB.drawOrder;\n      } else {\n        if (drawCallA.zdist && drawCallB.zdist) {\n          return drawCallB.zdist - drawCallA.zdist;\n        } else {\n          if (drawCallA.zdist2 && drawCallB.zdist2) {\n            return drawCallA.zdist2 - drawCallB.zdist2;\n          }\n        }\n      }\n    }\n    return drawCallB._key[pc.SORTKEY_FORWARD] - drawCallA._key[pc.SORTKEY_FORWARD];\n  }, sortCompareMesh:function(drawCallA, drawCallB) {\n    if (drawCallA.layer === drawCallB.layer) {\n      if (drawCallA.drawOrder && drawCallB.drawOrder) {\n        return drawCallA.drawOrder - drawCallB.drawOrder;\n      } else {\n        if (drawCallA.zdist && drawCallB.zdist) {\n          return drawCallB.zdist - drawCallA.zdist;\n        }\n      }\n    }\n    keyA = drawCallA._key[pc.SORTKEY_FORWARD];\n    keyB = drawCallB._key[pc.SORTKEY_FORWARD];\n    if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {\n      return drawCallB.mesh.id - drawCallA.mesh.id;\n    }\n    return keyB - keyA;\n  }, depthSortCompare:function(drawCallA, drawCallB) {\n    keyA = drawCallA._key[pc.SORTKEY_DEPTH];\n    keyB = drawCallB._key[pc.SORTKEY_DEPTH];\n    if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {\n      return drawCallB.mesh.id - drawCallA.mesh.id;\n    }\n    return keyB - keyA;\n  }, lightCompare:function(lightA, lightB) {\n    return lightA.key - lightB.key;\n  }, _isVisible:function(camera, meshInstance) {\n    if (!meshInstance.visible) {\n      return false;\n    }\n    meshPos = meshInstance.aabb.center;\n    if (meshInstance._aabb._radiusVer !== meshInstance._aabbVer) {\n      meshInstance._aabb._radius = meshInstance._aabb.halfExtents.length();\n      meshInstance._aabb._radiusVer = meshInstance._aabbVer;\n    }\n    tempSphere.radius = meshInstance._aabb._radius;\n    tempSphere.center = meshPos;\n    return camera.frustum.containsSphere(tempSphere);\n  }, getShadowCamera:function(device, light) {\n    var shadowCam = light._shadowCamera;\n    var shadowBuffer;\n    if (shadowCam === null) {\n      shadowCam = light._shadowCamera = createShadowCamera(device, light._shadowType, light._type);\n      createShadowBuffer(device, light);\n    } else {\n      shadowBuffer = shadowCam.renderTarget;\n      if (shadowBuffer.width !== light._shadowResolution || shadowBuffer.height !== light._shadowResolution) {\n        createShadowBuffer(device, light);\n      }\n    }\n    return shadowCam;\n  }, updateCameraFrustum:function(camera) {\n    if (camera.vrDisplay && camera.vrDisplay.presenting) {\n      projMat = camera.vrDisplay.combinedProj;\n      var parent = camera._node.getParent();\n      if (parent) {\n        viewMat.copy(parent.getWorldTransform()).mul(camera.vrDisplay.combinedViewInv).invert();\n      } else {\n        viewMat.copy(camera.vrDisplay.combinedView);\n      }\n      viewInvMat.copy(viewMat).invert();\n      this.viewInvId.setValue(viewInvMat.data);\n      camera.frustum.update(projMat, viewMat);\n      return;\n    }\n    projMat = camera.getProjectionMatrix();\n    if (camera.overrideCalculateProjection) {\n      camera.calculateProjection(projMat, pc.VIEW_CENTER);\n    }\n    if (camera.overrideCalculateTransform) {\n      camera.calculateTransform(viewInvMat, pc.VIEW_CENTER);\n    } else {\n      var pos = camera._node.getPosition();\n      var rot = camera._node.getRotation();\n      viewInvMat.setTRS(pos, rot, pc.Vec3.ONE);\n      this.viewInvId.setValue(viewInvMat.data);\n    }\n    viewMat.copy(viewInvMat).invert();\n    camera.frustum.update(projMat, viewMat);\n  }, setCamera:function(camera, target, clear, cullBorder) {\n    var vrDisplay = camera.vrDisplay;\n    if (!vrDisplay || !vrDisplay.presenting) {\n      projMat = camera.getProjectionMatrix();\n      if (camera.overrideCalculateProjection) {\n        camera.calculateProjection(projMat, pc.VIEW_CENTER);\n      }\n      this.projId.setValue(projMat.data);\n      if (camera.overrideCalculateTransform) {\n        camera.calculateTransform(viewInvMat, pc.VIEW_CENTER);\n      } else {\n        var pos = camera._node.getPosition();\n        var rot = camera._node.getRotation();\n        viewInvMat.setTRS(pos, rot, pc.Vec3.ONE);\n      }\n      this.viewInvId.setValue(viewInvMat.data);\n      viewMat.copy(viewInvMat).invert();\n      this.viewId.setValue(viewMat.data);\n      mat3FromMat4(viewMat3, viewMat);\n      this.viewId3.setValue(viewMat3.data);\n      viewProjMat.mul2(projMat, viewMat);\n      this.viewProjId.setValue(viewProjMat.data);\n      this.viewPosId.setValue(camera._node.getPosition().data);\n      camera.frustum.update(projMat, viewMat);\n    } else {\n      projL = vrDisplay.leftProj;\n      projR = vrDisplay.rightProj;\n      projMat = vrDisplay.combinedProj;\n      if (camera.overrideCalculateProjection) {\n        camera.calculateProjection(projL, pc.VIEW_LEFT);\n        camera.calculateProjection(projR, pc.VIEW_RIGHT);\n        camera.calculateProjection(projMat, pc.VIEW_CENTER);\n      }\n      if (camera.overrideCalculateTransform) {\n        camera.calculateTransform(viewInvL, pc.VIEW_LEFT);\n        camera.calculateTransform(viewInvR, pc.VIEW_RIGHT);\n        camera.calculateTransform(viewInvMat, pc.VIEW_CENTER);\n        viewL.copy(viewInvL).invert();\n        viewR.copy(viewInvR).invert();\n        viewMat.copy(viewInvMat).invert();\n      } else {\n        var parent = camera._node.getParent();\n        if (parent) {\n          var transform = parent.getWorldTransform();\n          viewInvL.mul2(transform, vrDisplay.leftViewInv);\n          viewInvR.mul2(transform, vrDisplay.rightViewInv);\n          viewL.copy(viewInvL).invert();\n          viewR.copy(viewInvR).invert();\n          viewMat.copy(parent.getWorldTransform()).mul(vrDisplay.combinedViewInv).invert();\n        } else {\n          viewInvL.copy(vrDisplay.leftViewInv);\n          viewInvR.copy(vrDisplay.rightViewInv);\n          viewL.copy(vrDisplay.leftView);\n          viewR.copy(vrDisplay.rightView);\n          viewMat.copy(vrDisplay.combinedView);\n        }\n      }\n      mat3FromMat4(viewMat3L, viewL);\n      mat3FromMat4(viewMat3R, viewR);\n      viewProjMatL.mul2(projL, viewL);\n      viewProjMatR.mul2(projR, viewR);\n      viewPosL.data[0] = viewInvL.data[12];\n      viewPosL.data[1] = viewInvL.data[13];\n      viewPosL.data[2] = viewInvL.data[14];\n      viewPosR.data[0] = viewInvR.data[12];\n      viewPosR.data[1] = viewInvR.data[13];\n      viewPosR.data[2] = viewInvR.data[14];\n      camera.frustum.update(projMat, viewMat);\n    }\n    this.nearClipId.setValue(camera._nearClip);\n    this.farClipId.setValue(camera._farClip);\n    this.cameraParamsId.setValue(camera._shaderParams.data);\n    var device = this.device;\n    device.setRenderTarget(target);\n    device.updateBegin();\n    var rect = camera.getRect();\n    var pixelWidth = target ? target.width : device.width;\n    var pixelHeight = target ? target.height : device.height;\n    var x = Math.floor(rect.x * pixelWidth);\n    var y = Math.floor(rect.y * pixelHeight);\n    var w = Math.floor(rect.width * pixelWidth);\n    var h = Math.floor(rect.height * pixelHeight);\n    device.setViewport(x, y, w, h);\n    device.setScissor(x, y, w, h);\n    if (clear) {\n      device.clear(camera._clearOptions);\n    }\n    rect = camera._scissorRect;\n    x = Math.floor(rect.x * pixelWidth);\n    y = Math.floor(rect.y * pixelHeight);\n    w = Math.floor(rect.width * pixelWidth);\n    h = Math.floor(rect.height * pixelHeight);\n    device.setScissor(x, y, w, h);\n    if (cullBorder) {\n      device.setScissor(1, 1, pixelWidth - 2, pixelHeight - 2);\n    }\n  }, dispatchGlobalLights:function(scene) {\n    var i;\n    this.mainLight = -1;\n    var scope = this.device.scope;\n    this.ambientColor[0] = scene.ambientLight.data[0];\n    this.ambientColor[1] = scene.ambientLight.data[1];\n    this.ambientColor[2] = scene.ambientLight.data[2];\n    if (scene.gammaCorrection) {\n      for (i = 0; i < 3; i++) {\n        this.ambientColor[i] = Math.pow(this.ambientColor[i], 2.2);\n      }\n    }\n    this.ambientId.setValue(this.ambientColor);\n    this.exposureId.setValue(scene.exposure);\n    if (scene.skyboxModel) {\n      this.skyboxIntensityId.setValue(scene.skyboxIntensity);\n    }\n  }, _resolveLight:function(scope, i) {\n    var light = \"light\" + i;\n    this.lightColorId[i] = scope.resolve(light + \"_color\");\n    this.lightDirId[i] = scope.resolve(light + \"_direction\");\n    this.lightShadowMapId[i] = scope.resolve(light + \"_shadowMap\");\n    this.lightShadowMatrixId[i] = scope.resolve(light + \"_shadowMatrix\");\n    this.lightShadowParamsId[i] = scope.resolve(light + \"_shadowParams\");\n    this.lightShadowMatrixVsId[i] = scope.resolve(light + \"_shadowMatrixVS\");\n    this.lightShadowParamsVsId[i] = scope.resolve(light + \"_shadowParamsVS\");\n    this.lightDirVsId[i] = scope.resolve(light + \"_directionVS\");\n    this.lightRadiusId[i] = scope.resolve(light + \"_radius\");\n    this.lightPosId[i] = scope.resolve(light + \"_position\");\n    this.lightInAngleId[i] = scope.resolve(light + \"_innerConeAngle\");\n    this.lightOutAngleId[i] = scope.resolve(light + \"_outerConeAngle\");\n    this.lightPosVsId[i] = scope.resolve(light + \"_positionVS\");\n    this.lightCookieId[i] = scope.resolve(light + \"_cookie\");\n    this.lightCookieIntId[i] = scope.resolve(light + \"_cookieIntensity\");\n    this.lightCookieMatrixId[i] = scope.resolve(light + \"_cookieMatrix\");\n    this.lightCookieOffsetId[i] = scope.resolve(light + \"_cookieOffset\");\n  }, dispatchDirectLights:function(dirs, scene, mask) {\n    var numDirs = dirs.length;\n    var i;\n    var directional, wtm;\n    var cnt = 0;\n    this.mainLight = -1;\n    var scope = this.device.scope;\n    for (i = 0; i < numDirs; i++) {\n      if (!(dirs[i]._mask & mask)) {\n        continue;\n      }\n      directional = dirs[i];\n      wtm = directional._node.getWorldTransform();\n      if (!this.lightColorId[cnt]) {\n        this._resolveLight(scope, cnt);\n      }\n      this.lightColorId[cnt].setValue(scene.gammaCorrection ? directional._linearFinalColor.data : directional._finalColor.data);\n      wtm.getY(directional._direction).scale(-1);\n      this.lightDirId[cnt].setValue(directional._direction.normalize().data);\n      if (directional.castShadows) {\n        var shadowMap = directional._isPcf && this.device.webgl2 ? directional._shadowCamera.renderTarget.depthBuffer : directional._shadowCamera.renderTarget.colorBuffer;\n        var bias;\n        if (directional._isVsm) {\n          bias = -0.00001 * 20;\n        } else {\n          bias = directional.shadowBias / directional._shadowCamera._farClip * 100;\n          if (!this.device.webgl2 && this.device.extStandardDerivatives) {\n            bias *= -100;\n          }\n        }\n        var normalBias = directional._isVsm ? directional.vsmBias / (directional._shadowCamera._farClip / 7.0) : directional._normalOffsetBias;\n        this.lightShadowMapId[cnt].setValue(shadowMap);\n        this.lightShadowMatrixId[cnt].setValue(directional._shadowMatrix.data);\n        var params = directional._rendererParams;\n        if (params.length !== 3) {\n          params.length = 3;\n        }\n        params[0] = directional._shadowResolution;\n        params[1] = normalBias;\n        params[2] = bias;\n        this.lightShadowParamsId[cnt].setValue(params);\n        if (this.mainLight < 0) {\n          this.lightShadowMatrixVsId[cnt].setValue(directional._shadowMatrix.data);\n          this.lightShadowParamsVsId[cnt].setValue(params);\n          this.lightDirVsId[cnt].setValue(directional._direction.normalize().data);\n          this.mainLight = i;\n        }\n      }\n      cnt++;\n    }\n    return cnt;\n  }, dispatchPointLight:function(scene, scope, point, cnt) {\n    var wtm = point._node.getWorldTransform();\n    if (!this.lightColorId[cnt]) {\n      this._resolveLight(scope, cnt);\n    }\n    this.lightRadiusId[cnt].setValue(point.attenuationEnd);\n    this.lightColorId[cnt].setValue(scene.gammaCorrection ? point._linearFinalColor.data : point._finalColor.data);\n    wtm.getTranslation(point._position);\n    this.lightPosId[cnt].setValue(point._position.data);\n    if (point.castShadows) {\n      var shadowMap = point._shadowCamera.renderTarget.colorBuffer;\n      this.lightShadowMapId[cnt].setValue(shadowMap);\n      var params = point._rendererParams;\n      if (params.length !== 4) {\n        params.length = 4;\n      }\n      params[0] = point._shadowResolution;\n      params[1] = point._normalOffsetBias;\n      params[2] = point.shadowBias;\n      params[3] = 1.0 / point.attenuationEnd;\n      this.lightShadowParamsId[cnt].setValue(params);\n    }\n    if (point._cookie) {\n      this.lightCookieId[cnt].setValue(point._cookie);\n      this.lightShadowMatrixId[cnt].setValue(wtm.data);\n      this.lightCookieIntId[cnt].setValue(point.cookieIntensity);\n    }\n  }, dispatchSpotLight:function(scene, scope, spot, cnt) {\n    var wtm = spot._node.getWorldTransform();\n    if (!this.lightColorId[cnt]) {\n      this._resolveLight(scope, cnt);\n    }\n    this.lightInAngleId[cnt].setValue(spot._innerConeAngleCos);\n    this.lightOutAngleId[cnt].setValue(spot._outerConeAngleCos);\n    this.lightRadiusId[cnt].setValue(spot.attenuationEnd);\n    this.lightColorId[cnt].setValue(scene.gammaCorrection ? spot._linearFinalColor.data : spot._finalColor.data);\n    wtm.getTranslation(spot._position);\n    this.lightPosId[cnt].setValue(spot._position.data);\n    wtm.getY(spot._direction).scale(-1);\n    this.lightDirId[cnt].setValue(spot._direction.normalize().data);\n    if (spot.castShadows) {\n      var bias;\n      if (spot._isVsm) {\n        bias = -0.00001 * 20;\n      } else {\n        bias = spot.shadowBias * 20;\n        if (!this.device.webgl2 && this.device.extStandardDerivatives) {\n          bias *= -100;\n        }\n      }\n      var normalBias = spot._isVsm ? spot.vsmBias / (spot.attenuationEnd / 7.0) : spot._normalOffsetBias;\n      var shadowMap = spot._isPcf && this.device.webgl2 ? spot._shadowCamera.renderTarget.depthBuffer : spot._shadowCamera.renderTarget.colorBuffer;\n      this.lightShadowMapId[cnt].setValue(shadowMap);\n      this.lightShadowMatrixId[cnt].setValue(spot._shadowMatrix.data);\n      var params = spot._rendererParams;\n      if (params.length !== 4) {\n        params.length = 4;\n      }\n      params[0] = spot._shadowResolution;\n      params[1] = normalBias;\n      params[2] = bias;\n      params[3] = 1.0 / spot.attenuationEnd;\n      this.lightShadowParamsId[cnt].setValue(params);\n      if (this.mainLight < 0) {\n        this.lightShadowMatrixVsId[cnt].setValue(spot._shadowMatrix.data);\n        this.lightShadowParamsVsId[cnt].setValue(params);\n        this.lightPosVsId[cnt].setValue(spot._position.data);\n        this.mainLight = i;\n      }\n    }\n    if (spot._cookie) {\n      this.lightCookieId[cnt].setValue(spot._cookie);\n      if (!spot.castShadows) {\n        var shadowCam = this.getShadowCamera(this.device, spot);\n        var shadowCamNode = shadowCam._node;\n        shadowCamNode.setPosition(spot._node.getPosition());\n        shadowCamNode.setRotation(spot._node.getRotation());\n        shadowCamNode.rotateLocal(-90, 0, 0);\n        shadowCam.projection = pc.PROJECTION_PERSPECTIVE;\n        shadowCam.aspectRatio = 1;\n        shadowCam.fov = spot._outerConeAngle * 2;\n        shadowCamView.setTRS(shadowCamNode.getPosition(), shadowCamNode.getRotation(), pc.Vec3.ONE).invert();\n        shadowCamViewProj.mul2(shadowCam.getProjectionMatrix(), shadowCamView);\n        spot._shadowMatrix.mul2(scaleShift, shadowCamViewProj);\n      }\n      this.lightShadowMatrixId[cnt].setValue(spot._shadowMatrix.data);\n      this.lightCookieIntId[cnt].setValue(spot.cookieIntensity);\n      if (spot._cookieTransform) {\n        this.lightCookieMatrixId[cnt].setValue(spot._cookieTransform.data);\n        this.lightCookieOffsetId[cnt].setValue(spot._cookieOffset.data);\n      }\n    }\n  }, dispatchLocalLights:function(sortedLights, scene, mask, usedDirLights, staticLightList) {\n    var i;\n    var point, spot;\n    var pnts = sortedLights[pc.LIGHTTYPE_POINT];\n    var spts = sortedLights[pc.LIGHTTYPE_SPOT];\n    var numDirs = usedDirLights;\n    var numPnts = pnts.length;\n    var numSpts = spts.length;\n    var cnt = numDirs;\n    var scope = this.device.scope;\n    for (i = 0; i < numPnts; i++) {\n      point = pnts[i];\n      if (!(point._mask & mask)) {\n        continue;\n      }\n      if (point.isStatic) {\n        continue;\n      }\n      this.dispatchPointLight(scene, scope, point, cnt);\n      cnt++;\n    }\n    var staticId = 0;\n    if (staticLightList) {\n      point = staticLightList[staticId];\n      while (point && point._type === pc.LIGHTTYPE_POINT) {\n        this.dispatchPointLight(scene, scope, point, cnt);\n        cnt++;\n        staticId++;\n        point = staticLightList[staticId];\n      }\n    }\n    for (i = 0; i < numSpts; i++) {\n      spot = spts[i];\n      if (!(spot._mask & mask)) {\n        continue;\n      }\n      if (spot.isStatic) {\n        continue;\n      }\n      this.dispatchSpotLight(scene, scope, spot, cnt);\n      cnt++;\n    }\n    if (staticLightList) {\n      spot = staticLightList[staticId];\n      while (spot && spot._type === pc.LIGHTTYPE_SPOT) {\n        this.dispatchSpotLight(scene, scope, spot, cnt);\n        cnt++;\n        staticId++;\n        spot = staticLightList[staticId];\n      }\n    }\n  }, cull:function(camera, drawCalls, visibleList) {\n    var visibleLength = 0;\n    var i, drawCall, visible;\n    var drawCallsCount = drawCalls.length;\n    var cullingMask = camera.cullingMask || 4294967295;\n    if (!camera.frustumCulling) {\n      for (i = 0; i < drawCallsCount; i++) {\n        drawCall = drawCalls[i];\n        if (!drawCall.visible && !drawCall.command) {\n          continue;\n        }\n        if (drawCall.mask && (drawCall.mask & cullingMask) === 0) {\n          continue;\n        }\n        visibleList[visibleLength] = drawCall;\n        visibleLength++;\n        drawCall.visibleThisFrame = true;\n      }\n      return visibleLength;\n    }\n    for (i = 0; i < drawCallsCount; i++) {\n      drawCall = drawCalls[i];\n      if (!drawCall.command) {\n        if (!drawCall.visible) {\n          continue;\n        }\n        visible = true;\n        if (drawCall.mask && (drawCall.mask & cullingMask) === 0) {\n          continue;\n        }\n        if (drawCall.cull) {\n          visible = this._isVisible(camera, drawCall);\n        }\n        if (visible) {\n          visibleList[visibleLength] = drawCall;\n          visibleLength++;\n          drawCall.visibleThisFrame = true;\n        }\n      } else {\n        visibleList[visibleLength] = drawCall;\n        visibleLength++;\n        drawCall.visibleThisFrame = true;\n      }\n    }\n    return visibleLength;\n  }, cullLights:function(camera, lights) {\n    var i, light, type;\n    for (i = 0; i < lights.length; i++) {\n      light = lights[i];\n      type = light._type;\n      if (light.castShadows && light._enabled && light.shadowUpdateMode !== pc.SHADOWUPDATE_NONE) {\n        if (type !== pc.LIGHTTYPE_DIRECTIONAL) {\n          light.getBoundingSphere(tempSphere);\n          if (!camera.frustum.containsSphere(tempSphere)) {\n            continue;\n          }\n          light.visibleThisFrame = true;\n        }\n      }\n    }\n  }, updateCpuSkinMatrices:function(drawCalls) {\n    var drawCallsCount = drawCalls.length;\n    if (drawCallsCount === 0) {\n      return;\n    }\n    var i, skin;\n    for (i = 0; i < drawCallsCount; i++) {\n      skin = drawCalls[i].skinInstance;\n      if (skin) {\n        skin.updateMatrices(drawCalls[i].node);\n        skin._dirty = true;\n      }\n    }\n  }, updateGpuSkinMatrices:function(drawCalls) {\n    var i, skin;\n    var drawCallsCount = drawCalls.length;\n    for (i = 0; i < drawCallsCount; i++) {\n      if (!drawCalls[i].visibleThisFrame) {\n        continue;\n      }\n      skin = drawCalls[i].skinInstance;\n      if (skin) {\n        if (skin._dirty) {\n          skin.updateMatrixPalette();\n          skin._dirty = false;\n        }\n      }\n    }\n  }, updateMorphedBounds:function(drawCalls) {\n    var i, morph;\n    var drawCallsCount = drawCalls.length;\n    for (i = 0; i < drawCallsCount; i++) {\n      morph = drawCalls[i].morphInstance;\n      if (morph && morph._dirty) {\n        morph.updateBounds(drawCalls[i].mesh);\n      }\n    }\n  }, updateMorphing:function(drawCalls) {\n    var i, morph;\n    var drawCallsCount = drawCalls.length;\n    for (i = 0; i < drawCallsCount; i++) {\n      if (!drawCalls[i].visibleThisFrame) {\n        continue;\n      }\n      morph = drawCalls[i].morphInstance;\n      if (morph && morph._dirty) {\n        morph.update(drawCalls[i].mesh);\n        morph._dirty = false;\n      }\n    }\n  }, setBaseConstants:function(device, material) {\n    device.setCullMode(material.cull);\n    if (material.opacityMap) {\n      this.opacityMapId.setValue(material.opacityMap);\n      this.alphaTestId.setValue(material.alphaTest);\n    }\n  }, setSkinning:function(device, meshInstance, material) {\n    if (meshInstance.skinInstance) {\n      this._skinDrawCalls++;\n      if (device.supportsBoneTextures) {\n        boneTexture = meshInstance.skinInstance.boneTexture;\n        this.boneTextureId.setValue(boneTexture);\n        boneTextureSize[0] = boneTexture.width;\n        boneTextureSize[1] = boneTexture.height;\n        this.boneTextureSizeId.setValue(boneTextureSize);\n      } else {\n        this.poseMatrixId.setValue(meshInstance.skinInstance.matrixPalette);\n      }\n    }\n  }, drawInstance:function(device, meshInstance, mesh, style, normal) {\n    instancingData = meshInstance.instancingData;\n    if (instancingData) {\n      this._instancedDrawCalls++;\n      this._removedByInstancing += instancingData.count;\n      device.setVertexBuffer(instancingData._buffer, 1, instancingData.offset);\n      device.draw(mesh.primitive[style], instancingData.count);\n      if (instancingData._buffer === pc._autoInstanceBuffer) {\n        meshInstance.instancingData = null;\n        return instancingData.count - 1;\n      }\n    } else {\n      modelMatrix = meshInstance.node.worldTransform;\n      this.modelMatrixId.setValue(modelMatrix.data);\n      if (normal) {\n        normalMatrix = meshInstance.node.normalMatrix;\n        if (meshInstance.node._dirtyNormal) {\n          modelMatrix.invertTo3x3(normalMatrix);\n          normalMatrix.transpose();\n          meshInstance.node._dirtyNormal = false;\n        }\n        this.normalMatrixId.setValue(normalMatrix.data);\n      }\n      device.draw(mesh.primitive[style]);\n      return 0;\n    }\n  }, drawInstance2:function(device, meshInstance, mesh, style) {\n    instancingData = meshInstance.instancingData;\n    if (instancingData) {\n      this._instancedDrawCalls++;\n      this._removedByInstancing += instancingData.count;\n      device.setVertexBuffer(instancingData._buffer, 1, instancingData.offset);\n      device.draw(mesh.primitive[style], instancingData.count);\n      if (instancingData._buffer === pc._autoInstanceBuffer) {\n        meshInstance.instancingData = null;\n        return instancingData.count - 1;\n      }\n    } else {\n      device.draw(mesh.primitive[style]);\n      return 0;\n    }\n  }, renderShadows:function(lights, cameraPass) {\n    var device = this.device;\n    var i, j, light, shadowShader, type, shadowCam, shadowCamNode, lightNode, pass, passes, frustumSize, shadowType, smode;\n    var unitPerTexel, delta, p;\n    var minx, miny, minz, maxx, maxy, maxz, centerx, centery;\n    var opChan;\n    var visible, cullTime, numInstances;\n    var meshInstance, mesh, material;\n    var style;\n    var emptyAabb;\n    var drawCallAabb;\n    var settings;\n    var visibleList, visibleLength;\n    var passFlag = 1 << pc.SHADER_SHADOW;\n    var paramName, parameter, parameters;\n    for (i = 0; i < lights.length; i++) {\n      light = lights[i];\n      type = light._type;\n      if (!light.castShadows || !light._enabled) {\n        continue;\n      }\n      if (!light._shadowCamera) {\n        this.getShadowCamera(device, light);\n      }\n      if (light.shadowUpdateMode !== pc.SHADOWUPDATE_NONE && light.visibleThisFrame) {\n        shadowCam = this.getShadowCamera(device, light);\n        shadowCamNode = shadowCam._node;\n        lightNode = light._node;\n        pass = 0;\n        passes = 1;\n        if (type === pc.LIGHTTYPE_DIRECTIONAL) {\n          if (light._visibleLength[cameraPass] < 0) {\n            continue;\n          }\n          settings = light._visibleCameraSettings[cameraPass];\n          shadowCamNode.setPosition(settings.x, settings.y, settings.z);\n          shadowCam.orthoHeight = settings.orthoHeight;\n          shadowCam.farClip = settings.farClip;\n          pass = cameraPass;\n        } else {\n          if (type === pc.LIGHTTYPE_SPOT) {\n            this.viewPosId.setValue(shadowCamNode.getPosition().data);\n            this.shadowMapLightRadiusId.setValue(light.attenuationEnd);\n          } else {\n            if (type === pc.LIGHTTYPE_POINT) {\n              this.viewPosId.setValue(shadowCamNode.getPosition().data);\n              this.shadowMapLightRadiusId.setValue(light.attenuationEnd);\n              passes = 6;\n            }\n          }\n        }\n        if (type !== pc.LIGHTTYPE_POINT) {\n          shadowCamView.setTRS(shadowCamNode.getPosition(), shadowCamNode.getRotation(), pc.Vec3.ONE).invert();\n          shadowCamViewProj.mul2(shadowCam.getProjectionMatrix(), shadowCamView);\n          light._shadowMatrix.mul2(scaleShift, shadowCamViewProj);\n        }\n        if (device.webgl2) {\n          if (type === pc.LIGHTTYPE_POINT) {\n            device.setDepthBias(false);\n          } else {\n            device.setDepthBias(true);\n            device.setDepthBiasValues(light.shadowBias * -1000.0, light.shadowBias * -1000.0);\n          }\n        } else {\n          if (device.extStandardDerivatives) {\n            if (type === pc.LIGHTTYPE_POINT) {\n              this.polygonOffset[0] = 0;\n              this.polygonOffset[1] = 0;\n              this.polygonOffsetId.setValue(this.polygonOffset);\n            } else {\n              this.polygonOffset[0] = light.shadowBias * -1000.0;\n              this.polygonOffset[1] = light.shadowBias * -1000.0;\n              this.polygonOffsetId.setValue(this.polygonOffset);\n            }\n          }\n        }\n        if (light.shadowUpdateMode === pc.SHADOWUPDATE_THISFRAME) {\n          light.shadowUpdateMode = pc.SHADOWUPDATE_NONE;\n        }\n        this._shadowMapUpdates += passes;\n        device.setBlending(false);\n        device.setDepthWrite(true);\n        device.setDepthTest(true);\n        if (light._isPcf && device.webgl2 && type !== pc.LIGHTTYPE_POINT) {\n          device.setColorWrite(false, false, false, false);\n        } else {\n          device.setColorWrite(true, true, true, true);\n        }\n        if (pass) {\n          passes = pass + 1;\n        } else {\n          pass = 0;\n        }\n        while (pass < passes) {\n          if (type === pc.LIGHTTYPE_POINT) {\n            shadowCamNode.setRotation(pointLightRotations[pass]);\n            shadowCam.renderTarget = light._shadowCubeMap[pass];\n          }\n          this.setCamera(shadowCam, shadowCam.renderTarget, true, type !== pc.LIGHTTYPE_POINT);\n          visibleList = light._visibleList[pass];\n          visibleLength = light._visibleLength[pass];\n          shadowType = light._shadowType;\n          smode = shadowType + type * numShadowModes;\n          for (j = 0, numInstances = visibleLength; j < numInstances; j++) {\n            meshInstance = visibleList[j];\n            mesh = meshInstance.mesh;\n            material = meshInstance.material;\n            this.setBaseConstants(device, material);\n            this.setSkinning(device, meshInstance, material);\n            if (material.chunks) {\n              parameters = material.parameters;\n              for (paramName in parameters) {\n                parameter = parameters[paramName];\n                if (parameter.passFlags & passFlag) {\n                  if (!parameter.scopeId) {\n                    parameter.scopeId = device.scope.resolve(paramName);\n                  }\n                  parameter.scopeId.setValue(parameter.data);\n                }\n              }\n              parameters = meshInstance.parameters;\n              for (paramName in parameters) {\n                parameter = parameters[paramName];\n                if (parameter.passFlags & passFlag) {\n                  if (!parameter.scopeId) {\n                    parameter.scopeId = device.scope.resolve(paramName);\n                  }\n                  parameter.scopeId.setValue(parameter.data);\n                }\n              }\n            }\n            shadowShader = meshInstance._shader[pc.SHADER_SHADOW + smode];\n            if (!shadowShader) {\n              this.updateShader(meshInstance, meshInstance._shaderDefs, null, pc.SHADER_SHADOW + smode);\n              shadowShader = meshInstance._shader[pc.SHADER_SHADOW + smode];\n              meshInstance._key[pc.SORTKEY_DEPTH] = getDepthKey(meshInstance);\n            }\n            device.setShader(shadowShader);\n            style = meshInstance.renderStyle;\n            device.setVertexBuffer(meshInstance.morphInstance && meshInstance.morphInstance._vertexBuffer ? meshInstance.morphInstance._vertexBuffer : mesh.vertexBuffer, 0);\n            device.setIndexBuffer(mesh.indexBuffer[style]);\n            j += this.drawInstance(device, meshInstance, mesh, style);\n            this._shadowDrawCalls++;\n          }\n          pass++;\n          if (type === pc.LIGHTTYPE_DIRECTIONAL) {\n            light._visibleLength[cameraPass] = -1;\n          }\n        }\n        if (light._isVsm) {\n          var filterSize = light._vsmBlurSize;\n          if (filterSize > 1) {\n            var origShadowMap = shadowCam.renderTarget;\n            var tempRt = getShadowMapFromCache(device, light._shadowResolution, light._shadowType, 1);\n            var blurMode = light.vsmBlurMode;\n            var blurShader = (light._shadowType === pc.SHADOW_VSM8 ? this.blurPackedVsmShader : this.blurVsmShader)[blurMode][filterSize];\n            if (!blurShader) {\n              this.blurVsmWeights[filterSize] = gaussWeights(filterSize);\n              var chunks = pc.shaderChunks;\n              (light._shadowType === pc.SHADOW_VSM8 ? this.blurPackedVsmShader : this.blurVsmShader)[blurMode][filterSize] = blurShader = chunks.createShaderFromCode(this.device, chunks.fullscreenQuadVS, \"#define SAMPLES \" + filterSize + \"\\n\" + (light._shadowType === pc.SHADOW_VSM8 ? this.blurPackedVsmShaderCode : this.blurVsmShaderCode)[blurMode], \"blurVsm\" + blurMode + \"\" + filterSize + \"\" + (light._shadowType === pc.SHADOW_VSM8));\n            }\n            blurScissorRect.z = light._shadowResolution - 2;\n            blurScissorRect.w = blurScissorRect.z;\n            this.sourceId.setValue(origShadowMap.colorBuffer);\n            pixelOffset.x = 1.0 / light._shadowResolution;\n            pixelOffset.y = 0.0;\n            this.pixelOffsetId.setValue(pixelOffset.data);\n            if (blurMode === pc.BLUR_GAUSSIAN) {\n              this.weightId.setValue(this.blurVsmWeights[filterSize]);\n            }\n            pc.drawQuadWithShader(device, tempRt, blurShader, null, blurScissorRect);\n            this.sourceId.setValue(tempRt.colorBuffer);\n            pixelOffset.y = pixelOffset.x;\n            pixelOffset.x = 0.0;\n            this.pixelOffsetId.setValue(pixelOffset.data);\n            pc.drawQuadWithShader(device, origShadowMap, blurShader, null, blurScissorRect);\n          }\n        }\n      }\n    }\n    if (device.webgl2) {\n      device.setDepthBias(false);\n    } else {\n      if (device.extStandardDerivatives) {\n        this.polygonOffset[0] = 0;\n        this.polygonOffset[1] = 0;\n        this.polygonOffsetId.setValue(this.polygonOffset);\n      }\n    }\n  }, updateShader:function(meshInstance, objDefs, staticLightList, pass, sortedLights) {\n    meshInstance.material._scene = this.scene;\n    meshInstance.material.updateShader(this.device, this.scene, objDefs, staticLightList, pass, sortedLights);\n    meshInstance._shader[pass] = meshInstance.material.shader;\n  }, renderForward:function(camera, drawCalls, drawCallsCount, sortedLights, pass, cullingMask, drawCallback, layer) {\n    var device = this.device;\n    var scene = this.scene;\n    var vrDisplay = camera.vrDisplay;\n    var passFlag = 1 << pass;\n    var lightHash = layer ? layer._lightHash : 0;\n    var i, drawCall, mesh, material, objDefs, variantKey, lightMask, style, usedDirLights;\n    var prevMeshInstance = null, prevMaterial = null, prevObjDefs, prevLightMask, prevStatic;\n    var paramName, parameter, parameters;\n    var stencilFront, stencilBack;\n    var halfWidth = device.width * 0.5;\n    for (i = 0; i < drawCallsCount; i++) {\n      drawCall = drawCalls[i];\n      if (cullingMask && drawCall.mask && !(cullingMask & drawCall.mask)) {\n        continue;\n      }\n      if (drawCall.command) {\n        drawCall.command();\n      } else {\n        mesh = drawCall.mesh;\n        material = drawCall.material;\n        objDefs = drawCall._shaderDefs;\n        lightMask = drawCall.mask;\n        this.setSkinning(device, drawCall, material);\n        if (material && material === prevMaterial && objDefs !== prevObjDefs) {\n          prevMaterial = null;\n        }\n        if (drawCall.isStatic || prevStatic) {\n          prevMaterial = null;\n        }\n        if (material !== prevMaterial) {\n          this._materialSwitches++;\n          if (!drawCall._shader[pass] || drawCall._shaderDefs !== objDefs || drawCall._lightHash !== lightHash) {\n            if (!drawCall.isStatic) {\n              variantKey = pass + \"_\" + objDefs + \"_\" + lightHash;\n              drawCall._shader[pass] = material.variants[variantKey];\n              if (!drawCall._shader[pass]) {\n                this.updateShader(drawCall, objDefs, null, pass, sortedLights);\n                material.variants[variantKey] = drawCall._shader[pass];\n              }\n            } else {\n              this.updateShader(drawCall, objDefs, drawCall._staticLightList, pass, sortedLights);\n            }\n            drawCall._shaderDefs = objDefs;\n            drawCall._lightHash = lightHash;\n          }\n          device.setShader(drawCall._shader[pass]);\n          parameters = material.parameters;\n          for (paramName in parameters) {\n            parameter = parameters[paramName];\n            if (parameter.passFlags & passFlag) {\n              if (!parameter.scopeId) {\n                parameter.scopeId = device.scope.resolve(paramName);\n              }\n              parameter.scopeId.setValue(parameter.data);\n            }\n          }\n          if (!prevMaterial || lightMask !== prevLightMask) {\n            usedDirLights = this.dispatchDirectLights(sortedLights[pc.LIGHTTYPE_DIRECTIONAL], scene, lightMask);\n            this.dispatchLocalLights(sortedLights, scene, lightMask, usedDirLights, drawCall._staticLightList);\n          }\n          this.alphaTestId.setValue(material.alphaTest);\n          device.setBlending(material.blend);\n          if (material.blend) {\n            if (material.separateAlphaBlend) {\n              device.setBlendFunctionSeparate(material.blendSrc, material.blendDst, material.blendSrcAlpha, material.blendDstAlpha);\n              device.setBlendEquationSeparate(material.blendEquation, material.blendAlphaEquation);\n            } else {\n              device.setBlendFunction(material.blendSrc, material.blendDst);\n              device.setBlendEquation(material.blendEquation);\n            }\n          }\n          device.setColorWrite(material.redWrite, material.greenWrite, material.blueWrite, material.alphaWrite);\n          if (camera._cullFaces) {\n            if (camera._flipFaces) {\n              device.setCullMode(material.cull > 0 ? material.cull === pc.CULLFACE_FRONT ? pc.CULLFACE_BACK : pc.CULLFACE_FRONT : 0);\n            } else {\n              device.setCullMode(material.cull);\n            }\n          } else {\n            device.setCullMode(pc.CULLFACE_NONE);\n          }\n          device.setDepthWrite(material.depthWrite);\n          device.setDepthTest(material.depthTest);\n          device.setAlphaToCoverage(material.alphaToCoverage);\n          if (material.depthBias || material.slopeDepthBias) {\n            device.setDepthBias(true);\n            device.setDepthBiasValues(material.depthBias, material.slopeDepthBias);\n          } else {\n            device.setDepthBias(false);\n          }\n        }\n        stencilFront = drawCall.stencilFront || material.stencilFront;\n        stencilBack = drawCall.stencilBack || material.stencilBack;\n        if (stencilFront || stencilBack) {\n          device.setStencilTest(true);\n          if (stencilFront === stencilBack) {\n            device.setStencilFunc(stencilFront.func, stencilFront.ref, stencilFront.readMask);\n            device.setStencilOperation(stencilFront.fail, stencilFront.zfail, stencilFront.zpass, stencilFront.writeMask);\n          } else {\n            if (stencilFront) {\n              device.setStencilFuncFront(stencilFront.func, stencilFront.ref, stencilFront.readMask);\n              device.setStencilOperationFront(stencilFront.fail, stencilFront.zfail, stencilFront.zpass, stencilFront.writeMask);\n            } else {\n              device.setStencilFuncFront(pc.FUNC_ALWAYS, 0, 255);\n              device.setStencilOperationFront(pc.STENCILOP_KEEP, pc.STENCILOP_KEEP, pc.STENCILOP_KEEPP, 255);\n            }\n            if (stencilBack) {\n              device.setStencilFuncBack(stencilBack.func, stencilBack.ref, stencilBack.readMask);\n              device.setStencilOperationBack(stencilBack.fail, stencilBack.zfail, stencilBack.zpass, stencilBack.writeMask);\n            } else {\n              device.setStencilFuncBack(pc.FUNC_ALWAYS, 0, 255);\n              device.setStencilOperationBack(pc.STENCILOP_KEEP, pc.STENCILOP_KEEP, pc.STENCILOP_KEEP, 255);\n            }\n          }\n        } else {\n          device.setStencilTest(false);\n        }\n        parameters = drawCall.parameters;\n        for (paramName in parameters) {\n          parameter = parameters[paramName];\n          if (parameter.passFlags & passFlag) {\n            if (!parameter.scopeId) {\n              parameter.scopeId = device.scope.resolve(paramName);\n            }\n            parameter.scopeId.setValue(parameter.data);\n          }\n        }\n        device.setVertexBuffer(drawCall.morphInstance && drawCall.morphInstance._vertexBuffer ? drawCall.morphInstance._vertexBuffer : mesh.vertexBuffer, 0);\n        style = drawCall.renderStyle;\n        device.setIndexBuffer(mesh.indexBuffer[style]);\n        if (drawCallback) {\n          drawCallback(drawCall, i);\n        }\n        if (vrDisplay && vrDisplay.presenting) {\n          device.setViewport(0, 0, halfWidth, device.height);\n          this.projId.setValue(projL.data);\n          this.viewInvId.setValue(viewInvL.data);\n          this.viewId.setValue(viewL.data);\n          this.viewId3.setValue(viewMat3L.data);\n          this.viewProjId.setValue(viewProjMatL.data);\n          this.viewPosId.setValue(viewPosL.data);\n          i += this.drawInstance(device, drawCall, mesh, style, true);\n          this._forwardDrawCalls++;\n          device.setViewport(halfWidth, 0, halfWidth, device.height);\n          this.projId.setValue(projR.data);\n          this.viewInvId.setValue(viewInvR.data);\n          this.viewId.setValue(viewR.data);\n          this.viewId3.setValue(viewMat3R.data);\n          this.viewProjId.setValue(viewProjMatR.data);\n          this.viewPosId.setValue(viewPosR.data);\n          i += this.drawInstance2(device, drawCall, mesh, style);\n          this._forwardDrawCalls++;\n        } else {\n          i += this.drawInstance(device, drawCall, mesh, style, true);\n          this._forwardDrawCalls++;\n        }\n        if (i < drawCallsCount - 1 && drawCalls[i + 1].material === material) {\n          for (paramName in parameters) {\n            parameter = material.parameters[paramName];\n            if (parameter) {\n              if (!parameter.scopeId) {\n                parameter.scopeId = device.scope.resolve(paramName);\n              }\n              parameter.scopeId.setValue(parameter.data);\n            }\n          }\n        }\n        prevMaterial = material;\n        prevMeshInstance = drawCall;\n        prevObjDefs = objDefs;\n        prevLightMask = lightMask;\n        prevStatic = drawCall.isStatic;\n      }\n    }\n    device.updateEnd();\n  }, setupInstancing:function(device) {\n    if (!pc._instanceVertexFormat) {\n      var formatDesc = [{semantic:pc.SEMANTIC_TEXCOORD2, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_TEXCOORD3, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_TEXCOORD4, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_TEXCOORD5, components:4, type:pc.TYPE_FLOAT32}];\n      pc._instanceVertexFormat = new pc.VertexFormat(device, formatDesc);\n    }\n    if (device.enableAutoInstancing) {\n      if (!pc._autoInstanceBuffer) {\n        pc._autoInstanceBuffer = new pc.VertexBuffer(device, pc._instanceVertexFormat, device.autoInstancingMaxObjects, pc.BUFFER_DYNAMIC);\n        pc._autoInstanceBufferData = new Float32Array(pc._autoInstanceBuffer.lock());\n      }\n    }\n  }, revertStaticMeshes:function(meshInstances) {\n    var drawCalls = meshInstances;\n    var drawCallsCount = drawCalls.length;\n    var drawCall;\n    var newDrawCalls = [];\n    var prevStaticSource;\n    for (var i = 0; i < drawCallsCount; i++) {\n      drawCall = drawCalls[i];\n      if (drawCall._staticSource) {\n        if (drawCall._staticSource !== prevStaticSource) {\n          newDrawCalls.push(drawCall._staticSource);\n          prevStaticSource = drawCall._staticSource;\n        }\n      } else {\n        newDrawCalls.push(drawCall);\n      }\n    }\n    meshInstances.length = newDrawCalls.length;\n    for (i = 0; i < newDrawCalls.length; i++) {\n      meshInstances[i] = newDrawCalls[i];\n    }\n  }, prepareStaticMeshes:function(meshInstances, lights) {\n    var i, j, k, v, s, index;\n    var device = this.device;\n    var scene = this.scene;\n    var drawCalls = meshInstances;\n    var drawCallsCount = drawCalls.length;\n    var drawCall, light;\n    var newDrawCalls = [];\n    var mesh;\n    var indices, verts, numTris, elems, vertSize, offsetP, baseIndex;\n    var _x, _y, _z;\n    var minx, miny, minz, maxx, maxy, maxz;\n    var minv, maxv;\n    var minVec = new pc.Vec3;\n    var maxVec = new pc.Vec3;\n    var triAabb = new pc.BoundingBox;\n    var localLightBounds = new pc.BoundingBox;\n    var invMatrix = new pc.Mat4;\n    var triLightComb = [];\n    var triLightCombUsed;\n    var indexBuffer, vertexBuffer;\n    var combIndices, combIbName, combIb;\n    var lightTypePass;\n    var lightAabb = [];\n    var aabb;\n    var triBounds = [];\n    var staticLights = [];\n    var bit;\n    var lht;\n    for (i = 0; i < drawCallsCount; i++) {\n      drawCall = drawCalls[i];\n      if (!drawCall.isStatic) {\n        newDrawCalls.push(drawCall);\n      } else {\n        aabb = drawCall.aabb;\n        staticLights.length = 0;\n        for (lightTypePass = pc.LIGHTTYPE_POINT; lightTypePass <= pc.LIGHTTYPE_SPOT; lightTypePass++) {\n          for (j = 0; j < lights.length; j++) {\n            light = lights[j];\n            if (light._type !== lightTypePass) {\n              continue;\n            }\n            if (light._enabled) {\n              if (light._mask & drawCall.mask) {\n                if (light.isStatic) {\n                  if (!lightAabb[j]) {\n                    lightAabb[j] = new pc.BoundingBox;\n                    light._node.getWorldTransform();\n                    light.getBoundingSphere(tempSphere);\n                    lightAabb[j].center.copy(tempSphere.center);\n                    lightAabb[j].halfExtents.x = tempSphere.radius;\n                    lightAabb[j].halfExtents.y = tempSphere.radius;\n                    lightAabb[j].halfExtents.z = tempSphere.radius;\n                  }\n                  if (!lightAabb[j].intersects(aabb)) {\n                    continue;\n                  }\n                  staticLights.push(j);\n                }\n              }\n            }\n          }\n        }\n        if (staticLights.length === 0) {\n          newDrawCalls.push(drawCall);\n          continue;\n        }\n        mesh = drawCall.mesh;\n        vertexBuffer = mesh.vertexBuffer;\n        indexBuffer = mesh.indexBuffer[drawCall.renderStyle];\n        indices = indexBuffer.bytesPerIndex === 2 ? new Uint16Array(indexBuffer.lock()) : new Uint32Array(indexBuffer.lock());\n        numTris = mesh.primitive[drawCall.renderStyle].count / 3;\n        baseIndex = mesh.primitive[drawCall.renderStyle].base;\n        elems = vertexBuffer.format.elements;\n        vertSize = vertexBuffer.format.size / 4;\n        verts = new Float32Array(vertexBuffer.storage);\n        for (k = 0; k < elems.length; k++) {\n          if (elems[k].name === pc.SEMANTIC_POSITION) {\n            offsetP = elems[k].offset / 4;\n          }\n        }\n        triLightComb.length = numTris;\n        for (k = 0; k < numTris; k++) {\n          triLightComb[k] = 0;\n        }\n        triLightCombUsed = false;\n        triBounds.length = numTris * 6;\n        for (k = 0; k < numTris; k++) {\n          minx = Number.MAX_VALUE;\n          miny = Number.MAX_VALUE;\n          minz = Number.MAX_VALUE;\n          maxx = -Number.MAX_VALUE;\n          maxy = -Number.MAX_VALUE;\n          maxz = -Number.MAX_VALUE;\n          for (v = 0; v < 3; v++) {\n            index = indices[k * 3 + v + baseIndex];\n            index = index * vertSize + offsetP;\n            _x = verts[index];\n            _y = verts[index + 1];\n            _z = verts[index + 2];\n            if (_x < minx) {\n              minx = _x;\n            }\n            if (_y < miny) {\n              miny = _y;\n            }\n            if (_z < minz) {\n              minz = _z;\n            }\n            if (_x > maxx) {\n              maxx = _x;\n            }\n            if (_y > maxy) {\n              maxy = _y;\n            }\n            if (_z > maxz) {\n              maxz = _z;\n            }\n          }\n          index = k * 6;\n          triBounds[index] = minx;\n          triBounds[index + 1] = miny;\n          triBounds[index + 2] = minz;\n          triBounds[index + 3] = maxx;\n          triBounds[index + 4] = maxy;\n          triBounds[index + 5] = maxz;\n        }\n        for (s = 0; s < staticLights.length; s++) {\n          j = staticLights[s];\n          light = lights[j];\n          invMatrix.copy(drawCall.node.worldTransform).invert();\n          localLightBounds.setFromTransformedAabb(lightAabb[j], invMatrix);\n          minv = localLightBounds.getMin().data;\n          maxv = localLightBounds.getMax().data;\n          bit = 1 << s;\n          for (k = 0; k < numTris; k++) {\n            index = k * 6;\n            if (triBounds[index] <= maxv[0] && triBounds[index + 3] >= minv[0] && triBounds[index + 1] <= maxv[1] && triBounds[index + 4] >= minv[1] && triBounds[index + 2] <= maxv[2] && triBounds[index + 5] >= minv[2]) {\n              triLightComb[k] |= bit;\n              triLightCombUsed = true;\n            }\n          }\n        }\n        if (triLightCombUsed) {\n          combIndices = {};\n          for (k = 0; k < numTris; k++) {\n            j = k * 3 + baseIndex;\n            combIbName = triLightComb[k];\n            if (!combIndices[combIbName]) {\n              combIndices[combIbName] = [];\n            }\n            combIb = combIndices[combIbName];\n            combIb.push(indices[j]);\n            combIb.push(indices[j + 1]);\n            combIb.push(indices[j + 2]);\n          }\n          for (combIbName in combIndices) {\n            combIb = combIndices[combIbName];\n            var ib = new pc.IndexBuffer(device, indexBuffer.format, combIb.length, indexBuffer.usage);\n            var ib2 = ib.bytesPerIndex === 2 ? new Uint16Array(ib.lock()) : new Uint32Array(ib.lock());\n            ib2.set(combIb);\n            ib.unlock();\n            minx = Number.MAX_VALUE;\n            miny = Number.MAX_VALUE;\n            minz = Number.MAX_VALUE;\n            maxx = -Number.MAX_VALUE;\n            maxy = -Number.MAX_VALUE;\n            maxz = -Number.MAX_VALUE;\n            for (k = 0; k < combIb.length; k++) {\n              index = combIb[k];\n              _x = verts[index * vertSize + offsetP];\n              _y = verts[index * vertSize + offsetP + 1];\n              _z = verts[index * vertSize + offsetP + 2];\n              if (_x < minx) {\n                minx = _x;\n              }\n              if (_y < miny) {\n                miny = _y;\n              }\n              if (_z < minz) {\n                minz = _z;\n              }\n              if (_x > maxx) {\n                maxx = _x;\n              }\n              if (_y > maxy) {\n                maxy = _y;\n              }\n              if (_z > maxz) {\n                maxz = _z;\n              }\n            }\n            minVec.set(minx, miny, minz);\n            maxVec.set(maxx, maxy, maxz);\n            var chunkAabb = new pc.BoundingBox;\n            chunkAabb.setMinMax(minVec, maxVec);\n            var mesh2 = new pc.Mesh;\n            mesh2.vertexBuffer = vertexBuffer;\n            mesh2.indexBuffer[0] = ib;\n            mesh2.primitive[0].type = pc.PRIMITIVE_TRIANGLES;\n            mesh2.primitive[0].base = 0;\n            mesh2.primitive[0].count = combIb.length;\n            mesh2.primitive[0].indexed = true;\n            mesh2.aabb = chunkAabb;\n            var instance = new pc.MeshInstance(drawCall.node, mesh2, drawCall.material);\n            instance.isStatic = drawCall.isStatic;\n            instance.visible = drawCall.visible;\n            instance.layer = drawCall.layer;\n            instance.castShadow = drawCall.castShadow;\n            instance._receiveShadow = drawCall._receiveShadow;\n            instance.cull = drawCall.cull;\n            instance.pick = drawCall.pick;\n            instance.mask = drawCall.mask;\n            instance.parameters = drawCall.parameters;\n            instance._shaderDefs = drawCall._shaderDefs;\n            instance._staticSource = drawCall;\n            if (drawCall._staticLightList) {\n              instance._staticLightList = drawCall._staticLightList;\n            } else {\n              instance._staticLightList = [];\n            }\n            for (k = 0; k < staticLights.length; k++) {\n              bit = 1 << k;\n              if (combIbName & bit) {\n                lht = lights[staticLights[k]];\n                if (instance._staticLightList.indexOf(lht) < 0) {\n                  instance._staticLightList.push(lht);\n                }\n              }\n            }\n            instance._staticLightList.sort(this.lightCompare);\n            newDrawCalls.push(instance);\n          }\n        } else {\n          newDrawCalls.push(drawCall);\n        }\n      }\n    }\n    meshInstances.length = newDrawCalls.length;\n    for (i = 0; i < newDrawCalls.length; i++) {\n      meshInstances[i] = newDrawCalls[i];\n    }\n  }, updateShaders:function(drawCalls) {\n    var i;\n    var materials = [];\n    for (i = 0; i < drawCalls.length; i++) {\n      var drawCall = drawCalls[i];\n      if (drawCall.material !== undefined) {\n        if (materials.indexOf(drawCall.material) === -1) {\n          materials.push(drawCall.material);\n        }\n      }\n    }\n    for (i = 0; i < materials.length; i++) {\n      var mat = materials[i];\n      if (mat.updateShader !== pc.Material.prototype.updateShader) {\n        mat.clearVariants();\n        mat.shader = null;\n      }\n    }\n  }, beginFrame:function(comp) {\n    var device = this.device;\n    var scene = this.scene;\n    var meshInstances = comp._meshInstances;\n    var lights = comp._lights;\n    if (scene.updateSkybox) {\n      scene._updateSkybox(device);\n      scene.updateSkybox = false;\n    }\n    if (scene.updateShaders) {\n      this.updateShaders(meshInstances);\n      scene.updateShaders = false;\n      scene._shaderVersion++;\n    }\n    this.updateCpuSkinMatrices(meshInstances);\n    this.updateMorphedBounds(meshInstances);\n    var i;\n    var len = meshInstances.length;\n    for (i = 0; i < len; i++) {\n      meshInstances[i].visibleThisFrame = false;\n    }\n    len = lights.length;\n    for (i = 0; i < len; i++) {\n      lights[i].visibleThisFrame = lights[i]._type === pc.LIGHTTYPE_DIRECTIONAL;\n    }\n  }, beginLayers:function(comp) {\n    var scene = this.scene;\n    var len = comp.layerList.length;\n    var layer;\n    var i, j;\n    var shaderVersion = this.scene._shaderVersion;\n    for (i = 0; i < len; i++) {\n      comp.layerList[i]._postRenderCounter = 0;\n    }\n    var transparent;\n    for (i = 0; i < len; i++) {\n      layer = comp.layerList[i];\n      layer._shaderVersion = shaderVersion;\n      layer._preRenderCalledForCameras = 0;\n      layer._postRenderCalledForCameras = 0;\n      transparent = comp.subLayerList[i];\n      if (transparent) {\n        layer._postRenderCounter |= 2;\n      } else {\n        layer._postRenderCounter |= 1;\n      }\n      layer._postRenderCounterMax = layer._postRenderCounter;\n      for (j = 0; j < layer.cameras.length; j++) {\n        if (!layer.instances.visibleOpaque[j]) {\n          layer.instances.visibleOpaque[j] = new pc.VisibleInstanceList;\n        }\n        if (!layer.instances.visibleTransparent[j]) {\n          layer.instances.visibleTransparent[j] = new pc.VisibleInstanceList;\n        }\n        layer.instances.visibleOpaque[j].done = false;\n        layer.instances.visibleTransparent[j].done = false;\n      }\n      if (layer._needsStaticPrepare && layer._staticLightHash) {\n        if (layer._staticPrepareDone) {\n          this.revertStaticMeshes(layer.opaqueMeshInstances);\n          this.revertStaticMeshes(layer.transparentMeshInstances);\n        }\n        this.prepareStaticMeshes(layer.opaqueMeshInstances, layer._lights);\n        this.prepareStaticMeshes(layer.transparentMeshInstances, layer._lights);\n        comp._dirty = true;\n        scene.updateShaders = true;\n        layer._needsStaticPrepare = false;\n        layer._staticPrepareDone = true;\n      }\n    }\n  }, cullLocalShadowmap:function(light, drawCalls) {\n    var i, type, shadowCam, shadowCamNode, passes, pass, j, numInstances, meshInstance, visibleList, vlen, visible;\n    var lightNode;\n    type = light._type;\n    if (type === pc.LIGHTTYPE_DIRECTIONAL) {\n      return;\n    }\n    light.visibleThisFrame = true;\n    shadowCam = this.getShadowCamera(this.device, light);\n    shadowCam.projection = pc.PROJECTION_PERSPECTIVE;\n    shadowCam.nearClip = light.attenuationEnd / 1000;\n    shadowCam.farClip = light.attenuationEnd;\n    shadowCam.aspectRatio = 1;\n    if (type === pc.LIGHTTYPE_SPOT) {\n      shadowCam.fov = light._outerConeAngle * 2;\n      passes = 1;\n    } else {\n      shadowCam.fov = 90;\n      passes = 6;\n    }\n    shadowCamNode = shadowCam._node;\n    lightNode = light._node;\n    shadowCamNode.setPosition(lightNode.getPosition());\n    if (type === pc.LIGHTTYPE_SPOT) {\n      shadowCamNode.setRotation(lightNode.getRotation());\n      shadowCamNode.rotateLocal(-90, 0, 0);\n    }\n    for (pass = 0; pass < passes; pass++) {\n      if (type === pc.LIGHTTYPE_POINT) {\n        shadowCamNode.setRotation(pointLightRotations[pass]);\n        shadowCam.renderTarget = light._shadowCubeMap[pass];\n      }\n      this.updateCameraFrustum(shadowCam);\n      visibleList = light._visibleList[pass];\n      if (!visibleList) {\n        visibleList = light._visibleList[pass] = [];\n      }\n      light._visibleLength[pass] = 0;\n      vlen = 0;\n      for (j = 0, numInstances = drawCalls.length; j < numInstances; j++) {\n        meshInstance = drawCalls[j];\n        visible = true;\n        if (meshInstance.cull) {\n          visible = this._isVisible(shadowCam, meshInstance);\n        }\n        if (visible) {\n          visibleList[vlen] = meshInstance;\n          vlen++;\n          meshInstance.visibleThisFrame = true;\n        }\n      }\n      light._visibleLength[pass] = vlen;\n      if (visibleList.length !== vlen) {\n        visibleList.length = vlen;\n      }\n      visibleList.sort(this.depthSortCompare);\n    }\n  }, cullDirectionalShadowmap:function(light, drawCalls, camera, pass) {\n    var i, j, shadowShader, type, shadowCam, shadowCamNode, lightNode, passes, frustumSize, shadowType, smode, vlen, visibleList;\n    var unitPerTexel, delta, p;\n    var minx, miny, minz, maxx, maxy, maxz, centerx, centery;\n    var opChan;\n    var visible, cullTime, numInstances;\n    var meshInstance, mesh, material;\n    var style;\n    var emptyAabb;\n    var drawCallAabb;\n    var device = this.device;\n    light.visibleThisFrame = true;\n    shadowCam = this.getShadowCamera(device, light);\n    shadowCamNode = shadowCam._node;\n    lightNode = light._node;\n    shadowCamNode.setPosition(lightNode.getPosition());\n    shadowCamNode.setRotation(lightNode.getRotation());\n    shadowCamNode.rotateLocal(-90, 0, 0);\n    _getFrustumPoints(camera, light.shadowDistance || camera._farClip, frustumPoints);\n    frustumSize = frustumDiagonal.sub2(frustumPoints[0], frustumPoints[6]).length();\n    frustumSize = Math.max(frustumSize, frustumDiagonal.sub2(frustumPoints[4], frustumPoints[6]).length());\n    shadowCamView.copy(shadowCamNode.getWorldTransform()).invert();\n    c2sc.copy(shadowCamView).mul(camera._node.worldTransform);\n    for (j = 0; j < 8; j++) {\n      c2sc.transformPoint(frustumPoints[j], frustumPoints[j]);\n    }\n    minx = miny = minz = 1000000;\n    maxx = maxy = maxz = -1000000;\n    for (j = 0; j < 8; j++) {\n      p = frustumPoints[j];\n      if (p.x < minx) {\n        minx = p.x;\n      }\n      if (p.x > maxx) {\n        maxx = p.x;\n      }\n      if (p.y < miny) {\n        miny = p.y;\n      }\n      if (p.y > maxy) {\n        maxy = p.y;\n      }\n      if (p.z < minz) {\n        minz = p.z;\n      }\n      if (p.z > maxz) {\n        maxz = p.z;\n      }\n    }\n    unitPerTexel = frustumSize / light._shadowResolution;\n    delta = (frustumSize - (maxx - minx)) * 0.5;\n    minx = Math.floor((minx - delta) / unitPerTexel) * unitPerTexel;\n    delta = (frustumSize - (maxy - miny)) * 0.5;\n    miny = Math.floor((miny - delta) / unitPerTexel) * unitPerTexel;\n    maxx = minx + frustumSize;\n    maxy = miny + frustumSize;\n    centerx = (maxx + minx) * 0.5;\n    centery = (maxy + miny) * 0.5;\n    shadowCamNode.translateLocal(centerx, centery, 100000);\n    shadowCam.projection = pc.PROJECTION_ORTHOGRAPHIC;\n    shadowCam.nearClip = 0;\n    shadowCam.farClip = 200000;\n    shadowCam.aspectRatio = 1;\n    shadowCam.orthoHeight = frustumSize * 0.5;\n    this.updateCameraFrustum(shadowCam);\n    emptyAabb = true;\n    visibleList = light._visibleList[pass];\n    if (!visibleList) {\n      visibleList = light._visibleList[pass] = [];\n    }\n    vlen = light._visibleLength[pass] = 0;\n    for (j = 0, numInstances = drawCalls.length; j < numInstances; j++) {\n      meshInstance = drawCalls[j];\n      visible = true;\n      if (meshInstance.cull) {\n        visible = this._isVisible(shadowCam, meshInstance);\n      }\n      if (visible) {\n        visibleList[vlen] = meshInstance;\n        vlen++;\n        meshInstance.visibleThisFrame = true;\n        drawCallAabb = meshInstance.aabb;\n        if (emptyAabb) {\n          visibleSceneAabb.copy(drawCallAabb);\n          emptyAabb = false;\n        } else {\n          visibleSceneAabb.add(drawCallAabb);\n        }\n      }\n    }\n    light._visibleLength[pass] = vlen;\n    if (visibleList.length !== vlen) {\n      visibleList.length = vlen;\n    }\n    visibleList.sort(this.depthSortCompare);\n    var z = _getZFromAABBSimple(shadowCamView, visibleSceneAabb.getMin(), visibleSceneAabb.getMax(), minx, maxx, miny, maxy);\n    maxz = z.max;\n    if (z.min > minz) {\n      minz = z.min;\n    }\n    shadowCamNode.setPosition(lightNode.getPosition());\n    shadowCamNode.translateLocal(centerx, centery, maxz + directionalShadowEpsilon);\n    shadowCam.farClip = maxz - minz;\n    var settings = light._visibleCameraSettings[pass];\n    if (!settings) {\n      settings = light._visibleCameraSettings[pass] = {};\n    }\n    var lpos = shadowCamNode.getPosition().data;\n    settings.x = lpos[0];\n    settings.y = lpos[1];\n    settings.z = lpos[2];\n    settings.orthoHeight = shadowCam.orthoHeight;\n    settings.farClip = shadowCam.farClip;\n  }, gpuUpdate:function(drawCalls) {\n    this.updateGpuSkinMatrices(drawCalls);\n    this.updateMorphing(drawCalls);\n  }, clearView:function(camera, target, options) {\n    camera = camera.camera;\n    var device = this.device;\n    device.setRenderTarget(target);\n    device.updateBegin();\n    device.setColorWrite(true, true, true, true);\n    device.setDepthWrite(true);\n    var rect = camera.getRect();\n    var pixelWidth = target ? target.width : device.width;\n    var pixelHeight = target ? target.height : device.height;\n    var x = Math.floor(rect.x * pixelWidth);\n    var y = Math.floor(rect.y * pixelHeight);\n    var w = Math.floor(rect.width * pixelWidth);\n    var h = Math.floor(rect.height * pixelHeight);\n    device.setViewport(x, y, w, h);\n    device.setScissor(x, y, w, h);\n    device.clear(options ? options : camera._clearOptions);\n  }, setSceneConstants:function() {\n    var device = this.device;\n    var scene = this.scene;\n    this.dispatchGlobalLights(scene);\n    if (scene.fog !== pc.FOG_NONE) {\n      this.fogColor[0] = scene.fogColor.data[0];\n      this.fogColor[1] = scene.fogColor.data[1];\n      this.fogColor[2] = scene.fogColor.data[2];\n      if (scene.gammaCorrection) {\n        for (i = 0; i < 3; i++) {\n          this.fogColor[i] = Math.pow(this.fogColor[i], 2.2);\n        }\n      }\n      this.fogColorId.setValue(this.fogColor);\n      if (scene.fog === pc.FOG_LINEAR) {\n        this.fogStartId.setValue(scene.fogStart);\n        this.fogEndId.setValue(scene.fogEnd);\n      } else {\n        this.fogDensityId.setValue(scene.fogDensity);\n      }\n    }\n    this._screenSize.x = device.width;\n    this._screenSize.y = device.height;\n    this._screenSize.z = 1.0 / device.width;\n    this._screenSize.w = 1.0 / device.height;\n    this.screenSizeId.setValue(this._screenSize.data);\n  }, renderComposition:function(comp) {\n    var device = this.device;\n    var camera;\n    var renderedRt = comp._renderedRt;\n    var renderedByCam = comp._renderedByCam;\n    var renderedLayer = comp._renderedLayer;\n    var i, layer, transparent, cameras, j, rt, k, processedThisCamera, processedThisCameraAndLayer, processedThisCameraAndRt, visibleLength;\n    this.beginLayers(comp);\n    var updated = comp._update();\n    if (updated & pc.COMPUPDATED_LIGHTS) {\n      this.scene.updateShaders = true;\n    }\n    this.beginFrame(comp);\n    this.setSceneConstants();\n    var renderedLength = 0;\n    var objects, drawCalls, visible;\n    for (i = 0; i < comp.layerList.length; i++) {\n      layer = comp.layerList[i];\n      if (!layer.enabled || !comp.subLayerEnabled[i]) {\n        continue;\n      }\n      transparent = comp.subLayerList[i];\n      objects = layer.instances;\n      cameras = layer.cameras;\n      for (j = 0; j < cameras.length; j++) {\n        camera = cameras[j];\n        if (!camera) {\n          continue;\n        }\n        camera.frameBegin(layer.renderTarget);\n        drawCalls = transparent ? layer.transparentMeshInstances : layer.opaqueMeshInstances;\n        processedThisCamera = false;\n        processedThisCameraAndLayer = false;\n        for (k = 0; k < renderedLength; k++) {\n          if (renderedByCam[k] === camera) {\n            processedThisCamera = true;\n            if (renderedLayer[k] === layer) {\n              processedThisCameraAndLayer = true;\n              break;\n            }\n          }\n        }\n        if (!processedThisCamera) {\n          this.updateCameraFrustum(camera.camera);\n          this._camerasRendered++;\n        }\n        if (!processedThisCameraAndLayer) {\n          this.cullLights(camera.camera, layer._lights);\n        }\n        if (!processedThisCamera || !processedThisCameraAndLayer) {\n          renderedByCam[renderedLength] = camera;\n          renderedLayer[renderedLength] = layer;\n          renderedLength++;\n        }\n        visible = transparent ? objects.visibleTransparent[j] : objects.visibleOpaque[j];\n        if (!visible.done) {\n          if (layer.onPreCull) {\n            layer.onPreCull(j);\n          }\n          visible.length = this.cull(camera.camera, drawCalls, visible.list);\n          visible.done = true;\n          if (layer.onPostCull) {\n            layer.onPostCull(j);\n          }\n        }\n        camera.frameEnd();\n      }\n    }\n    var light, casters;\n    for (i = 0; i < comp._lights.length; i++) {\n      light = comp._lights[i];\n      if (!light.visibleThisFrame) {\n        continue;\n      }\n      if (light._type === pc.LIGHTTYPE_DIRECTIONAL) {\n        continue;\n      }\n      if (!light.castShadows || !light._enabled || light.shadowUpdateMode === pc.SHADOWUPDATE_NONE) {\n        continue;\n      }\n      casters = comp._lightShadowCasters[i];\n      this.cullLocalShadowmap(light, casters);\n    }\n    renderedLength = 0;\n    var globalLightCounter = -1;\n    for (i = 0; i < comp._lights.length; i++) {\n      light = comp._lights[i];\n      if (light._type !== pc.LIGHTTYPE_DIRECTIONAL) {\n        continue;\n      }\n      globalLightCounter++;\n      if (!light.castShadows || !light._enabled || light.shadowUpdateMode === pc.SHADOWUPDATE_NONE) {\n        continue;\n      }\n      casters = comp._lightShadowCasters[i];\n      cameras = comp._globalLightCameras[globalLightCounter];\n      for (j = 0; j < cameras.length; j++) {\n        this.cullDirectionalShadowmap(light, casters, cameras[j].camera, comp._globalLightCameraIds[globalLightCounter][j]);\n      }\n    }\n    this.gpuUpdate(comp._meshInstances);\n    this.renderShadows(comp._sortedLights[pc.LIGHTTYPE_SPOT]);\n    this.renderShadows(comp._sortedLights[pc.LIGHTTYPE_POINT]);\n    renderedLength = 0;\n    var cameraPass;\n    var sortTime, draws, drawTime;\n    for (i = 0; i < comp._renderList.length; i++) {\n      layer = comp.layerList[comp._renderList[i]];\n      if (!layer.enabled || !comp.subLayerEnabled[comp._renderList[i]]) {\n        continue;\n      }\n      objects = layer.instances;\n      transparent = comp.subLayerList[comp._renderList[i]];\n      cameraPass = comp._renderListCamera[i];\n      camera = layer.cameras[cameraPass];\n      if (camera) {\n        camera.frameBegin(layer.renderTarget);\n      }\n      if (!transparent && layer.onPreRenderOpaque) {\n        layer.onPreRenderOpaque(cameraPass);\n      } else {\n        if (transparent && layer.onPreRenderTransparent) {\n          layer.onPreRenderTransparent(cameraPass);\n        }\n      }\n      if (!(layer._preRenderCalledForCameras & 1 << cameraPass)) {\n        if (layer.onPreRender) {\n          layer.onPreRender(cameraPass);\n        }\n        layer._preRenderCalledForCameras |= 1 << cameraPass;\n        if (layer.overrideClear) {\n          this.clearView(camera, layer.renderTarget, layer._clearOptions);\n        }\n      }\n      if (camera) {\n        rt = layer.renderTarget;\n        processedThisCameraAndRt = false;\n        for (k = 0; k < renderedLength; k++) {\n          if (renderedRt[k] === rt && renderedByCam[k] === camera) {\n            processedThisCameraAndRt = true;\n            break;\n          }\n        }\n        if (!processedThisCameraAndRt) {\n          if (!layer.overrideClear) {\n            this.clearView(camera, layer.renderTarget);\n          }\n          renderedRt[renderedLength] = rt;\n          renderedByCam[renderedLength] = camera;\n          renderedLength++;\n        }\n        this.renderShadows(layer._sortedLights[pc.LIGHTTYPE_DIRECTIONAL], cameraPass);\n        layer._sortVisible(transparent, camera.node, cameraPass);\n        visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];\n        this.scene._activeCamera = camera.camera;\n        this.setCamera(camera.camera, layer.renderTarget);\n        this.renderForward(camera.camera, visible.list, visible.length, layer._sortedLights, layer.shaderPass, layer.cullingMask, layer.onDrawCall, layer);\n        device.setColorWrite(true, true, true, true);\n        device.setStencilTest(false);\n        device.setAlphaToCoverage(false);\n        device.setDepthBias(false);\n        camera.frameEnd();\n      }\n      if (!transparent && layer.onPostRenderOpaque) {\n        layer.onPostRenderOpaque(cameraPass);\n      } else {\n        if (transparent && layer.onPostRenderTransparent) {\n          layer.onPostRenderTransparent(cameraPass);\n        }\n      }\n      if (layer.onPostRender && !(layer._postRenderCalledForCameras & 1 << cameraPass)) {\n        layer._postRenderCounter &= ~(transparent ? 2 : 1);\n        if (layer._postRenderCounter === 0) {\n          layer.onPostRender(cameraPass);\n          layer._postRenderCalledForCameras |= 1 << cameraPass;\n          layer._postRenderCounter = layer._postRenderCounterMax;\n        }\n      }\n    }\n  }});\n  return {ForwardRenderer:ForwardRenderer, gaussWeights:gaussWeights};\n}());\npc.extend(pc, function() {\n  var scaleCompensatePosTransform = new pc.Mat4;\n  var scaleCompensatePos = new pc.Vec3;\n  var scaleCompensateRot = new pc.Quat;\n  var scaleCompensateRot2 = new pc.Quat;\n  var scaleCompensateScale = new pc.Vec3;\n  var scaleCompensateScaleForParent = new pc.Vec3;\n  var GraphNode = function GraphNode(name) {\n    this.name = typeof name === \"string\" ? name : \"Untitled\";\n    this.tags = new pc.Tags(this);\n    this._labels = {};\n    this.localPosition = new pc.Vec3(0, 0, 0);\n    this.localRotation = new pc.Quat(0, 0, 0, 1);\n    this.localScale = new pc.Vec3(1, 1, 1);\n    this.localEulerAngles = new pc.Vec3(0, 0, 0);\n    this.position = new pc.Vec3(0, 0, 0);\n    this.rotation = new pc.Quat(0, 0, 0, 1);\n    this.eulerAngles = new pc.Vec3(0, 0, 0);\n    this.localTransform = new pc.Mat4;\n    this._dirtyLocal = false;\n    this._aabbVer = 0;\n    this.worldTransform = new pc.Mat4;\n    this._dirtyWorld = false;\n    this.normalMatrix = new pc.Mat3;\n    this._dirtyNormal = true;\n    this._right = new pc.Vec3;\n    this._up = new pc.Vec3;\n    this._forward = new pc.Vec3;\n    this._parent = null;\n    this._children = [];\n    this._enabled = true;\n    this._enabledInHierarchy = false;\n    this.scaleCompensation = false;\n  };\n  Object.defineProperty(GraphNode.prototype, \"right\", {get:function() {\n    return this.getWorldTransform().getX(this._right).normalize();\n  }});\n  Object.defineProperty(GraphNode.prototype, \"up\", {get:function() {\n    return this.getWorldTransform().getY(this._up).normalize();\n  }});\n  Object.defineProperty(GraphNode.prototype, \"forward\", {get:function() {\n    return this.getWorldTransform().getZ(this._forward).normalize().scale(-1);\n  }});\n  Object.defineProperty(GraphNode.prototype, \"enabled\", {get:function() {\n    return this._enabled && this._enabledInHierarchy;\n  }, set:function(enabled) {\n    if (this._enabled !== enabled) {\n      this._enabled = enabled;\n      if (!this._parent || this._parent.enabled) {\n        this._notifyHierarchyStateChanged(this, enabled);\n      }\n    }\n  }});\n  Object.defineProperty(GraphNode.prototype, \"parent\", {get:function() {\n    return this._parent;\n  }});\n  Object.defineProperty(GraphNode.prototype, \"root\", {get:function() {\n    var parent = this._parent;\n    if (!parent) {\n      return this;\n    }\n    while (parent._parent) {\n      parent = parent._parent;\n    }\n    return parent;\n  }});\n  Object.defineProperty(GraphNode.prototype, \"children\", {get:function() {\n    return this._children;\n  }});\n  pc.extend(GraphNode.prototype, {_notifyHierarchyStateChanged:function(node, enabled) {\n    node._onHierarchyStateChanged(enabled);\n    var c = node._children;\n    for (var i = 0, len = c.length; i < len; i++) {\n      if (c[i]._enabled) {\n        this._notifyHierarchyStateChanged(c[i], enabled);\n      }\n    }\n  }, _onHierarchyStateChanged:function(enabled) {\n    this._enabledInHierarchy = enabled;\n  }, _cloneInternal:function(clone) {\n    clone.name = this.name;\n    var tags = this.tags._list;\n    for (var i = 0; i < tags.length; i++) {\n      clone.tags.add(tags[i]);\n    }\n    clone._labels = pc.extend(this._labels, {});\n    clone.localPosition.copy(this.localPosition);\n    clone.localRotation.copy(this.localRotation);\n    clone.localScale.copy(this.localScale);\n    clone.localEulerAngles.copy(this.localEulerAngles);\n    clone.position.copy(this.position);\n    clone.rotation.copy(this.rotation);\n    clone.eulerAngles.copy(this.eulerAngles);\n    clone.localTransform.copy(this.localTransform);\n    clone._dirtyLocal = this._dirtyLocal;\n    clone.worldTransform.copy(this.worldTransform);\n    clone._dirtyWorld = this._dirtyWorld;\n    clone._dirtyNormal = this._dirtyNormal;\n    clone._aabbVer = this._aabbVer + 1;\n    clone._enabled = this._enabled;\n    clone.scaleCompensation = this.scaleCompensation;\n    clone._enabledInHierarchy = false;\n  }, clone:function() {\n    var clone = new pc.GraphNode;\n    this._cloneInternal(clone);\n    return clone;\n  }, find:function(attr, value) {\n    var results = [];\n    var len = this._children.length;\n    var i, descendants;\n    if (attr instanceof Function) {\n      var fn = attr;\n      for (i = 0; i < len; i++) {\n        if (fn(this._children[i])) {\n          results.push(this._children[i]);\n        }\n        descendants = this._children[i].find(fn);\n        if (descendants.length) {\n          results = results.concat(descendants);\n        }\n      }\n    } else {\n      var testValue;\n      if (this[attr]) {\n        if (this[attr] instanceof Function) {\n          testValue = this[attr]();\n        } else {\n          testValue = this[attr];\n        }\n        if (testValue === value) {\n          results.push(this);\n        }\n      }\n      for (i = 0; i < len; ++i) {\n        descendants = this._children[i].find(attr, value);\n        if (descendants.length) {\n          results = results.concat(descendants);\n        }\n      }\n    }\n    return results;\n  }, findOne:function(attr, value) {\n    var i;\n    var len = this._children.length;\n    var result = null;\n    if (attr instanceof Function) {\n      var fn = attr;\n      result = fn(this);\n      if (result) {\n        return this;\n      }\n      for (i = 0; i < len; i++) {\n        result = this._children[i].findOne(fn);\n        if (result) {\n          return this._children[i];\n        }\n      }\n    } else {\n      var testValue;\n      if (this[attr]) {\n        if (this[attr] instanceof Function) {\n          testValue = this[attr]();\n        } else {\n          testValue = this[attr];\n        }\n        if (testValue === value) {\n          return this;\n        }\n      }\n      for (i = 0; i < len; i++) {\n        result = this._children[i].findOne(attr, value);\n        if (result !== null) {\n          return result;\n        }\n      }\n    }\n    return null;\n  }, findByTag:function() {\n    var tags = this.tags._processArguments(arguments);\n    return this._findByTag(tags);\n  }, _findByTag:function(tags) {\n    var result = [];\n    var i, len = this._children.length;\n    var descendants;\n    for (i = 0; i < len; i++) {\n      if (this._children[i].tags._has(tags)) {\n        result.push(this._children[i]);\n      }\n      descendants = this._children[i]._findByTag(tags);\n      if (descendants.length) {\n        result = result.concat(descendants);\n      }\n    }\n    return result;\n  }, findByName:function(name) {\n    if (this.name === name) {\n      return this;\n    }\n    for (var i = 0; i < this._children.length; i++) {\n      var found = this._children[i].findByName(name);\n      if (found !== null) {\n        return found;\n      }\n    }\n    return null;\n  }, findByPath:function(path) {\n    var parts = path.split(\"/\");\n    var currentParent = this;\n    var result = null;\n    for (var i = 0, imax = parts.length; i < imax && currentParent; i++) {\n      var part = parts[i];\n      result = null;\n      var children = currentParent._children;\n      for (var j = 0, jmax = children.length; j < jmax; j++) {\n        if (children[j].name == part) {\n          result = children[j];\n          break;\n        }\n      }\n      currentParent = result;\n    }\n    return result;\n  }, getPath:function() {\n    var parent = this._parent;\n    if (parent) {\n      var path = this.name;\n      var format = \"{0}/{1}\";\n      while (parent && parent._parent) {\n        path = pc.string.format(format, parent.name, path);\n        parent = parent._parent;\n      }\n      return path;\n    } else {\n      return \"\";\n    }\n  }, getRoot:function() {\n    var parent = this._parent;\n    if (!parent) {\n      return this;\n    }\n    while (parent._parent) {\n      parent = parent._parent;\n    }\n    return parent;\n  }, getParent:function() {\n    return this._parent;\n  }, isDescendantOf:function(node) {\n    var parent = this._parent;\n    while (parent) {\n      if (parent === node) {\n        return true;\n      }\n      parent = parent._parent;\n    }\n    return false;\n  }, isAncestorOf:function(node) {\n    return node.isDescendantOf(this);\n  }, getChildren:function() {\n    return this._children;\n  }, getEulerAngles:function() {\n    this.getWorldTransform().getEulerAngles(this.eulerAngles);\n    return this.eulerAngles;\n  }, getLocalEulerAngles:function() {\n    this.localRotation.getEulerAngles(this.localEulerAngles);\n    return this.localEulerAngles;\n  }, getLocalPosition:function() {\n    return this.localPosition;\n  }, getLocalRotation:function() {\n    return this.localRotation;\n  }, getLocalScale:function() {\n    return this.localScale;\n  }, getLocalTransform:function() {\n    if (this._dirtyLocal) {\n      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);\n      this._dirtyLocal = false;\n    }\n    return this.localTransform;\n  }, getName:function() {\n    return this.name;\n  }, getPosition:function() {\n    this.getWorldTransform().getTranslation(this.position);\n    return this.position;\n  }, getRotation:function() {\n    this.rotation.setFromMat4(this.getWorldTransform());\n    return this.rotation;\n  }, getWorldTransform:function() {\n    if (!this._dirtyLocal && !this._dirtyWorld) {\n      return this.worldTransform;\n    }\n    if (this._parent) {\n      this._parent.getWorldTransform();\n    }\n    this._sync();\n    return this.worldTransform;\n  }, reparent:function(parent, index) {\n    var current = this._parent;\n    if (current) {\n      current.removeChild(this);\n    }\n    if (parent) {\n      if (index >= 0) {\n        parent.insertChild(this, index);\n      } else {\n        parent.addChild(this);\n      }\n    }\n  }, setLocalEulerAngles:function(x, y, z) {\n    if (x instanceof pc.Vec3) {\n      this.localRotation.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);\n    } else {\n      this.localRotation.setFromEulerAngles(x, y, z);\n    }\n    if (!this._dirtyLocal) {\n      this._dirtify(true);\n    }\n  }, setLocalPosition:function(x, y, z) {\n    if (x instanceof pc.Vec3) {\n      this.localPosition.copy(x);\n    } else {\n      this.localPosition.set(x, y, z);\n    }\n    if (!this._dirtyLocal) {\n      this._dirtify(true);\n    }\n  }, setLocalRotation:function(x, y, z, w) {\n    if (x instanceof pc.Quat) {\n      this.localRotation.copy(x);\n    } else {\n      this.localRotation.set(x, y, z, w);\n    }\n    if (!this._dirtyLocal) {\n      this._dirtify(true);\n    }\n  }, setLocalScale:function(x, y, z) {\n    if (x instanceof pc.Vec3) {\n      this.localScale.copy(x);\n    } else {\n      this.localScale.set(x, y, z);\n    }\n    if (!this._dirtyLocal) {\n      this._dirtify(true);\n    }\n  }, setName:function(name) {\n    this.name = name;\n  }, _dirtify:function(local) {\n    if ((!local || local && this._dirtyLocal) && this._dirtyWorld) {\n      return;\n    }\n    if (local) {\n      this._dirtyLocal = true;\n    }\n    if (!this._dirtyWorld) {\n      this._dirtyWorld = true;\n      var i = this._children.length;\n      while (i--) {\n        if (this._children[i]._dirtyWorld) {\n          continue;\n        }\n        this._children[i]._dirtify();\n      }\n    }\n    this._dirtyNormal = true;\n    this._aabbVer++;\n  }, setPosition:function() {\n    var position = new pc.Vec3;\n    var invParentWtm = new pc.Mat4;\n    return function(x, y, z) {\n      if (x instanceof pc.Vec3) {\n        position.copy(x);\n      } else {\n        position.set(x, y, z);\n      }\n      if (this._parent === null) {\n        this.localPosition.copy(position);\n      } else {\n        invParentWtm.copy(this._parent.getWorldTransform()).invert();\n        invParentWtm.transformPoint(position, this.localPosition);\n      }\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }(), setRotation:function() {\n    var rotation = new pc.Quat;\n    var invParentRot = new pc.Quat;\n    return function(x, y, z, w) {\n      if (x instanceof pc.Quat) {\n        rotation.copy(x);\n      } else {\n        rotation.set(x, y, z, w);\n      }\n      if (this._parent === null) {\n        this.localRotation.copy(rotation);\n      } else {\n        var parentRot = this._parent.getRotation();\n        invParentRot.copy(parentRot).invert();\n        this.localRotation.copy(invParentRot).mul(rotation);\n      }\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }(), setEulerAngles:function() {\n    var invParentRot = new pc.Quat;\n    return function(x, y, z) {\n      if (x instanceof pc.Vec3) {\n        this.localRotation.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);\n      } else {\n        this.localRotation.setFromEulerAngles(x, y, z);\n      }\n      if (this._parent !== null) {\n        var parentRot = this._parent.getRotation();\n        invParentRot.copy(parentRot).invert();\n        this.localRotation.mul2(invParentRot, this.localRotation);\n      }\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }(), addChild:function(node) {\n    if (node._parent !== null) {\n      throw new Error(\"GraphNode is already parented\");\n    }\n    this._children.push(node);\n    this._onInsertChild(node);\n  }, addChildAndSaveTransform:function(node) {\n    var wPos = node.getPosition();\n    var wRot = node.getRotation();\n    var current = node._parent;\n    if (current) {\n      current.removeChild(node);\n    }\n    if (this.tmpMat4 === undefined) {\n      this.tmpMat4 = new pc.Mat4;\n      this.tmpQuat = new pc.Quat;\n    }\n    node.setPosition(this.tmpMat4.copy(this.worldTransform).invert().transformPoint(wPos));\n    node.setRotation(this.tmpQuat.copy(this.getRotation()).invert().mul(wRot));\n    this._children.push(node);\n    this._onInsertChild(node);\n  }, insertChild:function(node, index) {\n    if (node._parent !== null) {\n      throw new Error(\"GraphNode is already parented\");\n    }\n    this._children.splice(index, 0, node);\n    this._onInsertChild(node);\n  }, _onInsertChild:function(node) {\n    node._parent = this;\n    var enabledInHierarchy = node._enabled && this.enabled;\n    if (node._enabledInHierarchy !== enabledInHierarchy) {\n      node._enabledInHierarchy = enabledInHierarchy;\n      node._notifyHierarchyStateChanged(node, enabledInHierarchy);\n    }\n    node._dirtify();\n    if (node.fire) {\n      node.fire(\"insert\", this);\n    }\n  }, removeChild:function(child) {\n    var i;\n    var length = this._children.length;\n    for (i = 0; i < length; ++i) {\n      if (this._children[i] === child) {\n        this._children.splice(i, 1);\n        child._parent = null;\n        return;\n      }\n    }\n  }, addLabel:function(label) {\n    this._labels[label] = true;\n  }, getLabels:function() {\n    return Object.keys(this._labels);\n  }, hasLabel:function(label) {\n    return !!this._labels[label];\n  }, removeLabel:function(label) {\n    delete this._labels[label];\n  }, findByLabel:function(label, results) {\n    var i, length = this._children.length;\n    results = results || [];\n    if (this.hasLabel(label)) {\n      results.push(this);\n    }\n    for (i = 0; i < length; ++i) {\n      results = this._children[i].findByLabel(label, results);\n    }\n    return results;\n  }, _sync:function() {\n    if (this._dirtyLocal) {\n      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);\n      this._dirtyLocal = false;\n    }\n    if (this._dirtyWorld) {\n      if (this._parent === null) {\n        this.worldTransform.copy(this.localTransform);\n      } else {\n        if (this.scaleCompensation) {\n          var parentWorldScale;\n          var parent = this._parent;\n          var scale = this.localScale;\n          var parentToUseScaleFrom = parent;\n          if (parentToUseScaleFrom) {\n            while (parentToUseScaleFrom && parentToUseScaleFrom.scaleCompensation) {\n              parentToUseScaleFrom = parentToUseScaleFrom._parent;\n            }\n            if (parentToUseScaleFrom) {\n              parentToUseScaleFrom = parentToUseScaleFrom._parent;\n              if (parentToUseScaleFrom) {\n                parentWorldScale = parentToUseScaleFrom.worldTransform.getScale();\n                scaleCompensateScale.mul2(parentWorldScale, this.localScale);\n                scale = scaleCompensateScale;\n              }\n            }\n          }\n          scaleCompensateRot2.setFromMat4(parent.worldTransform);\n          scaleCompensateRot.mul2(scaleCompensateRot2, this.localRotation);\n          var tmatrix = parent.worldTransform;\n          if (parent.scaleCompensation) {\n            scaleCompensateScaleForParent.mul2(parentWorldScale, parent.getLocalScale());\n            scaleCompensatePosTransform.setTRS(parent.worldTransform.getTranslation(scaleCompensatePos), scaleCompensateRot2, scaleCompensateScaleForParent);\n            tmatrix = scaleCompensatePosTransform;\n          }\n          tmatrix.transformPoint(this.localPosition, scaleCompensatePos);\n          this.worldTransform.setTRS(scaleCompensatePos, scaleCompensateRot, scale);\n        } else {\n          this.worldTransform.mul2(this._parent.worldTransform, this.localTransform);\n        }\n      }\n      this._dirtyWorld = false;\n    }\n  }, syncHierarchy:function() {\n    if (!this._enabled) {\n      return;\n    }\n    if (this._dirtyLocal || this._dirtyWorld) {\n      this._sync();\n    }\n    for (var i = 0; i < this._children.length; i++) {\n      this._children[i].syncHierarchy();\n    }\n  }, lookAt:function() {\n    var matrix = new pc.Mat4;\n    var target = new pc.Vec3;\n    var up = new pc.Vec3;\n    var rotation = new pc.Quat;\n    return function(tx, ty, tz, ux, uy, uz) {\n      if (tx instanceof pc.Vec3) {\n        target.copy(tx);\n        if (ty instanceof pc.Vec3) {\n          up.copy(ty);\n        } else {\n          up.copy(pc.Vec3.UP);\n        }\n      } else {\n        if (tz === undefined) {\n          return;\n        } else {\n          target.set(tx, ty, tz);\n          if (ux !== undefined) {\n            up.set(ux, uy, uz);\n          } else {\n            up.copy(pc.Vec3.UP);\n          }\n        }\n      }\n      matrix.setLookAt(this.getPosition(), target, up);\n      rotation.setFromMat4(matrix);\n      this.setRotation(rotation);\n    };\n  }(), translate:function() {\n    var translation = new pc.Vec3;\n    return function(x, y, z) {\n      if (x instanceof pc.Vec3) {\n        translation.copy(x);\n      } else {\n        translation.set(x, y, z);\n      }\n      translation.add(this.getPosition());\n      this.setPosition(translation);\n    };\n  }(), translateLocal:function() {\n    var translation = new pc.Vec3;\n    return function(x, y, z) {\n      if (x instanceof pc.Vec3) {\n        translation.copy(x);\n      } else {\n        translation.set(x, y, z);\n      }\n      this.localRotation.transformVector(translation, translation);\n      this.localPosition.add(translation);\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }(), rotate:function() {\n    var quaternion = new pc.Quat;\n    var invParentRot = new pc.Quat;\n    return function(x, y, z) {\n      if (x instanceof pc.Vec3) {\n        quaternion.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);\n      } else {\n        quaternion.setFromEulerAngles(x, y, z);\n      }\n      if (this._parent === null) {\n        this.localRotation.mul2(quaternion, this.localRotation);\n      } else {\n        var rot = this.getRotation();\n        var parentRot = this._parent.getRotation();\n        invParentRot.copy(parentRot).invert();\n        quaternion.mul2(invParentRot, quaternion);\n        this.localRotation.mul2(quaternion, rot);\n      }\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }(), rotateLocal:function() {\n    var quaternion = new pc.Quat;\n    return function(x, y, z) {\n      if (x instanceof pc.Vec3) {\n        quaternion.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);\n      } else {\n        quaternion.setFromEulerAngles(x, y, z);\n      }\n      this.localRotation.mul(quaternion);\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }()});\n  return {GraphNode:GraphNode};\n}());\npc.extend(pc, function() {\n  var _deviceCoord = new pc.Vec3;\n  var _far = new pc.Vec3;\n  var _farW = new pc.Vec3;\n  var _invViewProjMat = new pc.Mat4;\n  var Camera = function() {\n    this._projection = pc.PROJECTION_PERSPECTIVE;\n    this._nearClip = 0.1;\n    this._farClip = 10000;\n    this._shaderParams = new pc.Vec4;\n    this._fov = 45;\n    this._orthoHeight = 10;\n    this._aspect = 16 / 9;\n    this._aspectRatioMode = pc.ASPECT_AUTO;\n    this._horizontalFov = false;\n    this.frustumCulling = false;\n    this.cullingMask = 4294967295;\n    this._renderDepthRequests = 0;\n    this._projMatDirty = true;\n    this._projMat = new pc.Mat4;\n    this._viewMat = new pc.Mat4;\n    this._viewProjMat = new pc.Mat4;\n    this.vrDisplay = null;\n    this._rect = {x:0, y:0, width:1, height:1};\n    this._scissorRect = {x:0, y:0, width:1, height:1};\n    this.frustum = new pc.Frustum(this._projMat, this._viewMat);\n    this.renderTarget = null;\n    this._depthTarget = null;\n    this._clearOptions = {color:[0.5, 0.5, 0.5, 1.0], depth:1.0, stencil:0, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH | pc.CLEARFLAG_STENCIL};\n    this._node = null;\n    this.calculateTransform = null;\n    this.overrideCalculateTransform = false;\n    this.calculateProjection = null;\n    this.overrideCalculateProjection = false;\n    this._cullFaces = true;\n    this._flipFaces = false;\n    this._component = null;\n  };\n  Camera.prototype = {clone:function() {\n    var clone = new pc.Camera;\n    clone.projection = this._projection;\n    clone.nearClip = this._nearClip;\n    clone.farClip = this._farClip;\n    clone._shaderParams = this._shaderParams.clone();\n    clone.fov = this._fov;\n    clone.aspectRatio = this._aspect;\n    clone._aspectRatioMode = this._aspectRatioMode;\n    clone.renderTarget = this.renderTarget;\n    clone.setClearOptions(this.getClearOptions());\n    clone.frustumCulling = this.frustumCulling;\n    clone.cullingMask = this.cullingMask;\n    return clone;\n  }, worldToScreen:function(worldCoord, cw, ch, screenCoord) {\n    if (screenCoord === undefined) {\n      screenCoord = new pc.Vec3;\n    }\n    var projMat = this.getProjectionMatrix();\n    var wtm = this._node.getWorldTransform();\n    this._viewMat.copy(wtm).invert();\n    this._viewProjMat.mul2(projMat, this._viewMat);\n    this._viewProjMat.transformPoint(worldCoord, screenCoord);\n    var wp = worldCoord.data;\n    var vpm = this._viewProjMat.data;\n    var w = wp[0] * vpm[3] + wp[1] * vpm[7] + wp[2] * vpm[11] + 1 * vpm[15];\n    screenCoord.x = (screenCoord.x / w + 1) * 0.5 * cw;\n    screenCoord.y = (1 - screenCoord.y / w) * 0.5 * ch;\n    return screenCoord;\n  }, screenToWorld:function(x, y, z, cw, ch, worldCoord) {\n    if (worldCoord === undefined) {\n      worldCoord = new pc.Vec3;\n    }\n    var projMat = this.getProjectionMatrix();\n    var wtm = this._node.getWorldTransform();\n    this._viewMat.copy(wtm).invert();\n    this._viewProjMat.mul2(projMat, this._viewMat);\n    _invViewProjMat.copy(this._viewProjMat).invert();\n    if (this._projection === pc.PROJECTION_PERSPECTIVE) {\n      _far.set(x / cw * 2 - 1, (ch - y) / ch * 2 - 1, 1);\n      _invViewProjMat.transformPoint(_far, _farW);\n      var w = _far.x * _invViewProjMat.data[3] + _far.y * _invViewProjMat.data[7] + _far.z * _invViewProjMat.data[11] + _invViewProjMat.data[15];\n      _farW.scale(1 / w);\n      var alpha = z / this._farClip;\n      worldCoord.lerp(this._node.getPosition(), _farW, alpha);\n    } else {\n      var range = this._farClip - this._nearClip;\n      _deviceCoord.set(x / cw, (ch - y) / ch, z / range);\n      _deviceCoord.scale(2);\n      _deviceCoord.sub(pc.Vec3.ONE);\n      _invViewProjMat.transformPoint(_deviceCoord, worldCoord);\n    }\n    return worldCoord;\n  }, getClearOptions:function() {\n    return this._clearOptions;\n  }, getProjectionMatrix:function() {\n    if (this._projMatDirty) {\n      if (this._projection === pc.PROJECTION_PERSPECTIVE) {\n        this._projMat.setPerspective(this._fov, this._aspect, this._nearClip, this._farClip, this._horizontalFov);\n      } else {\n        var y = this._orthoHeight;\n        var x = y * this._aspect;\n        this._projMat.setOrtho(-x, x, -y, y, this._nearClip, this._farClip);\n      }\n      var n = this._nearClip;\n      var f = this._farClip;\n      this._shaderParams.x = 1 / f;\n      this._shaderParams.y = f;\n      this._shaderParams.z = (1 - f / n) / 2;\n      this._shaderParams.w = (1 + f / n) / 2;\n      this._projMatDirty = false;\n    }\n    return this._projMat;\n  }, getRect:function() {\n    return this._rect;\n  }, setClearOptions:function(options) {\n    this._clearOptions.color[0] = options.color[0];\n    this._clearOptions.color[1] = options.color[1];\n    this._clearOptions.color[2] = options.color[2];\n    this._clearOptions.color[3] = options.color[3];\n    this._clearOptions.depth = options.depth;\n    this._clearOptions.stencil = options.stencil;\n    this._clearOptions.flags = options.flags;\n  }, setRect:function(x, y, width, height) {\n    this._rect.x = x;\n    this._rect.y = y;\n    this._rect.width = width;\n    this._rect.height = height;\n  }, setScissorRect:function(x, y, width, height) {\n    this._scissorRect.x = x;\n    this._scissorRect.y = y;\n    this._scissorRect.width = width;\n    this._scissorRect.height = height;\n  }, requestDepthMap:function() {\n    this._renderDepthRequests++;\n  }, releaseDepthMap:function() {\n    this._renderDepthRequests--;\n  }};\n  Object.defineProperty(Camera.prototype, \"aspectRatio\", {get:function() {\n    return this._aspect;\n  }, set:function(v) {\n    if (this._aspect !== v) {\n      this._aspect = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"projection\", {get:function() {\n    return this._projection;\n  }, set:function(v) {\n    if (this._projection !== v) {\n      this._projection = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"nearClip\", {get:function() {\n    return this._nearClip;\n  }, set:function(v) {\n    if (this._nearClip !== v) {\n      this._nearClip = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"farClip\", {get:function() {\n    return this._farClip;\n  }, set:function(v) {\n    if (this._farClip !== v) {\n      this._farClip = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"fov\", {get:function() {\n    return this._fov;\n  }, set:function(v) {\n    if (this._fov !== v) {\n      this._fov = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"horizontalFov\", {get:function() {\n    return this._horizontalFov;\n  }, set:function(v) {\n    if (this._horizontalFov !== v) {\n      this._horizontalFov = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"orthoHeight\", {get:function() {\n    return this._orthoHeight;\n  }, set:function(v) {\n    if (this._orthoHeight !== v) {\n      this._orthoHeight = v;\n      this._projMatDirty = true;\n    }\n  }});\n  Object.defineProperty(Camera.prototype, \"clearColor\", {get:function() {\n    return this._clearOptions.color;\n  }, set:function(v) {\n    this._clearOptions.color[0] = v[0];\n    this._clearOptions.color[1] = v[1];\n    this._clearOptions.color[2] = v[2];\n    this._clearOptions.color[3] = v[3];\n  }});\n  Object.defineProperty(Camera.prototype, \"clearDepth\", {get:function() {\n    return this._clearOptions.depth;\n  }, set:function(v) {\n    this._clearOptions.depth = v;\n  }});\n  Object.defineProperty(Camera.prototype, \"clearStencil\", {get:function() {\n    return this._clearOptions.stencil;\n  }, set:function(v) {\n    this._clearOptions.stencil = v;\n  }});\n  Object.defineProperty(Camera.prototype, \"clearFlags\", {get:function() {\n    return this._clearOptions.flags;\n  }, set:function(v) {\n    this._clearOptions.flags = v;\n  }});\n  return {Camera:Camera};\n}());\npc.extend(pc, function() {\n  var spotCenter = new pc.Vec3;\n  var spotEndPoint = new pc.Vec3;\n  var tmpVec = new pc.Vec3;\n  var chanId = {r:0, g:1, b:2, a:3};\n  var Light = function Light() {\n    this._type = pc.LIGHTTYPE_DIRECTIONAL;\n    this._color = new pc.Color(0.8, 0.8, 0.8);\n    this._intensity = 1;\n    this._castShadows = false;\n    this._enabled = false;\n    this._mask = 1;\n    this.isStatic = false;\n    this.key = 0;\n    this.bakeDir = true;\n    this.attenuationStart = 10;\n    this.attenuationEnd = 10;\n    this._falloffMode = 0;\n    this._shadowType = pc.SHADOW_PCF3;\n    this._vsmBlurSize = 11;\n    this.vsmBlurMode = pc.BLUR_GAUSSIAN;\n    this.vsmBias = 0.01 * 0.25;\n    this._cookie = null;\n    this.cookieIntensity = 1;\n    this._cookieFalloff = true;\n    this._cookieChannel = \"rgb\";\n    this._cookieTransform = null;\n    this._cookieOffset = null;\n    this._cookieTransformSet = false;\n    this._cookieOffsetSet = false;\n    this._innerConeAngle = 40;\n    this._outerConeAngle = 45;\n    this._finalColor = new pc.Vec3(0.8, 0.8, 0.8);\n    var c = Math.pow(this._finalColor.data[0], 2.2);\n    this._linearFinalColor = new pc.Vec3(c, c, c);\n    this._position = new pc.Vec3(0, 0, 0);\n    this._direction = new pc.Vec3(0, 0, 0);\n    this._innerConeAngleCos = Math.cos(this._innerConeAngle * Math.PI / 180);\n    this._outerConeAngleCos = Math.cos(this._outerConeAngle * Math.PI / 180);\n    this._shadowCamera = null;\n    this._shadowMatrix = new pc.Mat4;\n    this.shadowDistance = 40;\n    this._shadowResolution = 1024;\n    this.shadowBias = -0.0005;\n    this._normalOffsetBias = 0.0;\n    this.shadowUpdateMode = pc.SHADOWUPDATE_REALTIME;\n    this._scene = null;\n    this._node = null;\n    this._rendererParams = [];\n    this._isVsm = false;\n    this._isPcf = true;\n    this._cacheShadowMap = false;\n    this._isCachedShadowMap = false;\n    this._visibleLength = [0];\n    this._visibleList = [[]];\n    this._visibleCameraSettings = [];\n  };\n  Light.prototype = {clone:function() {\n    var clone = new pc.Light;\n    clone.type = this._type;\n    clone.setColor(this._color);\n    clone.intensity = this._intensity;\n    clone.castShadows = this.castShadows;\n    clone.enabled = this._enabled;\n    clone.attenuationStart = this.attenuationStart;\n    clone.attenuationEnd = this.attenuationEnd;\n    clone.falloffMode = this._falloffMode;\n    clone.shadowType = this._shadowType;\n    clone.vsmBlurSize = this._vsmBlurSize;\n    clone.vsmBlurMode = this.vsmBlurMode;\n    clone.vsmBias = this.vsmBias;\n    clone.shadowUpdateMode = this.shadowUpdateMode;\n    clone.mask = this._mask;\n    clone.innerConeAngle = this._innerConeAngle;\n    clone.outerConeAngle = this._outerConeAngle;\n    clone.shadowBias = this.shadowBias;\n    clone.normalOffsetBias = this._normalOffsetBias;\n    clone.shadowResolution = this._shadowResolution;\n    clone.shadowDistance = this.shadowDistance;\n    return clone;\n  }, getColor:function() {\n    return this._color;\n  }, getBoundingSphere:function(sphere) {\n    if (this._type === pc.LIGHTTYPE_SPOT) {\n      var range = this.attenuationEnd;\n      var angle = this._outerConeAngle;\n      var f = Math.cos(angle * pc.math.DEG_TO_RAD);\n      var node = this._node;\n      spotCenter.copy(node.up);\n      spotCenter.scale(-range * 0.5 * f);\n      spotCenter.add(node.getPosition());\n      sphere.center = spotCenter;\n      spotEndPoint.copy(node.up);\n      spotEndPoint.scale(-range);\n      tmpVec.copy(node.right);\n      tmpVec.scale(Math.sin(angle * pc.math.DEG_TO_RAD) * range);\n      spotEndPoint.add(tmpVec);\n      sphere.radius = spotEndPoint.length() * 0.5;\n    } else {\n      if (this._type === pc.LIGHTTYPE_POINT) {\n        sphere.center = this._node.getPosition();\n        sphere.radius = this.attenuationEnd;\n      }\n    }\n  }, getBoundingBox:function(box) {\n    if (this._type === pc.LIGHTTYPE_SPOT) {\n      var range = this.attenuationEnd;\n      var angle = this._outerConeAngle;\n      var node = this._node;\n      var scl = Math.abs(Math.sin(angle * pc.math.DEG_TO_RAD) * range);\n      box.center.set(0, -range * 0.5, 0);\n      box.halfExtents.set(scl, range * 0.5, scl);\n      box.setFromTransformedAabb(box, node.getWorldTransform());\n    } else {\n      if (this._type === pc.LIGHTTYPE_POINT) {\n        box.center.copy(this._node.getPosition());\n        box.halfExtents.set(this.attenuationEnd, this.attenuationEnd, this.attenuationEnd);\n      }\n    }\n  }, setColor:function() {\n    var r, g, b;\n    if (arguments.length === 1) {\n      r = arguments[0].r;\n      g = arguments[0].g;\n      b = arguments[0].b;\n    } else {\n      if (arguments.length === 3) {\n        r = arguments[0];\n        g = arguments[1];\n        b = arguments[2];\n      }\n    }\n    this._color.set(r, g, b);\n    var i = this._intensity;\n    this._finalColor.set(r * i, g * i, b * i);\n    for (var c = 0; c < 3; c++) {\n      if (i >= 1) {\n        this._linearFinalColor.data[c] = Math.pow(this._finalColor.data[c] / i, 2.2) * i;\n      } else {\n        this._linearFinalColor.data[c] = Math.pow(this._finalColor.data[c], 2.2);\n      }\n    }\n  }, _destroyShadowMap:function() {\n    if (this._shadowCamera) {\n      if (!this._isCachedShadowMap) {\n        var rt = this._shadowCamera.renderTarget;\n        var i;\n        if (rt) {\n          if (rt.length) {\n            for (i = 0; i < rt.length; i++) {\n              if (rt[i].colorBuffer) {\n                rt[i].colorBuffer.destroy();\n              }\n              rt[i].destroy();\n            }\n          } else {\n            if (rt.colorBuffer) {\n              rt.colorBuffer.destroy();\n            }\n            rt.destroy();\n          }\n        }\n      }\n      this._shadowCamera.renderTarget = null;\n      this._shadowCamera = null;\n      this._shadowCubeMap = null;\n      if (this.shadowUpdateMode === pc.SHADOWUPDATE_NONE) {\n        this.shadowUpdateMode = pc.SHADOWUPDATE_THISFRAME;\n      }\n    }\n  }, updateShadow:function() {\n    if (this.shadowUpdateMode !== pc.SHADOWUPDATE_REALTIME) {\n      this.shadowUpdateMode = pc.SHADOWUPDATE_THISFRAME;\n    }\n  }, updateKey:function() {\n    var key = this._type << 29 | (this._castShadows ? 1 : 0) << 28 | this._shadowType << 25 | this._falloffMode << 23 | (this._normalOffsetBias !== 0.0 ? 1 : 0) << 22 | (this._cookie ? 1 : 0) << 21 | (this._cookieFalloff ? 1 : 0) << 20 | chanId[this._cookieChannel.charAt(0)] << 18 | (this._cookieTransform ? 1 : 0) << 12;\n    if (this._cookieChannel.length === 3) {\n      key |= chanId[this._cookieChannel.charAt(1)] << 16;\n      key |= chanId[this._cookieChannel.charAt(2)] << 14;\n    }\n    this.key = key;\n  }};\n  Object.defineProperty(Light.prototype, \"enabled\", {get:function() {\n    return this._type;\n  }, set:function(value) {\n    if (this._type === value) {\n      return;\n    }\n    this._enabled = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n  }});\n  Object.defineProperty(Light.prototype, \"type\", {get:function() {\n    return this._type;\n  }, set:function(value) {\n    if (this._type === value) {\n      return;\n    }\n    this._type = value;\n    this._destroyShadowMap();\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n    var stype = this._shadowType;\n    this._shadowType = null;\n    this.shadowType = stype;\n    if (this._scene !== null) {\n      this._scene.layers._dirtyLights = true;\n    }\n  }});\n  Object.defineProperty(Light.prototype, \"mask\", {get:function() {\n    return this._mask;\n  }, set:function(value) {\n    if (this._mask === value) {\n      return;\n    }\n    this._mask = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n  }});\n  Object.defineProperty(Light.prototype, \"shadowType\", {get:function() {\n    return this._shadowType;\n  }, set:function(value) {\n    if (this._shadowType === value) {\n      return;\n    }\n    var device = pc.Application.getApplication().graphicsDevice;\n    if (this._type === pc.LIGHTTYPE_POINT) {\n      value = pc.SHADOW_PCF3;\n    }\n    if (value === pc.SHADOW_PCF5 && !device.webgl2) {\n      value = pc.SHADOW_PCF3;\n    }\n    if (value === pc.SHADOW_VSM32 && !device.extTextureFloatRenderable) {\n      value = pc.SHADOW_VSM16;\n    }\n    if (value === pc.SHADOW_VSM16 && !device.extTextureHalfFloatRenderable) {\n      value = pc.SHADOW_VSM8;\n    }\n    this._isVsm = value >= pc.SHADOW_VSM8 && value <= pc.SHADOW_VSM32;\n    this._isPcf = value === pc.SHADOW_PCF5 || value === pc.SHADOW_PCF3;\n    this._shadowType = value;\n    this._destroyShadowMap();\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"castShadows\", {get:function() {\n    return this._castShadows && this._mask !== pc.MASK_LIGHTMAP && this._mask !== 0;\n  }, set:function(value) {\n    if (this._castShadows === value) {\n      return;\n    }\n    this._castShadows = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"shadowResolution\", {get:function() {\n    return this._shadowResolution;\n  }, set:function(value) {\n    if (this._shadowResolution === value) {\n      return;\n    }\n    var device = pc.Application.getApplication().graphicsDevice;\n    if (this._type === pc.LIGHTTYPE_POINT) {\n      value = Math.min(value, device.maxCubeMapSize);\n    } else {\n      value = Math.min(value, device.maxTextureSize);\n    }\n    this._shadowResolution = value;\n  }});\n  Object.defineProperty(Light.prototype, \"vsmBlurSize\", {get:function() {\n    return this._vsmBlurSize;\n  }, set:function(value) {\n    if (this._vsmBlurSize === value) {\n      return;\n    }\n    if (value % 2 === 0) {\n      value++;\n    }\n    this._vsmBlurSize = value;\n  }});\n  Object.defineProperty(Light.prototype, \"normalOffsetBias\", {get:function() {\n    return this._normalOffsetBias;\n  }, set:function(value) {\n    if (this._normalOffsetBias === value) {\n      return;\n    }\n    if (!this._normalOffsetBias && value || this._normalOffsetBias && !value) {\n      if (this._scene !== null) {\n        this._scene.updateShaders = true;\n      }\n      this.updateKey();\n    }\n    this._normalOffsetBias = value;\n  }});\n  Object.defineProperty(Light.prototype, \"falloffMode\", {get:function() {\n    return this._falloffMode;\n  }, set:function(value) {\n    if (this._falloffMode === value) {\n      return;\n    }\n    this._falloffMode = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"innerConeAngle\", {get:function() {\n    return this._innerConeAngle;\n  }, set:function(value) {\n    if (this._innerConeAngle === value) {\n      return;\n    }\n    this._innerConeAngle = value;\n    this._innerConeAngleCos = Math.cos(value * Math.PI / 180);\n  }});\n  Object.defineProperty(Light.prototype, \"outerConeAngle\", {get:function() {\n    return this._outerConeAngle;\n  }, set:function(value) {\n    if (this._outerConeAngle === value) {\n      return;\n    }\n    this._outerConeAngle = value;\n    this._outerConeAngleCos = Math.cos(value * Math.PI / 180);\n  }});\n  Object.defineProperty(Light.prototype, \"intensity\", {get:function() {\n    return this._intensity;\n  }, set:function(value) {\n    if (this._intensity === value) {\n      return;\n    }\n    this._intensity = value;\n    var c = this._color.data;\n    var r = c[0];\n    var g = c[1];\n    var b = c[2];\n    var i = this._intensity;\n    this._finalColor.set(r * i, g * i, b * i);\n    for (var j = 0; j < 3; j++) {\n      if (i >= 1) {\n        this._linearFinalColor.data[j] = Math.pow(this._finalColor.data[j] / i, 2.2) * i;\n      } else {\n        this._linearFinalColor.data[j] = Math.pow(this._finalColor.data[j], 2.2);\n      }\n    }\n  }});\n  Object.defineProperty(Light.prototype, \"cookie\", {get:function() {\n    return this._cookie;\n  }, set:function(value) {\n    if (this._cookie === value) {\n      return;\n    }\n    this._cookie = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"cookieFalloff\", {get:function() {\n    return this._cookieFalloff;\n  }, set:function(value) {\n    if (this._cookieFalloff === value) {\n      return;\n    }\n    this._cookieFalloff = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"cookieChannel\", {get:function() {\n    return this._cookieChannel;\n  }, set:function(value) {\n    if (this._cookieChannel === value) {\n      return;\n    }\n    if (value.length < 3) {\n      var chr = value.charAt(value.length - 1);\n      var addLen = 3 - value.length;\n      for (var i = 0; i < addLen; i++) {\n        value += chr;\n      }\n    }\n    this._cookieChannel = value;\n    if (this._scene !== null) {\n      this._scene.updateShaders = true;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"cookieTransform\", {get:function() {\n    return this._cookieTransform;\n  }, set:function(value) {\n    if (this._cookieTransform === value) {\n      return;\n    }\n    var xformOld = !!(this._cookieTransformSet || this._cookieOffsetSet);\n    var xformNew = !!(value || this._cookieOffsetSet);\n    if (xformOld !== xformNew) {\n      if (this._scene !== null) {\n        this._scene.updateShaders = true;\n      }\n    }\n    this._cookieTransform = value;\n    this._cookieTransformSet = !!value;\n    if (value && !this._cookieOffset) {\n      this.cookieOffset = new pc.Vec2;\n      this._cookieOffsetSet = false;\n    }\n    this.updateKey();\n  }});\n  Object.defineProperty(Light.prototype, \"cookieOffset\", {get:function() {\n    return this._cookieOffset;\n  }, set:function(value) {\n    if (this._cookieOffset === value) {\n      return;\n    }\n    var xformOld = !!(this._cookieTransformSet || this._cookieOffsetSet);\n    var xformNew = !!(this._cookieTransformSet || value);\n    if (xformOld !== xformNew) {\n      if (this._scene !== null) {\n        this._scene.updateShaders = true;\n      }\n    }\n    if (xformNew && !value && this._cookieOffset) {\n      this._cookieOffset.set(0, 0);\n    } else {\n      this._cookieOffset = value;\n    }\n    this._cookieOffsetSet = !!value;\n    if (value && !this._cookieTransform) {\n      this.cookieTransform = new pc.Vec4(1, 1, 0, 0);\n      this._cookieTransformSet = false;\n    }\n    this.updateKey();\n  }});\n  return {Light:Light};\n}());\npc.extend(pc, function() {\n  var id = 0;\n  var Material = function Material() {\n    this.name = \"Untitled\";\n    this.id = id++;\n    this._shader = null;\n    this.variants = {};\n    this.parameters = {};\n    this.alphaTest = 0;\n    this.alphaToCoverage = false;\n    this.blend = false;\n    this.blendSrc = pc.BLENDMODE_ONE;\n    this.blendDst = pc.BLENDMODE_ZERO;\n    this.blendEquation = pc.BLENDEQUATION_ADD;\n    this.separateAlphaBlend = false;\n    this.blendSrcAlpha = pc.BLENDMODE_ONE;\n    this.blendDstAlpha = pc.BLENDMODE_ZERO;\n    this.blendAlphaEquation = pc.BLENDEQUATION_ADD;\n    this.cull = pc.CULLFACE_BACK;\n    this.depthTest = true;\n    this.depthWrite = true;\n    this.stencilFront = null;\n    this.stencilBack = null;\n    this.depthBias = 0;\n    this.slopeDepthBias = 0;\n    this.redWrite = true;\n    this.greenWrite = true;\n    this.blueWrite = true;\n    this.alphaWrite = true;\n    this.meshInstances = [];\n    this._shaderVersion = 0;\n    this._scene = null;\n    this._dirtyBlend = false;\n  };\n  Object.defineProperty(Material.prototype, \"shader\", {get:function() {\n    return this._shader;\n  }, set:function(shader) {\n    this.setShader(shader);\n  }});\n  Object.defineProperty(Material.prototype, \"blendType\", {get:function() {\n    if (!this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ZERO && this.blendEquation === pc.BLENDEQUATION_ADD) {\n      return pc.BLEND_NONE;\n    } else {\n      if (this.blend && this.blendSrc === pc.BLENDMODE_SRC_ALPHA && this.blendDst === pc.BLENDMODE_ONE_MINUS_SRC_ALPHA && this.blendEquation === pc.BLENDEQUATION_ADD) {\n        return pc.BLEND_NORMAL;\n      } else {\n        if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_ADD) {\n          return pc.BLEND_ADDITIVE;\n        } else {\n          if (this.blend && this.blendSrc === pc.BLENDMODE_SRC_ALPHA && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_ADD) {\n            return pc.BLEND_ADDITIVEALPHA;\n          } else {\n            if (this.blend && this.blendSrc === pc.BLENDMODE_DST_COLOR && this.blendDst === pc.BLENDMODE_SRC_COLOR && this.blendEquation === pc.BLENDEQUATION_ADD) {\n              return pc.BLEND_MULTIPLICATIVE2X;\n            } else {\n              if (this.blend && this.blendSrc === pc.BLENDMODE_ONE_MINUS_DST_COLOR && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_ADD) {\n                return pc.BLEND_SCREEN;\n              } else {\n                if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_MIN) {\n                  return pc.BLEND_MIN;\n                } else {\n                  if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_MAX) {\n                    return pc.BLEND_MAX;\n                  } else {\n                    if (this.blend && this.blendSrc === pc.BLENDMODE_DST_COLOR && this.blendDst === pc.BLENDMODE_ZERO && this.blendEquation === pc.BLENDEQUATION_ADD) {\n                      return pc.BLEND_MULTIPLICATIVE;\n                    } else {\n                      if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE_MINUS_SRC_ALPHA && this.blendEquation === pc.BLENDEQUATION_ADD) {\n                        return pc.BLEND_PREMULTIPLIED;\n                      } else {\n                        return pc.BLEND_NORMAL;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, set:function(type) {\n    var prevBlend = this.blend !== pc.BLEND_NONE;\n    switch(type) {\n      case pc.BLEND_NONE:\n        this.blend = false;\n        this.blendSrc = pc.BLENDMODE_ONE;\n        this.blendDst = pc.BLENDMODE_ZERO;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_NORMAL:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_SRC_ALPHA;\n        this.blendDst = pc.BLENDMODE_ONE_MINUS_SRC_ALPHA;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_PREMULTIPLIED:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_ONE;\n        this.blendDst = pc.BLENDMODE_ONE_MINUS_SRC_ALPHA;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_ADDITIVE:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_ONE;\n        this.blendDst = pc.BLENDMODE_ONE;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_ADDITIVEALPHA:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_SRC_ALPHA;\n        this.blendDst = pc.BLENDMODE_ONE;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_MULTIPLICATIVE2X:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_DST_COLOR;\n        this.blendDst = pc.BLENDMODE_SRC_COLOR;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_SCREEN:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_ONE_MINUS_DST_COLOR;\n        this.blendDst = pc.BLENDMODE_ONE;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_MULTIPLICATIVE:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_DST_COLOR;\n        this.blendDst = pc.BLENDMODE_ZERO;\n        this.blendEquation = pc.BLENDEQUATION_ADD;\n        break;\n      case pc.BLEND_MIN:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_ONE;\n        this.blendDst = pc.BLENDMODE_ONE;\n        this.blendEquation = pc.BLENDEQUATION_MIN;\n        break;\n      case pc.BLEND_MAX:\n        this.blend = true;\n        this.blendSrc = pc.BLENDMODE_ONE;\n        this.blendDst = pc.BLENDMODE_ONE;\n        this.blendEquation = pc.BLENDEQUATION_MAX;\n        break;\n    }\n    if (prevBlend !== (this.blend !== pc.BLEND_NONE)) {\n      if (this._scene) {\n        this._scene.layers._dirtyBlend = true;\n      } else {\n        this._dirtyBlend = true;\n      }\n    }\n    this._updateMeshInstanceKeys();\n  }});\n  Material.prototype._cloneInternal = function(clone) {\n    clone.name = this.name;\n    clone.id = id++;\n    clone.variants = {};\n    clone.shader = this.shader;\n    clone.parameters = {};\n    for (var parameterName in this.parameters) {\n      if (this.parameters.hasOwnProperty(parameterName)) {\n        clone.parameters[parameterName] = {scopeId:null, data:this.parameters[parameterName].data, passFlags:this.parameters[parameterName].passFlags};\n      }\n    }\n    clone.alphaTest = this.alphaTest;\n    clone.alphaToCoverage = this.alphaToCoverage;\n    clone.blend = this.blend;\n    clone.blendSrc = this.blendSrc;\n    clone.blendDst = this.blendDst;\n    clone.blendEquation = this.blendEquation;\n    clone.separateAlphaBlend = this.separateAlphaBlend;\n    clone.blendSrcAlpha = this.blendSrcAlpha;\n    clone.blendDstAlpha = this.blendDstAlpha;\n    clone.blendAlphaEquation = this.blendAlphaEquation;\n    clone.cull = this.cull;\n    clone.depthTest = this.depthTest;\n    clone.depthWrite = this.depthWrite;\n    clone.depthBias = this.depthBias;\n    clone.slopeDepthBias = this.slopeDepthBias;\n    if (this.stencilFront) {\n      clone.stencilFront = this.stencilFront.clone();\n    }\n    if (this.stencilBack) {\n      if (this.stencilFront === this.stencilBack) {\n        clone.stencilBack = clone.stencilFront;\n      } else {\n        clone.stencilBack = this.stencilBack.clone();\n      }\n    }\n    clone.redWrite = this.redWrite;\n    clone.greenWrite = this.greenWrite;\n    clone.blueWrite = this.blueWrite;\n    clone.alphaWrite = this.alphaWrite;\n    clone.meshInstances = [];\n  };\n  Material.prototype.clone = function() {\n    var clone = new pc.Material;\n    this._cloneInternal(clone);\n    return clone;\n  };\n  Material.prototype._updateMeshInstanceKeys = function() {\n    var i, meshInstances = this.meshInstances;\n    for (i = 0; i < meshInstances.length; i++) {\n      meshInstances[i].updateKey();\n    }\n  };\n  Material.prototype.updateShader = function(device, scene, objDefs) {\n  };\n  Material.prototype.clearParameters = function() {\n    this.parameters = {};\n  };\n  Material.prototype.getParameters = function() {\n    return this.parameters;\n  };\n  Material.prototype.clearVariants = function() {\n    var meshInstance;\n    for (var s in this.variants) {\n      if (this.variants.hasOwnProperty(s)) {\n        this.variants[s]._refCount--;\n      }\n    }\n    this.variants = {};\n    var j;\n    for (var i = 0; i < this.meshInstances.length; i++) {\n      meshInstance = this.meshInstances[i];\n      for (j = 0; j < meshInstance._shader.length; j++) {\n        meshInstance._shader[j] = null;\n      }\n    }\n  };\n  Material.prototype.getParameter = function(name) {\n    return this.parameters[name];\n  };\n  Material.prototype.setParameter = function(arg, data, passFlags) {\n    if (passFlags === undefined) {\n      passFlags = -524285;\n    }\n    var name;\n    if (data === undefined && typeof arg === \"object\") {\n      var uniformObject = arg;\n      if (uniformObject.length) {\n        for (var i = 0; i < uniformObject.length; i++) {\n          this.setParameter(uniformObject[i]);\n        }\n        return;\n      } else {\n        name = uniformObject.name;\n        data = uniformObject.value;\n      }\n    } else {\n      name = arg;\n    }\n    var param = this.parameters[name];\n    if (param) {\n      param.data = data;\n      param.passFlags = passFlags;\n    } else {\n      this.parameters[name] = {scopeId:null, data:data, passFlags:passFlags};\n    }\n  };\n  Material.prototype.deleteParameter = function(name) {\n    if (this.parameters[name]) {\n      delete this.parameters[name];\n    }\n  };\n  Material.prototype.setParameters = function() {\n    for (var paramName in this.parameters) {\n      var parameter = this.parameters[paramName];\n      parameter.scopeId.setValue(parameter.data);\n    }\n  };\n  Material.prototype.update = function() {\n    throw Error(\"Not Implemented in base class\");\n  };\n  Material.prototype.init = function(data) {\n    throw Error(\"Not Implemented in base class\");\n  };\n  Material.prototype.getName = function() {\n    return this.name;\n  };\n  Material.prototype.setName = function(name) {\n    this.name = name;\n  };\n  Material.prototype.getShader = function() {\n    return this.shader;\n  };\n  Material.prototype.setShader = function(shader) {\n    if (this._shader) {\n      this._shader._refCount--;\n    }\n    this._shader = shader;\n    if (shader) {\n      shader._refCount++;\n    }\n  };\n  Material.prototype.destroy = function() {\n    if (this.shader) {\n      this.shader._refCount--;\n      if (this.shader._refCount < 1) {\n        this.shader.destroy();\n      }\n    }\n    var variant;\n    for (var s in this.variants) {\n      if (this.variants.hasOwnProperty(s)) {\n        variant = this.variants[s];\n        if (variant === this.shader) {\n          continue;\n        }\n        variant._refCount--;\n        if (variant._refCount < 1) {\n          variant.destroy();\n        }\n      }\n    }\n    this.variants = {};\n    this.shader = null;\n    var meshInstance, j;\n    for (var i = 0; i < this.meshInstances.length; i++) {\n      meshInstance = this.meshInstances[i];\n      for (j = 0; j < meshInstance._shader.length; j++) {\n        meshInstance._shader[j] = null;\n      }\n      meshInstance._material = null;\n      if (this !== pc.Scene.defaultMaterial) {\n        meshInstance.material = pc.Scene.defaultMaterial;\n      }\n    }\n  };\n  return {Material:Material};\n}());\npc.extend(pc, function() {\n  var BasicMaterial = function() {\n    this.color = new pc.Color(1, 1, 1, 1);\n    this.colorMap = null;\n    this.vertexColors = false;\n    this.update();\n  };\n  BasicMaterial = pc.inherits(BasicMaterial, pc.Material);\n  pc.extend(BasicMaterial.prototype, {clone:function() {\n    var clone = new pc.BasicMaterial;\n    pc.Material.prototype._cloneInternal.call(this, clone);\n    clone.color.copy(this.color);\n    clone.colorMap = this.colorMap;\n    clone.vertexColors = this.vertexColors;\n    clone.update();\n    return clone;\n  }, update:function() {\n    this.clearParameters();\n    this.setParameter(\"uColor\", this.color.data);\n    if (this.colorMap) {\n      this.setParameter(\"texture_diffuseMap\", this.colorMap);\n    }\n  }, updateShader:function(device, scene, objDefs, staticLightList, pass, sortedLights) {\n    var options = {skin:!!this.meshInstances[0].skinInstance, vertexColors:this.vertexColors, diffuseMap:this.colorMap, pass:pass};\n    var library = device.getProgramLibrary();\n    this.shader = library.getProgram(\"basic\", options);\n  }});\n  return {BasicMaterial:BasicMaterial};\n}());\npc.extend(pc, function() {\n  var DepthMaterial = function() {\n  };\n  DepthMaterial = pc.inherits(DepthMaterial, pc.Material);\n  pc.extend(DepthMaterial.prototype, {clone:function() {\n    var clone = new pc.DepthMaterial;\n    pc.Material.prototype._cloneInternal.call(this, clone);\n    clone.update();\n    return clone;\n  }, update:function() {\n  }, updateShader:function(device) {\n    var options = {skin:!!this.meshInstances[0].skinInstance};\n    var library = device.getProgramLibrary();\n    this.shader = library.getProgram(\"depth\", options);\n  }});\n  return {DepthMaterial:DepthMaterial};\n}());\npc.extend(pc, function() {\n  var StandardMaterial = function() {\n    this.reset();\n    this.update();\n  };\n  var _createTexture = function(param) {\n    if (param.data) {\n      if (param.data instanceof pc.Texture) {\n        return param.data;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  var _createCubemap = function(param) {\n    if (param.data) {\n      if (param.data instanceof pc.Texture) {\n        return param.data;\n      }\n    }\n    return null;\n  };\n  var _createVec2 = function(param) {\n    return new pc.Vec2(param.data[0], param.data[1]);\n  };\n  var _createBoundingBox = function(param) {\n    var center, halfExtents;\n    if (param.data && param.data.center) {\n      center = new pc.Vec3(param.data.center[0], param.data.center[1], param.data.center[2]);\n    } else {\n      center = new pc.Vec3(0, 0, 0);\n    }\n    if (param.data && param.data.halfExtents) {\n      halfExtents = new pc.Vec3(param.data.halfExtents[0], param.data.halfExtents[1], param.data.halfExtents[2]);\n    } else {\n      halfExtents = new pc.Vec3(0.5, 0.5, 0.5);\n    }\n    return new pc.BoundingBox(center, halfExtents);\n  };\n  var _createRgb = function(param) {\n    return new pc.Color(param.data[0], param.data[1], param.data[2]);\n  };\n  var _propsSerial = [];\n  var _propsSerialDefaultVal = [];\n  var _propsInternalNull = [];\n  var _propsInternalVec3 = [];\n  var _prop2Uniform = {};\n  var _defineTex2D = function(obj, name, uv, channels, defChannel) {\n    var privMap = \"_\" + name + \"Map\";\n    var privMapTiling = privMap + \"Tiling\";\n    var privMapOffset = privMap + \"Offset\";\n    var mapTransform = privMap.substring(1) + \"Transform\";\n    var privMapUv = privMap + \"Uv\";\n    var privMapChannel = privMap + \"Channel\";\n    var privMapVertexColor = \"_\" + name + \"VertexColor\";\n    var privMapVertexColorChannel = \"_\" + name + \"VertexColorChannel\";\n    obj[privMap] = null;\n    obj[privMapTiling] = new pc.Vec2(1, 1);\n    obj[privMapOffset] = new pc.Vec2(0, 0);\n    obj[mapTransform] = null;\n    obj[privMapUv] = uv;\n    if (channels > 0) {\n      var channel = defChannel ? defChannel : channels > 1 ? \"rgb\" : \"g\";\n      obj[privMapChannel] = channel;\n      obj[privMapVertexColorChannel] = channel;\n    }\n    obj[privMapVertexColor] = false;\n    if (!pc._matTex2D) {\n      pc._matTex2D = [];\n    }\n    pc._matTex2D[name] = channels;\n    Object.defineProperty(StandardMaterial.prototype, privMap.substring(1), {get:function() {\n      return this[privMap];\n    }, set:function(value) {\n      var oldVal = this[privMap];\n      if (!!oldVal ^ !!value) {\n        this.dirtyShader = true;\n      }\n      if (oldVal && value) {\n        if (oldVal.rgbm !== value.rgbm || oldVal.fixCubemapSeams !== value.fixCubemapSeams || oldVal.format !== value.format) {\n          this.dirtyShader = true;\n        }\n      }\n      this[privMap] = value;\n    }});\n    var mapTiling = privMapTiling.substring(1);\n    var mapOffset = privMapOffset.substring(1);\n    Object.defineProperty(StandardMaterial.prototype, mapTiling, {get:function() {\n      return this[privMapTiling];\n    }, set:function(value) {\n      this.dirtyShader = true;\n      this[privMapTiling] = value;\n    }});\n    _prop2Uniform[mapTiling] = function(mat, val, changeMat) {\n      var tform = mat._updateMapTransform(changeMat ? mat[mapTransform] : null, val, mat[privMapOffset]);\n      return {name:\"texture_\" + mapTransform, value:tform.data};\n    };\n    Object.defineProperty(StandardMaterial.prototype, mapOffset, {get:function() {\n      return this[privMapOffset];\n    }, set:function(value) {\n      this.dirtyShader = true;\n      this[privMapOffset] = value;\n    }});\n    _prop2Uniform[mapOffset] = function(mat, val, changeMat) {\n      var tform = mat._updateMapTransform(changeMat ? mat[mapTransform] : null, mat[privMapTiling], val);\n      return {name:\"texture_\" + mapTransform, value:tform.data};\n    };\n    Object.defineProperty(StandardMaterial.prototype, privMapUv.substring(1), {get:function() {\n      return this[privMapUv];\n    }, set:function(value) {\n      if (this[privMapUv] !== value) {\n        this.dirtyShader = true;\n      }\n      this[privMapUv] = value;\n    }});\n    Object.defineProperty(StandardMaterial.prototype, privMapChannel.substring(1), {get:function() {\n      return this[privMapChannel];\n    }, set:function(value) {\n      if (this[privMapChannel] !== value) {\n        this.dirtyShader = true;\n      }\n      this[privMapChannel] = value;\n    }});\n    Object.defineProperty(StandardMaterial.prototype, privMapVertexColor.substring(1), {get:function() {\n      return this[privMapVertexColor];\n    }, set:function(value) {\n      this.dirtyShader = true;\n      this[privMapVertexColor] = value;\n    }});\n    Object.defineProperty(StandardMaterial.prototype, privMapVertexColorChannel.substring(1), {get:function() {\n      return this[privMapVertexColorChannel];\n    }, set:function(value) {\n      if (this[privMapVertexColorChannel] !== value) {\n        this.dirtyShader = true;\n      }\n      this[privMapVertexColorChannel] = value;\n    }});\n    _propsSerial.push(privMap.substring(1));\n    _propsSerial.push(privMapTiling.substring(1));\n    _propsSerial.push(privMapOffset.substring(1));\n    _propsSerial.push(privMapUv.substring(1));\n    _propsSerial.push(privMapChannel.substring(1));\n    _propsSerial.push(privMapVertexColor.substring(1));\n    _propsSerial.push(privMapVertexColorChannel.substring(1));\n    _propsInternalNull.push(mapTransform);\n  };\n  var _propsColor = [];\n  var _defineColor = function(obj, name, defaultValue, hasMultiplier) {\n    var priv = \"_\" + name;\n    var uform = name + \"Uniform\";\n    var mult = name + \"Intensity\";\n    var pmult = \"_\" + mult;\n    obj[priv] = defaultValue;\n    obj[uform] = new Float32Array(3);\n    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {\n      this.dirtyColor = true;\n      this.dirtyShader = true;\n      return this[priv];\n    }, set:function(value) {\n      var oldVal = this[priv];\n      var wasBw = oldVal.data[0] === 0 && oldVal.data[1] === 0 && oldVal.data[2] === 0 || oldVal.data[0] === 1 && oldVal.data[1] === 1 && oldVal.data[2] === 1;\n      var isBw = value.data[0] === 0 && value.data[1] === 0 && value.data[2] === 0 || value.data[0] === 1 && value.data[1] === 1 && value.data[2] === 1;\n      if (wasBw ^ isBw) {\n        this.dirtyShader = true;\n      }\n      this.dirtyColor = true;\n      this[priv] = value;\n    }});\n    _propsSerial.push(name);\n    _propsInternalVec3.push(uform);\n    _propsColor.push(name);\n    _prop2Uniform[name] = function(mat, val, changeMat) {\n      var arr = changeMat ? mat[uform] : new Float32Array(3);\n      var gammaCorrection = false;\n      if (mat.useGammaTonemap) {\n        var scene = mat._scene || pc.Application.getApplication().scene;\n        gammaCorrection = scene.gammaCorrection;\n      }\n      for (var c = 0; c < 3; c++) {\n        if (gammaCorrection) {\n          arr[c] = Math.pow(val.data[c], 2.2);\n        } else {\n          arr[c] = val.data[c];\n        }\n        if (hasMultiplier) {\n          arr[c] *= mat[pmult];\n        }\n      }\n      return {name:\"material_\" + name, value:arr};\n    };\n    if (hasMultiplier) {\n      obj[pmult] = 1;\n      Object.defineProperty(StandardMaterial.prototype, mult, {get:function() {\n        return this[pmult];\n      }, set:function(value) {\n        var oldVal = this[pmult];\n        var wasBw = oldVal === 0 || oldVal === 1;\n        var isBw = value === 0 || value === 1;\n        if (wasBw ^ isBw) {\n          this.dirtyShader = true;\n        }\n        this.dirtyColor = true;\n        this[pmult] = value;\n      }});\n      _propsSerial.push(mult);\n      _prop2Uniform[mult] = function(mat, val, changeMat) {\n        var arr = changeMat ? mat[uform] : new Float32Array(3);\n        var gammaCorrection = false;\n        if (mat.useGammaTonemap) {\n          var scene = mat._scene || pc.Application.getApplication().scene;\n          gammaCorrection = scene.gammaCorrection;\n        }\n        for (var c = 0; c < 3; c++) {\n          if (gammaCorrection) {\n            arr[c] = Math.pow(mat[priv].data[c], 2.2);\n          } else {\n            arr[c] = mat[priv].data[c];\n          }\n          arr[c] *= mat[pmult];\n        }\n        return {name:\"material_\" + name, value:arr};\n      };\n    }\n  };\n  var _defineFloat = function(obj, name, defaultValue, func) {\n    var priv = \"_\" + name;\n    obj[priv] = defaultValue;\n    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {\n      return this[priv];\n    }, set:function(value) {\n      var oldVal = this[priv];\n      var wasBw = oldVal === 0 || oldVal === 1;\n      var isBw = value === 0 || value === 1;\n      if (wasBw ^ isBw) {\n        this.dirtyShader = true;\n      }\n      this[priv] = value;\n    }});\n    _propsSerial.push(name);\n    _prop2Uniform[name] = func !== undefined ? func : function(mat, val, changeMat) {\n      return {name:\"material_\" + name, value:val};\n    };\n  };\n  var _defineObject = function(obj, name, func) {\n    var priv = \"_\" + name;\n    obj[priv] = null;\n    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {\n      return this[priv];\n    }, set:function(value) {\n      var oldVal = this[priv];\n      if (!!oldVal ^ !!value) {\n        this.dirtyShader = true;\n      }\n      this[priv] = value;\n    }});\n    _propsSerial.push(name);\n    _prop2Uniform[name] = func;\n  };\n  var _defineAlias = function(obj, newName, oldName) {\n    Object.defineProperty(StandardMaterial.prototype, oldName, {get:function() {\n      return this[newName];\n    }, set:function(value) {\n      this[newName] = value;\n    }});\n  };\n  var _defineChunks = function(obj) {\n    this._chunks = null;\n    Object.defineProperty(StandardMaterial.prototype, \"chunks\", {get:function() {\n      this.dirtyShader = true;\n      return this._chunks;\n    }, set:function(value) {\n      this.dirtyShader = true;\n      this._chunks = value;\n    }});\n    _propsSerial.push(\"chunks\");\n  };\n  var _defineFlag = function(obj, name, defaultValue) {\n    var priv = \"_\" + name;\n    obj[priv] = defaultValue;\n    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {\n      return this[priv];\n    }, set:function(value) {\n      if (this[priv] !== value) {\n        this.dirtyShader = true;\n      }\n      this[priv] = value;\n    }});\n    _propsSerial.push(name);\n  };\n  var Chunks = function() {\n  };\n  Chunks.prototype.copy = function(from) {\n    for (var p in from) {\n      if (from.hasOwnProperty(p) && p !== \"copy\") {\n        this[p] = from[p];\n      }\n    }\n  };\n  StandardMaterial = pc.inherits(StandardMaterial, pc.Material);\n  pc.extend(StandardMaterial.prototype, {reset:function() {\n    this.blendType = pc.BLEND_NONE;\n    var i;\n    for (i = 0; i < _propsSerial.length; i++) {\n      var defVal = _propsSerialDefaultVal[i];\n      this[_propsSerial[i]] = defVal ? defVal.clone ? defVal.clone() : defVal : defVal;\n    }\n    for (i = 0; i < _propsInternalNull.length; i++) {\n      this[_propsInternalNull[i]] = null;\n    }\n    for (i = 0; i < _propsInternalVec3.length; i++) {\n      this[_propsInternalVec3[i]] = new Float32Array(3);\n    }\n    this._chunks = new Chunks;\n    this.cubeMapMinUniform = new Float32Array(3);\n    this.cubeMapMaxUniform = new Float32Array(3);\n  }, clone:function() {\n    var clone = new pc.StandardMaterial;\n    pc.Material.prototype._cloneInternal.call(this, clone);\n    var pname;\n    for (var i = 0; i < _propsSerial.length; i++) {\n      pname = _propsSerial[i];\n      if (this[pname] !== undefined) {\n        if (this[pname] && this[pname].copy) {\n          if (clone[pname]) {\n            clone[pname].copy(this[pname]);\n          } else {\n            clone[pname] = this[pname].clone();\n          }\n        } else {\n          clone[pname] = this[pname];\n        }\n      }\n    }\n    if (!clone.shader) {\n      clone.update();\n    }\n    return clone;\n  }, init:function(data) {\n    this.reset();\n    this.name = data.name;\n    if (data.chunks) {\n      this.chunks.copy(data.chunks);\n    }\n    for (var i = 0; i < data.parameters.length; i++) {\n      var param = data.parameters[i];\n      if (param.type === \"vec3\") {\n        this[param.name] = _createRgb(param);\n      } else {\n        if (param.type === \"vec2\") {\n          this[param.name] = _createVec2(param);\n        } else {\n          if (param.type === \"texture\") {\n            this[param.name] = _createTexture(param);\n          } else {\n            if (param.type === \"cubemap\") {\n              this[param.name] = _createCubemap(param);\n            } else {\n              if (param.name === \"bumpMapFactor\") {\n                this.bumpiness = param.data;\n              } else {\n                if (param.type === \"boundingbox\") {\n                  this[param.name] = _createBoundingBox(param);\n                } else {\n                  this[param.name] = param.data;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    this.update();\n  }, _updateMapTransform:function(transform, tiling, offset) {\n    transform = transform || new pc.Vec4;\n    transform.set(tiling.x, tiling.y, offset.x, offset.y);\n    if (transform.x === 1 && transform.y === 1 && transform.z === 0 && transform.w === 0) {\n      return null;\n    }\n    return transform;\n  }, _collectLights:function(lType, lights, lightsFiltered, mask, staticLightList) {\n    var light;\n    var i;\n    for (i = 0; i < lights.length; i++) {\n      light = lights[i];\n      if (light._enabled) {\n        if (light._mask & mask) {\n          if (lType !== pc.LIGHTTYPE_DIRECTIONAL) {\n            if (light.isStatic) {\n              continue;\n            }\n          }\n          lightsFiltered.push(light);\n        }\n      }\n    }\n    if (staticLightList) {\n      for (i = 0; i < staticLightList.length; i++) {\n        light = staticLightList[i];\n        if (light._type === lType) {\n          lightsFiltered.push(light);\n        }\n      }\n    }\n  }, _setParameter:function(name, value) {\n    this.setParameter(name, value);\n    this._propsSet.push(name);\n  }, _clearParameters:function() {\n    var props = this._propsSet;\n    for (var i = 0; i < props.length; i++) {\n      delete this.parameters[props[i]];\n    }\n    this._propsSet = [];\n  }, _updateMap:function(p) {\n    var mname = p + \"Map\";\n    if (this[mname]) {\n      this._setParameter(\"texture_\" + mname, this[mname]);\n      var tname = mname + \"Transform\";\n      this[tname] = this._updateMapTransform(this[tname], this[mname + \"Tiling\"], this[mname + \"Offset\"]);\n      if (this[tname]) {\n        this._setParameter(\"texture_\" + tname, this[tname].data);\n      }\n    }\n  }, getUniform:function(varName, value, changeMat) {\n    var func = _prop2Uniform[varName];\n    if (func) {\n      return func(this, value, changeMat);\n    }\n    return null;\n  }, update:function() {\n    this._clearParameters();\n    this._setParameter(\"material_ambient\", this.ambientUniform);\n    if (!this.diffuseMap || this.diffuseTint) {\n      this._setParameter(\"material_diffuse\", this.diffuseUniform);\n    }\n    if (!this.useMetalness) {\n      if (!this.specularMap || this.specularTint) {\n        this._setParameter(\"material_specular\", this.specularUniform);\n      }\n    } else {\n      if (!this.metalnessMap || this.metalness < 1) {\n        this._setParameter(\"material_metalness\", this.metalness);\n      }\n    }\n    this._setParameter(this.getUniform(\"shininess\", this.shininess, true));\n    if (!this.emissiveMap || this.emissiveTint) {\n      this._setParameter(\"material_emissive\", this.emissiveUniform);\n    }\n    if (this.emissiveMap) {\n      this._setParameter(\"material_emissiveIntensity\", this.emissiveIntensity);\n    }\n    if (this.refraction > 0) {\n      this._setParameter(\"material_refraction\", this.refraction);\n      this._setParameter(\"material_refractionIndex\", this.refractionIndex);\n    }\n    this._setParameter(\"material_opacity\", this.opacity);\n    if (this.occludeSpecular) {\n      this._setParameter(\"material_occludeSpecularIntensity\", this.occludeSpecularIntensity);\n    }\n    if (this.cubeMapProjection === pc.CUBEPROJ_BOX) {\n      this._setParameter(this.getUniform(\"cubeMapProjectionBox\", this.cubeMapProjectionBox, true));\n    }\n    for (var p in pc._matTex2D) {\n      this._updateMap(p);\n    }\n    if (this.ambientSH) {\n      this._setParameter(\"ambientSH[0]\", this.ambientSH);\n    }\n    if (this.normalMap) {\n      this._setParameter(\"material_bumpiness\", this.bumpiness);\n    }\n    if (this.heightMap) {\n      this._setParameter(this.getUniform(\"heightMapFactor\", this.heightMapFactor, true));\n    }\n    if (this.cubeMap) {\n      this._setParameter(\"texture_cubeMap\", this.cubeMap);\n    }\n    if (this.prefilteredCubeMap128) {\n      this._setParameter(\"texture_prefilteredCubeMap128\", this.prefilteredCubeMap128);\n    } else {\n      if (this._scene && this._scene._skyboxPrefiltered[0]) {\n        this._setParameter(\"texture_prefilteredCubeMap128\", this._scene._skyboxPrefiltered[0]);\n      }\n    }\n    if (this.prefilteredCubeMap64) {\n      this._setParameter(\"texture_prefilteredCubeMap64\", this.prefilteredCubeMap64);\n    } else {\n      if (this._scene && this._scene._skyboxPrefiltered[1]) {\n        this._setParameter(\"texture_prefilteredCubeMap64\", this._scene._skyboxPrefiltered[1]);\n      }\n    }\n    if (this.prefilteredCubeMap32) {\n      this._setParameter(\"texture_prefilteredCubeMap32\", this.prefilteredCubeMap32);\n    } else {\n      if (this._scene && this._scene._skyboxPrefiltered[2]) {\n        this._setParameter(\"texture_prefilteredCubeMap32\", this._scene._skyboxPrefiltered[2]);\n      }\n    }\n    if (this.prefilteredCubeMap16) {\n      this._setParameter(\"texture_prefilteredCubeMap16\", this.prefilteredCubeMap16);\n    } else {\n      if (this._scene && this._scene._skyboxPrefiltered[3]) {\n        this._setParameter(\"texture_prefilteredCubeMap16\", this._scene._skyboxPrefiltered[3]);\n      }\n    }\n    if (this.prefilteredCubeMap8) {\n      this._setParameter(\"texture_prefilteredCubeMap8\", this.prefilteredCubeMap8);\n    } else {\n      if (this._scene && this._scene._skyboxPrefiltered[4]) {\n        this._setParameter(\"texture_prefilteredCubeMap8\", this._scene._skyboxPrefiltered[4]);\n      }\n    }\n    if (this.prefilteredCubeMap4) {\n      this._setParameter(\"texture_prefilteredCubeMap4\", this.prefilteredCubeMap4);\n    } else {\n      if (this._scene && this._scene._skyboxPrefiltered[5]) {\n        this._setParameter(\"texture_prefilteredCubeMap4\", this._scene._skyboxPrefiltered[5]);\n      }\n    }\n    if (this.sphereMap) {\n      this._setParameter(\"texture_sphereMap\", this.sphereMap);\n    }\n    if (this.dpAtlas) {\n      this._setParameter(\"texture_sphereMap\", this.dpAtlas);\n    }\n    this._setParameter(\"material_reflectivity\", this.reflectivity);\n    if (this.dirtyShader || !this._scene) {\n      this.shader = null;\n      this.clearVariants();\n    }\n    this._processColor();\n  }, _processColor:function() {\n    var c, i;\n    if (!this.dirtyColor) {\n      return;\n    }\n    if (!this._scene && this.useGammaTonemap) {\n      return;\n    }\n    var gammaCorrection = false;\n    if (this.useGammaTonemap) {\n      gammaCorrection = this._scene.gammaCorrection;\n    }\n    for (i = 0; i < _propsColor.length; i++) {\n      var clr = this[\"_\" + _propsColor[i]];\n      var arr = this[_propsColor[i] + \"Uniform\"];\n      for (c = 0; c < 3; c++) {\n        if (gammaCorrection) {\n          arr[c] = Math.pow(clr.data[c], 2.2);\n        } else {\n          arr[c] = clr.data[c];\n        }\n      }\n    }\n    for (c = 0; c < 3; c++) {\n      this.emissiveUniform[c] *= this.emissiveIntensity;\n    }\n    this.dirtyColor = false;\n  }, _getMapTransformID:function(xform, uv) {\n    if (!xform) {\n      return 0;\n    }\n    if (!this._mapXForms[uv]) {\n      this._mapXForms[uv] = [];\n    }\n    var i, j, same;\n    for (i = 0; i < this._mapXForms[uv].length; i++) {\n      same = true;\n      for (j = 0; j < xform.data.length; j++) {\n        if (this._mapXForms[uv][i][j] != xform.data[j]) {\n          same = false;\n          break;\n        }\n      }\n      if (same) {\n        return i + 1;\n      }\n    }\n    var newID = this._mapXForms[uv].length;\n    this._mapXForms[uv][newID] = [];\n    for (j = 0; j < xform.data.length; j++) {\n      this._mapXForms[uv][newID][j] = xform.data[j];\n    }\n    return newID + 1;\n  }, updateShader:function(device, scene, objDefs, staticLightList, pass, sortedLights) {\n    if (!this._colorProcessed && this._scene) {\n      this._colorProcessed = true;\n      this._processColor();\n    }\n    this._mapXForms = [];\n    var useTexCubeLod = device.useTexCubeLod;\n    var useDp = !device.extTextureLod;\n    var globalSky128, globalSky64, globalSky32, globalSky16, globalSky8, globalSky4;\n    if (this.useSkybox) {\n      globalSky128 = scene._skyboxPrefiltered[0];\n      globalSky64 = scene._skyboxPrefiltered[1];\n      globalSky32 = scene._skyboxPrefiltered[2];\n      globalSky16 = scene._skyboxPrefiltered[3];\n      globalSky8 = scene._skyboxPrefiltered[4];\n      globalSky4 = scene._skyboxPrefiltered[5];\n    }\n    var prefilteredCubeMap128 = this.prefilteredCubeMap128 || globalSky128;\n    var prefilteredCubeMap64 = this.prefilteredCubeMap64 || globalSky64;\n    var prefilteredCubeMap32 = this.prefilteredCubeMap32 || globalSky32;\n    var prefilteredCubeMap16 = this.prefilteredCubeMap16 || globalSky16;\n    var prefilteredCubeMap8 = this.prefilteredCubeMap8 || globalSky8;\n    var prefilteredCubeMap4 = this.prefilteredCubeMap4 || globalSky4;\n    if (prefilteredCubeMap128) {\n      var allMips = prefilteredCubeMap128 && prefilteredCubeMap64 && prefilteredCubeMap32 && prefilteredCubeMap16 && prefilteredCubeMap8 && prefilteredCubeMap4;\n      if (useDp && allMips) {\n        if (!prefilteredCubeMap128.dpAtlas) {\n          prefilteredCubeMap128.dpAtlas = pc.generateDpAtlas(device, [prefilteredCubeMap128, prefilteredCubeMap64, prefilteredCubeMap32, prefilteredCubeMap16, prefilteredCubeMap8, prefilteredCubeMap4]);\n          prefilteredCubeMap128.sh = pc.shFromCubemap(prefilteredCubeMap16);\n        }\n        this.dpAtlas = prefilteredCubeMap128.dpAtlas;\n        this.ambientSH = prefilteredCubeMap128.sh;\n        this._setParameter(\"ambientSH[0]\", this.ambientSH);\n        this._setParameter(\"texture_sphereMap\", this.dpAtlas);\n      } else {\n        if (useTexCubeLod) {\n          if (prefilteredCubeMap128._levels.length < 6) {\n            if (allMips) {\n              this._setParameter(\"texture_prefilteredCubeMap128\", prefilteredCubeMap128);\n            } else {\n              console.log(\"Can't use prefiltered cubemap: \" + allMips + \", \" + useTexCubeLod + \", \" + prefilteredCubeMap128._levels);\n            }\n          } else {\n            this._setParameter(\"texture_prefilteredCubeMap128\", prefilteredCubeMap128);\n          }\n        } else {\n          if (allMips) {\n            this._setParameter(\"texture_prefilteredCubeMap128\", prefilteredCubeMap128);\n            this._setParameter(\"texture_prefilteredCubeMap64\", prefilteredCubeMap64);\n            this._setParameter(\"texture_prefilteredCubeMap32\", prefilteredCubeMap32);\n            this._setParameter(\"texture_prefilteredCubeMap16\", prefilteredCubeMap16);\n            this._setParameter(\"texture_prefilteredCubeMap8\", prefilteredCubeMap8);\n            this._setParameter(\"texture_prefilteredCubeMap4\", prefilteredCubeMap4);\n          } else {\n            console.log(\"Can't use prefiltered cubemap: \" + allMips + \", \" + useTexCubeLod + \", \" + prefilteredCubeMap128._levels);\n          }\n        }\n      }\n    }\n    var diffuseTint = (this.diffuse.data[0] !== 1 || this.diffuse.data[1] !== 1 || this.diffuse.data[2] !== 1) && (this.diffuseTint || !this.diffuseMap && !this.diffuseVertexColor) ? 3 : 0;\n    var specularTint = false;\n    var useSpecular = (this.useMetalness ? true : !!this.specularMap) || !!this.sphereMap || !!this.cubeMap || !!this.dpAtlas;\n    useSpecular = useSpecular || (this.useMetalness ? true : !(this.specular.data[0] === 0 && this.specular.data[1] === 0 && this.specular.data[2] === 0));\n    if (useSpecular) {\n      if ((this.specularTint || !this.specularMap && !this.specularVertexColor) && !this.useMetalness) {\n        specularTint = this.specular.data[0] !== 1 || this.specular.data[1] !== 1 || this.specular.data[2] !== 1;\n      }\n    }\n    var rgbmAmbient = (prefilteredCubeMap128 ? prefilteredCubeMap128.rgbm : false) || (this.cubeMap ? this.cubeMap.rgbm : false) || (this.dpAtlas ? this.dpAtlas.rgbm : false);\n    var hdrAmbient = (prefilteredCubeMap128 ? prefilteredCubeMap128.rgbm || prefilteredCubeMap128.format === pc.PIXELFORMAT_RGBA32F : false) || (this.cubeMap ? this.cubeMap.rgbm || this.cubeMap.format === pc.PIXELFORMAT_RGBA32F : false) || (this.dpAtlas ? this.dpAtlas.rgbm || this.dpAtlas.format === pc.PIXELFORMAT_RGBA32F : false);\n    var rgbmReflection = (prefilteredCubeMap128 && !this.cubeMap && !this.sphereMap && !this.dpAtlas ? prefilteredCubeMap128.rgbm : false) || (this.cubeMap ? this.cubeMap.rgbm : false) || (this.sphereMap ? this.sphereMap.rgbm : false) || (this.dpAtlas ? this.dpAtlas.rgbm : false);\n    var hdrReflection = (prefilteredCubeMap128 && !this.cubeMap && !this.sphereMap && !this.dpAtlas ? prefilteredCubeMap128.rgbm || prefilteredCubeMap128.format === pc.PIXELFORMAT_RGBA32F : false) || (this.cubeMap ? this.cubeMap.rgbm || this.cubeMap.format === pc.PIXELFORMAT_RGBA32F : false) || (this.sphereMap ? this.sphereMap.rgbm || this.sphereMap.format === pc.PIXELFORMAT_RGBA32F : false) || (this.dpAtlas ? this.dpAtlas.rgbm || this.dpAtlas.format === pc.PIXELFORMAT_RGBA32F : false);\n    var emissiveTint = this.emissiveMap ? 0 : 3;\n    if (!emissiveTint) {\n      emissiveTint = (this.emissive.data[0] !== 1 || this.emissive.data[1] !== 1 || this.emissive.data[2] !== 1 || this.emissiveIntensity !== 1) && this.emissiveTint;\n      emissiveTint = emissiveTint ? 3 : this.emissiveIntensity !== 1 ? 1 : 0;\n    }\n    var options;\n    var minimalOptions = pass > pc.SHADER_FORWARDHDR && pass <= pc.SHADER_PICK;\n    if (minimalOptions) {\n      options = {opacityTint:this.opacity !== 1 && this.blendType !== pc.BLEND_NONE, alphaTest:this.alphaTest > 0, forceFragmentPrecision:this.forceFragmentPrecision, chunks:this.chunks, blendType:this.blendType, forceUv1:this.forceUv1, pass:pass};\n    } else {\n      options = {fog:this.useFog ? scene.fog : \"none\", gamma:this.useGammaTonemap ? scene.gammaCorrection : pc.GAMMA_NONE, toneMap:this.useGammaTonemap ? scene.toneMapping : -1, blendMapsWithColors:true, ambientTint:this.ambientTint, diffuseTint:diffuseTint, specularTint:specularTint ? 3 : 0, metalnessTint:this.useMetalness && this.metalness < 1 ? 1 : 0, glossTint:1, emissiveTint:emissiveTint, opacityTint:this.opacity !== 1 && this.blendType !== pc.BLEND_NONE ? 1 : 0, alphaTest:this.alphaTest > 0, \n      alphaToCoverage:this.alphaToCoverage, needsNormalFloat:this.normalizeNormalMap, sphereMap:!!this.sphereMap, cubeMap:!!this.cubeMap, dpAtlas:!!this.dpAtlas, ambientSH:!!this.ambientSH, useSpecular:useSpecular, rgbmAmbient:rgbmAmbient, rgbmReflection:rgbmReflection, hdrAmbient:hdrAmbient, hdrReflection:hdrReflection, fixSeams:prefilteredCubeMap128 ? prefilteredCubeMap128.fixCubemapSeams : this.cubeMap ? this.cubeMap.fixCubemapSeams : false, prefilteredCubemap:!!prefilteredCubeMap128, emissiveFormat:this.emissiveMap ? \n      this.emissiveMap.rgbm ? 1 : this.emissiveMap.format === pc.PIXELFORMAT_RGBA32F ? 2 : 0 : null, lightMapFormat:this.lightMap ? this.lightMap.rgbm ? 1 : this.lightMap.format === pc.PIXELFORMAT_RGBA32F ? 2 : 0 : null, useRgbm:rgbmReflection || rgbmAmbient || (this.emissiveMap ? this.emissiveMap.rgbm : 0) || (this.lightMap ? this.lightMap.rgbm : 0), specularAntialias:this.specularAntialias, conserveEnergy:this.conserveEnergy, occludeSpecular:this.occludeSpecular, occludeSpecularFloat:this.occludeSpecularIntensity !== \n      1.0, occludeDirect:this.occludeDirect, shadingModel:this.shadingModel, fresnelModel:this.fresnelModel, packedNormal:this.normalMap ? this.normalMap.format === pc.PIXELFORMAT_DXT5 : false, forceFragmentPrecision:this.forceFragmentPrecision, fastTbn:this.fastTbn, cubeMapProjection:this.cubeMapProjection, chunks:this.chunks, customFragmentShader:this.customFragmentShader, refraction:!!this.refraction, useMetalness:this.useMetalness, blendType:this.blendType, skyboxIntensity:prefilteredCubeMap128 === \n      globalSky128 && prefilteredCubeMap128 && scene.skyboxIntensity !== 1, forceUv1:this.forceUv1, useTexCubeLod:useTexCubeLod, msdf:!!this.msdfMap, twoSidedLighting:this.twoSidedLighting, pixelSnap:this.pixelSnap, pass:pass};\n      if (pass === pc.SHADER_FORWARDHDR) {\n        if (options.gamma) {\n          options.gamma = pc.GAMMA_SRGBHDR;\n        }\n        options.toneMap = pc.TONEMAP_LINEAR;\n      }\n    }\n    var hasUv0 = false;\n    var hasUv1 = false;\n    var hasVcolor = false;\n    if (objDefs) {\n      if (!minimalOptions) {\n        options.noShadow = (objDefs & pc.SHADERDEF_NOSHADOW) !== 0;\n        if ((objDefs & pc.SHADERDEF_LM) !== 0) {\n          options.lightMapFormat = 1;\n          options.lightMap = true;\n          options.lightMapChannel = \"rgb\";\n          options.lightMapUv = 1;\n          options.lightMapTransform = 0;\n          options.lightMapWithoutAmbient = !this.lightMap;\n          options.useRgbm = true;\n          if ((objDefs & pc.SHADERDEF_DIRLM) !== 0) {\n            options.dirLightMap = true;\n          }\n        }\n      }\n      options.screenSpace = (objDefs & pc.SHADERDEF_SCREENSPACE) !== 0;\n      options.skin = (objDefs & pc.SHADERDEF_SKIN) !== 0;\n      options.useInstancing = (objDefs & pc.SHADERDEF_INSTANCING) !== 0;\n      hasUv0 = (objDefs & pc.SHADERDEF_UV0) !== 0;\n      hasUv1 = (objDefs & pc.SHADERDEF_UV1) !== 0;\n      hasVcolor = (objDefs & pc.SHADERDEF_VCOLOR) !== 0;\n    }\n    var isOpacity;\n    for (var p in pc._matTex2D) {\n      isOpacity = p === \"opacity\";\n      if (isOpacity && this.blendType === pc.BLEND_NONE && this.alphaTest === 0.0 && !this.alphaToCoverage) {\n        continue;\n      }\n      if (minimalOptions && !isOpacity) {\n        continue;\n      }\n      var cname;\n      var mname = p + \"Map\";\n      var vname = p + \"VertexColor\";\n      if (p !== \"height\" && this[vname]) {\n        if (hasVcolor) {\n          cname = p + \"VertexColorChannel\";\n          options[vname] = this[vname];\n          options[cname] = this[cname];\n          options.vertexColors = true;\n        }\n      }\n      if (this[mname]) {\n        var uname = mname + \"Uv\";\n        var allow = true;\n        if (this[uname] === 0 && !hasUv0) {\n          allow = false;\n        }\n        if (this[uname] === 1 && !hasUv1) {\n          allow = false;\n        }\n        if (allow) {\n          options[mname] = !!this[mname];\n          var tname = mname + \"Transform\";\n          cname = mname + \"Channel\";\n          options[tname] = this._getMapTransformID(this[tname], this[uname]);\n          options[cname] = this[cname];\n          options[uname] = this[uname];\n        }\n      }\n    }\n    this._mapXForms = null;\n    if (this.useLighting && !minimalOptions) {\n      var lightsFiltered = [];\n      var mask = objDefs ? objDefs >> 16 : 1;\n      if (sortedLights) {\n        this._collectLights(pc.LIGHTTYPE_DIRECTIONAL, sortedLights[pc.LIGHTTYPE_DIRECTIONAL], lightsFiltered, mask);\n        this._collectLights(pc.LIGHTTYPE_POINT, sortedLights[pc.LIGHTTYPE_POINT], lightsFiltered, mask, staticLightList);\n        this._collectLights(pc.LIGHTTYPE_SPOT, sortedLights[pc.LIGHTTYPE_SPOT], lightsFiltered, mask, staticLightList);\n      }\n      options.lights = lightsFiltered;\n    } else {\n      options.lights = [];\n    }\n    if (!minimalOptions) {\n      options.aoMapUv = options.aoMapUv || this.aoUvSet;\n      if (options.lights.length === 0) {\n        options.noShadow = false;\n      }\n    }\n    if (this.onUpdateShader) {\n      options = this.onUpdateShader(options);\n    }\n    var library = device.getProgramLibrary();\n    this.shader = library.getProgram(\"standard\", options);\n    if (!objDefs) {\n      this.clearVariants();\n      this.variants[0] = this.shader;\n    }\n    this.dirtyShader = false;\n  }});\n  var _defineMaterialProps = function(obj) {\n    obj.dirtyShader = true;\n    obj.dirtyColor = true;\n    obj._scene = null;\n    obj._colorProcessed = false;\n    _defineColor(obj, \"ambient\", new pc.Color(0.7, 0.7, 0.7));\n    _defineColor(obj, \"diffuse\", new pc.Color(1, 1, 1));\n    _defineColor(obj, \"specular\", new pc.Color(0, 0, 0));\n    _defineColor(obj, \"emissive\", new pc.Color(0, 0, 0), true);\n    _defineFloat(obj, \"shininess\", 25, function(mat, shininess) {\n      var value;\n      if (mat.shadingModel === pc.SPECULAR_PHONG) {\n        value = Math.pow(2, shininess * 0.01 * 11);\n      } else {\n        value = shininess * 0.01;\n      }\n      return {name:\"material_shininess\", value:value};\n    });\n    _defineFloat(obj, \"heightMapFactor\", 1, function(mat, height) {\n      return {name:\"material_heightMapFactor\", value:height * 0.025};\n    });\n    _defineFloat(obj, \"opacity\", 1);\n    _defineFloat(obj, \"alphaTest\", 0);\n    _defineFloat(obj, \"bumpiness\", 1);\n    _defineFloat(obj, \"reflectivity\", 1);\n    _defineFloat(obj, \"occludeSpecularIntensity\", 1);\n    _defineFloat(obj, \"refraction\", 0);\n    _defineFloat(obj, \"refractionIndex\", 1.0 / 1.5);\n    _defineFloat(obj, \"metalness\", 1);\n    _defineFloat(obj, \"aoUvSet\", 0, null);\n    _defineObject(obj, \"ambientSH\", function(mat, val, changeMat) {\n      return {name:\"ambientSH[0]\", value:val};\n    });\n    _defineObject(obj, \"cubeMapProjectionBox\", function(mat, val, changeMat) {\n      var bmin = changeMat ? mat.cubeMapMinUniform : new Float32Array(3);\n      var bmax = changeMat ? mat.cubeMapMaxUniform : new Float32Array(3);\n      bmin[0] = val.center.x - val.halfExtents.x;\n      bmin[1] = val.center.y - val.halfExtents.y;\n      bmin[2] = val.center.z - val.halfExtents.z;\n      bmax[0] = val.center.x + val.halfExtents.x;\n      bmax[1] = val.center.y + val.halfExtents.y;\n      bmax[2] = val.center.z + val.halfExtents.z;\n      return [{name:\"envBoxMin\", value:bmin}, {name:\"envBoxMax\", value:bmax}];\n    });\n    _defineChunks(obj);\n    _defineFlag(obj, \"ambientTint\", false);\n    _defineFlag(obj, \"diffuseTint\", false);\n    _defineFlag(obj, \"specularTint\", false);\n    _defineFlag(obj, \"emissiveTint\", false);\n    _defineFlag(obj, \"fastTbn\", false);\n    _defineFlag(obj, \"specularAntialias\", false);\n    _defineFlag(obj, \"useMetalness\", false);\n    _defineFlag(obj, \"occludeDirect\", false);\n    _defineFlag(obj, \"normalizeNormalMap\", true);\n    _defineFlag(obj, \"conserveEnergy\", true);\n    _defineFlag(obj, \"occludeSpecular\", pc.SPECOCC_AO);\n    _defineFlag(obj, \"shadingModel\", pc.SPECULAR_BLINN);\n    _defineFlag(obj, \"fresnelModel\", pc.FRESNEL_NONE);\n    _defineFlag(obj, \"cubeMapProjection\", pc.CUBEPROJ_NONE);\n    _defineFlag(obj, \"customFragmentShader\", null);\n    _defineFlag(obj, \"forceFragmentPrecision\", null);\n    _defineFlag(obj, \"useFog\", true);\n    _defineFlag(obj, \"useLighting\", true);\n    _defineFlag(obj, \"useGammaTonemap\", true);\n    _defineFlag(obj, \"useSkybox\", true);\n    _defineFlag(obj, \"forceUv1\", false);\n    _defineFlag(obj, \"pixelSnap\", false);\n    _defineFlag(obj, \"twoSidedLighting\", false);\n    _defineTex2D(obj, \"diffuse\", 0, 3);\n    _defineTex2D(obj, \"specular\", 0, 3);\n    _defineTex2D(obj, \"emissive\", 0, 3);\n    _defineTex2D(obj, \"normal\", 0, -1);\n    _defineTex2D(obj, \"metalness\", 0, 1);\n    _defineTex2D(obj, \"gloss\", 0, 1);\n    _defineTex2D(obj, \"opacity\", 0, 1, \"a\");\n    _defineTex2D(obj, \"height\", 0, 1);\n    _defineTex2D(obj, \"ao\", 0, 1);\n    _defineTex2D(obj, \"light\", 1, 3);\n    _defineTex2D(obj, \"msdf\", 0, 3);\n    _defineObject(obj, \"cubeMap\");\n    _defineObject(obj, \"sphereMap\");\n    _defineObject(obj, \"dpAtlas\");\n    _defineObject(obj, \"prefilteredCubeMap128\");\n    _defineObject(obj, \"prefilteredCubeMap64\");\n    _defineObject(obj, \"prefilteredCubeMap32\");\n    _defineObject(obj, \"prefilteredCubeMap16\");\n    _defineObject(obj, \"prefilteredCubeMap8\");\n    _defineObject(obj, \"prefilteredCubeMap4\");\n    _defineAlias(obj, \"diffuseTint\", \"diffuseMapTint\");\n    _defineAlias(obj, \"specularTint\", \"specularMapTint\");\n    _defineAlias(obj, \"emissiveTint\", \"emissiveMapTint\");\n    _defineAlias(obj, \"aoVertexColor\", \"aoMapVertexColor\");\n    _defineAlias(obj, \"diffuseVertexColor\", \"diffuseMapVertexColor\");\n    _defineAlias(obj, \"specularVertexColor\", \"specularMapVertexColor\");\n    _defineAlias(obj, \"emissiveVertexColor\", \"emissiveMapVertexColor\");\n    _defineAlias(obj, \"metalnessVertexColor\", \"metalnessMapVertexColor\");\n    _defineAlias(obj, \"glossVertexColor\", \"glossMapVertexColor\");\n    _defineAlias(obj, \"opacityVertexColor\", \"opacityMapVertexColor\");\n    _defineAlias(obj, \"lightVertexColor\", \"lightMapVertexColor\");\n    for (var i = 0; i < _propsSerial.length; i++) {\n      _propsSerialDefaultVal[i] = obj[_propsSerial[i]];\n    }\n    obj._propsSet = [];\n  };\n  _defineMaterialProps(StandardMaterial.prototype);\n  return {StandardMaterial:StandardMaterial};\n}());\npc.extend(pc, function() {\n  var id = 0;\n  var _tmpAabb = new pc.BoundingBox;\n  var Mesh = function() {\n    this._refCount = 0;\n    this.id = id++;\n    this.vertexBuffer = null;\n    this.indexBuffer = [null];\n    this.primitive = [{type:0, base:0, count:0}];\n    this.skin = null;\n    this.morph = null;\n    this._aabb = new pc.BoundingBox;\n    this.boneAabb = null;\n  };\n  Object.defineProperty(Mesh.prototype, \"aabb\", {get:function() {\n    return this.morph ? this.morph.aabb : this._aabb;\n  }, set:function(aabb) {\n    if (this.morph) {\n      this._aabb = this.morph._baseAabb = aabb;\n      this.morph._calculateAabb();\n    } else {\n      this._aabb = aabb;\n    }\n  }});\n  var MeshInstance = function MeshInstance(node, mesh, material) {\n    this._key = [0, 0];\n    this._shader = [null, null, null];\n    this.isStatic = false;\n    this._staticLightList = null;\n    this._staticSource = null;\n    this.node = node;\n    this._mesh = mesh;\n    mesh._refCount++;\n    this.material = material;\n    this._shaderDefs = pc.MASK_DYNAMIC << 16;\n    this._shaderDefs |= mesh.vertexBuffer.format.hasUv0 ? pc.SHADERDEF_UV0 : 0;\n    this._shaderDefs |= mesh.vertexBuffer.format.hasUv1 ? pc.SHADERDEF_UV1 : 0;\n    this._shaderDefs |= mesh.vertexBuffer.format.hasColor ? pc.SHADERDEF_VCOLOR : 0;\n    this._lightHash = 0;\n    this.visible = true;\n    this.layer = pc.LAYER_WORLD;\n    this.renderStyle = pc.RENDERSTYLE_SOLID;\n    this.castShadow = false;\n    this._receiveShadow = true;\n    this._screenSpace = false;\n    this._noDepthDrawGl1 = false;\n    this.cull = true;\n    this.pick = true;\n    this._updateAabb = true;\n    this._updateAabbFunc = null;\n    this.updateKey();\n    this._skinInstance = null;\n    this.morphInstance = null;\n    this.instancingData = null;\n    this.aabb = new pc.BoundingBox;\n    this._boneAabb = null;\n    this._aabbVer = -1;\n    this.drawOrder = 0;\n    this.visibleThisFrame = 0;\n    this.parameters = {};\n    this.stencilFront = null;\n    this.stencilBack = null;\n  };\n  Object.defineProperty(MeshInstance.prototype, \"mesh\", {get:function() {\n    return this._mesh;\n  }, set:function(mesh) {\n    if (this._mesh) {\n      this._mesh._refCount--;\n    }\n    this._mesh = mesh;\n    if (mesh) {\n      mesh._refCount++;\n    }\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"aabb\", {get:function() {\n    var aabb;\n    if (!this._updateAabb) {\n      return this._aabb;\n    }\n    if (this._updateAabbFunc) {\n      return this._updateAabbFunc(this._aabb);\n    }\n    if (this.skinInstance) {\n      var numBones = this.mesh.skin.boneNames.length;\n      var boneUsed, i;\n      if (!this.mesh.boneAabb) {\n        this.mesh.boneAabb = [];\n        this.mesh.boneUsed = [];\n        var elems = this.mesh.vertexBuffer.format.elements;\n        var numVerts = this.mesh.vertexBuffer.numVertices;\n        var vertSize = this.mesh.vertexBuffer.format.size;\n        var index;\n        var offsetP, offsetI, offsetW;\n        var j, k, l;\n        for (i = 0; i < elems.length; i++) {\n          if (elems[i].name === pc.SEMANTIC_POSITION) {\n            offsetP = elems[i].offset;\n          } else {\n            if (elems[i].name === pc.SEMANTIC_BLENDINDICES) {\n              offsetI = elems[i].offset;\n            } else {\n              if (elems[i].name === pc.SEMANTIC_BLENDWEIGHT) {\n                offsetW = elems[i].offset;\n              }\n            }\n          }\n        }\n        var data8 = new Uint8Array(this.mesh.vertexBuffer.storage);\n        var dataF = new Float32Array(this.mesh.vertexBuffer.storage);\n        var offsetPF = offsetP / 4;\n        var offsetWF = offsetW / 4;\n        var vertSizeF = vertSize / 4;\n        var bMax, bMin;\n        var x, y, z;\n        var boneMin = [];\n        var boneMax = [];\n        boneUsed = this.mesh.boneUsed;\n        for (i = 0; i < numBones; i++) {\n          boneMin[i] = new pc.Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n          boneMax[i] = new pc.Vec3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        }\n        for (j = 0; j < numVerts; j++) {\n          for (k = 0; k < 4; k++) {\n            if (dataF[j * vertSizeF + offsetWF + k] > 0) {\n              index = data8[j * vertSize + offsetI + k];\n              x = dataF[j * vertSizeF + offsetPF];\n              y = dataF[j * vertSizeF + offsetPF + 1];\n              z = dataF[j * vertSizeF + offsetPF + 2];\n              bMax = boneMax[index];\n              bMin = boneMin[index];\n              if (bMin.x > x) {\n                bMin.x = x;\n              }\n              if (bMin.y > y) {\n                bMin.y = y;\n              }\n              if (bMin.z > z) {\n                bMin.z = z;\n              }\n              if (bMax.x < x) {\n                bMax.x = x;\n              }\n              if (bMax.y < y) {\n                bMax.y = y;\n              }\n              if (bMax.z < z) {\n                bMax.z = z;\n              }\n              boneUsed[index] = true;\n            }\n          }\n        }\n        if (this.morphInstance) {\n          var vertIndex;\n          var targets = this.morphInstance.morph._targets;\n          var minMorphedPos = new Float32Array(numVerts * 3);\n          var maxMorphedPos = new Float32Array(numVerts * 3);\n          var m, dx, dy, dz;\n          var target, mtIndices, mtIndicesLength, deltaPos;\n          for (j = 0; j < numVerts; j++) {\n            minMorphedPos[j * 3] = maxMorphedPos[j * 3] = dataF[j * vertSizeF + offsetPF];\n            minMorphedPos[j * 3 + 1] = maxMorphedPos[j * 3 + 1] = dataF[j * vertSizeF + offsetPF + 1];\n            minMorphedPos[j * 3 + 2] = maxMorphedPos[j * 3 + 2] = dataF[j * vertSizeF + offsetPF + 2];\n          }\n          for (l = 0; l < targets.length; l++) {\n            target = targets[l];\n            mtIndices = target.indices;\n            mtIndicesLength = mtIndices.length;\n            deltaPos = target.deltaPositions;\n            for (k = 0; k < mtIndicesLength; k++) {\n              vertIndex = mtIndices[k];\n              dx = deltaPos[k * 3];\n              dy = deltaPos[k * 3 + 1];\n              dz = deltaPos[k * 3 + 2];\n              if (dx < 0) {\n                minMorphedPos[vertIndex * 3] += dx;\n              } else {\n                maxMorphedPos[vertIndex * 3] += dx;\n              }\n              if (dy < 0) {\n                minMorphedPos[vertIndex * 3 + 1] += dy;\n              } else {\n                maxMorphedPos[vertIndex * 3 + 1] += dy;\n              }\n              if (dz < 0) {\n                minMorphedPos[vertIndex * 3 + 2] += dz;\n              } else {\n                maxMorphedPos[vertIndex * 3 + 2] += dz;\n              }\n            }\n          }\n          for (l = 0; l < targets.length; l++) {\n            target = targets[l];\n            mtIndices = target.indices;\n            mtIndicesLength = mtIndices.length;\n            deltaPos = target.deltaPositions;\n            for (k = 0; k < mtIndicesLength; k++) {\n              vertIndex = mtIndices[k];\n              for (m = 0; m < 4; m++) {\n                if (dataF[vertIndex * vertSizeF + offsetWF + m] > 0) {\n                  index = data8[vertIndex * vertSize + offsetI + m];\n                  bMax = boneMax[index];\n                  bMin = boneMin[index];\n                  x = minMorphedPos[vertIndex * 3];\n                  y = minMorphedPos[vertIndex * 3 + 1];\n                  z = minMorphedPos[vertIndex * 3 + 2];\n                  if (bMin.x > x) {\n                    bMin.x = x;\n                  }\n                  if (bMin.y > y) {\n                    bMin.y = y;\n                  }\n                  if (bMin.z > z) {\n                    bMin.z = z;\n                  }\n                  x = maxMorphedPos[vertIndex * 3];\n                  y = maxMorphedPos[vertIndex * 3 + 1];\n                  z = maxMorphedPos[vertIndex * 3 + 2];\n                  if (bMax.x < x) {\n                    bMax.x = x;\n                  }\n                  if (bMax.y < y) {\n                    bMax.y = y;\n                  }\n                  if (bMax.z < z) {\n                    bMax.z = z;\n                  }\n                }\n              }\n            }\n          }\n        }\n        for (i = 0; i < numBones; i++) {\n          aabb = new pc.BoundingBox;\n          aabb.setMinMax(boneMin[i], boneMax[i]);\n          this.mesh.boneAabb.push(aabb);\n        }\n      }\n      if (!this._boneAabb) {\n        this._boneAabb = [];\n        for (i = 0; i < this.mesh.boneAabb.length; i++) {\n          this._boneAabb[i] = new pc.BoundingBox;\n        }\n      }\n      boneUsed = this.mesh.boneUsed;\n      for (i = 0; i < this.mesh.boneAabb.length; i++) {\n        if (!boneUsed[i]) {\n          continue;\n        }\n        this._boneAabb[i].setFromTransformedAabb(this.mesh.boneAabb[i], this.skinInstance.matrices[i]);\n      }\n      var rootNodeTransform = this.node.getWorldTransform();\n      var first = true;\n      for (i = 0; i < this.mesh.boneAabb.length; i++) {\n        if (!boneUsed[i]) {\n          continue;\n        }\n        if (first) {\n          _tmpAabb.center.copy(this._boneAabb[i].center);\n          _tmpAabb.halfExtents.copy(this._boneAabb[i].halfExtents);\n          first = false;\n        } else {\n          _tmpAabb.add(this._boneAabb[i]);\n        }\n      }\n      this._aabb.setFromTransformedAabb(_tmpAabb, rootNodeTransform);\n    } else {\n      if (this.node._aabbVer !== this._aabbVer) {\n        aabb = this.mesh ? this.mesh.aabb : this._aabb;\n        if (!this.mesh) {\n          aabb.center.set(0, 0, 0);\n          aabb.halfExtents.set(0, 0, 0);\n        }\n        this._aabb.setFromTransformedAabb(aabb, this.node.getWorldTransform());\n        this._aabbVer = this.node._aabbVer;\n      }\n    }\n    return this._aabb;\n  }, set:function(aabb) {\n    this._aabb = aabb;\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"material\", {get:function() {\n    return this._material;\n  }, set:function(material) {\n    var i;\n    for (i = 0; i < this._shader.length; i++) {\n      this._shader[i] = null;\n    }\n    if (this._material) {\n      var meshInstances = this._material.meshInstances;\n      i = meshInstances.indexOf(this);\n      if (i !== -1) {\n        meshInstances.splice(i, 1);\n      }\n    }\n    var prevBlend = this._material ? this._material.blendType !== pc.BLEND_NONE : false;\n    var prevMat = this._material;\n    this._material = material;\n    if (this._material) {\n      this._material.meshInstances.push(this);\n      this.updateKey();\n    }\n    if (material) {\n      if (material.blendType !== pc.BLEND_NONE !== prevBlend) {\n        var scene = material._scene;\n        if (!scene && prevMat && prevMat._scene) {\n          scene = prevMat._scene;\n        }\n        if (scene) {\n          scene.layers._dirtyBlend = true;\n        } else {\n          material._dirtyBlend = true;\n        }\n      }\n    }\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"layer\", {get:function() {\n    return this._layer;\n  }, set:function(layer) {\n    this._layer = layer;\n    this.updateKey();\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"receiveShadow\", {get:function() {\n    return this._receiveShadow;\n  }, set:function(val) {\n    this._receiveShadow = val;\n    this._shaderDefs = val ? this._shaderDefs & ~pc.SHADERDEF_NOSHADOW : this._shaderDefs | pc.SHADERDEF_NOSHADOW;\n    this._shader[pc.SHADER_FORWARD] = null;\n    this._shader[pc.SHADER_FORWARDHDR] = null;\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"skinInstance\", {get:function() {\n    return this._skinInstance;\n  }, set:function(val) {\n    this._skinInstance = val;\n    this._shaderDefs = val ? this._shaderDefs | pc.SHADERDEF_SKIN : this._shaderDefs & ~pc.SHADERDEF_SKIN;\n    for (var i = 0; i < this._shader.length; i++) {\n      this._shader[i] = null;\n    }\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"screenSpace\", {get:function() {\n    return this._screenSpace;\n  }, set:function(val) {\n    this._screenSpace = val;\n    this._shaderDefs = val ? this._shaderDefs | pc.SHADERDEF_SCREENSPACE : this._shaderDefs & ~pc.SHADERDEF_SCREENSPACE;\n    this._shader[pc.SHADER_FORWARD] = null;\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"key\", {get:function() {\n    return this._key[pc.SORTKEY_FORWARD];\n  }, set:function(val) {\n    this._key[pc.SORTKEY_FORWARD] = val;\n  }});\n  Object.defineProperty(MeshInstance.prototype, \"mask\", {get:function() {\n    return this._shaderDefs >> 16;\n  }, set:function(val) {\n    var toggles = this._shaderDefs & 65535;\n    this._shaderDefs = toggles | val << 16;\n    this._shader[pc.SHADER_FORWARD] = null;\n    this._shader[pc.SHADER_FORWARDHDR] = null;\n  }});\n  pc.extend(MeshInstance.prototype, {syncAabb:function() {\n  }, updateKey:function() {\n    var material = this.material;\n    this._key[pc.SORTKEY_FORWARD] = getKey(this.layer, material.alphaToCoverage || material.alphaTest ? pc.BLEND_NORMAL : material.blendType, false, material.id);\n  }, setParameter:pc.Material.prototype.setParameter, setParameters:pc.Material.prototype.setParameters, deleteParameter:pc.Material.prototype.deleteParameter, getParameter:pc.Material.prototype.getParameter, getParameters:pc.Material.prototype.getParameters, clearParameters:pc.Material.prototype.clearParameters});\n  var Command = function(layer, blendType, command) {\n    this._key = [];\n    this._key[pc.SORTKEY_FORWARD] = getKey(layer, blendType, true, 0);\n    this.command = command;\n  };\n  Object.defineProperty(Command.prototype, \"key\", {get:function() {\n    return this._key[pc.SORTKEY_FORWARD];\n  }, set:function(val) {\n    this._key[pc.SORTKEY_FORWARD] = val;\n  }});\n  var InstancingData = function(numObjects, dynamic, instanceSize) {\n    instanceSize = instanceSize || 16;\n    this.buffer = new Float32Array(numObjects * instanceSize);\n    this.count = numObjects;\n    this.offset = 0;\n    this.usage = dynamic ? pc.BUFFER_DYNAMIC : pc.BUFFER_STATIC;\n    this._buffer = null;\n  };\n  InstancingData.prototype = {update:function() {\n    if (this._buffer) {\n      this._buffer.setData(this.buffer);\n    }\n  }};\n  function getKey(layer, blendType, isCommand, materialId) {\n    return (layer & 15) << 27 | (blendType === pc.BLEND_NONE ? 1 : 0) << 26 | (isCommand ? 1 : 0) << 25 | (materialId & 33554431) << 0;\n  }\n  return {Command:Command, Mesh:Mesh, MeshInstance:MeshInstance, InstancingData:InstancingData, _getDrawcallSortKey:getKey};\n}());\npc.extend(pc, function() {\n  var _invMatrix = new pc.Mat4;\n  var Skin = function(graphicsDevice, ibp, boneNames) {\n    this.device = graphicsDevice;\n    this.inverseBindPose = ibp;\n    this.boneNames = boneNames;\n  };\n  var SkinInstance = function(skin) {\n    this.skin = skin;\n    this._dirty = true;\n    this.bones = [];\n    var numBones = skin.inverseBindPose.length;\n    var device = skin.device;\n    if (device.supportsBoneTextures) {\n      var size;\n      if (numBones > 256) {\n        size = 64;\n      } else {\n        if (numBones > 64) {\n          size = 32;\n        } else {\n          if (numBones > 16) {\n            size = 16;\n          } else {\n            size = 8;\n          }\n        }\n      }\n      this.boneTexture = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_RGBA32F, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});\n      this.matrixPalette = this.boneTexture.lock();\n    } else {\n      this.matrixPalette = new Float32Array(numBones * 16);\n    }\n    this.matrices = [];\n    for (var i = 0; i < numBones; i++) {\n      this.matrices[i] = new pc.Mat4;\n    }\n  };\n  SkinInstance.prototype = {updateMatrices:function(rootNode) {\n    _invMatrix.copy(rootNode.getWorldTransform()).invert();\n    for (var i = this.bones.length - 1; i >= 0; i--) {\n      this.matrices[i].mul2(_invMatrix, this.bones[i].getWorldTransform());\n      this.matrices[i].mul2(this.matrices[i], this.skin.inverseBindPose[i]);\n    }\n  }, updateMatrixPalette:function() {\n    var pe;\n    var mp = this.matrixPalette;\n    var base;\n    for (var i = this.bones.length - 1; i >= 0; i--) {\n      pe = this.matrices[i].data;\n      base = i * 16;\n      mp[base] = pe[0];\n      mp[base + 1] = pe[1];\n      mp[base + 2] = pe[2];\n      mp[base + 3] = pe[3];\n      mp[base + 4] = pe[4];\n      mp[base + 5] = pe[5];\n      mp[base + 6] = pe[6];\n      mp[base + 7] = pe[7];\n      mp[base + 8] = pe[8];\n      mp[base + 9] = pe[9];\n      mp[base + 10] = pe[10];\n      mp[base + 11] = pe[11];\n      mp[base + 12] = pe[12];\n      mp[base + 13] = pe[13];\n      mp[base + 14] = pe[14];\n      mp[base + 15] = pe[15];\n    }\n    if (this.skin.device.supportsBoneTextures) {\n      this.boneTexture.lock();\n      this.boneTexture.unlock();\n    }\n  }};\n  return {Skin:Skin, SkinInstance:SkinInstance};\n}());\npc.extend(pc, function() {\n  function PartitionedVertex() {\n    this.index = 0;\n    this.boneIndices = [0, 0, 0, 0];\n  }\n  function SkinPartition() {\n    this.partition = 0;\n    this.vertexStart = 0;\n    this.vertexCount = 0;\n    this.indexStart = 0;\n    this.indexCount = 0;\n    this.boneIndices = [];\n    this.vertices = [];\n    this.indices = [];\n    this.indexMap = {};\n  }\n  SkinPartition.prototype = {addVertex:function(vertex, idx, vertexArray) {\n    var remappedIndex = -1;\n    if (this.indexMap[idx] !== undefined) {\n      remappedIndex = this.indexMap[idx];\n      this.indices.push(remappedIndex);\n    } else {\n      for (var influence = 0; influence < 4; influence++) {\n        if (vertexArray.blendWeight.data[idx * 4 + influence] === 0) {\n          continue;\n        }\n        var originalBoneIndex = vertexArray.blendIndices.data[vertex.index * 4 + influence];\n        vertex.boneIndices[influence] = this.getBoneRemap(originalBoneIndex);\n      }\n      remappedIndex = this.vertices.length;\n      this.indices.push(remappedIndex);\n      this.vertices.push(vertex);\n      this.indexMap[idx] = remappedIndex;\n    }\n  }, addPrimitive:function(vertices, vertexIndices, vertexArray, boneLimit) {\n    var i, j;\n    var bonesToAdd = [];\n    var bonesToAddCount = 0;\n    var vertexCount = vertices.length;\n    for (i = 0; i < vertexCount; i++) {\n      var vertex = vertices[i];\n      var idx = vertex.index;\n      for (var influence = 0; influence < 4; influence++) {\n        if (vertexArray.blendWeight.data[idx * 4 + influence] > 0) {\n          var boneIndex = vertexArray.blendIndices.data[idx * 4 + influence];\n          var needToAdd = true;\n          for (j = 0; j < bonesToAddCount; j++) {\n            if (bonesToAdd[j] == boneIndex) {\n              needToAdd = false;\n              break;\n            }\n          }\n          if (needToAdd) {\n            bonesToAdd[bonesToAddCount] = boneIndex;\n            var boneRemap = this.getBoneRemap(boneIndex);\n            bonesToAddCount += boneRemap === -1 ? 1 : 0;\n          }\n        }\n      }\n    }\n    if (this.boneIndices.length + bonesToAddCount > boneLimit) {\n      return false;\n    }\n    for (i = 0; i < bonesToAddCount; i++) {\n      this.boneIndices.push(bonesToAdd[i]);\n    }\n    for (i = 0; i < vertexCount; i++) {\n      this.addVertex(vertices[i], vertexIndices[i], vertexArray);\n    }\n    return true;\n  }, getBoneRemap:function(boneIndex) {\n    for (var i = 0; i < this.boneIndices.length; i++) {\n      if (this.boneIndices[i] === boneIndex) {\n        return i;\n      }\n    }\n    return -1;\n  }};\n  function indicesToReferences(model) {\n    var i;\n    var vertices = model.vertices;\n    var skins = model.skins;\n    var meshes = model.meshes;\n    var meshInstances = model.meshInstances;\n    for (i = 0; i < meshes.length; i++) {\n      meshes[i].vertices = vertices[meshes[i].vertices];\n      if (meshes[i].skin !== undefined) {\n        meshes[i].skin = skins[meshes[i].skin];\n      }\n    }\n    for (i = 0; i < meshInstances.length; i++) {\n      meshInstances[i].mesh = meshes[meshInstances[i].mesh];\n    }\n  }\n  function referencesToIndices(model) {\n    var i;\n    var vertices = model.vertices;\n    var skins = model.skins;\n    var meshes = model.meshes;\n    var meshInstances = model.meshInstances;\n    for (i = 0; i < meshes.length; i++) {\n      meshes[i].vertices = vertices.indexOf(meshes[i].vertices);\n      if (meshes[i].skin !== undefined) {\n        meshes[i].skin = skins.indexOf(meshes[i].skin);\n      }\n    }\n    for (i = 0; i < meshInstances.length; i++) {\n      meshInstances[i].mesh = meshes.indexOf(meshInstances[i].mesh);\n    }\n  }\n  function partitionSkin(model, materialMappings, boneLimit) {\n    var i, j, k, index;\n    indicesToReferences(model);\n    var vertexArrays = model.vertices;\n    var skins = model.skins;\n    var mesh;\n    var meshes = model.meshes;\n    var meshInstances = model.meshInstances;\n    var getVertex = function(idx) {\n      var vert = new PartitionedVertex;\n      vert.index = idx;\n      return vert;\n    };\n    for (i = skins.length - 1; i >= 0; i--) {\n      if (skins[i].boneNames.length > boneLimit) {\n        var skin = skins.splice(i, 1)[0];\n        var meshesToSplit = [];\n        for (j = 0; j < meshes.length; j++) {\n          if (meshes[j].skin === skin) {\n            meshesToSplit.push(meshes[j]);\n          }\n        }\n        for (j = 0; j < meshesToSplit.length; j++) {\n          index = meshes.indexOf(meshesToSplit[j]);\n          if (index !== -1) {\n            meshes.splice(index, 1);\n          }\n        }\n        if (meshesToSplit.length === 0) {\n          throw new Error(\"partitionSkin: There should be at least one mesh that references a skin\");\n        }\n        var vertexArray = meshesToSplit[0].vertices;\n        for (j = 1; j < meshesToSplit.length; j++) {\n          if (meshesToSplit[j].vertices !== vertexArray) {\n            throw new Error(\"partitionSkin: All meshes that share a skin should also share the same vertex buffer\");\n          }\n        }\n        var partition;\n        var partitions = [];\n        var primitiveVertices = [];\n        var primitiveIndices = [];\n        var basePartition = 0;\n        for (j = 0; j < meshesToSplit.length; j++) {\n          mesh = meshesToSplit[j];\n          var indices = mesh.indices;\n          for (var iIndex = mesh.base; iIndex < mesh.base + mesh.count;) {\n            index = indices[iIndex++];\n            primitiveVertices[0] = getVertex(index);\n            primitiveIndices[0] = index;\n            index = indices[iIndex++];\n            primitiveVertices[1] = getVertex(index);\n            primitiveIndices[1] = index;\n            index = indices[iIndex++];\n            primitiveVertices[2] = getVertex(index);\n            primitiveIndices[2] = index;\n            var added = false;\n            for (var iBonePartition = basePartition; iBonePartition < partitions.length; iBonePartition++) {\n              partition = partitions[iBonePartition];\n              if (partition.addPrimitive(primitiveVertices, primitiveIndices, vertexArray, boneLimit)) {\n                added = true;\n                break;\n              }\n            }\n            if (!added) {\n              partition = new SkinPartition;\n              partition.originalMesh = mesh;\n              partition.addPrimitive(primitiveVertices, primitiveIndices, vertexArray, boneLimit);\n              partitions.push(partition);\n            }\n          }\n          basePartition = partitions.length;\n        }\n        var partitionedVertices = [];\n        var partitionedIndices = [];\n        for (j = 0; j < partitions.length; j++) {\n          partition = partitions[j];\n          if (partition.vertices.length && partition.indices.length) {\n            var vertexStart = partitionedVertices.length;\n            var vertexCount = partition.vertices.length;\n            var indexStart = partitionedIndices.length;\n            var indexCount = partition.indices.length;\n            partition.partition = j;\n            partition.vertexStart = vertexStart;\n            partition.vertexCount = vertexCount;\n            partition.indexStart = indexStart;\n            partition.indexCount = indexCount;\n            var iSour;\n            var iDest;\n            iSour = 0;\n            iDest = vertexStart;\n            while (iSour < vertexCount) {\n              partitionedVertices[iDest++] = partition.vertices[iSour++];\n            }\n            iSour = 0;\n            iDest = indexStart;\n            while (iSour < indexCount) {\n              partitionedIndices[iDest++] = partition.indices[iSour++] + vertexStart;\n            }\n          }\n        }\n        var splitSkins = [];\n        for (j = 0; j < partitions.length; j++) {\n          partition = partitions[j];\n          var ibp = [];\n          var boneNames = [];\n          for (k = 0; k < partition.boneIndices.length; k++) {\n            ibp.push(skin.inverseBindMatrices[partition.boneIndices[k]]);\n            boneNames.push(skin.boneNames[partition.boneIndices[k]]);\n          }\n          var splitSkin = {inverseBindMatrices:ibp, boneNames:boneNames};\n          splitSkins.push(splitSkin);\n          skins.push(splitSkin);\n        }\n        var attrib, attribName, data, components;\n        var splitVertexArray = {};\n        for (attribName in vertexArray) {\n          splitVertexArray[attribName] = {components:vertexArray[attribName].components, data:[], type:vertexArray[attribName].type};\n        }\n        for (attribName in vertexArray) {\n          if (attribName === \"blendIndices\") {\n            var dstBoneIndices = splitVertexArray[attribName].data;\n            for (j = 0; j < partitionedVertices.length; j++) {\n              var srcBoneIndices = partitionedVertices[j].boneIndices;\n              dstBoneIndices.push(srcBoneIndices[0], srcBoneIndices[1], srcBoneIndices[2], srcBoneIndices[3]);\n            }\n          } else {\n            attrib = vertexArray[attribName];\n            data = attrib.data;\n            components = attrib.components;\n            for (j = 0; j < partitionedVertices.length; j++) {\n              index = partitionedVertices[j].index;\n              for (k = 0; k < components; k++) {\n                splitVertexArray[attribName].data.push(data[index * components + k]);\n              }\n            }\n          }\n        }\n        vertexArrays[vertexArrays.indexOf(vertexArray)] = splitVertexArray;\n        for (j = 0; j < partitions.length; j++) {\n          partition = partitions[j];\n          mesh = {aabb:{min:[0, 0, 0], max:[0, 0, 0]}, vertices:splitVertexArray, skin:splitSkins[j], indices:partitionedIndices.splice(0, partition.indexCount), type:\"triangles\", base:0, count:partition.indexCount};\n          meshes.push(mesh);\n          for (k = meshInstances.length - 1; k >= 0; k--) {\n            if (meshInstances[k].mesh === partition.originalMesh) {\n              meshInstances.push({mesh:mesh, node:meshInstances[k].node});\n              if (materialMappings) {\n                materialMappings.push({material:materialMappings[k].material, path:materialMappings[k].path});\n              }\n            }\n          }\n        }\n        for (j = 0; j < partitions.length; j++) {\n          partition = partitions[j];\n          for (k = meshInstances.length - 1; k >= 0; k--) {\n            if (meshInstances[k].mesh === partition.originalMesh) {\n              meshInstances.splice(k, 1);\n              if (materialMappings) {\n                materialMappings.splice(k, 1);\n              }\n            }\n          }\n        }\n      }\n    }\n    referencesToIndices(model);\n  }\n  return {partitionSkin:partitionSkin};\n}());\npc.extend(pc, function() {\n  var _morphMin = new pc.Vec3;\n  var _morphMax = new pc.Vec3;\n  var MorphTarget = function(options) {\n    if (options.indices) {\n      this.indices = options.indices;\n    } else {\n      var arr = options.deltaPositions;\n      this.indices = [];\n      this.indices.length = arr.length;\n      for (var i = 0; i < arr.length; i++) {\n        this.indices[i] = i;\n      }\n    }\n    this.deltaPositions = options.deltaPositions;\n    this.deltaNormals = options.deltaNormals;\n    this.deltaTangents = options.deltaTangents;\n    this.name = options.name;\n    this.aabb = options.aabb;\n  };\n  var Morph = function(targets) {\n    this.aabb = new pc.BoundingBox;\n    this._baseBuffer = null;\n    this._baseAabb = null;\n    this._targets = targets;\n    this._dirty = true;\n    this._aabbDirty = true;\n    this._baseData = null;\n    this._offsetPF = 0;\n    this._offsetNF = 0;\n    this._offsetTF = 0;\n    this._vertSizeF = 0;\n  };\n  pc.extend(Morph.prototype, {_setBaseMesh:function(baseMesh) {\n    this._baseBuffer = baseMesh.vertexBuffer;\n    this._baseAabb = baseMesh._aabb;\n    this._baseData = new Float32Array(this._baseBuffer.storage);\n    var offsetP = -1;\n    var offsetN = -1;\n    var offsetT = -1;\n    var elems = this._baseBuffer.format.elements;\n    var vertSize = this._baseBuffer.format.size;\n    for (var j = 0; j < elems.length; j++) {\n      if (elems[j].name === pc.SEMANTIC_POSITION) {\n        offsetP = elems[j].offset;\n      } else {\n        if (elems[j].name === pc.SEMANTIC_NORMAL) {\n          offsetN = elems[j].offset;\n        } else {\n          if (elems[j].name === pc.SEMANTIC_TANGENT) {\n            offsetT = elems[j].offset;\n          }\n        }\n      }\n    }\n    this._offsetPF = offsetP / 4;\n    this._offsetNF = offsetN / 4;\n    this._offsetTF = offsetT / 4;\n    this._vertSizeF = vertSize / 4;\n    this._dirty = true;\n  }, _calculateAabb:function() {\n    if (!this._baseBuffer) {\n      return;\n    }\n    this.aabb.copy(this._baseAabb);\n    var numIndices;\n    var i, j, target, index, id;\n    var x, y, z;\n    var vertSizeF = this._vertSizeF;\n    var offsetPF = this._offsetPF;\n    var baseData = this._baseData;\n    for (i = 0; i < this._targets.length; i++) {\n      target = this._targets[i];\n      if (!target.aabb && target.indices.length > 0) {\n        target.aabb = this.aabb.clone();\n        _morphMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        _morphMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        numIndices = target.indices.length;\n        for (j = 0; j < numIndices; j++) {\n          index = target.indices[j];\n          id = index * vertSizeF + offsetPF;\n          x = baseData[id] + target.deltaPositions[j * 3];\n          y = baseData[id + 1] + target.deltaPositions[j * 3 + 1];\n          z = baseData[id + 2] + target.deltaPositions[j * 3 + 2];\n          if (_morphMin.x > x) {\n            _morphMin.x = x;\n          }\n          if (_morphMin.y > y) {\n            _morphMin.y = y;\n          }\n          if (_morphMin.z > z) {\n            _morphMin.z = z;\n          }\n          if (_morphMax.x < x) {\n            _morphMax.x = x;\n          }\n          if (_morphMax.y < y) {\n            _morphMax.y = y;\n          }\n          if (_morphMax.z < z) {\n            _morphMax.z = z;\n          }\n        }\n        target.aabb.setMinMax(_morphMin, _morphMax);\n      }\n      if (target.aabb) {\n        this.aabb.add(target.aabb);\n      }\n    }\n    this._aabbDirty = false;\n  }, addTarget:function(target) {\n    this._targets.push(target);\n    this._aabbDirty = true;\n  }, removeTarget:function(target) {\n    var index = this._targets.indexOf(target);\n    if (index !== -1) {\n      this._targets.splice(index, 1);\n      this._aabbDirty = true;\n    }\n  }, getTarget:function(index) {\n    return this._targets[index];\n  }});\n  var MorphInstance = function(morph) {\n    this.morph = morph;\n    this._vertexBuffer = null;\n    this._vertexData = null;\n    this._weights = [];\n    this._dirty = true;\n  };\n  MorphInstance.prototype = {_setBaseMesh:function(baseMesh) {\n    this.destroy();\n    this._vertexBuffer = new pc.VertexBuffer(this.morph._baseBuffer.device, this.morph._baseBuffer.format, this.morph._baseBuffer.numVertices, pc.BUFFER_DYNAMIC, this.morph._baseBuffer.storage.slice(0));\n    this._vertexData = new Float32Array(this._vertexBuffer.storage);\n    this._weights = [];\n    this._weights.length = this.morph._targets.length;\n    for (var i = 0; i < this.morph._targets.length; i++) {\n      this._weights[i] = 0;\n    }\n    this._dirty = true;\n  }, destroy:function() {\n    if (this._vertexBuffer) {\n      this._vertexBuffer.destroy();\n      this._vertexBuffer = null;\n    }\n  }, getWeight:function(index) {\n    return this._weights[index];\n  }, setWeight:function(index, weight) {\n    this._weights[index] = weight;\n    this._dirty = true;\n  }, updateBounds:function(mesh) {\n    if (this.morph._baseBuffer !== mesh.vertexBuffer) {\n      this.morph._setBaseMesh(mesh);\n    }\n    if (!this._vertexData) {\n      this._setBaseMesh(mesh);\n    }\n    if (this.morph._aabbDirty) {\n      this.morph._calculateAabb();\n    }\n  }, update:function(mesh) {\n    if (this.morph._baseBuffer !== mesh.vertexBuffer) {\n      this.morph._setBaseMesh(mesh);\n    }\n    if (!this._vertexData) {\n      this._setBaseMesh(mesh);\n    }\n    var numIndices, index;\n    var targets = this.morph._targets;\n    var weights = this._weights;\n    var target, weight, j, id, j3, j4;\n    var vertSizeF = this.morph._vertSizeF;\n    var offsetPF = this.morph._offsetPF;\n    var offsetNF = this.morph._offsetNF;\n    var offsetTF = this.morph._offsetTF;\n    var vdata = this._vertexData;\n    vdata.set(this.morph._baseData);\n    for (var i = 0; i < targets.length; i++) {\n      weight = weights[i];\n      if (weight === 0) {\n        continue;\n      }\n      target = targets[i];\n      numIndices = target.indices.length;\n      for (j = 0; j < numIndices; j++) {\n        j3 = j * 3;\n        index = target.indices[j];\n        id = index * vertSizeF + offsetPF;\n        vdata[id] += target.deltaPositions[j3] * weight;\n        vdata[id + 1] += target.deltaPositions[j3 + 1] * weight;\n        vdata[id + 2] += target.deltaPositions[j3 + 2] * weight;\n        if (target.deltaNormals) {\n          id = index * vertSizeF + offsetNF;\n          vdata[id] += target.deltaNormals[j3] * weight;\n          vdata[id + 1] += target.deltaNormals[j3 + 1] * weight;\n          vdata[id + 2] += target.deltaNormals[j3 + 2] * weight;\n          if (target.deltaTangents) {\n            j4 = j * 4;\n            id = index * vertSizeF + offsetTF;\n            vdata[id] += target.deltaTangents[j4] * weight;\n            vdata[id + 1] += target.deltaTangents[j4 + 1] * weight;\n            vdata[id + 2] += target.deltaTangents[j4 + 2] * weight;\n            vdata[id + 3] += target.deltaTangents[j4 + 3] * weight;\n            vdata[id + 3] = vdata[id + 3] > 0 ? 1 : -1;\n          }\n        }\n      }\n    }\n    this._vertexBuffer.unlock();\n  }};\n  return {MorphTarget:MorphTarget, Morph:Morph, MorphInstance:MorphInstance};\n}());\npc.extend(pc, function() {\n  var Model = function Model() {\n    this.graph = null;\n    this.meshInstances = [];\n    this.skinInstances = [];\n    this.morphInstances = [];\n    this.cameras = [];\n    this.lights = [];\n    this._shadersVersion = 0;\n  };\n  Model.prototype = {getGraph:function() {\n    return this.graph;\n  }, setGraph:function(graph) {\n    this.graph = graph;\n  }, getCameras:function() {\n    return this.cameras;\n  }, setCameras:function(cameras) {\n    this.cameras = cameras;\n  }, getLights:function() {\n    return this.lights;\n  }, setLights:function(lights) {\n    this.lights = lights;\n  }, getMaterials:function() {\n    var i;\n    var materials = [];\n    for (i = 0; i < this.meshInstances.length; i++) {\n      var meshInstance = this.meshInstances[i];\n      if (materials.indexOf(meshInstance.material) === -1) {\n        materials.push(meshInstance.material);\n      }\n    }\n    return materials;\n  }, clone:function() {\n    var i, j;\n    var srcNodes = [];\n    var cloneNodes = [];\n    var _duplicate = function(node) {\n      var newNode = node.clone();\n      srcNodes.push(node);\n      cloneNodes.push(newNode);\n      for (var i = 0; i < node._children.length; i++) {\n        newNode.addChild(_duplicate(node._children[i]));\n      }\n      return newNode;\n    };\n    var cloneGraph = _duplicate(this.graph);\n    var cloneMeshInstances = [];\n    var cloneSkinInstances = [];\n    var cloneMorphInstances = [];\n    for (i = 0; i < this.skinInstances.length; i++) {\n      var skin = this.skinInstances[i].skin;\n      var cloneSkinInstance = new pc.SkinInstance(skin);\n      var bones = [];\n      for (j = 0; j < skin.boneNames.length; j++) {\n        var boneName = skin.boneNames[j];\n        var bone = cloneGraph.findByName(boneName);\n        bones.push(bone);\n      }\n      cloneSkinInstance.bones = bones;\n      cloneSkinInstances.push(cloneSkinInstance);\n    }\n    for (i = 0; i < this.morphInstances.length; i++) {\n      var morph = this.morphInstances[i].morph;\n      var cloneMorphInstance = new pc.MorphInstance(morph);\n      cloneMorphInstances.push(cloneMorphInstance);\n    }\n    for (i = 0; i < this.meshInstances.length; i++) {\n      var meshInstance = this.meshInstances[i];\n      var nodeIndex = srcNodes.indexOf(meshInstance.node);\n      var cloneMeshInstance = new pc.MeshInstance(cloneNodes[nodeIndex], meshInstance.mesh, meshInstance.material);\n      if (meshInstance.skinInstance) {\n        var skinInstanceIndex = this.skinInstances.indexOf(meshInstance.skinInstance);\n        cloneMeshInstance.skinInstance = cloneSkinInstances[skinInstanceIndex];\n      }\n      if (meshInstance.morphInstance) {\n        var morphInstanceIndex = this.morphInstances.indexOf(meshInstance.morphInstance);\n        cloneMeshInstance.morphInstance = cloneMorphInstances[morphInstanceIndex];\n      }\n      cloneMeshInstances.push(cloneMeshInstance);\n    }\n    var clone = new pc.Model;\n    clone.graph = cloneGraph;\n    clone.meshInstances = cloneMeshInstances;\n    clone.skinInstances = cloneSkinInstances;\n    clone.morphInstances = cloneMorphInstances;\n    clone.getGraph().syncHierarchy();\n    return clone;\n  }, destroy:function() {\n    var meshInstances = this.meshInstances;\n    var meshInstance, mesh, skin, morph, ib, boneTex, j;\n    var device;\n    for (var i = 0; i < meshInstances.length; i++) {\n      meshInstance = meshInstances[i];\n      mesh = meshInstance.mesh;\n      if (mesh) {\n        mesh._refCount--;\n        if (mesh._refCount < 1) {\n          if (mesh.vertexBuffer) {\n            device = device || mesh.vertexBuffer.device;\n            mesh.vertexBuffer.destroy();\n            mesh.vertexBuffer = null;\n          }\n          for (j = 0; j < mesh.indexBuffer.length; j++) {\n            device = device || mesh.indexBuffer.device;\n            ib = mesh.indexBuffer[j];\n            if (!ib) {\n              continue;\n            }\n            ib.destroy();\n          }\n          mesh.indexBuffer.length = 0;\n        }\n      }\n      skin = meshInstance.skinInstance;\n      if (skin) {\n        boneTex = skin.boneTexture;\n        if (boneTex) {\n          boneTex.destroy();\n        }\n      }\n      meshInstance.skinInstance = null;\n      morph = meshInstance.morphInstance;\n      if (morph) {\n        morph.destroy();\n      }\n      meshInstance.morphInstance = null;\n      meshInstance.material = null;\n    }\n  }, generateWireframe:function() {\n    var i, j, k;\n    var i1, i2;\n    var mesh, base, count, indexBuffer, wireBuffer;\n    var srcIndices, dstIndices;\n    var meshes = [];\n    for (i = 0; i < this.meshInstances.length; i++) {\n      mesh = this.meshInstances[i].mesh;\n      if (meshes.indexOf(mesh) === -1) {\n        meshes.push(mesh);\n      }\n    }\n    var offsets = [[0, 1], [1, 2], [2, 0]];\n    for (i = 0; i < meshes.length; i++) {\n      mesh = meshes[i];\n      base = mesh.primitive[pc.RENDERSTYLE_SOLID].base;\n      count = mesh.primitive[pc.RENDERSTYLE_SOLID].count;\n      indexBuffer = mesh.indexBuffer[pc.RENDERSTYLE_SOLID];\n      srcIndices = new Uint16Array(indexBuffer.lock());\n      var uniqueLineIndices = {};\n      var lines = [];\n      for (j = base; j < base + count; j += 3) {\n        for (k = 0; k < 3; k++) {\n          i1 = srcIndices[j + offsets[k][0]];\n          i2 = srcIndices[j + offsets[k][1]];\n          var line = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;\n          if (uniqueLineIndices[line] === undefined) {\n            uniqueLineIndices[line] = 0;\n            lines.push(i1, i2);\n          }\n        }\n      }\n      indexBuffer.unlock();\n      wireBuffer = new pc.IndexBuffer(indexBuffer.device, pc.INDEXFORMAT_UINT16, lines.length);\n      dstIndices = new Uint16Array(wireBuffer.lock());\n      dstIndices.set(lines);\n      wireBuffer.unlock();\n      mesh.primitive[pc.RENDERSTYLE_WIREFRAME] = {type:pc.PRIMITIVE_LINES, base:0, count:lines.length, indexed:true};\n      mesh.indexBuffer[pc.RENDERSTYLE_WIREFRAME] = wireBuffer;\n    }\n  }};\n  return {Model:Model};\n}());\npc.extend(pc, function() {\n  var particleVerts = [[-1, -1], [1, -1], [1, 1], [-1, 1]];\n  var _createTexture = function(device, width, height, pixelData, format, mult8Bit, filter) {\n    if (!format) {\n      format = pc.PIXELFORMAT_RGBA32F;\n    }\n    var mipFilter = pc.FILTER_NEAREST;\n    if (filter && format === pc.PIXELFORMAT_R8_G8_B8_A8) {\n      mipFilter = pc.FILTER_LINEAR;\n    }\n    var texture = new pc.Texture(device, {width:width, height:height, format:format, cubemap:false, mipmaps:false, minFilter:mipFilter, magFilter:mipFilter, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});\n    var pixels = texture.lock();\n    if (format === pc.PIXELFORMAT_R8_G8_B8_A8) {\n      var temp = new Uint8Array(pixelData.length);\n      for (var i = 0; i < pixelData.length; i++) {\n        temp[i] = pixelData[i] * mult8Bit * 255;\n      }\n      pixelData = temp;\n    }\n    pixels.set(pixelData);\n    texture.unlock();\n    return texture;\n  };\n  function saturate(x) {\n    return Math.max(Math.min(x, 1), 0);\n  }\n  function glMod(x, y) {\n    return x - y * Math.floor(x / y);\n  }\n  var default0Curve = new pc.Curve([0, 0, 1, 0]);\n  var default1Curve = new pc.Curve([0, 1, 1, 1]);\n  var default0Curve3 = new pc.CurveSet([0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]);\n  var default1Curve3 = new pc.CurveSet([0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]);\n  var particleTexHeight = 2;\n  var particleTexChannels = 4;\n  var velocityVec = new pc.Vec3;\n  var localVelocityVec = new pc.Vec3;\n  var velocityVec2 = new pc.Vec3;\n  var localVelocityVec2 = new pc.Vec3;\n  var rndFactor3Vec = new pc.Vec3;\n  var particlePosPrev = new pc.Vec3;\n  var particlePos = new pc.Vec3;\n  var particleFinalPos = new pc.Vec3;\n  var moveDirVec = new pc.Vec3;\n  var rotMat = new pc.Mat4;\n  var spawnMatrix3 = new pc.Mat3;\n  var emitterMatrix3 = new pc.Mat3;\n  var uniformScale = 1;\n  var nonUniformScale;\n  var spawnMatrix = new pc.Mat4;\n  var randomPos = new pc.Vec3;\n  var randomPosTformed = new pc.Vec3;\n  var tmpVec3 = new pc.Vec3;\n  var velocityV = new pc.Vec3;\n  var bMin = new pc.Vec3;\n  var bMax = new pc.Vec3;\n  var setPropertyTarget;\n  var setPropertyOptions;\n  function setProperty(pName, defaultVal) {\n    if (setPropertyOptions[pName] !== undefined && setPropertyOptions[pName] !== null) {\n      setPropertyTarget[pName] = setPropertyOptions[pName];\n    } else {\n      setPropertyTarget[pName] = defaultVal;\n    }\n  }\n  function pack3NFloats(a, b, c) {\n    var packed = a * 255 << 16 | b * 255 << 8 | c * 255;\n    return packed / (1 << 24);\n  }\n  function packTextureXYZ_NXYZ(qXYZ, qXYZ2) {\n    var num = qXYZ.length / 3;\n    var colors = new Array(num * 4);\n    for (var i = 0; i < num; i++) {\n      colors[i * 4] = qXYZ[i * 3];\n      colors[i * 4 + 1] = qXYZ[i * 3 + 1];\n      colors[i * 4 + 2] = qXYZ[i * 3 + 2];\n      colors[i * 4 + 3] = pack3NFloats(qXYZ2[i * 3], qXYZ2[i * 3 + 1], qXYZ2[i * 3 + 2]);\n    }\n    return colors;\n  }\n  function packTextureRGBA(qRGB, qA) {\n    var colors = new Array(qA.length * 4);\n    for (var i = 0; i < qA.length; i++) {\n      colors[i * 4] = qRGB[i * 3];\n      colors[i * 4 + 1] = qRGB[i * 3 + 1];\n      colors[i * 4 + 2] = qRGB[i * 3 + 2];\n      colors[i * 4 + 3] = qA[i];\n    }\n    return colors;\n  }\n  function packTexture5Floats(qA, qB, qC, qD, qE) {\n    var colors = new Array(qA.length * 4);\n    for (var i = 0; i < qA.length; i++) {\n      colors[i * 4] = qA[i];\n      colors[i * 4 + 1] = qB[i];\n      colors[i * 4 + 2] = 0;\n      colors[i * 4 + 3] = pack3NFloats(qC[i], qD[i], qE[i]);\n    }\n    return colors;\n  }\n  function syncToCpu(device, targ) {\n    var tex = targ._colorBuffer;\n    var pixels = new Uint8Array(tex.width * tex.height * 4);\n    var gl = device.gl;\n    device.setFramebuffer(targ._glFrameBuffer);\n    gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    if (!tex._levels) {\n      tex._levels = [];\n    }\n    tex._levels[0] = pixels;\n  }\n  var ParticleEmitter = function(graphicsDevice, options) {\n    this.graphicsDevice = graphicsDevice;\n    var gd = graphicsDevice;\n    var precision = 32;\n    this.precision = precision;\n    this._addTimeTime = 0;\n    if (!ParticleEmitter.DEFAULT_PARAM_TEXTURE) {\n      var resolution = 16;\n      var centerPoint = resolution * 0.5 + 0.5;\n      var dtex = new Float32Array(resolution * resolution * 4);\n      var x, y, xgrad, ygrad, p, c;\n      for (y = 0; y < resolution; y++) {\n        for (x = 0; x < resolution; x++) {\n          xgrad = x + 1 - centerPoint;\n          ygrad = y + 1 - centerPoint;\n          c = saturate(1 - saturate(Math.sqrt(xgrad * xgrad + ygrad * ygrad) / resolution) - 0.5);\n          p = y * resolution + x;\n          dtex[p * 4] = 1;\n          dtex[p * 4 + 1] = 1;\n          dtex[p * 4 + 2] = 1;\n          dtex[p * 4 + 3] = c;\n        }\n      }\n      ParticleEmitter.DEFAULT_PARAM_TEXTURE = _createTexture(gd, resolution, resolution, dtex, pc.PIXELFORMAT_R8_G8_B8_A8, 1.0, true);\n      ParticleEmitter.DEFAULT_PARAM_TEXTURE.minFilter = pc.FILTER_LINEAR;\n      ParticleEmitter.DEFAULT_PARAM_TEXTURE.magFilter = pc.FILTER_LINEAR;\n    }\n    setPropertyTarget = this;\n    setPropertyOptions = options;\n    setProperty(\"numParticles\", 1);\n    if (this.numParticles > graphicsDevice.maxTextureSize) {\n      console.warn(\"WARNING: can't create more than \" + graphicsDevice.maxTextureSize + \" particles on this device.\");\n      this.numParticles = graphicsDevice.maxTextureSize;\n    }\n    setProperty(\"rate\", 1);\n    setProperty(\"rate2\", this.rate);\n    setProperty(\"lifetime\", 50);\n    setProperty(\"emitterExtents\", new pc.Vec3(0, 0, 0));\n    setProperty(\"emitterRadius\", 0);\n    setProperty(\"emitterShape\", pc.EMITTERSHAPE_BOX);\n    setProperty(\"initialVelocity\", 1);\n    setProperty(\"wrap\", false);\n    setProperty(\"localSpace\", false);\n    setProperty(\"wrapBounds\", null);\n    setProperty(\"colorMap\", ParticleEmitter.DEFAULT_PARAM_TEXTURE);\n    setProperty(\"normalMap\", null);\n    setProperty(\"loop\", true);\n    setProperty(\"preWarm\", false);\n    setProperty(\"sort\", pc.PARTICLESORT_NONE);\n    setProperty(\"mode\", pc.PARTICLEMODE_GPU);\n    setProperty(\"scene\", null);\n    setProperty(\"lighting\", false);\n    setProperty(\"halfLambert\", false);\n    setProperty(\"intensity\", 1.0);\n    setProperty(\"stretch\", 0.0);\n    setProperty(\"alignToMotion\", false);\n    setProperty(\"depthSoftening\", 0);\n    setProperty(\"mesh\", null);\n    setProperty(\"depthWrite\", false);\n    setProperty(\"noFog\", false);\n    setProperty(\"blendType\", pc.BLEND_NORMAL);\n    setProperty(\"node\", null);\n    setProperty(\"startAngle\", 0);\n    setProperty(\"startAngle2\", this.startAngle);\n    setProperty(\"animTilesX\", 1);\n    setProperty(\"animTilesY\", 1);\n    setProperty(\"animNumFrames\", 1);\n    setProperty(\"animSpeed\", 1);\n    setProperty(\"animLoop\", true);\n    this.frameRandom = new pc.Vec3(0, 0, 0);\n    setProperty(\"colorGraph\", default1Curve3);\n    setProperty(\"colorGraph2\", this.colorGraph);\n    setProperty(\"scaleGraph\", default1Curve);\n    setProperty(\"scaleGraph2\", this.scaleGraph);\n    setProperty(\"alphaGraph\", default1Curve);\n    setProperty(\"alphaGraph2\", this.alphaGraph);\n    setProperty(\"localVelocityGraph\", default0Curve3);\n    setProperty(\"localVelocityGraph2\", this.localVelocityGraph);\n    setProperty(\"velocityGraph\", default0Curve3);\n    setProperty(\"velocityGraph2\", this.velocityGraph);\n    setProperty(\"rotationSpeedGraph\", default0Curve);\n    setProperty(\"rotationSpeedGraph2\", this.rotationSpeedGraph);\n    this.constantParticleTexIN = gd.scope.resolve(\"particleTexIN\");\n    this.constantParticleTexOUT = gd.scope.resolve(\"particleTexOUT\");\n    this.constantEmitterPos = gd.scope.resolve(\"emitterPos\");\n    this.constantEmitterScale = gd.scope.resolve(\"emitterScale\");\n    this.constantSpawnBounds = gd.scope.resolve(\"spawnBounds\");\n    this.constantSpawnBoundsSphere = gd.scope.resolve(\"spawnBoundsSphere\");\n    this.constantInitialVelocity = gd.scope.resolve(\"initialVelocity\");\n    this.constantFrameRandom = gd.scope.resolve(\"frameRandom\");\n    this.constantDelta = gd.scope.resolve(\"delta\");\n    this.constantRate = gd.scope.resolve(\"rate\");\n    this.constantRateDiv = gd.scope.resolve(\"rateDiv\");\n    this.constantLifetime = gd.scope.resolve(\"lifetime\");\n    this.constantLightCube = gd.scope.resolve(\"lightCube[0]\");\n    this.constantGraphSampleSize = gd.scope.resolve(\"graphSampleSize\");\n    this.constantGraphNumSamples = gd.scope.resolve(\"graphNumSamples\");\n    this.constantInternalTex0 = gd.scope.resolve(\"internalTex0\");\n    this.constantInternalTex1 = gd.scope.resolve(\"internalTex1\");\n    this.constantInternalTex2 = gd.scope.resolve(\"internalTex2\");\n    this.constantEmitterMatrix = gd.scope.resolve(\"emitterMatrix\");\n    this.constantNumParticles = gd.scope.resolve(\"numParticles\");\n    this.constantNumParticlesPot = gd.scope.resolve(\"numParticlesPot\");\n    this.constantLocalVelocityDivMult = gd.scope.resolve(\"localVelocityDivMult\");\n    this.constantVelocityDivMult = gd.scope.resolve(\"velocityDivMult\");\n    this.constantRotSpeedDivMult = gd.scope.resolve(\"rotSpeedDivMult\");\n    this.constantSeed = gd.scope.resolve(\"seed\");\n    this.constantStartAngle = gd.scope.resolve(\"startAngle\");\n    this.constantStartAngle2 = gd.scope.resolve(\"startAngle2\");\n    this.constantOutBoundsMul = gd.scope.resolve(\"outBoundsMul\");\n    this.constantOutBoundsAdd = gd.scope.resolve(\"outBoundsAdd\");\n    this.constantInBoundsSize = gd.scope.resolve(\"inBoundsSize\");\n    this.constantInBoundsCenter = gd.scope.resolve(\"inBoundsCenter\");\n    this.constantMaxVel = gd.scope.resolve(\"maxVel\");\n    this.lightCube = new Float32Array(6 * 3);\n    this.lightCubeDir = new Array(6);\n    this.lightCubeDir[0] = new pc.Vec3(-1, 0, 0);\n    this.lightCubeDir[1] = new pc.Vec3(1, 0, 0);\n    this.lightCubeDir[2] = new pc.Vec3(0, -1, 0);\n    this.lightCubeDir[3] = new pc.Vec3(0, 1, 0);\n    this.lightCubeDir[4] = new pc.Vec3(0, 0, -1);\n    this.lightCubeDir[5] = new pc.Vec3(0, 0, 1);\n    this.animParams = new pc.Vec4;\n    this.internalTex0 = null;\n    this.internalTex1 = null;\n    this.internalTex2 = null;\n    this.internalTex3 = null;\n    this.vbToSort = null;\n    this.vbOld = null;\n    this.particleDistance = null;\n    this.camera = null;\n    this.swapTex = false;\n    this.useMesh = true;\n    this.useCpu = false;\n    this.pack8 = true;\n    this.localBounds = new pc.BoundingBox;\n    this.worldBoundsNoTrail = new pc.BoundingBox;\n    this.worldBoundsTrail = [new pc.BoundingBox, new pc.BoundingBox];\n    this.worldBounds = new pc.BoundingBox;\n    this.worldBoundsSize = new pc.Vec3;\n    this.prevWorldBoundsSize = new pc.Vec3;\n    this.prevWorldBoundsCenter = new pc.Vec3;\n    this.worldBoundsMul = new pc.Vec3;\n    this.worldBoundsAdd = new pc.Vec3;\n    this.timeToSwitchBounds = 0;\n    this.shaderParticleUpdateRespawn = null;\n    this.shaderParticleUpdateNoRespawn = null;\n    this.shaderParticleUpdateOnStop = null;\n    this.numParticleVerts = 0;\n    this.numParticleIndices = 0;\n    this.material = null;\n    this.meshInstance = null;\n    this.seed = 0;\n    this.fixedTimeStep = 1.0 / 60;\n    this.maxSubSteps = 10;\n    this.simTime = 0;\n    this.simTimeTotal = 0;\n    this.beenReset = false;\n    this._layer = null;\n    this.rebuild();\n  };\n  function calcEndTime(emitter) {\n    var interval = Math.max(emitter.rate, emitter.rate2) * emitter.numParticles + emitter.lifetime;\n    return Date.now() + interval * 1000;\n  }\n  function subGraph(A, B) {\n    var r = new Float32Array(A.length);\n    for (var i = 0; i < A.length; i++) {\n      r[i] = A[i] - B[i];\n    }\n    return r;\n  }\n  function maxUnsignedGraphValue(A, outUMax) {\n    var i, j;\n    var chans = outUMax.length;\n    var values = A.length / chans;\n    for (i = 0; i < values; i++) {\n      for (j = 0; j < chans; j++) {\n        var a = Math.abs(A[i * chans + j]);\n        outUMax[j] = Math.max(outUMax[j], a);\n      }\n    }\n  }\n  function normalizeGraph(A, uMax) {\n    var chans = uMax.length;\n    var i, j;\n    var values = A.length / chans;\n    for (i = 0; i < values; i++) {\n      for (j = 0; j < chans; j++) {\n        A[i * chans + j] /= uMax[j];\n        A[i * chans + j] *= 0.5;\n        A[i * chans + j] += 0.5;\n      }\n    }\n  }\n  function divGraphFrom2Curves(curve1, curve2, outUMax) {\n    var sub = subGraph(curve2, curve1);\n    maxUnsignedGraphValue(sub, outUMax);\n    normalizeGraph(sub, outUMax);\n    return sub;\n  }\n  function mat4ToMat3(mat4, mat3) {\n    mat3.data[0] = mat4.data[0];\n    mat3.data[1] = mat4.data[1];\n    mat3.data[2] = mat4.data[2];\n    mat3.data[3] = mat4.data[4];\n    mat3.data[4] = mat4.data[5];\n    mat3.data[5] = mat4.data[6];\n    mat3.data[6] = mat4.data[8];\n    mat3.data[7] = mat4.data[9];\n    mat3.data[8] = mat4.data[10];\n  }\n  ParticleEmitter.prototype = {onChangeCamera:function() {\n    this.regenShader();\n    this.resetMaterial();\n  }, calculateBoundsMad:function() {\n    this.worldBoundsMul.x = 1.0 / this.worldBoundsSize.x;\n    this.worldBoundsMul.y = 1.0 / this.worldBoundsSize.y;\n    this.worldBoundsMul.z = 1.0 / this.worldBoundsSize.z;\n    this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).scale(-1);\n    this.worldBoundsAdd.x += 0.5;\n    this.worldBoundsAdd.y += 0.5;\n    this.worldBoundsAdd.z += 0.5;\n  }, calculateWorldBounds:function() {\n    if (!this.node) {\n      return;\n    }\n    var pos = this.node.getPosition();\n    this.prevWorldBoundsSize.copy(this.worldBoundsSize);\n    this.prevWorldBoundsCenter.copy(this.worldBounds.center);\n    this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds, this.node.getWorldTransform());\n    this.worldBoundsTrail[0].add(this.worldBoundsNoTrail);\n    var now = this.simTimeTotal;\n    if (now > this.timeToSwitchBounds) {\n      var tmp = this.worldBoundsTrail[0];\n      this.worldBoundsTrail[0] = this.worldBoundsTrail[1];\n      this.worldBoundsTrail[1] = tmp;\n      this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail);\n      this.timeToSwitchBounds = now + this.lifetime;\n    }\n    this.worldBounds.copy(this.worldBoundsTrail[0]);\n    this.worldBounds.add(this.worldBoundsTrail[1]);\n    this.worldBoundsSize.copy(this.worldBounds.halfExtents).scale(2);\n    this.meshInstance.mesh.aabb = this.worldBounds;\n    this.meshInstance._aabbVer = 1 - this.meshInstance._aabbVer;\n    if (this.pack8) {\n      this.calculateBoundsMad();\n    }\n  }, calculateLocalBounds:function() {\n    var minx = Number.MAX_VALUE;\n    var miny = Number.MAX_VALUE;\n    var minz = Number.MAX_VALUE;\n    var maxx = -Number.MAX_VALUE;\n    var maxy = -Number.MAX_VALUE;\n    var maxz = -Number.MAX_VALUE;\n    var maxScale = 0;\n    var stepWeight = this.lifetime / this.precision;\n    var vels = [this.qVelocity, this.qVelocity2, this.qLocalVelocity, this.qLocalVelocity2];\n    var accumX = [0, 0, 0, 0];\n    var accumY = [0, 0, 0, 0];\n    var accumZ = [0, 0, 0, 0];\n    var i, j;\n    var index;\n    var x, y, z;\n    for (i = 0; i < this.precision + 1; i++) {\n      index = Math.min(i, this.precision - 1);\n      for (j = 0; j < 4; j++) {\n        x = vels[j][index * 3] * stepWeight + accumX[j];\n        y = vels[j][index * 3 + 1] * stepWeight + accumY[j];\n        z = vels[j][index * 3 + 2] * stepWeight + accumZ[j];\n        if (minx > x) {\n          minx = x;\n        }\n        if (miny > y) {\n          miny = y;\n        }\n        if (minz > z) {\n          minz = z;\n        }\n        if (maxx < x) {\n          maxx = x;\n        }\n        if (maxy < y) {\n          maxy = y;\n        }\n        if (maxz < z) {\n          maxz = z;\n        }\n        accumX[j] = x;\n        accumY[j] = y;\n        accumZ[j] = z;\n      }\n      maxScale = Math.max(maxScale, this.qScale[index]);\n    }\n    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {\n      x = this.emitterExtents.x * 0.5;\n      y = this.emitterExtents.y * 0.5;\n      z = this.emitterExtents.z * 0.5;\n      if (maxx < x) {\n        maxx = x;\n      }\n      if (maxy < y) {\n        maxy = y;\n      }\n      if (maxz < z) {\n        maxz = z;\n      }\n      x = -x;\n      y = -y;\n      z = -z;\n      if (minx > x) {\n        minx = x;\n      }\n      if (miny > y) {\n        miny = y;\n      }\n      if (minz > z) {\n        minz = z;\n      }\n    } else {\n      x = this.emitterRadius;\n      y = this.emitterRadius;\n      z = this.emitterRadius;\n      if (maxx < x) {\n        maxx = x;\n      }\n      if (maxy < y) {\n        maxy = y;\n      }\n      if (maxz < z) {\n        maxz = z;\n      }\n      x = -x;\n      y = -y;\n      z = -z;\n      if (minx > x) {\n        minx = x;\n      }\n      if (miny > y) {\n        miny = y;\n      }\n      if (minz > z) {\n        minz = z;\n      }\n    }\n    bMin.x = minx - maxScale;\n    bMin.y = miny - maxScale;\n    bMin.z = minz - maxScale;\n    bMax.x = maxx + maxScale;\n    bMax.y = maxy + maxScale;\n    bMax.z = maxz + maxScale;\n    this.localBounds.setMinMax(bMin, bMax);\n  }, rebuild:function() {\n    var i, len;\n    var precision = this.precision;\n    var gd = this.graphicsDevice;\n    if (this.colorMap === null) {\n      this.colorMap = ParticleEmitter.DEFAULT_PARAM_TEXTURE;\n    }\n    this.spawnBounds = this.emitterShape === pc.EMITTERSHAPE_BOX ? this.emitterExtents : this.emitterRadius;\n    this.useCpu = this.useCpu || this.sort > pc.PARTICLESORT_NONE || gd.maxVertexTextures <= 1 || gd.fragmentUniformsCount < 64 || gd.forceCpuParticles || !gd.extTextureFloat;\n    this.vertexBuffer = undefined;\n    this.pack8 = (this.pack8 || !gd.extTextureFloatRenderable) && !this.useCpu;\n    particleTexHeight = this.useCpu || this.pack8 ? 4 : 2;\n    this.useMesh = false;\n    if (this.mesh) {\n      var totalVertCount = this.numParticles * this.mesh.vertexBuffer.numVertices;\n      if (totalVertCount > 65535) {\n        console.warn(\"WARNING: particle system can't render mesh particles because numParticles * numVertices is more than 65k. Reverting to quad particles.\");\n      } else {\n        this.useMesh = true;\n      }\n    }\n    this.numParticlesPot = pc.math.nextPowerOfTwo(this.numParticles);\n    this.rebuildGraphs();\n    this.calculateLocalBounds();\n    if (this.node) {\n      this.worldBounds.setFromTransformedAabb(this.localBounds, this.node.getWorldTransform());\n      this.worldBoundsTrail[0].copy(this.worldBounds);\n      this.worldBoundsTrail[1].copy(this.worldBounds);\n      this.worldBoundsSize.copy(this.worldBounds.halfExtents).scale(2);\n      this.prevWorldBoundsSize.copy(this.worldBoundsSize);\n      this.prevWorldBoundsCenter.copy(this.worldBounds.center);\n      if (this.pack8) {\n        this.calculateBoundsMad();\n      }\n    }\n    this.vbToSort = new Array(this.numParticles);\n    this.particleDistance = new Float32Array(this.numParticles);\n    this.frameRandom.x = Math.random();\n    this.frameRandom.y = Math.random();\n    this.frameRandom.z = Math.random();\n    this.particleTex = new Float32Array(this.numParticlesPot * particleTexHeight * particleTexChannels);\n    var emitterPos = this.node === null || this.localSpace ? pc.Vec3.ZERO : this.node.getPosition();\n    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {\n      if (this.node === null) {\n        spawnMatrix.setTRS(pc.Vec3.ZERO, pc.Quat.IDENTITY, this.spawnBounds);\n      } else {\n        spawnMatrix.setTRS(pc.Vec3.ZERO, this.node.getRotation(), tmpVec3.copy(this.spawnBounds).mul(this.node.localScale));\n      }\n    }\n    for (i = 0; i < this.numParticles; i++) {\n      this.calcSpawnPosition(emitterPos, i);\n      if (this.useCpu) {\n        this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = 1;\n      }\n    }\n    this.particleTexStart = new Float32Array(this.numParticlesPot * particleTexHeight * particleTexChannels);\n    for (i = 0; i < this.particleTexStart.length; i++) {\n      this.particleTexStart[i] = this.particleTex[i];\n    }\n    if (!this.useCpu) {\n      if (this.pack8) {\n        this.particleTexIN = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex, pc.PIXELFORMAT_R8_G8_B8_A8, 1, false);\n        this.particleTexOUT = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex, pc.PIXELFORMAT_R8_G8_B8_A8, 1, false);\n        this.particleTexStart = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTexStart, pc.PIXELFORMAT_R8_G8_B8_A8, 1, false);\n      } else {\n        this.particleTexIN = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex);\n        this.particleTexOUT = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex);\n        this.particleTexStart = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTexStart);\n      }\n      this.rtParticleTexIN = new pc.RenderTarget(gd, this.particleTexIN, {depth:false});\n      this.rtParticleTexOUT = new pc.RenderTarget(gd, this.particleTexOUT, {depth:false});\n      this.swapTex = false;\n    }\n    var chunks = pc.shaderChunks;\n    var shaderCodeStart = chunks.particleUpdaterInitPS + (this.pack8 ? chunks.particleInputRgba8PS + chunks.particleOutputRgba8PS : chunks.particleInputFloatPS + chunks.particleOutputFloatPS) + (this.emitterShape === pc.EMITTERSHAPE_BOX ? chunks.particleUpdaterAABBPS : chunks.particleUpdaterSpherePS) + chunks.particleUpdaterStartPS;\n    var shaderCodeRespawn = shaderCodeStart + chunks.particleUpdaterRespawnPS + chunks.particleUpdaterEndPS;\n    var shaderCodeNoRespawn = shaderCodeStart + chunks.particleUpdaterNoRespawnPS + chunks.particleUpdaterEndPS;\n    var shaderCodeOnStop = shaderCodeStart + chunks.particleUpdaterOnStopPS + chunks.particleUpdaterEndPS;\n    this.shaderParticleUpdateRespawn = chunks.createShaderFromCode(gd, chunks.fullscreenQuadVS, shaderCodeRespawn, \"fsQuad0\" + this.emitterShape + \"\" + this.pack8);\n    this.shaderParticleUpdateNoRespawn = chunks.createShaderFromCode(gd, chunks.fullscreenQuadVS, shaderCodeNoRespawn, \"fsQuad1\" + this.emitterShape + \"\" + this.pack8);\n    this.shaderParticleUpdateOnStop = chunks.createShaderFromCode(gd, chunks.fullscreenQuadVS, shaderCodeOnStop, \"fsQuad2\" + this.emitterShape + \"\" + this.pack8);\n    this.numParticleVerts = this.useMesh ? this.mesh.vertexBuffer.numVertices : 4;\n    this.numParticleIndices = this.useMesh ? this.mesh.indexBuffer[0].numIndices : 6;\n    this._allocate(this.numParticles);\n    var mesh = new pc.Mesh;\n    mesh.vertexBuffer = this.vertexBuffer;\n    mesh.indexBuffer[0] = this.indexBuffer;\n    mesh.primitive[0].type = pc.PRIMITIVE_TRIANGLES;\n    mesh.primitive[0].base = 0;\n    mesh.primitive[0].count = this.numParticles * this.numParticleIndices;\n    mesh.primitive[0].indexed = true;\n    this.material = new pc.Material;\n    this.material.cullMode = pc.CULLFACE_NONE;\n    this.material.alphaWrite = false;\n    this.material.blend = true;\n    this.material.blendType = this.blendType;\n    this.material.depthWrite = this.depthWrite;\n    this.material.emitter = this;\n    this.regenShader();\n    this.resetMaterial();\n    this.meshInstance = new pc.MeshInstance(this.node, mesh, this.material);\n    this.meshInstance.pick = false;\n    this.meshInstance.updateKey();\n    this.meshInstance.cull = true;\n    this.meshInstance._noDepthDrawGl1 = true;\n    this.meshInstance.aabb = this.worldBounds;\n    this.meshInstance._updateAabb = false;\n    this._initializeTextures();\n    this.addTime(0);\n    if (this.preWarm) {\n      this.prewarm(this.lifetime);\n    }\n    this.resetTime();\n  }, _isAnimated:function() {\n    return this.animNumFrames >= 1 && (this.animTilesX > 1 || this.animTilesY > 1) && (this.colorMap && this.colorMap !== ParticleEmitter.DEFAULT_PARAM_TEXTURE || this.normalMap);\n  }, calcSpawnPosition:function(emitterPos, i) {\n    var rX = Math.random();\n    var rY = Math.random();\n    var rZ = Math.random();\n    var rW = Math.random();\n    if (this.useCpu) {\n      this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * 2 * particleTexChannels] = rX;\n      this.particleTex[i * particleTexChannels + 1 + this.numParticlesPot * 2 * particleTexChannels] = rY;\n      this.particleTex[i * particleTexChannels + 2 + this.numParticlesPot * 2 * particleTexChannels] = rZ;\n    }\n    randomPos.data[0] = rX - 0.5;\n    randomPos.data[1] = rY - 0.5;\n    randomPos.data[2] = rZ - 0.5;\n    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {\n      randomPosTformed.copy(emitterPos).add(spawnMatrix.transformPoint(randomPos));\n    } else {\n      randomPos.normalize();\n      randomPosTformed.copy(emitterPos).add(randomPos.scale(rW * this.spawnBounds));\n    }\n    var particleRate, startSpawnTime;\n    if (this.pack8) {\n      var packX = (randomPosTformed.data[0] - this.worldBounds.center.data[0]) / this.worldBoundsSize.data[0] + 0.5;\n      var packY = (randomPosTformed.data[1] - this.worldBounds.center.data[1]) / this.worldBoundsSize.data[1] + 0.5;\n      var packZ = (randomPosTformed.data[2] - this.worldBounds.center.data[2]) / this.worldBoundsSize.data[2] + 0.5;\n      var packA = pc.math.lerp(this.startAngle * pc.math.DEG_TO_RAD, this.startAngle2 * pc.math.DEG_TO_RAD, rX);\n      packA = packA % (Math.PI * 2) / (Math.PI * 2);\n      var rg0 = encodeFloatRG(packX);\n      this.particleTex[i * particleTexChannels] = rg0[0];\n      this.particleTex[i * particleTexChannels + 1] = rg0[1];\n      var ba0 = encodeFloatRG(packY);\n      this.particleTex[i * particleTexChannels + 2] = ba0[0];\n      this.particleTex[i * particleTexChannels + 3] = ba0[1];\n      var rg1 = encodeFloatRG(packZ);\n      this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * particleTexChannels] = rg1[0];\n      this.particleTex[i * particleTexChannels + 1 + this.numParticlesPot * particleTexChannels] = rg1[1];\n      var ba1 = encodeFloatRG(packA);\n      this.particleTex[i * particleTexChannels + 2 + this.numParticlesPot * particleTexChannels] = ba1[0];\n      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] = ba1[1];\n      var a2 = 1.0;\n      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels * 2] = a2;\n      particleRate = pc.math.lerp(this.rate, this.rate2, rX);\n      startSpawnTime = -particleRate * i;\n      var maxNegLife = Math.max(this.lifetime, (this.numParticles - 1.0) * Math.max(this.rate, this.rate2));\n      var maxPosLife = this.lifetime + 1.0;\n      startSpawnTime = (startSpawnTime + maxNegLife) / (maxNegLife + maxPosLife);\n      var rgba3 = encodeFloatRGBA(startSpawnTime);\n      this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * particleTexChannels * 3] = rgba3[0];\n      this.particleTex[i * particleTexChannels + 1 + this.numParticlesPot * particleTexChannels * 3] = rgba3[1];\n      this.particleTex[i * particleTexChannels + 2 + this.numParticlesPot * particleTexChannels * 3] = rgba3[2];\n      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels * 3] = rgba3[3];\n    } else {\n      this.particleTex[i * particleTexChannels] = randomPosTformed.data[0];\n      this.particleTex[i * particleTexChannels + 1] = randomPosTformed.data[1];\n      this.particleTex[i * particleTexChannels + 2] = randomPosTformed.data[2];\n      this.particleTex[i * particleTexChannels + 3] = pc.math.lerp(this.startAngle * pc.math.DEG_TO_RAD, this.startAngle2 * pc.math.DEG_TO_RAD, rX);\n      particleRate = pc.math.lerp(this.rate, this.rate2, rX);\n      startSpawnTime = -particleRate * i;\n      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] = startSpawnTime;\n    }\n  }, rebuildGraphs:function() {\n    var precision = this.precision;\n    var gd = this.graphicsDevice;\n    var i;\n    this.qLocalVelocity = this.localVelocityGraph.quantize(precision);\n    this.qVelocity = this.velocityGraph.quantize(precision);\n    this.qColor = this.colorGraph.quantize(precision);\n    this.qRotSpeed = this.rotationSpeedGraph.quantize(precision);\n    this.qScale = this.scaleGraph.quantize(precision);\n    this.qAlpha = this.alphaGraph.quantize(precision);\n    this.qLocalVelocity2 = this.localVelocityGraph2.quantize(precision);\n    this.qVelocity2 = this.velocityGraph2.quantize(precision);\n    this.qColor2 = this.colorGraph2.quantize(precision);\n    this.qRotSpeed2 = this.rotationSpeedGraph2.quantize(precision);\n    this.qScale2 = this.scaleGraph2.quantize(precision);\n    this.qAlpha2 = this.alphaGraph2.quantize(precision);\n    for (i = 0; i < precision; i++) {\n      this.qRotSpeed[i] *= pc.math.DEG_TO_RAD;\n      this.qRotSpeed2[i] *= pc.math.DEG_TO_RAD;\n    }\n    this.localVelocityUMax = new pc.Vec3(0, 0, 0);\n    this.velocityUMax = new pc.Vec3(0, 0, 0);\n    this.colorUMax = new pc.Vec3(0, 0, 0);\n    this.rotSpeedUMax = [0];\n    this.scaleUMax = [0];\n    this.alphaUMax = [0];\n    this.qLocalVelocityDiv = divGraphFrom2Curves(this.qLocalVelocity, this.qLocalVelocity2, this.localVelocityUMax.data);\n    this.qVelocityDiv = divGraphFrom2Curves(this.qVelocity, this.qVelocity2, this.velocityUMax.data);\n    this.qColorDiv = divGraphFrom2Curves(this.qColor, this.qColor2, this.colorUMax.data);\n    this.qRotSpeedDiv = divGraphFrom2Curves(this.qRotSpeed, this.qRotSpeed2, this.rotSpeedUMax);\n    this.qScaleDiv = divGraphFrom2Curves(this.qScale, this.qScale2, this.scaleUMax);\n    this.qAlphaDiv = divGraphFrom2Curves(this.qAlpha, this.qAlpha2, this.alphaUMax);\n    if (this.pack8) {\n      var umax = [0, 0, 0];\n      maxUnsignedGraphValue(this.qVelocity, umax);\n      var umax2 = [0, 0, 0];\n      maxUnsignedGraphValue(this.qVelocity2, umax2);\n      var lumax = [0, 0, 0];\n      maxUnsignedGraphValue(this.qLocalVelocity, lumax);\n      var lumax2 = [0, 0, 0];\n      maxUnsignedGraphValue(this.qLocalVelocity2, lumax2);\n      var maxVel = Math.max(umax[0], umax2[0]);\n      maxVel = Math.max(maxVel, umax[1]);\n      maxVel = Math.max(maxVel, umax2[1]);\n      maxVel = Math.max(maxVel, umax[2]);\n      maxVel = Math.max(maxVel, umax2[2]);\n      var lmaxVel = Math.max(lumax[0], lumax2[0]);\n      lmaxVel = Math.max(lmaxVel, lumax[1]);\n      lmaxVel = Math.max(lmaxVel, lumax2[1]);\n      lmaxVel = Math.max(lmaxVel, lumax[2]);\n      lmaxVel = Math.max(lmaxVel, lumax2[2]);\n      this.maxVel = maxVel + lmaxVel;\n    }\n    if (!this.useCpu) {\n      this.internalTex0 = _createTexture(gd, precision, 1, packTextureXYZ_NXYZ(this.qLocalVelocity, this.qLocalVelocityDiv));\n      this.internalTex1 = _createTexture(gd, precision, 1, packTextureXYZ_NXYZ(this.qVelocity, this.qVelocityDiv));\n      this.internalTex2 = _createTexture(gd, precision, 1, packTexture5Floats(this.qRotSpeed, this.qScale, this.qScaleDiv, this.qRotSpeedDiv, this.qAlphaDiv));\n    }\n    this.internalTex3 = _createTexture(gd, precision, 1, packTextureRGBA(this.qColor, this.qAlpha), pc.PIXELFORMAT_R8_G8_B8_A8, 1.0, true);\n  }, _initializeTextures:function() {\n    if (this.colorMap) {\n      this.material.setParameter(\"colorMap\", this.colorMap);\n      if (this.lighting && this.normalMap) {\n        this.material.setParameter(\"normalMap\", this.normalMap);\n      }\n    }\n  }, regenShader:function() {\n    var programLib = this.graphicsDevice.getProgramLibrary();\n    var hasNormal = this.normalMap !== null;\n    this.normalOption = 0;\n    if (this.lighting) {\n      this.normalOption = hasNormal ? 2 : 1;\n    }\n    this.material.updateShader = function() {\n      if (this.emitter.scene) {\n        if (this.emitter.camera != this.emitter.scene._activeCamera) {\n          this.emitter.camera = this.emitter.scene._activeCamera;\n          this.emitter.onChangeCamera();\n        }\n      }\n      var shader = programLib.getProgram(\"particle\", {useCpu:this.emitter.useCpu, normal:this.emitter.normalOption, halflambert:this.emitter.halfLambert, stretch:this.emitter.stretch, alignToMotion:this.emitter.alignToMotion, soft:this.emitter.depthSoftening, mesh:this.emitter.useMesh, gamma:this.emitter.scene ? this.emitter.scene.gammaCorrection : 0, toneMap:this.emitter.scene ? this.emitter.scene.toneMapping : 0, fog:this.emitter.scene && !this.emitter.noFog ? this.emitter.scene.fog : \"none\", wrap:this.emitter.wrap && \n      this.emitter.wrapBounds, localSpace:this.emitter.localSpace, blend:this.blendType, animTex:this.emitter._isAnimated(), animTexLoop:this.emitter.animLoop, pack8:this.emitter.pack8});\n      this.setShader(shader);\n    };\n    this.material.updateShader();\n  }, resetMaterial:function() {\n    var material = this.material;\n    var gd = this.graphicsDevice;\n    material.setParameter(\"stretch\", this.stretch);\n    if (this._isAnimated()) {\n      material.setParameter(\"animTexParams\", this.animParams.data);\n    }\n    material.setParameter(\"colorMult\", this.intensity);\n    if (!this.useCpu) {\n      material.setParameter(\"internalTex0\", this.internalTex0);\n      material.setParameter(\"internalTex1\", this.internalTex1);\n      material.setParameter(\"internalTex2\", this.internalTex2);\n    }\n    material.setParameter(\"internalTex3\", this.internalTex3);\n    material.setParameter(\"numParticles\", this.numParticles);\n    material.setParameter(\"numParticlesPot\", this.numParticlesPot);\n    material.setParameter(\"lifetime\", this.lifetime);\n    material.setParameter(\"rate\", this.rate);\n    material.setParameter(\"rateDiv\", this.rate2 - this.rate);\n    material.setParameter(\"seed\", this.seed);\n    material.setParameter(\"scaleDivMult\", this.scaleUMax[0]);\n    material.setParameter(\"alphaDivMult\", this.alphaUMax[0]);\n    material.setParameter(\"graphNumSamples\", this.precision);\n    material.setParameter(\"graphSampleSize\", 1.0 / this.precision);\n    material.setParameter(\"emitterScale\", pc.Vec3.ONE.data);\n    if (this.pack8) {\n      material.setParameter(\"inBoundsSize\", this.worldBoundsSize.data);\n      material.setParameter(\"inBoundsCenter\", this.worldBounds.center.data);\n      material.setParameter(\"maxVel\", this.maxVel);\n    }\n    if (this.wrap && this.wrapBounds) {\n      material.setParameter(\"wrapBounds\", this.wrapBounds.data);\n    }\n    if (this.colorMap) {\n      material.setParameter(\"colorMap\", this.colorMap);\n    }\n    if (this.lighting) {\n      if (this.normalMap) {\n        material.setParameter(\"normalMap\", this.normalMap);\n      }\n    }\n    if (this.depthSoftening > 0) {\n      material.setParameter(\"softening\", 1.0 / (this.depthSoftening * this.depthSoftening * 100));\n    }\n    if (this.stretch > 0.0) {\n      material.cull = pc.CULLFACE_NONE;\n    }\n  }, _allocate:function(numParticles) {\n    var psysVertCount = numParticles * this.numParticleVerts;\n    var psysIndexCount = numParticles * this.numParticleIndices;\n    var elements, particleFormat;\n    var i;\n    if (this.vertexBuffer === undefined || this.vertexBuffer.getNumVertices() !== psysVertCount) {\n      if (!this.useCpu) {\n        elements = [{semantic:pc.SEMANTIC_ATTR0, components:4, type:pc.TYPE_FLOAT32}];\n        particleFormat = new pc.VertexFormat(this.graphicsDevice, elements);\n        this.vertexBuffer = new pc.VertexBuffer(this.graphicsDevice, particleFormat, psysVertCount, pc.BUFFER_DYNAMIC);\n        this.indexBuffer = new pc.IndexBuffer(this.graphicsDevice, pc.INDEXFORMAT_UINT16, psysIndexCount);\n      } else {\n        elements = [{semantic:pc.SEMANTIC_ATTR0, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_ATTR1, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_ATTR2, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_ATTR3, components:2, type:pc.TYPE_FLOAT32}];\n        particleFormat = new pc.VertexFormat(this.graphicsDevice, elements);\n        this.vertexBuffer = new pc.VertexBuffer(this.graphicsDevice, particleFormat, psysVertCount, pc.BUFFER_DYNAMIC);\n        this.indexBuffer = new pc.IndexBuffer(this.graphicsDevice, pc.INDEXFORMAT_UINT16, psysIndexCount);\n      }\n      var data = new Float32Array(this.vertexBuffer.lock());\n      var meshData, stride;\n      if (this.useMesh) {\n        meshData = new Float32Array(this.mesh.vertexBuffer.lock());\n        stride = meshData.length / this.mesh.vertexBuffer.numVertices;\n      }\n      var id, rnd;\n      for (i = 0; i < psysVertCount; i++) {\n        id = Math.floor(i / this.numParticleVerts);\n        if (this.useCpu) {\n          if (i % this.numParticleVerts === 0) {\n            rnd = this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * 2 * particleTexChannels];\n          }\n        }\n        if (!this.useMesh) {\n          var vertID = i % 4;\n          data[i * 4] = particleVerts[vertID][0];\n          data[i * 4 + 1] = particleVerts[vertID][1];\n          data[i * 4 + 2] = 0;\n        } else {\n          var vert = i % this.numParticleVerts;\n          data[i * 4] = meshData[vert * stride];\n          data[i * 4 + 1] = meshData[vert * stride + 1];\n          data[i * 4 + 2] = meshData[vert * stride + 2];\n        }\n        data[i * 4 + 3] = id;\n      }\n      if (this.useCpu) {\n        this.vbCPU = new Float32Array(data);\n        this.vbOld = new Float32Array(this.vbCPU.length);\n      }\n      this.vertexBuffer.unlock();\n      if (this.useMesh) {\n        this.mesh.vertexBuffer.unlock();\n      }\n      var dst = 0;\n      var indices = new Uint16Array(this.indexBuffer.lock());\n      if (this.useMesh) {\n        meshData = new Uint16Array(this.mesh.indexBuffer[0].lock());\n      }\n      for (i = 0; i < numParticles; i++) {\n        if (!this.useMesh) {\n          var baseIndex = i * 4;\n          indices[dst++] = baseIndex;\n          indices[dst++] = baseIndex + 1;\n          indices[dst++] = baseIndex + 2;\n          indices[dst++] = baseIndex;\n          indices[dst++] = baseIndex + 2;\n          indices[dst++] = baseIndex + 3;\n        } else {\n          for (var j = 0; j < this.numParticleIndices; j++) {\n            indices[i * this.numParticleIndices + j] = meshData[j] + i * this.numParticleVerts;\n          }\n        }\n      }\n      this.indexBuffer.unlock();\n      if (this.useMesh) {\n        this.mesh.indexBuffer[0].unlock();\n      }\n    }\n  }, reset:function() {\n    this.beenReset = true;\n    this.seed = Math.random();\n    this.material.setParameter(\"seed\", this.seed);\n    if (this.useCpu) {\n      for (var i = 0; i < this.particleTexStart.length; i++) {\n        this.particleTex[i] = this.particleTexStart[i];\n      }\n    } else {\n      this._initializeTextures();\n    }\n    this.resetTime();\n    var origLoop = this.loop;\n    this.loop = true;\n    this.addTime(0);\n    this.loop = origLoop;\n    if (this.preWarm) {\n      this.prewarm(this.lifetime);\n    }\n  }, prewarm:function(time) {\n    var lifetimeFraction = time / this.lifetime;\n    var iterations = Math.min(Math.floor(lifetimeFraction * this.precision), this.precision);\n    var stepDelta = time / iterations;\n    for (var i = 0; i < iterations; i++) {\n      this.addTime(stepDelta);\n    }\n  }, resetTime:function() {\n    this.endTime = calcEndTime(this);\n  }, finishFrame:function() {\n    if (this.useCpu) {\n      this.vertexBuffer.unlock();\n    }\n  }, addTime:function(delta, isOnStop) {\n    var a, b, c, i, j;\n    var device = this.graphicsDevice;\n    this.simTimeTotal += delta;\n    this.calculateWorldBounds();\n    if (this._isAnimated()) {\n      var params = this.animParams;\n      params.x = 1.0 / this.animTilesX;\n      params.y = 1.0 / this.animTilesY;\n      params.z = this.animNumFrames * this.animSpeed;\n      params.w = this.animNumFrames - 1;\n    }\n    if (this.scene) {\n      if (this.camera != this.scene._activeCamera) {\n        this.camera = this.scene._activeCamera;\n        this.onChangeCamera();\n      }\n    }\n    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {\n      if (this.meshInstance.node === null) {\n        spawnMatrix.setTRS(pc.Vec3.ZERO, pc.Quat.IDENTITY, this.emitterExtents);\n      } else {\n        spawnMatrix.setTRS(pc.Vec3.ZERO, this.meshInstance.node.getRotation(), tmpVec3.copy(this.emitterExtents).mul(this.meshInstance.node.localScale));\n      }\n    }\n    var emitterPos;\n    var emitterScale = this.meshInstance.node === null ? pc.Vec3.ONE.data : this.meshInstance.node.localScale.data;\n    this.material.setParameter(\"emitterScale\", emitterScale);\n    if (this.localSpace && this.meshInstance.node) {\n      this.material.setParameter(\"emitterPos\", this.meshInstance.node.getPosition().data);\n    }\n    if (!this.useCpu) {\n      device.setBlending(false);\n      device.setColorWrite(true, true, true, true);\n      device.setCullMode(pc.CULLFACE_NONE);\n      device.setDepthTest(false);\n      device.setDepthWrite(false);\n      this.frameRandom.x = Math.random();\n      this.frameRandom.y = Math.random();\n      this.frameRandom.z = Math.random();\n      this.constantGraphSampleSize.setValue(1.0 / this.precision);\n      this.constantGraphNumSamples.setValue(this.precision);\n      this.constantNumParticles.setValue(this.numParticles);\n      this.constantNumParticlesPot.setValue(this.numParticlesPot);\n      this.constantInternalTex0.setValue(this.internalTex0);\n      this.constantInternalTex1.setValue(this.internalTex1);\n      this.constantInternalTex2.setValue(this.internalTex2);\n      if (this.pack8) {\n        this.constantOutBoundsMul.setValue(this.worldBoundsMul.data);\n        this.constantOutBoundsAdd.setValue(this.worldBoundsAdd.data);\n        this.constantInBoundsSize.setValue(this.prevWorldBoundsSize.data);\n        this.constantInBoundsCenter.setValue(this.prevWorldBoundsCenter.data);\n        var maxVel = this.maxVel * Math.max(Math.max(emitterScale[0], emitterScale[1]), emitterScale[2]);\n        maxVel = Math.max(maxVel, 1);\n        this.constantMaxVel.setValue(maxVel);\n      }\n      emitterPos = this.meshInstance.node === null || this.localSpace ? pc.Vec3.ZERO.data : this.meshInstance.node.getPosition().data;\n      var emitterMatrix = this.meshInstance.node === null ? pc.Mat4.IDENTITY : this.meshInstance.node.getWorldTransform();\n      if (this.emitterShape === pc.EMITTERSHAPE_BOX) {\n        mat4ToMat3(spawnMatrix, spawnMatrix3);\n        this.constantSpawnBounds.setValue(spawnMatrix3.data);\n      } else {\n        this.constantSpawnBoundsSphere.setValue(this.emitterRadius);\n      }\n      this.constantInitialVelocity.setValue(this.initialVelocity);\n      mat4ToMat3(emitterMatrix, emitterMatrix3);\n      this.constantEmitterPos.setValue(emitterPos);\n      this.constantFrameRandom.setValue(this.frameRandom.data);\n      this.constantDelta.setValue(delta);\n      this.constantRate.setValue(this.rate);\n      this.constantRateDiv.setValue(this.rate2 - this.rate);\n      this.constantStartAngle.setValue(this.startAngle * pc.math.DEG_TO_RAD);\n      this.constantStartAngle2.setValue(this.startAngle2 * pc.math.DEG_TO_RAD);\n      this.constantSeed.setValue(this.seed);\n      this.constantLifetime.setValue(this.lifetime);\n      this.constantEmitterScale.setValue(emitterScale);\n      this.constantEmitterMatrix.setValue(emitterMatrix3.data);\n      this.constantLocalVelocityDivMult.setValue(this.localVelocityUMax.data);\n      this.constantVelocityDivMult.setValue(this.velocityUMax.data);\n      this.constantRotSpeedDivMult.setValue(this.rotSpeedUMax[0]);\n      var texIN = this.swapTex ? this.particleTexOUT : this.particleTexIN;\n      texIN = this.beenReset ? this.particleTexStart : texIN;\n      var texOUT = this.swapTex ? this.particleTexIN : this.particleTexOUT;\n      this.constantParticleTexIN.setValue(texIN);\n      if (!isOnStop) {\n        pc.drawQuadWithShader(device, this.swapTex ? this.rtParticleTexIN : this.rtParticleTexOUT, this.loop ? this.shaderParticleUpdateRespawn : this.shaderParticleUpdateNoRespawn);\n      } else {\n        pc.drawQuadWithShader(device, this.swapTex ? this.rtParticleTexIN : this.rtParticleTexOUT, this.shaderParticleUpdateOnStop);\n      }\n      this.constantParticleTexOUT.setValue(texOUT);\n      this.material.setParameter(\"particleTexOUT\", texIN);\n      this.material.setParameter(\"particleTexIN\", texOUT);\n      this.beenReset = false;\n      this.swapTex = !this.swapTex;\n      device.setDepthTest(true);\n      device.setDepthWrite(true);\n    } else {\n      var data = new Float32Array(this.vertexBuffer.lock());\n      if (this.meshInstance.node) {\n        var fullMat = this.meshInstance.node.worldTransform;\n        for (j = 0; j < 12; j++) {\n          rotMat.data[j] = fullMat.data[j];\n        }\n        nonUniformScale = this.meshInstance.node.localScale;\n        uniformScale = Math.max(Math.max(nonUniformScale.x, nonUniformScale.y), nonUniformScale.z);\n      }\n      emitterPos = this.meshInstance.node === null || this.localSpace ? pc.Vec3.ZERO : this.meshInstance.node.getPosition();\n      var posCam = this.camera ? this.camera._node.getPosition() : pc.Vec3.ZERO;\n      var vertSize = 14;\n      var cf, cc;\n      var rotSpeed, rotSpeed2, scale2, alpha, alpha2;\n      var precision1 = this.precision - 1;\n      for (i = 0; i < this.numParticles; i++) {\n        var id = Math.floor(this.vbCPU[i * this.numParticleVerts * 4 + 3]);\n        var rndFactor = this.particleTex[id * particleTexChannels + 0 + this.numParticlesPot * 2 * particleTexChannels];\n        rndFactor3Vec.data[0] = rndFactor;\n        rndFactor3Vec.data[1] = this.particleTex[id * particleTexChannels + 1 + this.numParticlesPot * 2 * particleTexChannels];\n        rndFactor3Vec.data[2] = this.particleTex[id * particleTexChannels + 2 + this.numParticlesPot * 2 * particleTexChannels];\n        var particleRate = this.rate + (this.rate2 - this.rate) * rndFactor;\n        var particleLifetime = this.lifetime;\n        var startSpawnTime = -particleRate * id;\n        var life = this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] + delta;\n        var nlife = saturate(life / particleLifetime);\n        var scale = 0;\n        var alphaDiv = 0;\n        var angle = 0;\n        var len;\n        var interpolation;\n        var particleEnabled = life > 0.0 && life < particleLifetime;\n        if (particleEnabled) {\n          c = nlife * precision1;\n          cf = Math.floor(c);\n          cc = Math.ceil(c);\n          c = c % 1;\n          a = this.qRotSpeed[cf];\n          b = this.qRotSpeed[cc];\n          rotSpeed = a + (b - a) * c;\n          a = this.qRotSpeed2[cf];\n          b = this.qRotSpeed2[cc];\n          rotSpeed2 = a + (b - a) * c;\n          a = this.qScale[cf];\n          b = this.qScale[cc];\n          scale = a + (b - a) * c;\n          a = this.qScale2[cf];\n          b = this.qScale2[cc];\n          scale2 = a + (b - a) * c;\n          a = this.qAlpha[cf];\n          b = this.qAlpha[cc];\n          alpha = a + (b - a) * c;\n          a = this.qAlpha2[cf];\n          b = this.qAlpha2[cc];\n          alpha2 = a + (b - a) * c;\n          cf *= 3;\n          cc *= 3;\n          a = this.qLocalVelocity[cf];\n          b = this.qLocalVelocity[cc];\n          localVelocityVec.data[0] = a + (b - a) * c;\n          a = this.qLocalVelocity[cf + 1];\n          b = this.qLocalVelocity[cc + 1];\n          localVelocityVec.data[1] = a + (b - a) * c;\n          a = this.qLocalVelocity[cf + 2];\n          b = this.qLocalVelocity[cc + 2];\n          localVelocityVec.data[2] = a + (b - a) * c;\n          a = this.qLocalVelocity2[cf];\n          b = this.qLocalVelocity2[cc];\n          localVelocityVec2.data[0] = a + (b - a) * c;\n          a = this.qLocalVelocity2[cf + 1];\n          b = this.qLocalVelocity2[cc + 1];\n          localVelocityVec2.data[1] = a + (b - a) * c;\n          a = this.qLocalVelocity2[cf + 2];\n          b = this.qLocalVelocity2[cc + 2];\n          localVelocityVec2.data[2] = a + (b - a) * c;\n          a = this.qVelocity[cf];\n          b = this.qVelocity[cc];\n          velocityVec.data[0] = a + (b - a) * c;\n          a = this.qVelocity[cf + 1];\n          b = this.qVelocity[cc + 1];\n          velocityVec.data[1] = a + (b - a) * c;\n          a = this.qVelocity[cf + 2];\n          b = this.qVelocity[cc + 2];\n          velocityVec.data[2] = a + (b - a) * c;\n          a = this.qVelocity2[cf];\n          b = this.qVelocity2[cc];\n          velocityVec2.data[0] = a + (b - a) * c;\n          a = this.qVelocity2[cf + 1];\n          b = this.qVelocity2[cc + 1];\n          velocityVec2.data[1] = a + (b - a) * c;\n          a = this.qVelocity2[cf + 2];\n          b = this.qVelocity2[cc + 2];\n          velocityVec2.data[2] = a + (b - a) * c;\n          localVelocityVec.data[0] = localVelocityVec.data[0] + (localVelocityVec2.data[0] - localVelocityVec.data[0]) * rndFactor3Vec.data[0];\n          localVelocityVec.data[1] = localVelocityVec.data[1] + (localVelocityVec2.data[1] - localVelocityVec.data[1]) * rndFactor3Vec.data[1];\n          localVelocityVec.data[2] = localVelocityVec.data[2] + (localVelocityVec2.data[2] - localVelocityVec.data[2]) * rndFactor3Vec.data[2];\n          if (this.initialVelocity > 0) {\n            if (this.emitterShape === pc.EMITTERSHAPE_SPHERE) {\n              randomPos.copy(rndFactor3Vec).scale(2).sub(pc.Vec3.ONE).normalize();\n              localVelocityVec.add(randomPos.scale(this.initialVelocity));\n            } else {\n              localVelocityVec.add(pc.Vec3.FORWARD.scale(this.initialVelocity));\n            }\n          }\n          velocityVec.data[0] = velocityVec.data[0] + (velocityVec2.data[0] - velocityVec.data[0]) * rndFactor3Vec.data[0];\n          velocityVec.data[1] = velocityVec.data[1] + (velocityVec2.data[1] - velocityVec.data[1]) * rndFactor3Vec.data[1];\n          velocityVec.data[2] = velocityVec.data[2] + (velocityVec2.data[2] - velocityVec.data[2]) * rndFactor3Vec.data[2];\n          rotSpeed = rotSpeed + (rotSpeed2 - rotSpeed) * rndFactor3Vec.data[1];\n          scale = (scale + (scale2 - scale) * (rndFactor * 10000.0 % 1.0)) * uniformScale;\n          alphaDiv = (alpha2 - alpha) * (rndFactor * 1000.0 % 1.0);\n          if (this.meshInstance.node) {\n            rotMat.transformPoint(localVelocityVec, localVelocityVec);\n          }\n          localVelocityVec.add(velocityVec.mul(nonUniformScale));\n          moveDirVec.copy(localVelocityVec);\n          particlePosPrev.data[0] = this.particleTex[id * particleTexChannels];\n          particlePosPrev.data[1] = this.particleTex[id * particleTexChannels + 1];\n          particlePosPrev.data[2] = this.particleTex[id * particleTexChannels + 2];\n          particlePos.copy(particlePosPrev).add(localVelocityVec.scale(delta));\n          particleFinalPos.copy(particlePos);\n          this.particleTex[id * particleTexChannels] = particleFinalPos.data[0];\n          this.particleTex[id * particleTexChannels + 1] = particleFinalPos.data[1];\n          this.particleTex[id * particleTexChannels + 2] = particleFinalPos.data[2];\n          this.particleTex[id * particleTexChannels + 3] += rotSpeed * delta;\n          if (this.wrap && this.wrapBounds) {\n            particleFinalPos.sub(emitterPos);\n            particleFinalPos.data[0] = glMod(particleFinalPos.data[0], this.wrapBounds.data[0]) - this.wrapBounds.data[0] * 0.5;\n            particleFinalPos.data[1] = glMod(particleFinalPos.data[1], this.wrapBounds.data[1]) - this.wrapBounds.data[1] * 0.5;\n            particleFinalPos.data[2] = glMod(particleFinalPos.data[2], this.wrapBounds.data[2]) - this.wrapBounds.data[2] * 0.5;\n            particleFinalPos.add(emitterPos);\n          }\n          if (this.sort > 0) {\n            if (this.sort === 1) {\n              tmpVec3.copy(particleFinalPos).sub(posCam);\n              this.particleDistance[id] = -(tmpVec3.data[0] * tmpVec3.data[0] + tmpVec3.data[1] * tmpVec3.data[1] + tmpVec3.data[2] * tmpVec3.data[2]);\n            } else {\n              if (this.sort === 2) {\n                this.particleDistance[id] = life;\n              } else {\n                if (this.sort === 3) {\n                  this.particleDistance[id] = -life;\n                }\n              }\n            }\n          }\n        } else {\n          this.calcSpawnPosition(emitterPos, id);\n        }\n        if (isOnStop) {\n          if (life < 0) {\n            this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = -1;\n          }\n        } else {\n          if (life >= particleLifetime) {\n            life -= Math.max(particleLifetime, (this.numParticles - 1) * particleRate);\n            this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = this.loop ? 1 : -1;\n          }\n          if (life < 0 && this.loop) {\n            this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = 1;\n          }\n        }\n        if (this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] < 0) {\n          particleEnabled = false;\n        }\n        this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] = life;\n        for (var v = 0; v < this.numParticleVerts; v++) {\n          var quadX = this.vbCPU[i * this.numParticleVerts * 4 + v * 4];\n          var quadY = this.vbCPU[i * this.numParticleVerts * 4 + v * 4 + 1];\n          var quadZ = this.vbCPU[i * this.numParticleVerts * 4 + v * 4 + 2];\n          if (!particleEnabled) {\n            quadX = quadY = quadZ = 0;\n          }\n          var w = i * this.numParticleVerts * vertSize + v * vertSize;\n          data[w] = particleFinalPos.data[0];\n          data[w + 1] = particleFinalPos.data[1];\n          data[w + 2] = particleFinalPos.data[2];\n          data[w + 3] = nlife;\n          data[w + 4] = this.alignToMotion ? angle : this.particleTex[id * particleTexChannels + 3];\n          data[w + 5] = scale;\n          data[w + 6] = alphaDiv;\n          data[w + 7] = moveDirVec.data[0];\n          data[w + 8] = quadX;\n          data[w + 9] = quadY;\n          data[w + 10] = quadZ;\n          data[w + 11] = moveDirVec.data[1];\n          data[w + 12] = moveDirVec.data[2];\n        }\n      }\n      if (this.sort > pc.PARTICLESORT_NONE && this.camera) {\n        var particleDistance = this.particleDistance;\n        for (i = 0; i < this.numParticles; i++) {\n          this.vbToSort[i] = [i, particleDistance[Math.floor(this.vbCPU[i * this.numParticleVerts * 4 + 3])]];\n        }\n        this.vbOld.set(this.vbCPU);\n        this.vbToSort.sort(function(a, b) {\n          return a[1] - b[1];\n        });\n        for (i = 0; i < this.numParticles; i++) {\n          var src = this.vbToSort[i][0] * this.numParticleVerts * 4;\n          var dest = i * this.numParticleVerts * 4;\n          for (j = 0; j < this.numParticleVerts * 4; j++) {\n            this.vbCPU[dest + j] = this.vbOld[src + j];\n          }\n        }\n      }\n    }\n    if (!this.loop) {\n      if (Date.now() > this.endTime) {\n        if (this.onFinished) {\n          this.onFinished();\n        }\n        this.meshInstance.visible = false;\n      }\n    }\n  }, destroy:function() {\n    if (this.particleTexIN) {\n      this.particleTexIN.destroy();\n    }\n    if (this.particleTexOUT) {\n      this.particleTexOUT.destroy();\n    }\n    if (!this.useCpu && this.particleTexStart) {\n      this.particleTexStart.destroy();\n    }\n    if (this.rtParticleTexIN) {\n      this.rtParticleTexIN.destroy();\n    }\n    if (this.rtParticleTexOUT) {\n      this.rtParticleTexOUT.destroy();\n    }\n    this.particleTexIN = null;\n    this.particleTexOUT = null;\n    this.particleTexStart = null;\n    this.rtParticleTexIN = null;\n    this.rtParticleTexOUT = null;\n    this.shaderParticleUpdateRespawn = null;\n    this.shaderParticleUpdateNoRespawn = null;\n    this.shaderParticleUpdateOnStop = null;\n  }};\n  return {ParticleEmitter:ParticleEmitter};\n}());\nfunction frac(f) {\n  return f - Math.floor(f);\n}\nfunction encodeFloatRGBA(v) {\n  var encX = frac(v);\n  var encY = frac(255.0 * v);\n  var encZ = frac(65025.0 * v);\n  var encW = frac(160581375.0 * v);\n  encX -= encY / 255.0;\n  encY -= encZ / 255.0;\n  encZ -= encW / 255.0;\n  encW -= encW / 255.0;\n  return [encX, encY, encZ, encW];\n}\nfunction encodeFloatRG(v) {\n  var encX = frac(v);\n  var encY = frac(255.0 * v);\n  encX -= encY / 255.0;\n  encY -= encY / 255.0;\n  return [encX, encY];\n}\n;pc.extend(pc, function() {\n  var _deviceDeprecationWarning = false;\n  var _getSelectionDeprecationWarning = false;\n  var _prepareDeprecationWarning = false;\n  function sortDrawCalls(drawCallA, drawCallB) {\n    if (drawCallA.layer === drawCallB.layer) {\n      if (drawCallA.drawOrder && drawCallB.drawOrder) {\n        return drawCallA.drawOrder - drawCallB.drawOrder;\n      }\n    }\n    return drawCallB.key - drawCallA.key;\n  }\n  var Picker = function(app, width, height) {\n    if (app instanceof pc.GraphicsDevice) {\n      app = pc.Application.getApplication();\n      if (!_deviceDeprecationWarning) {\n        _deviceDeprecationWarning = true;\n      }\n    }\n    this.app = app;\n    this.device = app.graphicsDevice;\n    var device = this.device;\n    this.library = device.getProgramLibrary();\n    this.pickColor = new Float32Array(4);\n    this.pickColor[3] = 1;\n    this.scene = null;\n    this.drawCalls = [];\n    this.layer = null;\n    this.layerComp = null;\n    this.clearOptions = {color:[1, 1, 1, 1], depth:1, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH};\n    var self = this;\n    this._clearDepthOptions = {depth:1.0, flags:pc.CLEARFLAG_DEPTH};\n    this.clearDepthCommand = new pc.Command(0, 0, function() {\n      device.clear(self._clearDepthOptions);\n    });\n    this.resize(width, height);\n    this._ignoreOpacityFor = null;\n  };\n  Picker.prototype.getSelection = function(x, y, width, height) {\n    var device = this.device;\n    if (typeof x === \"object\") {\n      var rect = x;\n      x = rect.x;\n      y = rect.y;\n      width = rect.width;\n      height = rect.height;\n    } else {\n      y = this.layer.renderTarget.height - (y + (height || 1));\n    }\n    width = width || 1;\n    height = height || 1;\n    var prevRenderTarget = device.renderTarget;\n    device.setRenderTarget(this.layer.renderTarget);\n    device.updateBegin();\n    var pixels = new Uint8Array(4 * width * height);\n    device.readPixels(x, y, width, height, pixels);\n    device.updateEnd();\n    device.setRenderTarget(prevRenderTarget);\n    var selection = [];\n    var drawCalls = this.layer.instances.visibleOpaque[0].list;\n    var r, g, b, a, index;\n    for (var i = 0; i < width * height; i++) {\n      r = pixels[4 * i + 0];\n      g = pixels[4 * i + 1];\n      b = pixels[4 * i + 2];\n      index = r << 16 | g << 8 | b;\n      if (index !== 16777215) {\n        var selectedMeshInstance = drawCalls[index];\n        if (selection.indexOf(selectedMeshInstance) === -1) {\n          selection.push(selectedMeshInstance);\n        }\n      }\n    }\n    return selection;\n  };\n  Picker.prototype.prepare = function(camera, scene, arg) {\n    var device = this.device;\n    var self = this;\n    if (camera instanceof pc.Camera) {\n      camera = camera._component;\n    }\n    this.scene = scene;\n    var sourceLayer = null;\n    var sourceRt = null;\n    if (arg instanceof pc.Layer) {\n      sourceLayer = arg;\n    } else {\n      sourceRt = arg;\n    }\n    if (!this.layer) {\n      var pickColorId = device.scope.resolve(\"uColor\");\n      this.layer = new pc.Layer({name:\"Picker\", shaderPass:pc.SHADER_PICK, opaqueSortMode:pc.SORTMODE_NONE, onEnable:function() {\n        if (this.renderTarget) {\n          return;\n        }\n        var colorBuffer = new pc.Texture(device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:self.width, height:self.height});\n        colorBuffer.minFilter = pc.FILTER_NEAREST;\n        colorBuffer.magFilter = pc.FILTER_NEAREST;\n        colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n        colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n        this.renderTarget = new pc.RenderTarget(device, colorBuffer, {depth:true});\n      }, onDisable:function() {\n        if (!this.renderTarget) {\n          return;\n        }\n        this.renderTarget._colorBuffer.destroy();\n        this.renderTarget.destroy();\n        this.renderTarget = null;\n      }, onDrawCall:function(meshInstance, i) {\n        self.pickColor[0] = (i >> 16 & 255) / 255;\n        self.pickColor[1] = (i >> 8 & 255) / 255;\n        self.pickColor[2] = (i & 255) / 255;\n        pickColorId.setValue(self.pickColor);\n        device.setBlending(false);\n      }, onPreCull:function() {\n        this.oldAspectMode = this.cameras[0].aspectRatioMode;\n        this.oldAspect = this.cameras[0].aspectRatio;\n        this.cameras[0].aspectRatioMode = pc.ASPECT_MANUAL;\n        var rt = sourceRt ? sourceRt : sourceLayer ? sourceLayer.renderTarget : null;\n        this.cameras[0].aspectRatio = this.cameras[0].calculateAspectRatio(rt);\n        self.app.renderer.updateCameraFrustum(this.cameras[0].camera);\n      }, onPostCull:function() {\n        this.cameras[0].aspectRatioMode = this.oldAspectMode;\n        this.cameras[0].aspectRatio = this.oldAspect;\n      }});\n      this.layerComp = new pc.LayerComposition;\n      this.layerComp.pushOpaque(this.layer);\n      this.meshInstances = this.layer.opaqueMeshInstances;\n      this._instancesVersion = -1;\n    }\n    if (!sourceLayer) {\n      this.layer.clearMeshInstances();\n      var layers = scene.layers.layerList;\n      var subLayerEnabled = scene.layers.subLayerEnabled;\n      var isTransparent = scene.layers.subLayerList;\n      var layer;\n      var j;\n      var instanceList, layerCamId, instanceListLength, drawCall, transparent;\n      for (var i = 0; i < layers.length; i++) {\n        if (layers[i].overrideClear && layers[i]._clearDepthBuffer) {\n          layers[i]._pickerCleared = false;\n        }\n      }\n      for (var i = 0; i < layers.length; i++) {\n        layer = layers[i];\n        if (layer.renderTarget !== sourceRt || !layer.enabled || !subLayerEnabled[i]) {\n          continue;\n        }\n        layerCamId = layer.cameras.indexOf(camera);\n        if (layerCamId < 0) {\n          continue;\n        }\n        if (layer.overrideClear && layer._clearDepthBuffer && !layer._pickerCleared) {\n          this.meshInstances.push(this.clearDepthCommand);\n          layer._pickerCleared = true;\n        }\n        transparent = isTransparent[i];\n        instanceList = transparent ? layer.instances.transparentMeshInstances : layer.instances.opaqueMeshInstances;\n        instanceListLength = instanceList.length;\n        for (j = 0; j < instanceListLength; j++) {\n          drawCall = instanceList[j];\n          if (drawCall.pick) {\n            this.meshInstances.push(drawCall);\n          }\n        }\n      }\n    } else {\n      if (this._instancesVersion !== sourceLayer._version) {\n        this.layer.clearMeshInstances();\n        var instanceList = sourceLayer.instances.opaqueMeshInstances;\n        var instanceListLength = instanceList.length;\n        for (var j = 0; j < instanceListLength; j++) {\n          drawCall = instanceList[j];\n          if (drawCall.pick) {\n            this.meshInstances.push(drawCall);\n          }\n        }\n        instanceList = sourceLayer.instances.transparentMeshInstances;\n        instanceListLength = instanceList.length;\n        for (j = 0; j < instanceListLength; j++) {\n          drawCall = instanceList[j];\n          if (drawCall.pick) {\n            this.meshInstances.push(drawCall);\n          }\n        }\n        this._instancesVersion = sourceLayer._version;\n      }\n    }\n    if (this.layer.cameras[0] !== camera) {\n      this.layer.clearCameras();\n      this.layer.addCamera(camera);\n    }\n    this.onLayerPreRender(this.layer, sourceLayer, sourceRt);\n    this.app.renderer.renderComposition(this.layerComp);\n    this.onLayerPostRender(this.layer);\n  };\n  Picker.prototype.onLayerPreRender = function(layer, sourceLayer, sourceRt) {\n    if (this.width !== layer.renderTarget.width || this.height !== layer.renderTarget.height) {\n      layer.onDisable();\n      layer.onEnable();\n    }\n    layer.oldClear = layer.cameras[0].camera._clearOptions;\n    layer.oldAspectMode = layer.cameras[0].aspectRatioMode;\n    layer.oldAspect = layer.cameras[0].aspectRatio;\n    layer.cameras[0].camera._clearOptions = this.clearOptions;\n    layer.cameras[0].aspectRatioMode = pc.ASPECT_MANUAL;\n    var rt = sourceRt ? sourceRt : sourceLayer ? sourceLayer.renderTarget : null;\n    layer.cameras[0].aspectRatio = layer.cameras[0].calculateAspectRatio(rt);\n  };\n  Picker.prototype.onLayerPostRender = function(layer) {\n    layer.cameras[0].camera._clearOptions = layer.oldClear;\n    layer.cameras[0].aspectRatioMode = layer.oldAspectMode;\n    layer.cameras[0].aspectRatio = layer.oldAspect;\n  };\n  Picker.prototype.resize = function(width, height) {\n    this.width = width;\n    this.height = height;\n  };\n  Object.defineProperty(Picker.prototype, \"renderTarget\", {get:function() {\n    return this.layer.renderTarget;\n  }});\n  return {Picker:Picker};\n}());\nvar primitiveUv1Padding = 4.0 / 64;\nvar primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;\npc.calculateNormals = function(positions, indices) {\n  var triangleCount = indices.length / 3;\n  var vertexCount = positions.length / 3;\n  var i1, i2, i3;\n  var i;\n  var p1 = new pc.Vec3;\n  var p2 = new pc.Vec3;\n  var p3 = new pc.Vec3;\n  var p1p2 = new pc.Vec3;\n  var p1p3 = new pc.Vec3;\n  var faceNormal = new pc.Vec3;\n  var normals = [];\n  for (i = 0; i < positions.length; i++) {\n    normals[i] = 0;\n  }\n  for (i = 0; i < triangleCount; i++) {\n    i1 = indices[i * 3];\n    i2 = indices[i * 3 + 1];\n    i3 = indices[i * 3 + 2];\n    p1.set(positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);\n    p2.set(positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);\n    p3.set(positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);\n    p1p2.sub2(p2, p1);\n    p1p3.sub2(p3, p1);\n    faceNormal.cross(p1p2, p1p3).normalize();\n    normals[i1 * 3] += faceNormal.x;\n    normals[i1 * 3 + 1] += faceNormal.y;\n    normals[i1 * 3 + 2] += faceNormal.z;\n    normals[i2 * 3] += faceNormal.x;\n    normals[i2 * 3 + 1] += faceNormal.y;\n    normals[i2 * 3 + 2] += faceNormal.z;\n    normals[i3 * 3] += faceNormal.x;\n    normals[i3 * 3 + 1] += faceNormal.y;\n    normals[i3 * 3 + 2] += faceNormal.z;\n  }\n  for (i = 0; i < vertexCount; i++) {\n    var nx = normals[i * 3];\n    var ny = normals[i * 3 + 1];\n    var nz = normals[i * 3 + 2];\n    var invLen = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);\n    normals[i * 3] *= invLen;\n    normals[i * 3 + 1] *= invLen;\n    normals[i * 3 + 2] *= invLen;\n  }\n  return normals;\n};\npc.calculateTangents = function(positions, normals, uvs, indices) {\n  var triangleCount = indices.length / 3;\n  var vertexCount = positions.length / 3;\n  var i1, i2, i3;\n  var x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r;\n  var sdir = new pc.Vec3;\n  var tdir = new pc.Vec3;\n  var v1 = new pc.Vec3;\n  var v2 = new pc.Vec3;\n  var v3 = new pc.Vec3;\n  var w1 = new pc.Vec2;\n  var w2 = new pc.Vec2;\n  var w3 = new pc.Vec2;\n  var i;\n  var tan1 = new Float32Array(vertexCount * 3);\n  var tan2 = new Float32Array(vertexCount * 3);\n  var tangents = [];\n  var area = 0.0;\n  for (i = 0; i < triangleCount; i++) {\n    i1 = indices[i * 3];\n    i2 = indices[i * 3 + 1];\n    i3 = indices[i * 3 + 2];\n    v1.set(positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);\n    v2.set(positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);\n    v3.set(positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);\n    w1.set(uvs[i1 * 2], uvs[i1 * 2 + 1]);\n    w2.set(uvs[i2 * 2], uvs[i2 * 2 + 1]);\n    w3.set(uvs[i3 * 2], uvs[i3 * 2 + 1]);\n    x1 = v2.x - v1.x;\n    x2 = v3.x - v1.x;\n    y1 = v2.y - v1.y;\n    y2 = v3.y - v1.y;\n    z1 = v2.z - v1.z;\n    z2 = v3.z - v1.z;\n    s1 = w2.x - w1.x;\n    s2 = w3.x - w1.x;\n    t1 = w2.y - w1.y;\n    t2 = w3.y - w1.y;\n    area = s1 * t2 - s2 * t1;\n    if (area == 0.0) {\n      sdir.set(0.0, 1.0, 0.0);\n      tdir.set(1.0, 0.0, 0.0);\n    } else {\n      r = 1.0 / area;\n      sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);\n      tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);\n    }\n    tan1[i1 * 3 + 0] += sdir.x;\n    tan1[i1 * 3 + 1] += sdir.y;\n    tan1[i1 * 3 + 2] += sdir.z;\n    tan1[i2 * 3 + 0] += sdir.x;\n    tan1[i2 * 3 + 1] += sdir.y;\n    tan1[i2 * 3 + 2] += sdir.z;\n    tan1[i3 * 3 + 0] += sdir.x;\n    tan1[i3 * 3 + 1] += sdir.y;\n    tan1[i3 * 3 + 2] += sdir.z;\n    tan2[i1 * 3 + 0] += tdir.x;\n    tan2[i1 * 3 + 1] += tdir.y;\n    tan2[i1 * 3 + 2] += tdir.z;\n    tan2[i2 * 3 + 0] += tdir.x;\n    tan2[i2 * 3 + 1] += tdir.y;\n    tan2[i2 * 3 + 2] += tdir.z;\n    tan2[i3 * 3 + 0] += tdir.x;\n    tan2[i3 * 3 + 1] += tdir.y;\n    tan2[i3 * 3 + 2] += tdir.z;\n  }\n  t1 = new pc.Vec3;\n  t2 = new pc.Vec3;\n  var n = new pc.Vec3;\n  var temp = new pc.Vec3;\n  for (i = 0; i < vertexCount; i++) {\n    n.set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);\n    t1.set(tan1[i * 3], tan1[i * 3 + 1], tan1[i * 3 + 2]);\n    t2.set(tan2[i * 3], tan2[i * 3 + 1], tan2[i * 3 + 2]);\n    var ndott = n.dot(t1);\n    temp.copy(n).scale(ndott);\n    temp.sub2(t1, temp).normalize();\n    tangents[i * 4] = temp.x;\n    tangents[i * 4 + 1] = temp.y;\n    tangents[i * 4 + 2] = temp.z;\n    temp.cross(n, t1);\n    tangents[i * 4 + 3] = temp.dot(t2) < 0.0 ? -1.0 : 1.0;\n  }\n  return tangents;\n};\npc.createMesh = function(device, positions, opts) {\n  var normals = opts && opts.normals !== undefined ? opts.normals : null;\n  var tangents = opts && opts.tangents !== undefined ? opts.tangents : null;\n  var colors = opts && opts.colors !== undefined ? opts.colors : null;\n  var uvs = opts && opts.uvs !== undefined ? opts.uvs : null;\n  var uvs1 = opts && opts.uvs1 !== undefined ? opts.uvs1 : null;\n  var indices = opts && opts.indices !== undefined ? opts.indices : null;\n  var blendIndices = opts && opts.blendIndices !== undefined ? opts.blendIndices : null;\n  var blendWeights = opts && opts.blendWeights !== undefined ? opts.blendWeights : null;\n  var vertexDesc = [{semantic:pc.SEMANTIC_POSITION, components:3, type:pc.TYPE_FLOAT32}];\n  if (normals !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_NORMAL, components:3, type:pc.TYPE_FLOAT32});\n  }\n  if (tangents !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_TANGENT, components:4, type:pc.TYPE_FLOAT32});\n  }\n  if (colors !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_COLOR, components:4, type:pc.TYPE_UINT8, normalize:true});\n  }\n  if (uvs !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_TEXCOORD0, components:2, type:pc.TYPE_FLOAT32});\n  }\n  if (uvs1 !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_TEXCOORD1, components:2, type:pc.TYPE_FLOAT32});\n  }\n  if (blendIndices !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_BLENDINDICES, components:2, type:pc.TYPE_UINT8});\n  }\n  if (blendWeights !== null) {\n    vertexDesc.push({semantic:pc.SEMANTIC_BLENDWEIGHT, components:2, type:pc.TYPE_FLOAT32});\n  }\n  var vertexFormat = new pc.VertexFormat(device, vertexDesc);\n  var numVertices = positions.length / 3;\n  var vertexBuffer = new pc.VertexBuffer(device, vertexFormat, numVertices);\n  var iterator = new pc.VertexIterator(vertexBuffer);\n  for (var i = 0; i < numVertices; i++) {\n    iterator.element[pc.SEMANTIC_POSITION].set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]);\n    if (normals !== null) {\n      iterator.element[pc.SEMANTIC_NORMAL].set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);\n    }\n    if (tangents !== null) {\n      iterator.element[pc.SEMANTIC_TANGENT].set(tangents[i * 4], tangents[i * 4 + 1], tangents[i * 4 + 2], tangents[i * 4 + 3]);\n    }\n    if (colors !== null) {\n      iterator.element[pc.SEMANTIC_COLOR].set(colors[i * 4], colors[i * 4 + 1], colors[i * 4 + 2], colors[i * 4 + 3]);\n    }\n    if (uvs !== null) {\n      iterator.element[pc.SEMANTIC_TEXCOORD0].set(uvs[i * 2], uvs[i * 2 + 1]);\n    }\n    if (uvs1 !== null) {\n      iterator.element[pc.SEMANTIC_TEXCOORD1].set(uvs1[i * 2], uvs1[i * 2 + 1]);\n    }\n    if (blendIndices !== null) {\n      iterator.element[pc.SEMANTIC_BLENDINDICES].set(blendIndices[i * 2], blendIndices[i * 2 + 1]);\n    }\n    if (blendWeights !== null) {\n      iterator.element[pc.SEMANTIC_BLENDWEIGHT].set(blendWeights[i * 2], blendWeights[i * 2 + 1]);\n    }\n    iterator.next();\n  }\n  iterator.end();\n  var indexBuffer = null;\n  var indexed = indices !== null;\n  if (indexed) {\n    indexBuffer = new pc.IndexBuffer(device, pc.INDEXFORMAT_UINT16, indices.length);\n    var dst = new Uint16Array(indexBuffer.lock());\n    dst.set(indices);\n    indexBuffer.unlock();\n  }\n  var aabb = new pc.BoundingBox;\n  aabb.compute(positions);\n  var mesh = new pc.Mesh;\n  mesh.vertexBuffer = vertexBuffer;\n  mesh.indexBuffer[0] = indexBuffer;\n  mesh.primitive[0].type = pc.PRIMITIVE_TRIANGLES;\n  mesh.primitive[0].base = 0;\n  mesh.primitive[0].count = indexed ? indices.length : numVertices;\n  mesh.primitive[0].indexed = indexed;\n  mesh.aabb = aabb;\n  return mesh;\n};\npc.createTorus = function(device, opts) {\n  var rc = opts && opts.tubeRadius !== undefined ? opts.tubeRadius : 0.2;\n  var rt = opts && opts.ringRadius !== undefined ? opts.ringRadius : 0.3;\n  var segments = opts && opts.segments !== undefined ? opts.segments : 30;\n  var sides = opts && opts.sides !== undefined ? opts.sides : 20;\n  var i, j;\n  var x, y, z, nx, ny, nz, u, v;\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var indices = [];\n  for (i = 0; i <= sides; i++) {\n    for (j = 0; j <= segments; j++) {\n      x = Math.cos(2.0 * Math.PI * j / segments) * (rt + rc * Math.cos(2.0 * Math.PI * i / sides));\n      y = Math.sin(2.0 * Math.PI * i / sides) * rc;\n      z = Math.sin(2.0 * Math.PI * j / segments) * (rt + rc * Math.cos(2.0 * Math.PI * i / sides));\n      nx = Math.cos(2.0 * Math.PI * j / segments) * Math.cos(2.0 * Math.PI * i / sides);\n      ny = Math.sin(2.0 * Math.PI * i / sides);\n      nz = Math.sin(2.0 * Math.PI * j / segments) * Math.cos(2.0 * Math.PI * i / sides);\n      u = i / sides;\n      v = 1.0 - j / segments;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      uvs.push(u, v);\n      if (i < sides && j < segments) {\n        var first, second, third, fourth;\n        first = i * (segments + 1) + j;\n        second = (i + 1) * (segments + 1) + j;\n        third = i * (segments + 1) + (j + 1);\n        fourth = (i + 1) * (segments + 1) + (j + 1);\n        indices.push(first, second, third);\n        indices.push(second, fourth, third);\n      }\n    }\n  }\n  var options = {normals:normals, uvs:uvs, indices:indices};\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);\n  }\n  return pc.createMesh(device, positions, options);\n};\npc._createConeData = function(baseRadius, peakRadius, height, heightSegments, capSegments, roundedCaps) {\n  var i, j;\n  var x, y, z, u, v;\n  var pos = new pc.Vec3;\n  var bottomToTop = new pc.Vec3;\n  var norm = new pc.Vec3;\n  var top, bottom, tangent;\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var uvs1 = [];\n  var indices = [];\n  var theta, cosTheta, sinTheta;\n  var phi, sinPhi, cosPhi;\n  var first, second, third, fourth;\n  var offset;\n  if (height > 0) {\n    for (i = 0; i <= heightSegments; i++) {\n      for (j = 0; j <= capSegments; j++) {\n        theta = j / capSegments * 2.0 * Math.PI - Math.PI;\n        sinTheta = Math.sin(theta);\n        cosTheta = Math.cos(theta);\n        bottom = new pc.Vec3(sinTheta * baseRadius, -height / 2.0, cosTheta * baseRadius);\n        top = new pc.Vec3(sinTheta * peakRadius, height / 2.0, cosTheta * peakRadius);\n        pos.lerp(bottom, top, i / heightSegments);\n        bottomToTop.sub2(top, bottom).normalize();\n        tangent = new pc.Vec3(cosTheta, 0.0, -sinTheta);\n        norm.cross(tangent, bottomToTop).normalize();\n        positions.push(pos.x, pos.y, pos.z);\n        normals.push(norm.x, norm.y, norm.z);\n        u = j / capSegments;\n        v = i / heightSegments;\n        uvs.push(u, v);\n        var _v = v;\n        v = u;\n        u = _v;\n        u /= 3;\n        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n        uvs1.push(u, v);\n        if (i < heightSegments && j < capSegments) {\n          first = i * (capSegments + 1) + j;\n          second = i * (capSegments + 1) + (j + 1);\n          third = (i + 1) * (capSegments + 1) + j;\n          fourth = (i + 1) * (capSegments + 1) + (j + 1);\n          indices.push(first, second, third);\n          indices.push(second, fourth, third);\n        }\n      }\n    }\n  }\n  if (roundedCaps) {\n    var lat, lon;\n    var latitudeBands = Math.floor(capSegments / 2);\n    var longitudeBands = capSegments;\n    var capOffset = height / 2;\n    for (lat = 0; lat <= latitudeBands; lat++) {\n      theta = lat * Math.PI * 0.5 / latitudeBands;\n      sinTheta = Math.sin(theta);\n      cosTheta = Math.cos(theta);\n      for (lon = 0; lon <= longitudeBands; lon++) {\n        phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2.0;\n        sinPhi = Math.sin(phi);\n        cosPhi = Math.cos(phi);\n        x = cosPhi * sinTheta;\n        y = cosTheta;\n        z = sinPhi * sinTheta;\n        u = 1.0 - lon / longitudeBands;\n        v = 1.0 - lat / latitudeBands;\n        positions.push(x * peakRadius, y * peakRadius + capOffset, z * peakRadius);\n        normals.push(x, y, z);\n        uvs.push(u, v);\n        u /= 3;\n        v /= 3;\n        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n        u += 1.0 / 3;\n        uvs1.push(u, v);\n      }\n    }\n    offset = (heightSegments + 1) * (capSegments + 1);\n    for (lat = 0; lat < latitudeBands; ++lat) {\n      for (lon = 0; lon < longitudeBands; ++lon) {\n        first = lat * (longitudeBands + 1) + lon;\n        second = first + longitudeBands + 1;\n        indices.push(offset + first + 1, offset + second, offset + first);\n        indices.push(offset + first + 1, offset + second + 1, offset + second);\n      }\n    }\n    for (lat = 0; lat <= latitudeBands; lat++) {\n      theta = Math.PI * 0.5 + lat * Math.PI * 0.5 / latitudeBands;\n      sinTheta = Math.sin(theta);\n      cosTheta = Math.cos(theta);\n      for (lon = 0; lon <= longitudeBands; lon++) {\n        phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2.0;\n        sinPhi = Math.sin(phi);\n        cosPhi = Math.cos(phi);\n        x = cosPhi * sinTheta;\n        y = cosTheta;\n        z = sinPhi * sinTheta;\n        u = 1.0 - lon / longitudeBands;\n        v = 1.0 - lat / latitudeBands;\n        positions.push(x * peakRadius, y * peakRadius - capOffset, z * peakRadius);\n        normals.push(x, y, z);\n        uvs.push(u, v);\n        u /= 3;\n        v /= 3;\n        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n        u += 2.0 / 3;\n        uvs1.push(u, v);\n      }\n    }\n    offset = (heightSegments + 1) * (capSegments + 1) + (longitudeBands + 1) * (latitudeBands + 1);\n    for (lat = 0; lat < latitudeBands; ++lat) {\n      for (lon = 0; lon < longitudeBands; ++lon) {\n        first = lat * (longitudeBands + 1) + lon;\n        second = first + longitudeBands + 1;\n        indices.push(offset + first + 1, offset + second, offset + first);\n        indices.push(offset + first + 1, offset + second + 1, offset + second);\n      }\n    }\n  } else {\n    offset = (heightSegments + 1) * (capSegments + 1);\n    if (baseRadius > 0.0) {\n      for (i = 0; i < capSegments; i++) {\n        theta = i / capSegments * 2.0 * Math.PI;\n        x = Math.sin(theta);\n        y = -height / 2.0;\n        z = Math.cos(theta);\n        u = 1.0 - (x + 1.0) / 2.0;\n        v = (z + 1.0) / 2.0;\n        positions.push(x * baseRadius, y, z * baseRadius);\n        normals.push(0.0, -1.0, 0.0);\n        uvs.push(u, v);\n        u /= 3;\n        v /= 3;\n        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n        u += 1.0 / 3;\n        uvs1.push(u, v);\n        if (i > 1) {\n          indices.push(offset, offset + i, offset + i - 1);\n        }\n      }\n    }\n    offset += capSegments;\n    if (peakRadius > 0.0) {\n      for (i = 0; i < capSegments; i++) {\n        theta = i / capSegments * 2.0 * Math.PI;\n        x = Math.sin(theta);\n        y = height / 2.0;\n        z = Math.cos(theta);\n        u = 1.0 - (x + 1.0) / 2.0;\n        v = (z + 1.0) / 2.0;\n        positions.push(x * peakRadius, y, z * peakRadius);\n        normals.push(0.0, 1.0, 0.0);\n        uvs.push(u, v);\n        u /= 3;\n        v /= 3;\n        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n        u += 2.0 / 3;\n        uvs1.push(u, v);\n        if (i > 1) {\n          indices.push(offset, offset + i - 1, offset + i);\n        }\n      }\n    }\n  }\n  return {positions:positions, normals:normals, uvs:uvs, uvs1:uvs1, indices:indices};\n};\npc.createCylinder = function(device, opts) {\n  var radius = opts && (opts.radius || opts.baseRadius);\n  radius = radius !== undefined ? radius : 0.5;\n  var height = opts && opts.height !== undefined ? opts.height : 1.0;\n  var heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 5;\n  var capSegments = opts && opts.capSegments !== undefined ? opts.capSegments : 20;\n  var options = pc._createConeData(radius, radius, height, heightSegments, capSegments, false);\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(options.positions, options.normals, options.uvs, options.indices);\n  }\n  return pc.createMesh(device, options.positions, options);\n};\npc.createCapsule = function(device, opts) {\n  var radius = opts && opts.radius !== undefined ? opts.radius : 0.3;\n  var height = opts && opts.height !== undefined ? opts.height : 1.0;\n  var heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 1;\n  var sides = opts && opts.sides !== undefined ? opts.sides : 20;\n  var options = pc._createConeData(radius, radius, height - 2 * radius, heightSegments, sides, true);\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(options.positions, options.normals, options.uvs, options.indices);\n  }\n  return pc.createMesh(device, options.positions, options);\n};\npc.createCone = function(device, opts) {\n  var baseRadius = opts && opts.baseRadius !== undefined ? opts.baseRadius : 0.5;\n  var peakRadius = opts && opts.peakRadius !== undefined ? opts.peakRadius : 0.0;\n  var height = opts && opts.height !== undefined ? opts.height : 1.0;\n  var heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 5;\n  var capSegments = opts && opts.capSegments !== undefined ? opts.capSegments : 18;\n  var options = pc._createConeData(baseRadius, peakRadius, height, heightSegments, capSegments, false);\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(options.positions, options.normals, options.uvs, options.indices);\n  }\n  return pc.createMesh(device, options.positions, options);\n};\npc.createSphere = function(device, opts) {\n  var radius = opts && opts.radius !== undefined ? opts.radius : 0.5;\n  var latitudeBands = opts && opts.latitudeBands !== undefined ? opts.latitudeBands : 16;\n  var longitudeBands = opts && opts.longitudeBands !== undefined ? opts.longitudeBands : 16;\n  var lon, lat;\n  var theta, sinTheta, cosTheta, phi, sinPhi, cosPhi;\n  var first, second;\n  var x, y, z, u, v;\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var indices = [];\n  for (lat = 0; lat <= latitudeBands; lat++) {\n    theta = lat * Math.PI / latitudeBands;\n    sinTheta = Math.sin(theta);\n    cosTheta = Math.cos(theta);\n    for (lon = 0; lon <= longitudeBands; lon++) {\n      phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2.0;\n      sinPhi = Math.sin(phi);\n      cosPhi = Math.cos(phi);\n      x = cosPhi * sinTheta;\n      y = cosTheta;\n      z = sinPhi * sinTheta;\n      u = 1.0 - lon / longitudeBands;\n      v = 1.0 - lat / latitudeBands;\n      positions.push(x * radius, y * radius, z * radius);\n      normals.push(x, y, z);\n      uvs.push(u, v);\n    }\n  }\n  for (lat = 0; lat < latitudeBands; ++lat) {\n    for (lon = 0; lon < longitudeBands; ++lon) {\n      first = lat * (longitudeBands + 1) + lon;\n      second = first + longitudeBands + 1;\n      indices.push(first + 1, second, first);\n      indices.push(first + 1, second + 1, second);\n    }\n  }\n  var options = {normals:normals, uvs:uvs, uvs1:uvs, indices:indices};\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);\n  }\n  return pc.createMesh(device, positions, options);\n};\npc.createPlane = function(device, opts) {\n  var he = opts && opts.halfExtents !== undefined ? opts.halfExtents : new pc.Vec2(0.5, 0.5);\n  var ws = opts && opts.widthSegments !== undefined ? opts.widthSegments : 5;\n  var ls = opts && opts.lengthSegments !== undefined ? opts.lengthSegments : 5;\n  var i, j;\n  var x, y, z, u, v;\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var indices = [];\n  var vcounter = 0;\n  for (i = 0; i <= ws; i++) {\n    for (j = 0; j <= ls; j++) {\n      x = -he.x + 2.0 * he.x * i / ws;\n      y = 0.0;\n      z = -(-he.y + 2.0 * he.y * j / ls);\n      u = i / ws;\n      v = j / ls;\n      positions.push(x, y, z);\n      normals.push(0.0, 1.0, 0.0);\n      uvs.push(u, v);\n      if (i < ws && j < ls) {\n        indices.push(vcounter + ls + 1, vcounter + 1, vcounter);\n        indices.push(vcounter + ls + 1, vcounter + ls + 2, vcounter + 1);\n      }\n      vcounter++;\n    }\n  }\n  var options = {normals:normals, uvs:uvs, uvs1:uvs, indices:indices};\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);\n  }\n  return pc.createMesh(device, positions, options);\n};\npc.createBox = function(device, opts) {\n  var he = opts && opts.halfExtents !== undefined ? opts.halfExtents : new pc.Vec3(0.5, 0.5, 0.5);\n  var ws = opts && opts.widthSegments !== undefined ? opts.widthSegments : 1;\n  var ls = opts && opts.lengthSegments !== undefined ? opts.lengthSegments : 1;\n  var hs = opts && opts.heightSegments !== undefined ? opts.heightSegments : 1;\n  var corners = [new pc.Vec3(-he.x, -he.y, he.z), new pc.Vec3(he.x, -he.y, he.z), new pc.Vec3(he.x, he.y, he.z), new pc.Vec3(-he.x, he.y, he.z), new pc.Vec3(he.x, -he.y, -he.z), new pc.Vec3(-he.x, -he.y, -he.z), new pc.Vec3(-he.x, he.y, -he.z), new pc.Vec3(he.x, he.y, -he.z)];\n  var faceAxes = [[0, 1, 3], [4, 5, 7], [3, 2, 6], [1, 0, 4], [1, 4, 2], [5, 0, 6]];\n  var faceNormals = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]];\n  var sides = {FRONT:0, BACK:1, TOP:2, BOTTOM:3, RIGHT:4, LEFT:5};\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var uvs1 = [];\n  var indices = [];\n  var vcounter = 0;\n  var generateFace = function(side, uSegments, vSegments) {\n    var u, v;\n    var i, j;\n    var offset = positions.length / 3;\n    for (i = 0; i <= uSegments; i++) {\n      for (j = 0; j <= vSegments; j++) {\n        var temp1 = new pc.Vec3;\n        var temp2 = new pc.Vec3;\n        var temp3 = new pc.Vec3;\n        var r = new pc.Vec3;\n        temp1.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);\n        temp2.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);\n        temp3.sub2(temp2, corners[faceAxes[side][0]]);\n        r.add2(temp1, temp3);\n        u = i / uSegments;\n        v = j / vSegments;\n        positions.push(r.x, r.y, r.z);\n        normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);\n        uvs.push(u, v);\n        u /= 3;\n        v /= 3;\n        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n        u += side % 3 / 3;\n        v += Math.floor(side / 3) / 3;\n        uvs1.push(u, v);\n        if (i < uSegments && j < vSegments) {\n          indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);\n          indices.push(vcounter + vSegments + 1, vcounter + vSegments + 2, vcounter + 1);\n        }\n        vcounter++;\n      }\n    }\n  };\n  generateFace(sides.FRONT, ws, hs);\n  generateFace(sides.BACK, ws, hs);\n  generateFace(sides.TOP, ws, ls);\n  generateFace(sides.BOTTOM, ws, ls);\n  generateFace(sides.RIGHT, ls, hs);\n  generateFace(sides.LEFT, ls, hs);\n  var options = {normals:normals, uvs:uvs, uvs1:uvs1, indices:indices};\n  if (pc.precalculatedTangents) {\n    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);\n  }\n  return pc.createMesh(device, positions, options);\n};\npc.Scene.defaultMaterial = new pc.StandardMaterial;\npc.Scene.defaultMaterial.shadingModel = pc.SPECULAR_BLINN;\npc.extend(pc, function() {\n  var keyA, keyB, sortPos, sortDir;\n  function sortManual(drawCallA, drawCallB) {\n    return drawCallA.drawOrder - drawCallB.drawOrder;\n  }\n  function sortMaterialMesh(drawCallA, drawCallB) {\n    keyA = drawCallA._key[pc.SORTKEY_FORWARD];\n    keyB = drawCallB._key[pc.SORTKEY_FORWARD];\n    if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {\n      return drawCallB.mesh.id - drawCallA.mesh.id;\n    }\n    return keyB - keyA;\n  }\n  function sortBackToFront(drawCallA, drawCallB) {\n    return drawCallB.zdist - drawCallA.zdist;\n  }\n  function sortFrontToBack(drawCallA, drawCallB) {\n    return drawCallA.zdist - drawCallB.zdist;\n  }\n  var sortCallbacks = [null, sortManual, sortMaterialMesh, sortBackToFront, sortFrontToBack];\n  function sortCameras(camA, camB) {\n    return camA.priority - camB.priority;\n  }\n  function sortLights(lightA, lightB) {\n    return lightB.key - lightA.key;\n  }\n  var layerCounter = 0;\n  var layerList = [];\n  var VisibleInstanceList = function() {\n    this.list = [];\n    this.length = 0;\n    this.done = false;\n  };\n  var InstanceList = function() {\n    this.opaqueMeshInstances = [];\n    this.transparentMeshInstances = [];\n    this.shadowCasters = [];\n    this.visibleOpaque = [];\n    this.visibleTransparent = [];\n  };\n  var Layer = function(options) {\n    if (options.id !== undefined) {\n      this.id = options.id;\n      layerCounter = Math.max(this.id + 1, layerCounter);\n    } else {\n      this.id = layerCounter++;\n    }\n    this.name = options.name;\n    this._enabled = options.enabled === undefined ? true : options.enabled;\n    this._refCounter = this._enabled ? 1 : 0;\n    this.opaqueSortMode = options.opaqueSortMode === undefined ? pc.SORTMODE_MATERIALMESH : options.opaqueSortMode;\n    this.transparentSortMode = options.transparentSortMode === undefined ? pc.SORTMODE_BACK2FRONT : options.transparentSortMode;\n    this.renderTarget = options.renderTarget;\n    this.shaderPass = options.shaderPass === undefined ? pc.SHADER_FORWARD : options.shaderPass;\n    this.passThrough = options.passThrough === undefined ? false : options.passThrough;\n    this.overrideClear = options.overrideClear === undefined ? false : options.overrideClear;\n    this._clearColor = new pc.Color(0, 0, 0, 1);\n    if (options.clearColor) {\n      this._clearColor.copy(options.clearColor);\n    }\n    this._clearColorBuffer = options.clearColorBuffer === undefined ? false : options.clearColorBuffer;\n    this._clearDepthBuffer = options.clearDepthBuffer === undefined ? false : options.clearDepthBuffer;\n    this._clearStencilBuffer = options.clearStencilBuffer === undefined ? false : options.clearStencilBuffer;\n    this._clearOptions = {color:this._clearColor.data, depth:1.0, stencil:0, flags:(this._clearColorBuffer ? pc.CLEARFLAG_COLOR : 0) | (this._clearDepthBuffer ? pc.CLEARFLAG_DEPTH : 0) | (this._clearStencilBuffer ? pc.CLEARFLAG_STENCIL : 0)};\n    this.onPreCull = options.onPreCull;\n    this.onPreRender = options.onPreRender;\n    this.onPreRenderOpaque = options.onPreRenderOpaque;\n    this.onPreRenderTransparent = options.onPreRenderTransparent;\n    this.onPostCull = options.onPostCull;\n    this.onPostRender = options.onPostRender;\n    this.onPostRenderOpaque = options.onPostRenderOpaque;\n    this.onPostRenderTransparent = options.onPostRenderTransparent;\n    this.onDrawCall = options.onDrawCall;\n    this.onEnable = options.onEnable;\n    this.onDisable = options.onDisable;\n    if (this._enabled && this.onEnable) {\n      this.onEnable();\n    }\n    this.layerReference = options.layerReference;\n    this.instances = options.layerReference ? options.layerReference.instances : new InstanceList;\n    this.cullingMask = options.cullingMask ? options.cullingMask : 4294967295;\n    this.opaqueMeshInstances = this.instances.opaqueMeshInstances;\n    this.transparentMeshInstances = this.instances.transparentMeshInstances;\n    this.shadowCasters = this.instances.shadowCasters;\n    this._lightComponents = [];\n    this._lights = [];\n    this._sortedLights = [[], [], []];\n    this.cameras = [];\n    this._dirty = false;\n    this._dirtyLights = false;\n    this._dirtyCameras = false;\n    this._cameraHash = 0;\n    this._lightHash = 0;\n    this._staticLightHash = 0;\n    this._needsStaticPrepare = true;\n    this._staticPrepareDone = false;\n    this._shaderVersion = -1;\n    this._version = 0;\n    this._lightCube = null;\n  };\n  Object.defineProperty(Layer.prototype, \"enabled\", {get:function() {\n    return this._enabled;\n  }, set:function(val) {\n    if (val !== this._enabled) {\n      this._enabled = val;\n      if (val) {\n        this.incrementCounter();\n        if (this.onEnable) {\n          this.onEnable();\n        }\n      } else {\n        this.decrementCounter();\n        if (this.onDisable) {\n          this.onDisable();\n        }\n      }\n    }\n  }});\n  Object.defineProperty(Layer.prototype, \"clearColor\", {get:function() {\n    return this._clearColor;\n  }, set:function(val) {\n    this._clearColor.copy(val);\n  }});\n  Layer.prototype._updateClearFlags = function() {\n    var flags = 0;\n    if (this._clearColorBuffer) {\n      flags = flags | pc.CLEARFLAG_COLOR;\n    }\n    if (this._clearDepthBuffer) {\n      flags = flags | pc.CLEARFLAG_DEPTH;\n    }\n    if (this._clearStencilBuffer) {\n      flags = flags | pc.CLEARFLAG_STENCIL;\n    }\n    this._clearOptions.flags = flags;\n  };\n  Object.defineProperty(Layer.prototype, \"clearColorBuffer\", {get:function() {\n    return this._clearColorBuffer;\n  }, set:function(val) {\n    this._clearColorBuffer = val;\n    this._updateClearFlags();\n  }});\n  Object.defineProperty(Layer.prototype, \"clearDepthBuffer\", {get:function() {\n    return this._clearDepthBuffer;\n  }, set:function(val) {\n    this._clearDepthBuffer = val;\n    this._updateClearFlags();\n  }});\n  Object.defineProperty(Layer.prototype, \"clearStencilBuffer\", {get:function() {\n    return this._clearStencilBuffer;\n  }, set:function(val) {\n    this._clearStencilBuffer = val;\n    this._updateClearFlags();\n  }});\n  Layer.prototype.incrementCounter = function() {\n    if (this._refCounter === 0) {\n      this._enabled = true;\n      if (this.onEnable) {\n        this.onEnable();\n      }\n    }\n    this._refCounter++;\n  };\n  Layer.prototype.decrementCounter = function() {\n    if (this._refCounter === 1) {\n      this._enabled = false;\n      if (this.onDisable) {\n        this.onDisable();\n      }\n    } else {\n      if (this._refCounter === 0) {\n        return;\n      }\n    }\n    this._refCounter--;\n  };\n  Layer.prototype.addMeshInstances = function(meshInstances, skipShadowCasters) {\n    var sceneShaderVer = this._shaderVersion;\n    var m, arr, mat;\n    var casters = this.shadowCasters;\n    for (var i = 0; i < meshInstances.length; i++) {\n      m = meshInstances[i];\n      mat = m.material;\n      if (mat.blendType === pc.BLEND_NONE) {\n        arr = this.opaqueMeshInstances;\n      } else {\n        arr = this.transparentMeshInstances;\n      }\n      if (arr.indexOf(m) < 0) {\n        arr.push(m);\n      }\n      if (!skipShadowCasters && m.castShadow && casters.indexOf(m) < 0) {\n        casters.push(m);\n      }\n      if (!this.passThrough && sceneShaderVer >= 0 && mat._shaderVersion !== sceneShaderVer) {\n        if (mat.updateShader !== pc.Material.prototype.updateShader) {\n          mat.clearVariants();\n          mat.shader = null;\n        }\n        mat._shaderVersion = sceneShaderVer;\n      }\n    }\n    if (!this.passThrough) {\n      this._dirty = true;\n    }\n  };\n  Layer.prototype.removeMeshInstances = function(meshInstances, skipShadowCasters) {\n    var i, j, m, spliceOffset, spliceCount, len, drawCall;\n    var opaque = this.opaqueMeshInstances;\n    var transparent = this.transparentMeshInstances;\n    var casters = this.shadowCasters;\n    for (i = 0; i < meshInstances.length; i++) {\n      m = meshInstances[i];\n      spliceOffset = -1;\n      spliceCount = 0;\n      len = opaque.length;\n      for (j = 0; j < len; j++) {\n        drawCall = opaque[j];\n        if (drawCall === m) {\n          spliceOffset = j;\n          spliceCount = 1;\n          break;\n        }\n        if (drawCall._staticSource === m) {\n          if (spliceOffset < 0) {\n            spliceOffset = j;\n          }\n          spliceCount++;\n        } else {\n          if (spliceOffset >= 0) {\n            break;\n          }\n        }\n      }\n      if (spliceOffset >= 0) {\n        opaque.splice(spliceOffset, spliceCount);\n      }\n      spliceOffset = -1;\n      spliceCount = 0;\n      len = transparent.length;\n      for (j = 0; j < len; j++) {\n        drawCall = transparent[j];\n        if (drawCall === m) {\n          spliceOffset = j;\n          spliceCount = 1;\n          break;\n        }\n        if (drawCall._staticSource === m) {\n          if (spliceOffset < 0) {\n            spliceOffset = j;\n          }\n          spliceCount++;\n        } else {\n          if (spliceOffset >= 0) {\n            break;\n          }\n        }\n      }\n      if (spliceOffset >= 0) {\n        transparent.splice(spliceOffset, spliceCount);\n      }\n      if (skipShadowCasters) {\n        continue;\n      }\n      j = casters.indexOf(m);\n      if (j >= 0) {\n        casters.splice(j, 1);\n      }\n    }\n    this._dirty = true;\n  };\n  Layer.prototype.clearMeshInstances = function(skipShadowCasters) {\n    if (this.opaqueMeshInstances.length === 0 && this.transparentMeshInstances.length === 0) {\n      if (skipShadowCasters || this.shadowCasters.length === 0) {\n        return;\n      }\n    }\n    this.opaqueMeshInstances.length = 0;\n    this.transparentMeshInstances.length = 0;\n    if (!skipShadowCasters) {\n      this.shadowCasters.length = 0;\n    }\n    if (!this.passThrough) {\n      this._dirty = true;\n    }\n  };\n  Layer.prototype.addLight = function(light) {\n    if (this._lightComponents.indexOf(light) >= 0) {\n      return;\n    }\n    this._lightComponents.push(light);\n    this._lights.push(light.light);\n    this._dirtyLights = true;\n    this._generateLightHash();\n  };\n  Layer.prototype.removeLight = function(light) {\n    var id = this._lightComponents.indexOf(light);\n    if (id < 0) {\n      return;\n    }\n    this._lightComponents.splice(id, 1);\n    id = this._lights.indexOf(light.light);\n    this._lights.splice(id, 1);\n    this._dirtyLights = true;\n    this._generateLightHash();\n  };\n  Layer.prototype.clearLights = function() {\n    this._lightComponents.length = 0;\n    this._lights.length = 0;\n    this._dirtyLights = true;\n  };\n  Layer.prototype.addShadowCasters = function(meshInstances) {\n    var m;\n    var arr = this.shadowCasters;\n    for (var i = 0; i < meshInstances.length; i++) {\n      m = meshInstances[i];\n      if (!m.castShadow) {\n        continue;\n      }\n      if (arr.indexOf(m) < 0) {\n        arr.push(m);\n      }\n    }\n    this._dirtyLights = true;\n  };\n  Layer.prototype.removeShadowCasters = function(meshInstances) {\n    var id;\n    var arr = this.shadowCasters;\n    for (var i = 0; i < meshInstances.length; i++) {\n      id = arr.indexOf(meshInstances[i]);\n      if (id >= 0) {\n        arr.splice(id, 1);\n      }\n    }\n    this._dirtyLights = true;\n  };\n  Layer.prototype._generateLightHash = function() {\n    if (this._lights.length > 0) {\n      this._lights.sort(sortLights);\n      var str = \"\";\n      var strStatic = \"\";\n      for (var i = 0; i < this._lights.length; i++) {\n        if (this._lights[i].isStatic) {\n          strStatic += this._lights[i].key;\n        } else {\n          str += this._lights[i].key;\n        }\n      }\n      if (str.length === 0) {\n        this._lightHash = 0;\n      } else {\n        this._lightHash = pc.hashCode(str);\n      }\n      if (strStatic.length === 0) {\n        this._staticLightHash = 0;\n      } else {\n        this._staticLightHash = pc.hashCode(strStatic);\n      }\n    } else {\n      this._lightHash = 0;\n      this._staticLightHash = 0;\n    }\n  };\n  Layer.prototype._generateCameraHash = function() {\n    if (this.cameras.length > 1) {\n      this.cameras.sort(sortCameras);\n      var str = \"\";\n      for (var i = 0; i < this.cameras.length; i++) {\n        str += this.cameras[i].entity._guid;\n      }\n      this._cameraHash = pc.hashCode(str);\n    } else {\n      this._cameraHash = 0;\n    }\n    this._dirtyCameras = true;\n  };\n  Layer.prototype.addCamera = function(camera) {\n    if (this.cameras.indexOf(camera) >= 0) {\n      return;\n    }\n    this.cameras.push(camera);\n    this._generateCameraHash();\n  };\n  Layer.prototype.removeCamera = function(camera) {\n    var id = this.cameras.indexOf(camera);\n    if (id < 0) {\n      return;\n    }\n    this.cameras.splice(id, 1);\n    this._generateCameraHash();\n  };\n  Layer.prototype.clearCameras = function() {\n    this.cameras.length = 0;\n    this._cameraHash = 0;\n    this._dirtyCameras = true;\n  };\n  Layer.prototype._sortCameras = function() {\n    this._generateCameraHash();\n  };\n  Layer.prototype._calculateSortDistances = function(drawCalls, drawCallsCount, camPos, camFwd) {\n    var i, drawCall, btype, meshPos;\n    var tempx, tempy, tempz;\n    for (i = 0; i < drawCallsCount; i++) {\n      drawCall = drawCalls[i];\n      if (drawCall.command) {\n        continue;\n      }\n      if (drawCall.layer <= pc.scene.LAYER_FX) {\n        continue;\n      }\n      meshPos = drawCall.aabb.center.data;\n      tempx = meshPos[0] - camPos[0];\n      tempy = meshPos[1] - camPos[1];\n      tempz = meshPos[2] - camPos[2];\n      drawCall.zdist = tempx * camFwd[0] + tempy * camFwd[1] + tempz * camFwd[2];\n    }\n  };\n  Layer.prototype._sortVisible = function(transparent, cameraNode, cameraPass) {\n    var objects = this.instances;\n    var sortMode = transparent ? this.transparentSortMode : this.opaqueSortMode;\n    if (sortMode === pc.SORTMODE_NONE) {\n      return;\n    }\n    var visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];\n    if (sortMode === pc.SORTMODE_BACK2FRONT || sortMode === pc.SORTMODE_FRONT2BACK) {\n      sortPos = cameraNode.getPosition().data;\n      sortDir = cameraNode.forward.data;\n      this._calculateSortDistances(visible.list, visible.length, sortPos, sortDir);\n    }\n    if (visible.list.length !== visible.length) {\n      visible.list.length = visible.length;\n    }\n    visible.list.sort(sortCallbacks[sortMode]);\n  };\n  return {Layer:Layer, InstanceList:InstanceList, VisibleInstanceList:VisibleInstanceList};\n}());\npc.extend(pc, function() {\n  var LayerComposition = function() {\n    this.layerList = [];\n    this.subLayerList = [];\n    this.subLayerEnabled = [];\n    this._dirty = false;\n    this._dirtyBlend = false;\n    this._dirtyLights = false;\n    this._dirtyCameras = false;\n    this._meshInstances = [];\n    this._lights = [];\n    this.cameras = [];\n    this._sortedLights = [[], [], []];\n    this._lightShadowCasters = [];\n    this._globalLightCameras = [];\n    this._globalLightCameraIds = [];\n    this._renderedRt = [];\n    this._renderedByCam = [];\n    this._renderedLayer = [];\n    this._renderList = [];\n    this._renderListCamera = [];\n    pc.events.attach(this);\n  };\n  LayerComposition.prototype._sortLights = function(target) {\n    var light;\n    var lights = target._lights;\n    target._sortedLights[pc.LIGHTTYPE_DIRECTIONAL].length = 0;\n    target._sortedLights[pc.LIGHTTYPE_POINT].length = 0;\n    target._sortedLights[pc.LIGHTTYPE_SPOT].length = 0;\n    for (var i = 0; i < lights.length; i++) {\n      light = lights[i];\n      if (light._enabled) {\n        target._sortedLights[light._type].push(light);\n      }\n    }\n  };\n  LayerComposition.prototype._update = function() {\n    var i, j, k, l;\n    var layer;\n    var len = this.layerList.length;\n    var result = 0;\n    if (!this._dirty || !this._dirtyLights || !this._dirtyCameras) {\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        if (layer._dirty) {\n          this._dirty = true;\n        }\n        if (layer._dirtyLights) {\n          this._dirtyLights = true;\n        }\n        if (layer._dirtyCameras) {\n          this._dirtyCameras = true;\n        }\n      }\n    }\n    var arr;\n    if (this._dirty) {\n      result |= pc.COMPUPDATED_INSTANCES;\n      this._meshInstances.length = 0;\n      var mi;\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        if (layer.passThrough) {\n          continue;\n        }\n        arr = layer.opaqueMeshInstances;\n        for (j = 0; j < arr.length; j++) {\n          mi = arr[j];\n          if (this._meshInstances.indexOf(mi) < 0) {\n            this._meshInstances.push(mi);\n            if (mi.material && mi.material._dirtyBlend) {\n              this._dirtyBlend = true;\n              mi.material._dirtyBlend = false;\n            }\n          }\n        }\n        arr = layer.transparentMeshInstances;\n        for (j = 0; j < arr.length; j++) {\n          mi = arr[j];\n          if (this._meshInstances.indexOf(mi) < 0) {\n            this._meshInstances.push(mi);\n            if (mi.material && mi.material._dirtyBlend) {\n              this._dirtyBlend = true;\n              mi.material._dirtyBlend = false;\n            }\n          }\n        }\n      }\n      for (i = 0; i < len; i++) {\n        this.layerList[i]._dirty = false;\n        this.layerList[i]._version++;\n      }\n    }\n    if (this._dirtyBlend) {\n      result |= pc.COMPUPDATED_BLEND;\n      var opaqueOld, transparentOld, opaqueNew, transparentNew;\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        if (layer.passThrough) {\n          continue;\n        }\n        opaqueOld = layer.opaqueMeshInstances;\n        transparentOld = layer.transparentMeshInstances;\n        opaqueNew = [];\n        transparentNew = [];\n        for (j = 0; j < opaqueOld.length; j++) {\n          if (opaqueOld[j].material && opaqueOld[j].material.blendType !== pc.BLEND_NONE) {\n            transparentNew.push(opaqueOld[j]);\n          } else {\n            opaqueNew.push(opaqueOld[j]);\n          }\n        }\n        for (j = 0; j < transparentOld.length; j++) {\n          if (transparentOld[j].material && transparentOld[j].material.blendType !== pc.BLEND_NONE) {\n            transparentNew.push(transparentOld[j]);\n          } else {\n            opaqueNew.push(transparentOld[j]);\n          }\n        }\n        layer.opaqueMeshInstances.length = opaqueNew.length;\n        for (j = 0; j < opaqueNew.length; j++) {\n          layer.opaqueMeshInstances[j] = opaqueNew[j];\n        }\n        layer.transparentMeshInstances.length = transparentNew.length;\n        for (j = 0; j < transparentNew.length; j++) {\n          layer.transparentMeshInstances[j] = transparentNew[j];\n        }\n      }\n      this._dirtyBlend = false;\n    }\n    this._dirty = false;\n    var transparent;\n    if (this._dirtyLights || result & pc.COMPUPDATED_INSTANCES) {\n      result |= pc.COMPUPDATED_LIGHTS;\n      this._lights.length = 0;\n      this._lightShadowCasters.length = 0;\n      var light, casters, meshInstances, lid;\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        arr = layer._lights;\n        for (j = 0; j < arr.length; j++) {\n          light = arr[j];\n          lid = this._lights.indexOf(light);\n          if (lid < 0) {\n            this._lights.push(light);\n            lid = this._lights.length - 1;\n          }\n          casters = this._lightShadowCasters[lid];\n          if (!casters) {\n            this._lightShadowCasters[lid] = casters = [];\n          }\n        }\n      }\n    }\n    if (this._dirtyLights) {\n      this._sortLights(this);\n      this._dirtyLights = false;\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        this._sortLights(layer);\n        layer._dirtyLights = false;\n      }\n    }\n    if (result) {\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        arr = layer._lights;\n        for (j = 0; j < arr.length; j++) {\n          light = arr[j];\n          lid = this._lights.indexOf(light);\n          casters = this._lightShadowCasters[lid];\n          meshInstances = layer.shadowCasters;\n          for (k = 0; k < meshInstances.length; k++) {\n            if (casters.indexOf(meshInstances[k]) < 0) {\n              casters.push(meshInstances[k]);\n            }\n          }\n        }\n      }\n    }\n    if (result & pc.COMPUPDATED_LIGHTS || this._dirtyCameras) {\n      this._globalLightCameras.length = 0;\n      var globalLights = this._sortedLights[pc.LIGHTTYPE_DIRECTIONAL];\n      for (l = 0; l < globalLights.length; l++) {\n        light = globalLights[l];\n        this._globalLightCameras[l] = [];\n        for (i = 0; i < len; i++) {\n          layer = this.layerList[i];\n          if (layer._sortedLights[pc.LIGHTTYPE_DIRECTIONAL].indexOf(light) < 0) {\n            continue;\n          }\n          for (k = 0; k < layer.cameras.length; k++) {\n            if (this._globalLightCameras[l].indexOf(layer.cameras[k]) >= 0) {\n              continue;\n            }\n            this._globalLightCameras[l].push(layer.cameras[k]);\n          }\n        }\n      }\n    }\n    var camera, index;\n    if (this._dirtyCameras) {\n      result |= pc.COMPUPDATED_CAMERAS;\n      this.cameras.length = 0;\n      for (i = 0; i < len; i++) {\n        layer = this.layerList[i];\n        for (j = 0; j < layer.cameras.length; j++) {\n          camera = layer.cameras[j];\n          index = this.cameras.indexOf(camera);\n          if (index < 0) {\n            index = this.cameras.length;\n            this.cameras.push(camera);\n          }\n        }\n      }\n      this._renderList.length = 0;\n      this._renderListCamera.length = 0;\n      var hash, hash2, groupLength, cam;\n      var skipCount = 0;\n      for (i = 0; i < len; i++) {\n        if (skipCount) {\n          skipCount--;\n          continue;\n        }\n        layer = this.layerList[i];\n        if (layer.cameras.length === 0 && !layer.isPostEffect) {\n          continue;\n        }\n        hash = layer._cameraHash;\n        if (hash === 0) {\n          this._renderList.push(i);\n          this._renderListCamera.push(0);\n        } else {\n          groupLength = 1;\n          for (j = i + 1; j < len; j++) {\n            hash2 = this.layerList[j]._cameraHash;\n            if (hash !== hash2) {\n              groupLength = j - i - 1;\n              break;\n            } else {\n              if (j === len - 1) {\n                groupLength = j - i;\n              }\n            }\n          }\n          if (groupLength === 1) {\n            for (cam = 0; cam < layer.cameras.length; cam++) {\n              this._renderList.push(i);\n              this._renderListCamera.push(cam);\n            }\n          } else {\n            cam = 0;\n            for (cam = 0; cam < layer.cameras.length; cam++) {\n              for (j = 0; j <= groupLength; j++) {\n                this._renderList.push(i + j);\n                this._renderListCamera.push(cam);\n              }\n            }\n            skipCount = groupLength;\n          }\n        }\n      }\n      this._dirtyCameras = false;\n      for (i = 0; i < len; i++) {\n        this.layerList[i]._dirtyCameras = false;\n      }\n    }\n    if (result & pc.COMPUPDATED_LIGHTS || result & pc.COMPUPDATED_CAMERAS) {\n      this._globalLightCameraIds.length = 0;\n      for (l = 0; l < this._globalLightCameras.length; l++) {\n        arr = [];\n        for (i = 0; i < this._globalLightCameras[l].length; i++) {\n          index = this.cameras.indexOf(this._globalLightCameras[l][i]);\n          if (index < 0) {\n            continue;\n          }\n          arr.push(index);\n        }\n        this._globalLightCameraIds.push(arr);\n      }\n    }\n    return result;\n  };\n  LayerComposition.prototype._isLayerAdded = function(layer) {\n    if (this.layerList.indexOf(layer) >= 0) {\n      return true;\n    }\n    return false;\n  };\n  LayerComposition.prototype._isSublayerAdded = function(layer, transparent) {\n    for (var i = 0; i < this.layerList.length; i++) {\n      if (this.layerList[i] === layer && this.subLayerList[i] === transparent) {\n        return true;\n      }\n    }\n    return false;\n  };\n  LayerComposition.prototype.push = function(layer) {\n    if (this._isLayerAdded(layer)) {\n      return;\n    }\n    this.layerList.push(layer);\n    this.layerList.push(layer);\n    this.subLayerList.push(false);\n    this.subLayerList.push(true);\n    this.subLayerEnabled.push(true);\n    this.subLayerEnabled.push(true);\n    this._dirty = true;\n    this._dirtyLights = true;\n    this._dirtyCameras = true;\n    this.fire(\"add\", layer);\n  };\n  LayerComposition.prototype.insert = function(layer, index) {\n    if (this._isLayerAdded(layer)) {\n      return;\n    }\n    this.layerList.splice(index, 0, layer, layer);\n    this.subLayerList.splice(index, 0, false, true);\n    this.subLayerEnabled.splice(index, 0, true, true);\n    this._dirty = true;\n    this._dirtyLights = true;\n    this._dirtyCameras = true;\n    this.fire(\"add\", layer);\n  };\n  LayerComposition.prototype.remove = function(layer) {\n    var id = this.layerList.indexOf(layer);\n    while (id >= 0) {\n      this.layerList.splice(id, 1);\n      this.subLayerList.splice(id, 1);\n      this.subLayerEnabled.splice(id, 1);\n      id = this.layerList.indexOf(layer);\n      this._dirty = true;\n      this._dirtyLights = true;\n      this._dirtyCameras = true;\n      this.fire(\"remove\", layer);\n    }\n  };\n  LayerComposition.prototype.pushOpaque = function(layer) {\n    if (this._isSublayerAdded(layer, false)) {\n      return;\n    }\n    this.layerList.push(layer);\n    this.subLayerList.push(false);\n    this.subLayerEnabled.push(true);\n    this._dirty = true;\n    this._dirtyLights = true;\n    this._dirtyCameras = true;\n    this.fire(\"add\", layer);\n  };\n  LayerComposition.prototype.insertOpaque = function(layer, index) {\n    if (this._isSublayerAdded(layer, false)) {\n      return;\n    }\n    this.layerList.splice(index, 0, layer);\n    this.subLayerList.splice(index, 0, false);\n    this.subLayerEnabled.splice(index, 0, true);\n    this._dirty = true;\n    this._dirtyLights = true;\n    this._dirtyCameras = true;\n    this.fire(\"add\", layer);\n  };\n  LayerComposition.prototype.removeOpaque = function(layer) {\n    for (var i = 0; i < this.layerList.length; i++) {\n      if (this.layerList[i] === layer && !this.subLayerList[i]) {\n        this.layerList.splice(i, 1);\n        this.subLayerList.splice(i, 1);\n        this.subLayerEnabled.splice(i, 1);\n        this._dirty = true;\n        this._dirtyLights = true;\n        this._dirtyCameras = true;\n        if (this.layerList.indexOf(layer) < 0) {\n          this.fire(\"remove\", layer);\n        }\n        return;\n      }\n    }\n  };\n  LayerComposition.prototype.pushTransparent = function(layer) {\n    if (this._isSublayerAdded(layer, true)) {\n      return;\n    }\n    this.layerList.push(layer);\n    this.subLayerList.push(true);\n    this.subLayerEnabled.push(true);\n    this._dirty = true;\n    this._dirtyLights = true;\n    this._dirtyCameras = true;\n    this.fire(\"add\", layer);\n  };\n  LayerComposition.prototype.insertTransparent = function(layer, index) {\n    if (this._isSublayerAdded(layer, true)) {\n      return;\n    }\n    this.layerList.splice(index, 0, layer);\n    this.subLayerList.splice(index, 0, true);\n    this.subLayerEnabled.splice(index, 0, true);\n    this._dirty = true;\n    this._dirtyLights = true;\n    this._dirtyCameras = true;\n    this.fire(\"add\", layer);\n  };\n  LayerComposition.prototype.removeTransparent = function(layer) {\n    for (var i = 0; i < this.layerList.length; i++) {\n      if (this.layerList[i] === layer && this.subLayerList[i]) {\n        this.layerList.splice(i, 1);\n        this.subLayerList.splice(i, 1);\n        this.subLayerEnabled.splice(i, 1);\n        this._dirty = true;\n        this._dirtyLights = true;\n        this._dirtyCameras = true;\n        if (this.layerList.indexOf(layer) < 0) {\n          this.fire(\"remove\", layer);\n        }\n        return;\n      }\n    }\n  };\n  LayerComposition.prototype._getSublayerIndex = function(layer, transparent) {\n    var id = this.layerList.indexOf(layer);\n    if (id < 0) {\n      return -1;\n    }\n    if (this.subLayerList[id] !== transparent) {\n      id = this.layerList.indexOf(layer, id + 1);\n      if (id < 0) {\n        return -1;\n      }\n      if (this.subLayerList[id] !== transparent) {\n        return -1;\n      }\n    }\n    return id;\n  };\n  LayerComposition.prototype.getOpaqueIndex = function(layer) {\n    return this._getSublayerIndex(layer, false);\n  };\n  LayerComposition.prototype.getTransparentIndex = function(layer) {\n    return this._getSublayerIndex(layer, true);\n  };\n  LayerComposition.prototype.getLayerById = function(id) {\n    for (var i = 0; i < this.layerList.length; i++) {\n      if (this.layerList[i].id === id) {\n        return this.layerList[i];\n      }\n    }\n    return null;\n  };\n  LayerComposition.prototype.getLayerByName = function(name) {\n    for (var i = 0; i < this.layerList.length; i++) {\n      if (this.layerList[i].name === name) {\n        return this.layerList[i];\n      }\n    }\n    return null;\n  };\n  return {LayerComposition:LayerComposition};\n}());\npc.extend(pc, function() {\n  pc.SPRITE_RENDERMODE_SIMPLE = 0;\n  pc.SPRITE_RENDERMODE_SLICED = 1;\n  pc.SPRITE_RENDERMODE_TILED = 2;\n  var normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];\n  var indices = [0, 1, 3, 2, 3, 1];\n  var Sprite = function(device, options) {\n    this._device = device;\n    this._pixelsPerUnit = options && options.pixelsPerUnit !== undefined ? options.pixelsPerUnit : 1;\n    this._renderMode = options && options.renderMode !== undefined ? options.renderMode : pc.SPRITE_RENDERMODE_SIMPLE;\n    this._atlas = options && options.atlas !== undefined ? options.atlas : null;\n    this._frameKeys = options && options.frameKeys !== undefined ? options.frameKeys : null;\n    this._meshes = [];\n    this._updatingProperties = false;\n    this._meshesDirty = false;\n    pc.events.attach(this);\n    if (this._atlas && this._frameKeys) {\n      this._createMeshes();\n    }\n  };\n  Sprite.prototype._createMeshes = function() {\n    var i, len;\n    for (i = 0, len = this._meshes.length; i < len; i++) {\n      var mesh = this._meshes[i];\n      if (!mesh) {\n        continue;\n      }\n      mesh.vertexBuffer.destroy();\n      for (var j = 0, len2 = mesh.indexBuffer.length; j < len2; j++) {\n        mesh.indexBuffer[j].destroy();\n      }\n    }\n    var count = this._frameKeys.length;\n    this._meshes = new Array(count);\n    var createMeshFunc = this.renderMode === pc.SPRITE_RENDERMODE_SLICED || this._renderMode === pc.SPRITE_RENDERMODE_TILED ? this._create9SliceMesh : this._createSimpleMesh;\n    for (i = 0; i < count; i++) {\n      var frame = this._atlas.frames[this._frameKeys[i]];\n      this._meshes[i] = frame ? createMeshFunc.call(this, frame) : null;\n    }\n    this.fire(\"set:meshes\");\n  };\n  Sprite.prototype._createSimpleMesh = function(frame) {\n    var rect = frame.rect;\n    var texWidth = this._atlas.texture.width;\n    var texHeight = this._atlas.texture.height;\n    var w = rect.data[2] / this._pixelsPerUnit;\n    var h = rect.data[3] / this._pixelsPerUnit;\n    var hp = frame.pivot.x;\n    var vp = frame.pivot.y;\n    var positions = [-hp * w, -vp * h, 0, (1 - hp) * w, -vp * h, 0, (1 - hp) * w, (1 - vp) * h, 0, -hp * w, (1 - vp) * h, 0];\n    var lu = rect.data[0] / texWidth;\n    var bv = rect.data[1] / texHeight;\n    var ru = (rect.data[0] + rect.data[2]) / texWidth;\n    var tv = (rect.data[1] + rect.data[3]) / texHeight;\n    var uvs = [lu, bv, ru, bv, ru, tv, lu, tv];\n    var mesh = pc.createMesh(this._device, positions, {uvs:uvs, normals:normals, indices:indices});\n    return mesh;\n  };\n  Sprite.prototype._create9SliceMesh = function() {\n    var he = pc.Vec2.ONE;\n    var ws = 3;\n    var ls = 3;\n    var i, j;\n    var x, y, z, u, v;\n    var positions = [];\n    var normals = [];\n    var uvs = [];\n    var uvs1 = [];\n    var indices = [];\n    var vcounter = 0;\n    for (i = 0; i <= ws; i++) {\n      u = i === 0 || i === ws ? 0 : 1;\n      for (j = 0; j <= ls; j++) {\n        x = -he.x + 2.0 * he.x * (i <= 1 ? 0 : 3) / ws;\n        y = 0.0;\n        z = -(-he.y + 2.0 * he.y * (j <= 1 ? 0 : 3) / ls);\n        v = j === 0 || j === ls ? 0 : 1;\n        positions.push(-x, y, z);\n        normals.push(0.0, 1.0, 0.0);\n        uvs.push(u, v);\n        if (i < ws && j < ls) {\n          indices.push(vcounter + ls + 1, vcounter + 1, vcounter);\n          indices.push(vcounter + ls + 1, vcounter + ls + 2, vcounter + 1);\n        }\n        vcounter++;\n      }\n    }\n    var options = {normals:normals, uvs:uvs, indices:indices};\n    return pc.createMesh(this._device, positions, options);\n  };\n  Sprite.prototype._onSetFrames = function(frames) {\n    if (this._updatingProperties) {\n      this._meshesDirty = true;\n    } else {\n      this._createMeshes();\n    }\n  };\n  Sprite.prototype._onFrameChanged = function(frameKey, frame) {\n    var idx = this._frameKeys.indexOf(frameKey);\n    if (idx < 0) {\n      return;\n    }\n    if (frame) {\n      if (this.renderMode === pc.SPRITE_RENDERMODE_SIMPLE) {\n        this._meshes[idx] = this._createSimpleMesh(frame);\n      }\n    } else {\n      this._meshes[idx] = null;\n    }\n    this.fire(\"set:meshes\");\n  };\n  Sprite.prototype._onFrameRemoved = function(frameKey) {\n    var idx = this._frameKeys.indexOf(frameKey);\n    if (idx < 0) {\n      return;\n    }\n    this._meshes[idx] = null;\n    this.fire(\"set:meshes\");\n  };\n  Sprite.prototype.startUpdate = function() {\n    this._updatingProperties = true;\n    this._meshesDirty = false;\n  };\n  Sprite.prototype.endUpdate = function() {\n    this._updatingProperties = false;\n    if (this._meshesDirty && this._atlas && this._frameKeys) {\n      this._createMeshes();\n    }\n    this._meshesDirty = false;\n  };\n  Sprite.prototype.destroy = function() {\n    var i;\n    var len;\n    for (i = 0, len = this._meshes.length; i < len; i++) {\n      var mesh = this._meshes[i];\n      if (!mesh) {\n        continue;\n      }\n      mesh.vertexBuffer.destroy();\n      for (var j = 0, len2 = mesh.indexBuffer.length; j < len2; j++) {\n        mesh.indexBuffer[j].destroy();\n      }\n    }\n    this._meshes.length = 0;\n  }, Object.defineProperty(Sprite.prototype, \"frameKeys\", {get:function() {\n    return this._frameKeys;\n  }, set:function(value) {\n    this._frameKeys = value;\n    if (this._atlas && this._frameKeys) {\n      if (this._updatingProperties) {\n        this._meshesDirty = true;\n      } else {\n        this._createMeshes();\n      }\n    }\n    this.fire(\"set:frameKeys\", value);\n  }});\n  Object.defineProperty(Sprite.prototype, \"atlas\", {get:function() {\n    return this._atlas;\n  }, set:function(value) {\n    if (value === this._atlas) {\n      return;\n    }\n    if (this._atlas) {\n      this._atlas.off(\"set:frames\", this._onSetFrames, this);\n      this._atlas.off(\"set:frame\", this._onFrameChanged, this);\n      this._atlas.off(\"remove:frame\", this._onFrameRemoved, this);\n    }\n    this._atlas = value;\n    if (this._atlas && this._frameKeys) {\n      this._atlas.on(\"set:frames\", this._onSetFrames, this);\n      this._atlas.on(\"set:frame\", this._onFrameChanged, this);\n      this._atlas.on(\"remove:frame\", this._onFrameRemoved, this);\n      if (this._updatingProperties) {\n        this._meshesDirty = true;\n      } else {\n        this._createMeshes();\n      }\n    }\n    this.fire(\"set:atlas\", value);\n  }});\n  Object.defineProperty(Sprite.prototype, \"pixelsPerUnit\", {get:function() {\n    return this._pixelsPerUnit;\n  }, set:function(value) {\n    if (this._pixelsPerUnit === value) {\n      return;\n    }\n    this._pixelsPerUnit = value;\n    this.fire(\"set:pixelsPerUnit\", value);\n    if (this._atlas && this._frameKeys && this.renderMode === pc.SPRITE_RENDERMODE_SIMPLE) {\n      if (this._updatingProperties) {\n        this._meshesDirty = true;\n      } else {\n        this._createMeshes();\n      }\n    }\n  }});\n  Object.defineProperty(Sprite.prototype, \"renderMode\", {get:function() {\n    return this._renderMode;\n  }, set:function(value) {\n    if (this._renderMode === value) {\n      return;\n    }\n    var prev = this._renderMode;\n    this._renderMode = value;\n    this.fire(\"set:renderMode\", value);\n    if (prev === pc.SPRITE_RENDERMODE_SIMPLE || value === pc.SPRITE_RENDERMODE_SIMPLE) {\n      if (this._atlas && this._frameKeys) {\n        if (this._updatingProperties) {\n          this._meshesDirty = true;\n        } else {\n          this._createMeshes();\n        }\n      }\n    }\n  }});\n  Object.defineProperty(Sprite.prototype, \"meshes\", {get:function() {\n    return this._meshes;\n  }});\n  return {Sprite:Sprite};\n}());\npc.extend(pc, function() {\n  var TextureAtlas = function() {\n    this._texture = null;\n    this._frames = null;\n    pc.events.attach(this);\n  };\n  TextureAtlas.prototype.setFrame = function(key, data) {\n    var frame = this._frames[key];\n    if (!frame) {\n      frame = {rect:data.rect.clone(), pivot:data.pivot.clone(), border:data.border.clone()};\n      this._frames[key] = frame;\n    } else {\n      frame.rect.copy(data.rect);\n      frame.pivot.copy(data.pivot);\n      frame.border.copy(data.border);\n    }\n    this.fire(\"set:frame\", key.toString(), frame);\n  };\n  TextureAtlas.prototype.removeFrame = function(key) {\n    var frame = this._frames[key];\n    if (frame) {\n      delete this._frames[key];\n      this.fire(\"remove:frame\", key.toString(), frame);\n    }\n  };\n  TextureAtlas.prototype.destroy = function() {\n    if (this._texture) {\n      this._texture.destroy();\n    }\n  }, Object.defineProperty(TextureAtlas.prototype, \"texture\", {get:function() {\n    return this._texture;\n  }, set:function(value) {\n    this._texture = value;\n    this.fire(\"set:texture\", value);\n  }});\n  Object.defineProperty(TextureAtlas.prototype, \"frames\", {get:function() {\n    return this._frames;\n  }, set:function(value) {\n    this._frames = value;\n    this.fire(\"set:frames\", value);\n  }});\n  return {TextureAtlas:TextureAtlas};\n}());\npc.extend(pc, function() {\n  var StencilParameters = function(options) {\n    this.func = options.func === undefined ? pc.FUNC_ALWAYS : options.func;\n    this.ref = options.ref || 0;\n    this.readMask = options.readMask === undefined ? 255 : options.readMask;\n    this.writeMask = options.writeMask === undefined ? 255 : options.writeMask;\n    this.fail = options.fail || pc.STENCILOP_KEEP;\n    this.zfail = options.zfail || pc.STENCILOP_KEEP;\n    this.zpass = options.zpass || pc.STENCILOP_KEEP;\n  };\n  StencilParameters.prototype.clone = function() {\n    var clone = new pc.StencilParameters({func:this.func, ref:this.ref, readMask:this.readMask, writeMask:this.writeMask, fail:this.fail, zfail:this.zfail, zpass:this.zpass});\n    return clone;\n  };\n  return {StencilParameters:StencilParameters};\n}());\npc.extend(pc, function() {\n  var Key = function Key(time, position, rotation, scale) {\n    this.time = time;\n    this.position = position;\n    this.rotation = rotation;\n    this.scale = scale;\n  };\n  var Node = function Node() {\n    this._name = \"\";\n    this._keys = [];\n  };\n  var Animation = function Animation() {\n    this.name = \"\";\n    this.duration = 0;\n    this._nodes = [];\n    this._nodeDict = {};\n  };\n  Animation.prototype.getDuration = function() {\n    return this.duration;\n  };\n  Animation.prototype.getName = function() {\n    return this.name;\n  };\n  Animation.prototype.getNode = function(name) {\n    return this._nodeDict[name];\n  };\n  Object.defineProperty(Animation.prototype, \"nodes\", {get:function() {\n    return this._nodes;\n  }});\n  Animation.prototype.getNodes = function() {\n    return this._nodes;\n  };\n  Animation.prototype.setDuration = function(duration) {\n    this.duration = duration;\n  };\n  Animation.prototype.setName = function(name) {\n    this.name = name;\n  };\n  Animation.prototype.addNode = function(node) {\n    this._nodes.push(node);\n    this._nodeDict[node._name] = node;\n  };\n  return {Animation:Animation, Key:Key, Node:Node};\n}());\npc.extend(pc, function() {\n  function InterpolatedKey() {\n    this._written = false;\n    this._name = \"\";\n    this._keyFrames = [];\n    this._quat = new pc.Quat;\n    this._pos = new pc.Vec3;\n    this._scale = new pc.Vec3;\n    this._targetNode = null;\n  }\n  InterpolatedKey.prototype = {getTarget:function() {\n    return this._targetNode;\n  }, setTarget:function(node) {\n    this._targetNode = node;\n  }};\n  var Skeleton = function Skeleton(graph) {\n    this._animation = null;\n    this._time = 0;\n    this.looping = true;\n    this._interpolatedKeys = [];\n    this._interpolatedKeyDict = {};\n    this._currKeyIndices = {};\n    this.graph = null;\n    var self = this;\n    function addInterpolatedKeys(node) {\n      var interpKey = new InterpolatedKey;\n      interpKey._name = node.name;\n      self._interpolatedKeys.push(interpKey);\n      self._interpolatedKeyDict[node.name] = interpKey;\n      self._currKeyIndices[node.name] = 0;\n      for (var i = 0; i < node._children.length; i++) {\n        addInterpolatedKeys(node._children[i]);\n      }\n    }\n    addInterpolatedKeys(graph);\n  };\n  Skeleton.prototype.addTime = function(delta) {\n    if (this._animation !== null) {\n      var i;\n      var node, nodeName;\n      var keys, interpKey;\n      var k1, k2, alpha;\n      var nodes = this._animation._nodes;\n      var duration = this._animation.duration;\n      if (this._time === duration && !this.looping) {\n        return;\n      }\n      this._time += delta;\n      if (this._time > duration) {\n        this._time = this.looping ? 0.0 : duration;\n        for (i = 0; i < nodes.length; i++) {\n          node = nodes[i];\n          nodeName = node._name;\n          this._currKeyIndices[nodeName] = 0;\n        }\n      } else {\n        if (this._time < 0) {\n          this._time = this.looping ? duration : 0.0;\n          for (i = 0; i < nodes.length; i++) {\n            node = nodes[i];\n            nodeName = node._name;\n            this._currKeyIndices[nodeName] = node._keys.length - 2;\n          }\n        }\n      }\n      var offset = delta >= 0 ? 1 : -1;\n      var foundKey;\n      for (i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        nodeName = node._name;\n        keys = node._keys;\n        interpKey = this._interpolatedKeyDict[nodeName];\n        foundKey = false;\n        if (keys.length !== 1) {\n          for (var currKeyIndex = this._currKeyIndices[nodeName]; currKeyIndex < keys.length - 1 && currKeyIndex >= 0; currKeyIndex += offset) {\n            k1 = keys[currKeyIndex];\n            k2 = keys[currKeyIndex + 1];\n            if (k1.time <= this._time && k2.time >= this._time) {\n              alpha = (this._time - k1.time) / (k2.time - k1.time);\n              interpKey._pos.lerp(k1.position, k2.position, alpha);\n              interpKey._quat.slerp(k1.rotation, k2.rotation, alpha);\n              interpKey._scale.lerp(k1.scale, k2.scale, alpha);\n              interpKey._written = true;\n              this._currKeyIndices[nodeName] = currKeyIndex;\n              foundKey = true;\n              break;\n            }\n          }\n        }\n        if (keys.length === 1 || !foundKey && this._time === 0.0 && this.looping) {\n          interpKey._pos.copy(keys[0].position);\n          interpKey._quat.copy(keys[0].rotation);\n          interpKey._scale.copy(keys[0].scale);\n          interpKey._written = true;\n        }\n      }\n    }\n  };\n  Skeleton.prototype.blend = function(skel1, skel2, alpha) {\n    var numNodes = this._interpolatedKeys.length;\n    for (var i = 0; i < numNodes; i++) {\n      var key1 = skel1._interpolatedKeys[i];\n      var key2 = skel2._interpolatedKeys[i];\n      var dstKey = this._interpolatedKeys[i];\n      if (key1._written && key2._written) {\n        dstKey._quat.slerp(key1._quat, skel2._interpolatedKeys[i]._quat, alpha);\n        dstKey._pos.lerp(key1._pos, skel2._interpolatedKeys[i]._pos, alpha);\n        dstKey._scale.lerp(key1._scale, key2._scale, alpha);\n        dstKey._written = true;\n      } else {\n        if (key1._written) {\n          dstKey._quat.copy(key1._quat);\n          dstKey._pos.copy(key1._pos);\n          dstKey._scale.copy(key1._scale);\n          dstKey._written = true;\n        } else {\n          if (key2._written) {\n            dstKey._quat.copy(key2._quat);\n            dstKey._pos.copy(key2._pos);\n            dstKey._scale.copy(key2._scale);\n            dstKey._written = true;\n          }\n        }\n      }\n    }\n  };\n  Object.defineProperty(Skeleton.prototype, \"animation\", {get:function() {\n    return this._animation;\n  }, set:function(value) {\n    this._animation = value;\n    this.currentTime = 0;\n  }});\n  Skeleton.prototype.getAnimation = function() {\n    return this._animation;\n  };\n  Object.defineProperty(Skeleton.prototype, \"currentTime\", {get:function() {\n    return this._time;\n  }, set:function(value) {\n    this._time = value;\n    var numNodes = this._interpolatedKeys.length;\n    for (var i = 0; i < numNodes; i++) {\n      var node = this._interpolatedKeys[i];\n      var nodeName = node._name;\n      this._currKeyIndices[nodeName] = 0;\n    }\n    this.addTime(0);\n    this.updateGraph();\n  }});\n  Skeleton.prototype.getCurrentTime = function() {\n    return this._time;\n  };\n  Skeleton.prototype.setCurrentTime = function(time) {\n    this.currentTime = time;\n  };\n  Object.defineProperty(Skeleton.prototype, \"numNodes\", {get:function() {\n    return this._interpolatedKeys.length;\n  }});\n  Skeleton.prototype.getNumNodes = function() {\n    return this._interpolatedKeys.length;\n  };\n  Skeleton.prototype.setAnimation = function(animation) {\n    this.animation = animation;\n  };\n  Skeleton.prototype.setGraph = function(graph) {\n    var i;\n    this.graph = graph;\n    if (graph) {\n      for (i = 0; i < this._interpolatedKeys.length; i++) {\n        var interpKey = this._interpolatedKeys[i];\n        var graphNode = graph.findByName(interpKey._name);\n        this._interpolatedKeys[i].setTarget(graphNode);\n      }\n    } else {\n      for (i = 0; i < this._interpolatedKeys.length; i++) {\n        this._interpolatedKeys[i].setTarget(null);\n      }\n    }\n  };\n  Skeleton.prototype.updateGraph = function() {\n    if (this.graph) {\n      for (var i = 0; i < this._interpolatedKeys.length; i++) {\n        var interpKey = this._interpolatedKeys[i];\n        if (interpKey._written) {\n          var transform = interpKey.getTarget();\n          transform.localPosition.copy(interpKey._pos);\n          transform.localRotation.copy(interpKey._quat);\n          transform.localScale.copy(interpKey._scale);\n          if (!transform._dirtyLocal) {\n            transform._dirtify(true);\n          }\n          interpKey._written = false;\n        }\n      }\n    }\n  };\n  Skeleton.prototype.setLooping = function(looping) {\n    this.looping = looping;\n  };\n  Skeleton.prototype.getLooping = function() {\n    return this.looping;\n  };\n  return {Skeleton:Skeleton};\n}());\npc.extend(pc, function() {\n  function hasAudio() {\n    return typeof Audio !== \"undefined\";\n  }\n  function hasAudioContext() {\n    return !!(typeof AudioContext !== \"undefined\" || typeof webkitAudioContext !== \"undefined\");\n  }\n  var SoundManager = function(options) {\n    if (hasAudioContext() || options.forceWebAudioApi) {\n      if (typeof AudioContext !== \"undefined\") {\n        this.context = new AudioContext;\n      } else {\n        if (typeof webkitAudioContext !== \"undefined\") {\n          this.context = new webkitAudioContext;\n        }\n      }\n      if (this.context) {\n        var context = this.context;\n        if (pc.platform.ios) {\n          var unlock = function() {\n            var buffer = context.createBuffer(1, 1, 44100);\n            var source = context.createBufferSource();\n            source.buffer = buffer;\n            source.connect(context.destination);\n            source.start(0);\n            source.disconnect();\n            window.removeEventListener(\"touchend\", unlock);\n          };\n          window.addEventListener(\"touchend\", unlock);\n        }\n      }\n    } else {\n      console.warn(\"No support for 3D audio found\");\n    }\n    if (!hasAudio()) {\n      console.warn(\"No support for 2D audio found\");\n    }\n    this.listener = new pc.Listener(this);\n    this._volume = 1;\n    this.suspended = false;\n    pc.events.attach(this);\n  };\n  SoundManager.hasAudio = hasAudio;\n  SoundManager.hasAudioContext = hasAudioContext;\n  SoundManager.prototype = {suspend:function() {\n    this.suspended = true;\n    this.fire(\"suspend\");\n  }, resume:function() {\n    this.suspended = false;\n    this.fire(\"resume\");\n  }, destroy:function() {\n    this.fire(\"destroy\");\n    if (this.context && this.context.close) {\n      this.context.close();\n      this.context = null;\n    }\n  }, getListener:function() {\n    console.warn('DEPRECATED: getListener is deprecated. Get the \"listener\" field instead.');\n    return this.listener;\n  }, getVolume:function() {\n    console.warn('DEPRECATED: getVolume is deprecated. Get the \"volume\" property instead.');\n    return this.volume;\n  }, setVolume:function(volume) {\n    console.warn('DEPRECATED: setVolume is deprecated. Set the \"volume\" property instead.');\n    this.volume = volume;\n  }, playSound:function(sound, options) {\n    options = options || {};\n    var channel = null;\n    if (pc.Channel) {\n      channel = new pc.Channel(this, sound, options);\n      channel.play();\n    }\n    return channel;\n  }, playSound3d:function(sound, position, options) {\n    options = options || {};\n    var channel = null;\n    if (pc.Channel3d) {\n      channel = new pc.Channel3d(this, sound, options);\n      channel.setPosition(position);\n      if (options.volume) {\n        channel.setVolume(options.volume);\n      }\n      if (options.loop) {\n        channel.setLoop(options.loop);\n      }\n      if (options.maxDistance) {\n        channel.setMaxDistance(options.maxDistance);\n      }\n      if (options.minDistance) {\n        channel.setMinDistance(options.minDistance);\n      }\n      if (options.rollOffFactor) {\n        channel.setRollOffFactor(options.rollOffFactor);\n      }\n      if (options.distanceModel) {\n        channel.setDistanceModel(options.distanceModel);\n      }\n      channel.play();\n    }\n    return channel;\n  }};\n  Object.defineProperty(SoundManager.prototype, \"volume\", {get:function() {\n    return this._volume;\n  }, set:function(volume) {\n    volume = pc.math.clamp(volume, 0, 1);\n    this._volume = volume;\n    this.fire(\"volumechange\", volume);\n  }});\n  pc.AudioManager = SoundManager;\n  return {SoundManager:SoundManager};\n}());\npc.extend(pc, function() {\n  var Sound = function(resource) {\n    if (resource instanceof Audio) {\n      this.audio = resource;\n    } else {\n      this.buffer = resource;\n    }\n  };\n  Object.defineProperty(Sound.prototype, \"duration\", {get:function() {\n    var duration = 0;\n    if (this.buffer) {\n      duration = this.buffer.duration;\n    } else {\n      if (this.audio) {\n        duration = this.audio.duration;\n      }\n    }\n    return duration || 0;\n  }});\n  return {Sound:Sound};\n}());\npc.extend(pc, function() {\n  var Listener = function(manager) {\n    this.position = new pc.Vec3;\n    this.velocity = new pc.Vec3;\n    this.orientation = new pc.Mat4;\n    if (pc.AudioManager.hasAudioContext()) {\n      this.listener = manager.context.listener;\n    }\n  };\n  Listener.prototype = {getPosition:function() {\n    return this.position;\n  }, setPosition:function(position) {\n    this.position.copy(position);\n    if (this.listener) {\n      this.listener.setPosition(position.x, position.y, position.z);\n    }\n  }, getVelocity:function() {\n    return this.velocity;\n  }, setVelocity:function(velocity) {\n    this.velocity.copy(velocity);\n    if (this.listener) {\n      this.listener.setPosition(velocity.x, velocity.y, velocity.z);\n    }\n  }, setOrientation:function(orientation) {\n    this.orientation.copy(orientation);\n    if (this.listener) {\n      this.listener.setOrientation(-orientation.data[8], -orientation.data[9], -orientation.data[10], orientation.data[4], orientation.data[5], orientation.data[6]);\n    }\n  }, getOrientation:function() {\n    return this.orientation;\n  }};\n  return {Listener:Listener};\n}());\npc.extend(pc, function() {\n  var SoundInstance;\n  var STATE_PLAYING = 0;\n  var STATE_PAUSED = 1;\n  var STATE_STOPPED = 2;\n  var capTime = function(time, duration) {\n    return time % duration || 0;\n  };\n  if (pc.SoundManager.hasAudioContext()) {\n    SoundInstance = function(manager, sound, options) {\n      pc.events.attach(this);\n      options = options || {};\n      this._volume = options.volume !== undefined ? pc.math.clamp(Number(options.volume) || 0, 0, 1) : 1;\n      this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;\n      this._loop = !!(options.loop !== undefined ? options.loop : false);\n      this._sound = sound;\n      this._state = STATE_STOPPED;\n      this._suspended = false;\n      this._suspendEndEvent = false;\n      this._suspendInstanceEvents = false;\n      this._startTime = Math.max(0, Number(options.startTime) || 0);\n      this._duration = Math.max(0, Number(options.duration) || 0);\n      this._startedAt = 0;\n      this._startOffset = null;\n      this._currentTime = 0;\n      this._currentOffset = 0;\n      this._playWhenLoaded = true;\n      this._manager = manager;\n      this._inputNode = null;\n      this._connectorNode = null;\n      this._firstNode = null;\n      this._lastNode = null;\n      this._initializeNodes();\n      this._onPlayCallback = options.onPlay;\n      this._onPauseCallback = options.onPause;\n      this._onResumeCallback = options.onResume;\n      this._onStopCallback = options.onStop;\n      this._onEndCallback = options.onEnd;\n      this._endedHandler = this._onEnded.bind(this);\n      this.source = null;\n    };\n    SoundInstance.prototype = {_initializeNodes:function() {\n      this.gain = this._manager.context.createGain();\n      this._inputNode = this.gain;\n      this._connectorNode = this.gain;\n      this._connectorNode.connect(this._manager.context.destination);\n    }, play:function() {\n      if (this._state !== STATE_STOPPED) {\n        this.stop();\n      }\n      if (!this.source) {\n        this._createSource();\n      }\n      var offset = capTime(this._startOffset, this.duration);\n      offset = capTime(this._startTime + offset, this._sound.duration);\n      this._startOffset = null;\n      if (this._duration) {\n        this.source.start(0, offset, this._duration);\n      } else {\n        this.source.start(0, offset);\n      }\n      this._startedAt = this._manager.context.currentTime;\n      this._currentTime = 0;\n      this._currentOffset = offset;\n      this._state = STATE_PLAYING;\n      this._playWhenLoaded = false;\n      this.volume = this._volume;\n      this.loop = this._loop;\n      this.pitch = this._pitch;\n      this._manager.on(\"volumechange\", this._onManagerVolumeChange, this);\n      this._manager.on(\"suspend\", this._onManagerSuspend, this);\n      this._manager.on(\"resume\", this._onManagerResume, this);\n      this._manager.on(\"destroy\", this._onManagerDestroy, this);\n      if (this._manager.suspended) {\n        this._onManagerSuspend();\n      }\n      if (!this._suspendInstanceEvents) {\n        this._onPlay();\n      }\n      return true;\n    }, pause:function() {\n      if (this._state !== STATE_PLAYING || !this.source) {\n        return false;\n      }\n      this._updateCurrentTime();\n      this._state = STATE_PAUSED;\n      this._suspendEndEvent = true;\n      this.source.stop(0);\n      this.source = null;\n      this._playWhenLoaded = false;\n      this._startOffset = null;\n      if (!this._suspendInstanceEvents) {\n        this._onPause();\n      }\n      return true;\n    }, resume:function() {\n      if (this._state !== STATE_PAUSED) {\n        return false;\n      }\n      if (!this.source) {\n        this._createSource();\n      }\n      var offset = this.currentTime;\n      if (this._startOffset !== null) {\n        offset = capTime(this._startOffset, this.duration);\n        offset = capTime(this._startTime + offset, this._sound.duration);\n        this._startOffset = null;\n      }\n      if (this._duration) {\n        this.source.start(0, offset, this._duration);\n      } else {\n        this.source.start(0, offset);\n      }\n      this._state = STATE_PLAYING;\n      this._startedAt = this._manager.context.currentTime;\n      this._currentOffset = offset;\n      this.volume = this._volume;\n      this.loop = this._loop;\n      this.pitch = this._pitch;\n      this._playWhenLoaded = false;\n      if (!this._suspendInstanceEvents) {\n        this._onResume();\n      }\n      return true;\n    }, stop:function() {\n      if (this._state === STATE_STOPPED || !this.source) {\n        return false;\n      }\n      this._manager.off(\"volumechange\", this._onManagerVolumeChange, this);\n      this._manager.off(\"suspend\", this._onManagerSuspend, this);\n      this._manager.off(\"resume\", this._onManagerResume, this);\n      this._manager.off(\"destroy\", this._onManagerDestroy, this);\n      this._startedAt = 0;\n      this._currentTime = 0;\n      this._currentOffset = 0;\n      this._startOffset = null;\n      this._playWhenLoaded = false;\n      this._suspendEndEvent = true;\n      if (this._state === STATE_PLAYING) {\n        this.source.stop(0);\n      }\n      this.source = null;\n      this._state = STATE_STOPPED;\n      if (!this._suspendInstanceEvents) {\n        this._onStop();\n      }\n      return true;\n    }, setExternalNodes:function(firstNode, lastNode) {\n      if (!firstNode) {\n        console.error(\"The firstNode must be a valid Audio Node\");\n        return;\n      }\n      if (!lastNode) {\n        lastNode = firstNode;\n      }\n      var speakers = this._manager.context.destination;\n      if (this._firstNode !== firstNode) {\n        if (this._firstNode) {\n          this._connectorNode.disconnect(this._firstNode);\n        } else {\n          this._connectorNode.disconnect(speakers);\n        }\n        this._firstNode = firstNode;\n        this._connectorNode.connect(firstNode);\n      }\n      if (this._lastNode !== lastNode) {\n        if (this._lastNode) {\n          this._lastNode.disconnect(speakers);\n        }\n        this._lastNode = lastNode;\n        this._lastNode.connect(speakers);\n      }\n    }, clearExternalNodes:function() {\n      var speakers = this._manager.context.destination;\n      if (this._firstNode) {\n        this._connectorNode.disconnect(this._firstNode);\n        this._firstNode = null;\n      }\n      if (this._lastNode) {\n        this._lastNode.disconnect(speakers);\n        this._lastNode = null;\n      }\n      this._connectorNode.connect(speakers);\n    }, getExternalNodes:function() {\n      return [this._firstNode, this._lastNode];\n    }, _createSource:function() {\n      if (!this._sound) {\n        return null;\n      }\n      var context = this._manager.context;\n      if (this._sound.buffer) {\n        this.source = context.createBufferSource();\n        this.source.buffer = this._sound.buffer;\n        this.source.connect(this._inputNode);\n        this.source.onended = this._endedHandler;\n        this.source.loopStart = capTime(this._startTime, this.source.buffer.duration);\n        if (this._duration) {\n          this.source.loopEnd = Math.max(this.source.loopStart, capTime(this._startTime + this._duration, this.source.buffer.duration));\n        }\n      }\n      return this.source;\n    }, _updateCurrentTime:function() {\n      this._currentTime = capTime((this._manager.context.currentTime - this._startedAt) * this.pitch + this._currentOffset, this.duration);\n    }, _onManagerDestroy:function() {\n      if (this.source && this.isPlaying) {\n        this.source.stop(0);\n        this.source = null;\n      }\n    }};\n    Object.defineProperty(SoundInstance.prototype, \"volume\", {get:function() {\n      return this._volume;\n    }, set:function(volume) {\n      volume = pc.math.clamp(volume, 0, 1);\n      this._volume = volume;\n      if (this.gain) {\n        this.gain.gain.value = volume * this._manager.volume;\n      }\n    }});\n    Object.defineProperty(SoundInstance.prototype, \"pitch\", {get:function() {\n      return this._pitch;\n    }, set:function(pitch) {\n      this._currentOffset = this.currentTime;\n      this._startedAt = this._manager.context.currentTime;\n      this._pitch = Math.max(Number(pitch) || 0, 0.01);\n      if (this.source) {\n        this.source.playbackRate.value = this._pitch;\n      }\n    }});\n    Object.defineProperty(SoundInstance.prototype, \"loop\", {get:function() {\n      return this._loop;\n    }, set:function(loop) {\n      this._loop = !!loop;\n      if (this.source) {\n        this.source.loop = this._loop;\n      }\n    }});\n    Object.defineProperty(SoundInstance.prototype, \"sound\", {get:function() {\n      return this._sound;\n    }, set:function(value) {\n      this._sound = value;\n      if (!this.isStopped) {\n        this.stop();\n      } else {\n        this._createSource();\n      }\n    }});\n    Object.defineProperty(SoundInstance.prototype, \"currentTime\", {get:function() {\n      if (this._startOffset !== null) {\n        return this._startOffset;\n      }\n      if (this.isPaused) {\n        return this._currentTime;\n      }\n      if (this.isStopped || !this.source) {\n        return 0;\n      }\n      this._updateCurrentTime();\n      return this._currentTime;\n    }, set:function(value) {\n      if (value < 0) {\n        return;\n      }\n      if (this.isPlaying) {\n        this.stop();\n        var suspend = this._suspendInstanceEvents;\n        this._suspendInstanceEvents = true;\n        this._startOffset = value;\n        this.play();\n        this._suspendInstanceEvents = suspend;\n      } else {\n        this._startOffset = value;\n        this._currentTime = value;\n      }\n    }});\n  } else {\n    if (pc.SoundManager.hasAudio()) {\n      SoundInstance = function(manager, resource, options) {\n        pc.events.attach(this);\n        options = options || {};\n        this._volume = options.volume !== undefined ? pc.math.clamp(Number(options.volume) || 0, 0, 1) : 1;\n        this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;\n        this._loop = !!(options.loop !== undefined ? options.loop : false);\n        this._sound = resource;\n        this._state = STATE_STOPPED;\n        this._suspended = false;\n        this._suspendEndEvent = false;\n        this._suspendInstanceEvents = false;\n        this._playWhenLoaded = true;\n        this._startTime = Math.max(0, Number(options.startTime) || 0);\n        this._duration = Math.max(0, Number(options.duration) || 0);\n        this._startOffset = null;\n        this._isReady = false;\n        this._manager = manager;\n        this._loadedMetadataHandler = this._onLoadedMetadata.bind(this);\n        this._timeUpdateHandler = this._onTimeUpdate.bind(this);\n        this._endedHandler = this._onEnded.bind(this);\n        this._onPlayCallback = options.onPlay;\n        this._onPauseCallback = options.onPause;\n        this._onResumeCallback = options.onResume;\n        this._onStopCallback = options.onStop;\n        this._onEndCallback = options.onEnd;\n        this.source = null;\n        this._createSource();\n      };\n      SoundInstance.prototype = {play:function() {\n        if (this._state !== STATE_STOPPED) {\n          this.stop();\n        }\n        if (!this.source) {\n          if (!this._createSource()) {\n            return false;\n          }\n        }\n        this.volume = this._volume;\n        this.pitch = this._pitch;\n        this.loop = this._loop;\n        this.source.play();\n        this._state = STATE_PLAYING;\n        this._playWhenLoaded = false;\n        this._manager.on(\"volumechange\", this._onManagerVolumeChange, this);\n        this._manager.on(\"suspend\", this._onManagerSuspend, this);\n        this._manager.on(\"resume\", this._onManagerResume, this);\n        this._manager.on(\"destroy\", this._onManagerDestroy, this);\n        if (this._manager.suspended) {\n          this._onManagerSuspend();\n        }\n        if (!this._suspendInstanceEvents) {\n          this._onPlay();\n        }\n        return true;\n      }, pause:function() {\n        if (!this.source || this._state !== STATE_PLAYING) {\n          return false;\n        }\n        this._suspendEndEvent = true;\n        this.source.pause();\n        this._playWhenLoaded = false;\n        this._state = STATE_PAUSED;\n        this._startOffset = null;\n        if (!this._suspendInstanceEvents) {\n          this._onPause();\n        }\n        return true;\n      }, resume:function() {\n        if (!this.source || this._state !== STATE_PAUSED) {\n          return false;\n        }\n        this._state = STATE_PLAYING;\n        this._playWhenLoaded = false;\n        if (this.source.paused) {\n          this.source.play();\n          if (!this._suspendInstanceEvents) {\n            this._onResume();\n          }\n        }\n        return true;\n      }, stop:function() {\n        if (!this.source || this._state === STATE_STOPPED) {\n          return false;\n        }\n        this._manager.off(\"volumechange\", this._onManagerVolumeChange, this);\n        this._manager.off(\"suspend\", this._onManagerSuspend, this);\n        this._manager.off(\"resume\", this._onManagerResume, this);\n        this._manager.off(\"destroy\", this._onManagerDestroy, this);\n        this._suspendEndEvent = true;\n        this.source.pause();\n        this._playWhenLoaded = false;\n        this._state = STATE_STOPPED;\n        this._startOffset = null;\n        if (!this._suspendInstanceEvents) {\n          this._onStop();\n        }\n        return true;\n      }, setExternalNodes:function() {\n      }, clearExternalNodes:function() {\n      }, getExternalNodes:function() {\n        return [null, null];\n      }, _onLoadedMetadata:function() {\n        this.source.removeEventListener(\"loadedmetadata\", this._loadedMetadataHandler);\n        this._isReady = true;\n        var offset = capTime(this._startOffset, this.duration);\n        offset = capTime(this._startTime + offset, this._sound.duration);\n        this._startOffset = null;\n        this.source.currentTime = offset;\n      }, _createSource:function() {\n        if (this._sound && this._sound.audio) {\n          this._isReady = false;\n          this.source = this._sound.audio.cloneNode(true);\n          this.source.addEventListener(\"loadedmetadata\", this._loadedMetadataHandler);\n          this.source.addEventListener(\"timeupdate\", this._timeUpdateHandler);\n          this.source.onended = this._endedHandler;\n        }\n        return this.source;\n      }, _onTimeUpdate:function() {\n        if (!this._duration) {\n          return;\n        }\n        if (this.source.currentTime > capTime(this._startTime + this._duration, this.source.duration)) {\n          if (this.loop) {\n            this.source.currentTime = capTime(this._startTime, this.source.duration);\n          } else {\n            this.source.removeEventListener(\"timeupdate\", this._timeUpdateHandler);\n            this.source.pause();\n            this._onEnded();\n          }\n        }\n      }, _onManagerDestroy:function() {\n        if (this.source) {\n          this.source.pause();\n        }\n      }};\n      Object.defineProperty(SoundInstance.prototype, \"volume\", {get:function() {\n        return this._volume;\n      }, set:function(volume) {\n        volume = pc.math.clamp(volume, 0, 1);\n        this._volume = volume;\n        if (this.source) {\n          this.source.volume = volume * this._manager.volume;\n        }\n      }});\n      Object.defineProperty(SoundInstance.prototype, \"pitch\", {get:function() {\n        return this._pitch;\n      }, set:function(pitch) {\n        this._pitch = Math.max(Number(pitch) || 0, 0.01);\n        if (this.source) {\n          this.source.playbackRate = this._pitch;\n        }\n      }});\n      Object.defineProperty(SoundInstance.prototype, \"loop\", {get:function() {\n        return this._loop;\n      }, set:function(loop) {\n        this._loop = !!loop;\n        if (this.source) {\n          this.source.loop = this._loop;\n        }\n      }});\n      Object.defineProperty(SoundInstance.prototype, \"sound\", {get:function() {\n        return this._sound;\n      }, set:function(value) {\n        this.stop();\n        this._sound = value;\n      }});\n      Object.defineProperty(SoundInstance.prototype, \"currentTime\", {get:function() {\n        if (this._startOffset !== null) {\n          return this._startOffset;\n        }\n        if (this.isStopped || !this.source) {\n          return 0;\n        }\n        return this.source.currentTime - this._startTime;\n      }, set:function(value) {\n        if (value < 0) {\n          return;\n        }\n        this._startOffset = value;\n        if (this.source && this._isReady) {\n          this.source.currentTime = capTime(this._startTime + capTime(value, this.duration), this._sound.duration);\n          this._startOffset = null;\n        }\n      }});\n    } else {\n      SoundInstance = function() {\n      };\n    }\n  }\n  pc.extend(SoundInstance.prototype, {_onPlay:function() {\n    this.fire(\"play\");\n    if (this._onPlayCallback) {\n      this._onPlayCallback(this);\n    }\n  }, _onPause:function() {\n    this.fire(\"pause\");\n    if (this._onPauseCallback) {\n      this._onPauseCallback(this);\n    }\n  }, _onResume:function() {\n    this.fire(\"resume\");\n    if (this._onResumeCallback) {\n      this._onResumeCallback(this);\n    }\n  }, _onStop:function() {\n    this.fire(\"stop\");\n    if (this._onStopCallback) {\n      this._onStopCallback(this);\n    }\n  }, _onEnded:function() {\n    if (this._suspendEndEvent) {\n      this._suspendEndEvent = false;\n      return;\n    }\n    this.fire(\"end\");\n    if (this._onEndCallback) {\n      this._onEndCallback(this);\n    }\n    this.stop();\n  }, _onManagerVolumeChange:function() {\n    this.volume = this._volume;\n  }, _onManagerSuspend:function() {\n    if (this.isPlaying && !this._suspended) {\n      this._suspended = true;\n      this.pause();\n    }\n  }, _onManagerResume:function() {\n    if (this._suspended) {\n      this._suspended = false;\n      this.resume();\n    }\n  }});\n  Object.defineProperty(SoundInstance.prototype, \"startTime\", {get:function() {\n    return this._startTime;\n  }, set:function(value) {\n    this._startTime = Math.max(0, Number(value) || 0);\n    var isPlaying = this.isPlaying;\n    this.stop();\n    if (isPlaying) {\n      this.play();\n    }\n  }});\n  Object.defineProperty(SoundInstance.prototype, \"duration\", {get:function() {\n    if (!this._sound) {\n      return 0;\n    }\n    if (this._duration) {\n      return capTime(this._duration, this._sound.duration);\n    } else {\n      return this._sound.duration;\n    }\n  }, set:function(value) {\n    this._duration = Math.max(0, Number(value) || 0);\n    var isPlaying = this.isPlaying;\n    this.stop();\n    if (isPlaying) {\n      this.play();\n    }\n  }});\n  Object.defineProperty(SoundInstance.prototype, \"isPlaying\", {get:function() {\n    return this._state === STATE_PLAYING;\n  }});\n  Object.defineProperty(SoundInstance.prototype, \"isPaused\", {get:function() {\n    return this._state === STATE_PAUSED;\n  }});\n  Object.defineProperty(SoundInstance.prototype, \"isStopped\", {get:function() {\n    return this._state === STATE_STOPPED;\n  }});\n  Object.defineProperty(SoundInstance.prototype, \"isSuspended\", {get:function() {\n    return this._suspended;\n  }});\n  return {SoundInstance:SoundInstance};\n}());\npc.extend(pc, function() {\n  var MAX_DISTANCE = 10000;\n  var SoundInstance3d;\n  if (pc.SoundManager.hasAudioContext()) {\n    SoundInstance3d = function(manager, sound, options) {\n      options = options || {};\n      this._position = new pc.Vec3;\n      if (options.position) {\n        this.position = options.position;\n      }\n      this._velocity = new pc.Vec3;\n      if (options.velocity) {\n        this.velocity = options.velocity;\n      }\n      this.maxDistance = options.maxDistance !== undefined ? Number(options.maxDistance) : MAX_DISTANCE;\n      this.refDistance = options.refDistance !== undefined ? Number(options.refDistance) : 1;\n      this.rollOffFactor = options.rollOffFactor !== undefined ? Number(options.rollOffFactor) : 1;\n      this.distanceModel = options.distanceModel !== undefined ? options.distanceModel : pc.DISTANCE_LINEAR;\n    };\n    SoundInstance3d = pc.inherits(SoundInstance3d, pc.SoundInstance);\n    SoundInstance3d.prototype = pc.extend(SoundInstance3d.prototype, {_initializeNodes:function() {\n      this.gain = this._manager.context.createGain();\n      this.panner = this._manager.context.createPanner();\n      this.panner.connect(this.gain);\n      this._inputNode = this.panner;\n      this._connectorNode = this.gain;\n      this._connectorNode.connect(this._manager.context.destination);\n    }});\n    Object.defineProperty(SoundInstance3d.prototype, \"position\", {get:function() {\n      return this._position;\n    }, set:function(position) {\n      this._position.copy(position);\n      this.panner.setPosition(position.x, position.y, position.z);\n    }});\n    Object.defineProperty(SoundInstance3d.prototype, \"velocity\", {get:function() {\n      return this._velocity;\n    }, set:function(velocity) {\n      this._velocity.copy(velocity);\n      this.panner.setVelocity(velocity.x, velocity.y, velocity.z);\n    }});\n    Object.defineProperty(SoundInstance3d.prototype, \"maxDistance\", {get:function() {\n      return this.panner.maxDistance;\n    }, set:function(value) {\n      this.panner.maxDistance = value;\n    }});\n    Object.defineProperty(SoundInstance3d.prototype, \"refDistance\", {get:function() {\n      return this.panner.refDistance;\n    }, set:function(value) {\n      this.panner.refDistance = value;\n    }});\n    Object.defineProperty(SoundInstance3d.prototype, \"rollOffFactor\", {get:function() {\n      return this.panner.rolloffFactor;\n    }, set:function(value) {\n      this.panner.rolloffFactor = value;\n    }});\n    Object.defineProperty(SoundInstance3d.prototype, \"distanceModel\", {get:function() {\n      return this.panner.distanceModel;\n    }, set:function(value) {\n      this.panner.distanceModel = value;\n    }});\n  } else {\n    if (pc.SoundManager.hasAudio()) {\n      var offset = new pc.Vec3;\n      var fallOff = function(posOne, posTwo, refDistance, maxDistance, rollOffFactor, distanceModel) {\n        offset = offset.sub2(posOne, posTwo);\n        var distance = offset.length();\n        if (distance < refDistance) {\n          return 1;\n        } else {\n          if (distance > maxDistance) {\n            return 0;\n          } else {\n            var result = 0;\n            if (distanceModel === pc.DISTANCE_LINEAR) {\n              result = 1 - rollOffFactor * (distance - refDistance) / (maxDistance - refDistance);\n            } else {\n              if (distanceModel === pc.DISTANCE_INVERSE) {\n                result = refDistance / (refDistance + rollOffFactor * (distance - refDistance));\n              } else {\n                if (distanceModel === pc.DISTANCE_EXPONENTIAL) {\n                  result = Math.pow(distance / refDistance, -rollOffFactor);\n                }\n              }\n            }\n            return pc.math.clamp(result, 0, 1);\n          }\n        }\n      };\n      SoundInstance3d = function(manager, sound, options) {\n        options = options || {};\n        this._position = new pc.Vec3;\n        if (options.position) {\n          this.position = options.position;\n        }\n        this._velocity = new pc.Vec3;\n        if (options.velocity) {\n          this.velocity = options.velocity;\n        }\n        this._maxDistance = options.maxDistance !== undefined ? Number(options.maxDistance) : MAX_DISTANCE;\n        this._refDistance = options.refDistance !== undefined ? Number(options.refDistance) : 1;\n        this._rollOffFactor = options.rollOffFactor !== undefined ? Number(options.rollOffFactor) : 1;\n        this._distanceModel = options.distanceModel !== undefined ? options.distanceModel : pc.DISTANCE_LINEAR;\n      };\n      SoundInstance3d = pc.inherits(SoundInstance3d, pc.SoundInstance);\n      Object.defineProperty(SoundInstance3d.prototype, \"position\", {get:function() {\n        return this._position;\n      }, set:function(position) {\n        this._position.copy(position);\n        if (this.source) {\n          var listener = this._manager.listener;\n          var lpos = listener.getPosition();\n          var factor = fallOff(lpos, this._position, this.refDistance, this.maxDistance, this.rollOffFactor, this.distanceModel);\n          var v = this.volume;\n          this.source.volume = v * factor * this._manager.volume;\n        }\n      }});\n      Object.defineProperty(SoundInstance3d.prototype, \"velocity\", {get:function() {\n        return this._velocity;\n      }, set:function(velocity) {\n        this._velocity.copy(velocity);\n      }});\n      Object.defineProperty(SoundInstance3d.prototype, \"maxDistance\", {get:function() {\n        return this._maxDistance;\n      }, set:function(value) {\n        this._maxDistance = value;\n      }});\n      Object.defineProperty(SoundInstance3d.prototype, \"refDistance\", {get:function() {\n        return this._refDistance;\n      }, set:function(value) {\n        this._refDistance = value;\n      }});\n      Object.defineProperty(SoundInstance3d.prototype, \"rollOffFactor\", {get:function() {\n        return this._rollOffFactor;\n      }, set:function(value) {\n        this._rollOffFactor = value;\n      }});\n      Object.defineProperty(SoundInstance3d.prototype, \"distanceModel\", {get:function() {\n        return this._distanceModel;\n      }, set:function(value) {\n        this._distanceModel = value;\n      }});\n    } else {\n      SoundInstance3d = function() {\n      };\n    }\n  }\n  return {SoundInstance3d:SoundInstance3d};\n}());\npc.extend(pc, function() {\n  var Channel;\n  if (pc.AudioManager.hasAudioContext()) {\n    Channel = function(manager, sound, options) {\n      options = options || {};\n      this.volume = options.volume === undefined ? 1 : options.volume;\n      this.loop = options.loop === undefined ? false : options.loop;\n      this.pitch = options.pitch === undefined ? 1 : options.pitch;\n      this.sound = sound;\n      this.paused = false;\n      this.suspended = false;\n      this.startTime = 0;\n      this.startOffset = 0;\n      this.manager = manager;\n      this.source = null;\n      var context = manager.context;\n      this.gain = context.createGain();\n    };\n    Channel.prototype = {play:function() {\n      if (this.source) {\n        throw new Error(\"Call stop() before calling play()\");\n      }\n      this._createSource();\n      if (!this.source) {\n        return;\n      }\n      this.startTime = this.manager.context.currentTime;\n      this.source.start(0, this.startOffset % this.source.buffer.duration);\n      this.setVolume(this.volume);\n      this.setLoop(this.loop);\n      this.setPitch(this.pitch);\n      this.manager.on(\"volumechange\", this.onManagerVolumeChange, this);\n      this.manager.on(\"suspend\", this.onManagerSuspend, this);\n      this.manager.on(\"resume\", this.onManagerResume, this);\n      if (this.manager.suspended) {\n        this.onManagerSuspend();\n      }\n    }, pause:function() {\n      if (this.source) {\n        this.paused = true;\n        this.startOffset += this.manager.context.currentTime - this.startTime;\n        this.source.stop(0);\n        this.source = null;\n      }\n    }, unpause:function() {\n      if (this.source || !this.paused) {\n        console.warn(\"Call pause() before unpausing.\");\n        return;\n      }\n      this._createSource();\n      if (!this.source) {\n        return;\n      }\n      this.startTime = this.manager.context.currentTime;\n      this.source.start(0, this.startOffset % this.source.buffer.duration);\n      this.setVolume(this.volume);\n      this.setLoop(this.loop);\n      this.setPitch(this.pitch);\n      this.paused = false;\n    }, stop:function() {\n      if (this.source) {\n        this.source.stop(0);\n        this.source = null;\n      }\n      this.manager.off(\"volumechange\", this.onManagerVolumeChange, this);\n      this.manager.off(\"suspend\", this.onManagerSuspend, this);\n      this.manager.off(\"resume\", this.onManagerResume, this);\n    }, setLoop:function(loop) {\n      this.loop = loop;\n      if (this.source) {\n        this.source.loop = loop;\n      }\n    }, setVolume:function(volume) {\n      volume = pc.math.clamp(volume, 0, 1);\n      this.volume = volume;\n      if (this.gain) {\n        this.gain.gain.value = volume * this.manager.volume;\n      }\n    }, setPitch:function(pitch) {\n      this.pitch = pitch;\n      if (this.source) {\n        this.source.playbackRate.value = pitch;\n      }\n    }, isPlaying:function() {\n      return !this.paused && this.source.playbackState === this.source.PLAYING_STATE;\n    }, getDuration:function() {\n      if (this.source) {\n        return this.source.buffer.duration;\n      } else {\n        return 0;\n      }\n    }, _createSource:function() {\n      var context = this.manager.context;\n      if (this.sound.buffer) {\n        this.source = context.createBufferSource();\n        this.source.buffer = this.sound.buffer;\n        this.source.connect(this.gain);\n        this.gain.connect(context.destination);\n        if (!this.loop) {\n          this.source.onended = this.pause.bind(this);\n        }\n      }\n    }};\n  } else {\n    if (pc.AudioManager.hasAudio()) {\n      Channel = function(manager, sound, options) {\n        this.volume = options.volume || 1;\n        this.loop = options.loop || false;\n        this.sound = sound;\n        this.pitch = options.pitch !== undefined ? options.pitch : 1;\n        this.paused = false;\n        this.suspended = false;\n        this.manager = manager;\n        if (sound.audio) {\n          this.source = sound.audio.cloneNode(false);\n          this.source.pause();\n        }\n      };\n      Channel.prototype = {play:function() {\n        if (this.source) {\n          this.paused = false;\n          this.setVolume(this.volume);\n          this.setLoop(this.loop);\n          this.setPitch(this.pitch);\n          this.source.play();\n        }\n        this.manager.on(\"volumechange\", this.onManagerVolumeChange, this);\n        this.manager.on(\"suspend\", this.onManagerSuspend, this);\n        this.manager.on(\"resume\", this.onManagerResume, this);\n        if (this.manager.suspended) {\n          this.onManagerSuspend();\n        }\n      }, pause:function() {\n        if (this.source) {\n          this.paused = true;\n          this.source.pause();\n        }\n      }, unpause:function() {\n        if (this.source) {\n          this.paused = false;\n          this.source.play();\n        }\n      }, stop:function() {\n        if (this.source) {\n          this.source.pause();\n        }\n        this.manager.off(\"volumechange\", this.onManagerVolumeChange, this);\n        this.manager.off(\"suspend\", this.onManagerSuspend, this);\n        this.manager.off(\"resume\", this.onManagerResume, this);\n      }, setVolume:function(volume) {\n        volume = pc.math.clamp(volume, 0, 1);\n        this.volume = volume;\n        if (this.source) {\n          this.source.volume = volume * this.manager.volume;\n        }\n      }, setLoop:function(loop) {\n        this.loop = loop;\n        if (this.source) {\n          this.source.loop = loop;\n        }\n      }, setPitch:function(pitch) {\n        this.pitch = pitch;\n        if (this.source) {\n          this.source.playbackRate = pitch;\n        }\n      }, getDuration:function() {\n        if (this.source) {\n          var d = this.source.duration;\n          if (d === d) {\n            return d;\n          }\n        }\n        return 0;\n      }, isPlaying:function() {\n        return !this.source.paused;\n      }};\n    } else {\n      Channel = function() {\n      };\n    }\n  }\n  pc.extend(Channel.prototype, {getVolume:function() {\n    return this.volume;\n  }, getLoop:function() {\n    return this.loop;\n  }, getPitch:function() {\n    return this.pitch;\n  }, onManagerVolumeChange:function() {\n    this.setVolume(this.getVolume());\n  }, onManagerSuspend:function() {\n    if (this.isPlaying() && !this.suspended) {\n      this.suspended = true;\n      this.pause();\n    }\n  }, onManagerResume:function() {\n    if (this.suspended) {\n      this.suspended = false;\n      this.unpause();\n    }\n  }});\n  return {Channel:Channel};\n}());\npc.extend(pc, function() {\n  var MAX_DISTANCE = 10000;\n  var Channel3d;\n  if (pc.AudioManager.hasAudioContext()) {\n    Channel3d = function(manager, sound, options) {\n      this.position = new pc.Vec3;\n      this.velocity = new pc.Vec3;\n      var context = manager.context;\n      this.panner = context.createPanner();\n    };\n    Channel3d = pc.inherits(Channel3d, pc.Channel);\n    Channel3d.prototype = pc.extend(Channel3d.prototype, {getPosition:function() {\n      return this.position;\n    }, setPosition:function(position) {\n      this.position.copy(position);\n      this.panner.setPosition(position.x, position.y, position.z);\n    }, getVelocity:function() {\n      return this.velocity;\n    }, setVelocity:function(velocity) {\n      this.velocity.copy(velocity);\n      this.panner.setVelocity(velocity.x, velocity.y, velocity.z);\n    }, getMaxDistance:function() {\n      return this.panner.maxDistance;\n    }, setMaxDistance:function(max) {\n      this.panner.maxDistance = max;\n    }, getMinDistance:function() {\n      return this.panner.refDistance;\n    }, setMinDistance:function(min) {\n      this.panner.refDistance = min;\n    }, getRollOffFactor:function() {\n      return this.panner.rolloffFactor;\n    }, setRollOffFactor:function(factor) {\n      this.panner.rolloffFactor = factor;\n    }, getDistanceModel:function() {\n      return this.pannel.distanceModel;\n    }, setDistanceModel:function(distanceModel) {\n      this.panner.distanceModel = distanceModel;\n    }, _createSource:function() {\n      var context = this.manager.context;\n      this.source = context.createBufferSource();\n      this.source.buffer = this.sound.buffer;\n      this.source.connect(this.panner);\n      this.panner.connect(this.gain);\n      this.gain.connect(context.destination);\n      if (!this.loop) {\n        this.source.onended = this.pause.bind(this);\n      }\n    }});\n  } else {\n    if (pc.AudioManager.hasAudio()) {\n      var offset = new pc.Vec3;\n      var fallOff = function(posOne, posTwo, refDistance, maxDistance, rolloffFactor, distanceModel) {\n        offset = offset.sub2(posOne, posTwo);\n        var distance = offset.length();\n        if (distance < refDistance) {\n          return 1;\n        } else {\n          if (distance > maxDistance) {\n            return 0;\n          } else {\n            var result = 0;\n            if (distanceModel === pc.DISTANCE_LINEAR) {\n              result = 1 - rolloffFactor * (distance - refDistance) / (maxDistance - refDistance);\n            } else {\n              if (distanceModel === pc.DISTANCE_INVERSE) {\n                result = refDistance / (refDistance + rolloffFactor * (distance - refDistance));\n              } else {\n                if (distanceModel === pc.DISTANCE_EXPONENTIAL) {\n                  result = Math.pow(distance / refDistance, -rolloffFactor);\n                }\n              }\n            }\n            return pc.math.clamp(result, 0, 1);\n          }\n        }\n      };\n      Channel3d = function(manager, sound) {\n        this.position = new pc.Vec3;\n        this.velocity = new pc.Vec3;\n        this.maxDistance = MAX_DISTANCE;\n        this.minDistance = 1;\n        this.rollOffFactor = 1;\n        this.distanceModel = pc.DISTANCE_INVERSE;\n      };\n      Channel3d = pc.inherits(Channel3d, pc.Channel);\n      Channel3d.prototype = pc.extend(Channel3d.prototype, {getPosition:function() {\n        return this.position;\n      }, setPosition:function(position) {\n        this.position.copy(position);\n        if (this.source) {\n          var listener = this.manager.listener;\n          var lpos = listener.getPosition();\n          var factor = fallOff(lpos, this.position, this.minDistance, this.maxDistance, this.rollOffFactor, this.distanceModel);\n          var v = this.getVolume();\n          this.source.volume = v * factor;\n        }\n      }, getVelocity:function() {\n        return this.velocity;\n      }, setVelocity:function(velocity) {\n        this.velocity.copy(velocity);\n      }, getMaxDistance:function() {\n        return this.maxDistance;\n      }, setMaxDistance:function(max) {\n        this.maxDistance = max;\n      }, getMinDistance:function() {\n        return this.minDistance;\n      }, setMinDistance:function(min) {\n        this.minDistance = min;\n      }, getRollOffFactor:function() {\n        return this.rollOffFactor;\n      }, setRollOffFactor:function(factor) {\n        this.rollOffFactor = factor;\n      }, getDistanceModel:function() {\n        return this.distanceModel;\n      }, setDistanceModel:function(distanceModel) {\n        this.distanceModel = distanceModel;\n      }});\n    } else {\n      Channel3d = function() {\n      };\n    }\n  }\n  return {Channel3d:Channel3d};\n}());\n(function() {\n  var enums = {ACTION_MOUSE:\"mouse\", ACTION_KEYBOARD:\"keyboard\", ACTION_GAMEPAD:\"gamepad\", AXIS_MOUSE_X:\"mousex\", AXIS_MOUSE_Y:\"mousey\", AXIS_PAD_L_X:\"padlx\", AXIS_PAD_L_Y:\"padly\", AXIS_PAD_R_X:\"padrx\", AXIS_PAD_R_Y:\"padry\", AXIS_KEY:\"key\", EVENT_KEYDOWN:\"keydown\", EVENT_KEYUP:\"keyup\", EVENT_MOUSEDOWN:\"mousedown\", EVENT_MOUSEMOVE:\"mousemove\", EVENT_MOUSEUP:\"mouseup\", EVENT_MOUSEWHEEL:\"mousewheel\", EVENT_TOUCHSTART:\"touchstart\", EVENT_TOUCHEND:\"touchend\", EVENT_TOUCHMOVE:\"touchmove\", EVENT_TOUCHCANCEL:\"touchcancel\", \n  KEY_BACKSPACE:8, KEY_TAB:9, KEY_RETURN:13, KEY_ENTER:13, KEY_SHIFT:16, KEY_CONTROL:17, KEY_ALT:18, KEY_PAUSE:19, KEY_CAPS_LOCK:20, KEY_ESCAPE:27, KEY_SPACE:32, KEY_PAGE_UP:33, KEY_PAGE_DOWN:34, KEY_END:35, KEY_HOME:36, KEY_LEFT:37, KEY_UP:38, KEY_RIGHT:39, KEY_DOWN:40, KEY_PRINT_SCREEN:44, KEY_INSERT:45, KEY_DELETE:46, KEY_0:48, KEY_1:49, KEY_2:50, KEY_3:51, KEY_4:52, KEY_5:53, KEY_6:54, KEY_7:55, KEY_8:56, KEY_9:57, KEY_SEMICOLON:59, KEY_EQUAL:61, KEY_A:65, KEY_B:66, KEY_C:67, KEY_D:68, KEY_E:69, \n  KEY_F:70, KEY_G:71, KEY_H:72, KEY_I:73, KEY_J:74, KEY_K:75, KEY_L:76, KEY_M:77, KEY_N:78, KEY_O:79, KEY_P:80, KEY_Q:81, KEY_R:82, KEY_S:83, KEY_T:84, KEY_U:85, KEY_V:86, KEY_W:87, KEY_X:88, KEY_Y:89, KEY_Z:90, KEY_WINDOWS:91, KEY_CONTEXT_MENU:93, KEY_NUMPAD_0:96, KEY_NUMPAD_1:97, KEY_NUMPAD_2:98, KEY_NUMPAD_3:99, KEY_NUMPAD_4:100, KEY_NUMPAD_5:101, KEY_NUMPAD_6:102, KEY_NUMPAD_7:103, KEY_NUMPAD_8:104, KEY_NUMPAD_9:105, KEY_MULTIPLY:106, KEY_ADD:107, KEY_SEPARATOR:108, KEY_SUBTRACT:109, KEY_DECIMAL:110, \n  KEY_DIVIDE:111, KEY_F1:112, KEY_F2:113, KEY_F3:114, KEY_F4:115, KEY_F5:116, KEY_F6:117, KEY_F7:118, KEY_F8:119, KEY_F9:120, KEY_F10:121, KEY_F11:122, KEY_F12:123, KEY_COMMA:188, KEY_PERIOD:190, KEY_SLASH:191, KEY_OPEN_BRACKET:219, KEY_BACK_SLASH:220, KEY_CLOSE_BRACKET:221, KEY_META:224, MOUSEBUTTON_NONE:-1, MOUSEBUTTON_LEFT:0, MOUSEBUTTON_MIDDLE:1, MOUSEBUTTON_RIGHT:2, PAD_1:0, PAD_2:1, PAD_3:2, PAD_4:3, PAD_FACE_1:0, PAD_FACE_2:1, PAD_FACE_3:2, PAD_FACE_4:3, PAD_L_SHOULDER_1:4, PAD_R_SHOULDER_1:5, \n  PAD_L_SHOULDER_2:6, PAD_R_SHOULDER_2:7, PAD_SELECT:8, PAD_START:9, PAD_L_STICK_BUTTON:10, PAD_R_STICK_BUTTON:11, PAD_UP:12, PAD_DOWN:13, PAD_LEFT:14, PAD_RIGHT:15, PAD_VENDOR:16, PAD_L_STICK_X:0, PAD_L_STICK_Y:1, PAD_R_STICK_X:2, PAD_R_STICK_Y:3};\n  pc.extend(pc, enums);\n  pc.input = {};\n  pc.extend(pc.input, enums);\n})();\npc.extend(pc, function() {\n  var MouseEvent = function(mouse, event) {\n    var coords = {x:0, y:0};\n    if (event) {\n      if (event instanceof MouseEvent) {\n        throw Error(\"Expected MouseEvent\");\n      }\n      coords = mouse._getTargetCoords(event);\n    } else {\n      event = {};\n    }\n    if (coords) {\n      this.x = coords.x;\n      this.y = coords.y;\n    } else {\n      if (pc.Mouse.isPointerLocked()) {\n        this.x = 0;\n        this.y = 0;\n      } else {\n        return;\n      }\n    }\n    if (event.detail) {\n      this.wheel = -1 * event.detail;\n    } else {\n      if (event.wheelDelta) {\n        this.wheel = event.wheelDelta / 120;\n      } else {\n        this.wheel = 0;\n      }\n    }\n    if (pc.Mouse.isPointerLocked()) {\n      this.dx = event.movementX || event.webkitMovementX || event.mozMovementX || 0;\n      this.dy = event.movementY || event.webkitMovementY || event.mozMovementY || 0;\n    } else {\n      this.dx = this.x - mouse._lastX;\n      this.dy = this.y - mouse._lastY;\n    }\n    if (event.type === \"mousedown\" || event.type === \"mouseup\") {\n      this.button = event.button;\n    } else {\n      this.button = pc.MOUSEBUTTON_NONE;\n    }\n    this.buttons = mouse._buttons.slice(0);\n    this.element = event.target;\n    this.ctrlKey = event.ctrlKey || false;\n    this.altKey = event.altKey || false;\n    this.shiftKey = event.shiftKey || false;\n    this.metaKey = event.metaKey || false;\n    this.event = event;\n  };\n  var Mouse = function(element) {\n    this._lastX = 0;\n    this._lastY = 0;\n    this._buttons = [false, false, false];\n    this._lastbuttons = [false, false, false];\n    this._upHandler = this._handleUp.bind(this);\n    this._downHandler = this._handleDown.bind(this);\n    this._moveHandler = this._handleMove.bind(this);\n    this._wheelHandler = this._handleWheel.bind(this);\n    this._contextMenuHandler = function(event) {\n      event.preventDefault();\n    };\n    this._target = null;\n    this._attached = false;\n    this.attach(element);\n    pc.events.attach(this);\n  };\n  Mouse.isPointerLocked = function() {\n    return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement);\n  };\n  Mouse.prototype = {attach:function(element) {\n    this._target = element;\n    if (this._attached) {\n      return;\n    }\n    this._attached = true;\n    window.addEventListener(\"mouseup\", this._upHandler, false);\n    window.addEventListener(\"mousedown\", this._downHandler, false);\n    window.addEventListener(\"mousemove\", this._moveHandler, false);\n    window.addEventListener(\"mousewheel\", this._wheelHandler, false);\n    window.addEventListener(\"DOMMouseScroll\", this._wheelHandler, false);\n  }, detach:function() {\n    if (!this._attached) {\n      return;\n    }\n    this._attached = false;\n    window.removeEventListener(\"mouseup\", this._upHandler);\n    window.removeEventListener(\"mousedown\", this._downHandler);\n    window.removeEventListener(\"mousemove\", this._moveHandler);\n    window.removeEventListener(\"mousewheel\", this._wheelHandler);\n    window.removeEventListener(\"DOMMouseScroll\", this._wheelHandler);\n  }, disableContextMenu:function() {\n    if (!this._target) {\n      return;\n    }\n    this._target.addEventListener(\"contextmenu\", this._contextMenuHandler);\n  }, enableContextMenu:function() {\n    if (!this._target) {\n      return;\n    }\n    this._target.removeEventListener(\"contextmenu\", this._contextMenuHandler);\n  }, enablePointerLock:function(success, error) {\n    if (!document.body.requestPointerLock) {\n      if (error) {\n        error();\n      }\n      return;\n    }\n    var s = function() {\n      success();\n      document.removeEventListener(\"pointerlockchange\", s);\n    };\n    var e = function() {\n      error();\n      document.removeEventListener(\"pointerlockerror\", e);\n    };\n    if (success) {\n      document.addEventListener(\"pointerlockchange\", s, false);\n    }\n    if (error) {\n      document.addEventListener(\"pointerlockerror\", e, false);\n    }\n    document.body.requestPointerLock();\n  }, disablePointerLock:function(success) {\n    if (!document.exitPointerLock) {\n      return;\n    }\n    var s = function() {\n      success();\n      document.removeEventListener(\"pointerlockchange\", s);\n    };\n    if (success) {\n      document.addEventListener(\"pointerlockchange\", s, false);\n    }\n    document.exitPointerLock();\n  }, update:function() {\n    this._lastbuttons[0] = this._buttons[0];\n    this._lastbuttons[1] = this._buttons[1];\n    this._lastbuttons[2] = this._buttons[2];\n  }, isPressed:function(button) {\n    return this._buttons[button];\n  }, wasPressed:function(button) {\n    return this._buttons[button] && !this._lastbuttons[button];\n  }, wasReleased:function(button) {\n    return !this._buttons[button] && this._lastbuttons[button];\n  }, _handleUp:function(event) {\n    this._buttons[event.button] = false;\n    var e = new MouseEvent(this, event);\n    if (!e.event) {\n      return;\n    }\n    this.fire(pc.EVENT_MOUSEUP, e);\n  }, _handleDown:function(event) {\n    this._buttons[event.button] = true;\n    var e = new MouseEvent(this, event);\n    if (!e.event) {\n      return;\n    }\n    this.fire(pc.EVENT_MOUSEDOWN, e);\n  }, _handleMove:function(event) {\n    var e = new MouseEvent(this, event);\n    if (!e.event) {\n      return;\n    }\n    this.fire(pc.EVENT_MOUSEMOVE, e);\n    this._lastX = e.x;\n    this._lastY = e.y;\n  }, _handleWheel:function(event) {\n    var e = new MouseEvent(this, event);\n    if (!e.event) {\n      return;\n    }\n    this.fire(pc.EVENT_MOUSEWHEEL, e);\n  }, _getTargetCoords:function(event) {\n    var rect = this._target.getBoundingClientRect();\n    var left = Math.floor(rect.left);\n    var top = Math.floor(rect.top);\n    if (event.clientX < left || event.clientX >= left + this._target.clientWidth || event.clientY < top || event.clientY >= top + this._target.clientHeight) {\n      return null;\n    }\n    return {x:event.clientX - left, y:event.clientY - top};\n  }};\n  (function() {\n    if (typeof navigator === \"undefined\" || typeof document === \"undefined\") {\n      return;\n    }\n    navigator.pointer = navigator.pointer || navigator.webkitPointer || navigator.mozPointer;\n    var pointerlockchange = function() {\n      var e = document.createEvent(\"CustomEvent\");\n      e.initCustomEvent(\"pointerlockchange\", true, false, null);\n      document.dispatchEvent(e);\n    };\n    var pointerlockerror = function() {\n      var e = document.createEvent(\"CustomEvent\");\n      e.initCustomEvent(\"pointerlockerror\", true, false, null);\n      document.dispatchEvent(e);\n    };\n    document.addEventListener(\"webkitpointerlockchange\", pointerlockchange, false);\n    document.addEventListener(\"webkitpointerlocklost\", pointerlockchange, false);\n    document.addEventListener(\"mozpointerlockchange\", pointerlockchange, false);\n    document.addEventListener(\"mozpointerlocklost\", pointerlockchange, false);\n    document.addEventListener(\"webkitpointerlockerror\", pointerlockerror, false);\n    document.addEventListener(\"mozpointerlockerror\", pointerlockerror, false);\n    if (Element.prototype.mozRequestPointerLock) {\n      Element.prototype.requestPointerLock = function() {\n        this.mozRequestPointerLock();\n      };\n    } else {\n      Element.prototype.requestPointerLock = Element.prototype.requestPointerLock || Element.prototype.webkitRequestPointerLock || Element.prototype.mozRequestPointerLock;\n    }\n    if (!Element.prototype.requestPointerLock && navigator.pointer) {\n      Element.prototype.requestPointerLock = function() {\n        var el = this;\n        document.pointerLockElement = el;\n        navigator.pointer.lock(el, pointerlockchange, pointerlockerror);\n      };\n    }\n    document.exitPointerLock = document.exitPointerLock || document.webkitExitPointerLock || document.mozExitPointerLock;\n    if (!document.exitPointerLock) {\n      document.exitPointerLock = function() {\n        if (navigator.pointer) {\n          document.pointerLockElement = null;\n          navigator.pointer.unlock();\n        }\n      };\n    }\n  })();\n  return {Mouse:Mouse, MouseEvent:MouseEvent};\n}());\npc.extend(pc, function() {\n  var KeyboardEvent = function(keyboard, event) {\n    if (event) {\n      this.key = event.keyCode;\n      this.element = event.target;\n      this.event = event;\n    } else {\n      this.key = null;\n      this.element = null;\n      this.event = null;\n    }\n  };\n  var _keyboardEvent = new KeyboardEvent;\n  function makeKeyboardEvent(event) {\n    _keyboardEvent.key = event.keyCode;\n    _keyboardEvent.element = event.target;\n    _keyboardEvent.event = event;\n    return _keyboardEvent;\n  }\n  function toKeyCode(s) {\n    if (typeof s == \"string\") {\n      return s.toUpperCase().charCodeAt(0);\n    } else {\n      return s;\n    }\n  }\n  var _keyCodeToKeyIdentifier = {9:\"Tab\", 13:\"Enter\", 16:\"Shift\", 17:\"Control\", 18:\"Alt\", 27:\"Escape\", 37:\"Left\", 38:\"Up\", 39:\"Right\", 40:\"Down\", 46:\"Delete\", 91:\"Win\"};\n  var Keyboard = function(element, options) {\n    options = options || {};\n    this._element = null;\n    this._keyDownHandler = this._handleKeyDown.bind(this);\n    this._keyUpHandler = this._handleKeyUp.bind(this);\n    this._keyPressHandler = this._handleKeyPress.bind(this);\n    pc.events.attach(this);\n    this._keymap = {};\n    this._lastmap = {};\n    if (element) {\n      this.attach(element);\n    }\n    this.preventDefault = options.preventDefault || false;\n    this.stopPropagation = options.stopPropagation || false;\n  };\n  Keyboard.prototype.attach = function(element) {\n    if (this._element) {\n      this.detach();\n    }\n    this._element = element;\n    this._element.addEventListener(\"keydown\", this._keyDownHandler, false);\n    this._element.addEventListener(\"keypress\", this._keyPressHandler, false);\n    this._element.addEventListener(\"keyup\", this._keyUpHandler, false);\n  };\n  Keyboard.prototype.detach = function() {\n    this._element.removeEventListener(\"keydown\", this._keyDownHandler);\n    this._element.removeEventListener(\"keypress\", this._keyPressHandler);\n    this._element.removeEventListener(\"keyup\", this._keyUpHandler);\n    this._element = null;\n  };\n  Keyboard.prototype.toKeyIdentifier = function(keyCode) {\n    keyCode = toKeyCode(keyCode);\n    var count;\n    var hex;\n    var length;\n    var id = _keyCodeToKeyIdentifier[keyCode.toString()];\n    if (id) {\n      return id;\n    }\n    hex = keyCode.toString(16).toUpperCase();\n    length = hex.length;\n    for (count = 0; count < 4 - length; count++) {\n      hex = \"0\" + hex;\n    }\n    return \"U+\" + hex;\n  };\n  Keyboard.prototype._handleKeyDown = function(event) {\n    var code = event.keyCode || event.charCode;\n    if (code === undefined) {\n      return;\n    }\n    var id = this.toKeyIdentifier(code);\n    this._keymap[id] = true;\n    this.fire(\"keydown\", makeKeyboardEvent(event));\n    if (this.preventDefault) {\n      event.preventDefault();\n    }\n    if (this.stopPropagation) {\n      event.stopPropagation();\n    }\n  };\n  Keyboard.prototype._handleKeyUp = function(event) {\n    var code = event.keyCode || event.charCode;\n    if (code === undefined) {\n      return;\n    }\n    var id = this.toKeyIdentifier(code);\n    delete this._keymap[id];\n    this.fire(\"keyup\", makeKeyboardEvent(event));\n    if (this.preventDefault) {\n      event.preventDefault();\n    }\n    if (this.stopPropagation) {\n      event.stopPropagation();\n    }\n  };\n  Keyboard.prototype._handleKeyPress = function(event) {\n    this.fire(\"keypress\", makeKeyboardEvent(event));\n    if (this.preventDefault) {\n      event.preventDefault();\n    }\n    if (this.stopPropagation) {\n      event.stopPropagation();\n    }\n  };\n  Keyboard.prototype.update = function() {\n    var prop;\n    for (prop in this._lastmap) {\n      delete this._lastmap[prop];\n    }\n    for (prop in this._keymap) {\n      if (this._keymap.hasOwnProperty(prop)) {\n        this._lastmap[prop] = this._keymap[prop];\n      }\n    }\n  };\n  Keyboard.prototype.isPressed = function(key) {\n    var keyCode = toKeyCode(key);\n    var id = this.toKeyIdentifier(keyCode);\n    return !!this._keymap[id];\n  };\n  Keyboard.prototype.wasPressed = function(key) {\n    var keyCode = toKeyCode(key);\n    var id = this.toKeyIdentifier(keyCode);\n    return !!this._keymap[id] && !!!this._lastmap[id];\n  };\n  Keyboard.prototype.wasReleased = function(key) {\n    var keyCode = toKeyCode(key);\n    var id = this.toKeyIdentifier(keyCode);\n    return !!!this._keymap[id] && !!this._lastmap[id];\n  };\n  return {Keyboard:Keyboard, KeyboardEvent:KeyboardEvent};\n}());\npc.extend(pc, function() {\n  var GamePads = function() {\n    this.gamepadsSupported = !!navigator.getGamepads || !!navigator.webkitGetGamepads;\n    this.current = [];\n    this.previous = [];\n    this.deadZone = 0.25;\n  };\n  var MAPS = {DEFAULT:{buttons:[\"PAD_FACE_1\", \"PAD_FACE_2\", \"PAD_FACE_3\", \"PAD_FACE_4\", \"PAD_L_SHOULDER_1\", \"PAD_R_SHOULDER_1\", \"PAD_L_SHOULDER_2\", \"PAD_R_SHOULDER_2\", \"PAD_SELECT\", \"PAD_START\", \"PAD_L_STICK_BUTTON\", \"PAD_R_STICK_BUTTON\", \"PAD_UP\", \"PAD_DOWN\", \"PAD_LEFT\", \"PAD_RIGHT\", \"PAD_VENDOR\"], axes:[\"PAD_L_STICK_X\", \"PAD_L_STICK_Y\", \"PAD_R_STICK_X\", \"PAD_R_STICK_Y\"]}, PS3:{buttons:[\"PAD_FACE_1\", \"PAD_FACE_2\", \"PAD_FACE_4\", \"PAD_FACE_3\", \"PAD_L_SHOULDER_1\", \"PAD_R_SHOULDER_1\", \"PAD_L_SHOULDER_2\", \n  \"PAD_R_SHOULDER_2\", \"PAD_SELECT\", \"PAD_START\", \"PAD_L_STICK_BUTTON\", \"PAD_R_STICK_BUTTON\", \"PAD_UP\", \"PAD_DOWN\", \"PAD_LEFT\", \"PAD_RIGHT\", \"PAD_VENDOR\"], axes:[\"PAD_L_STICK_X\", \"PAD_L_STICK_Y\", \"PAD_R_STICK_X\", \"PAD_R_STICK_Y\"]}};\n  var PRODUCT_CODES = {\"Product: 0268\":\"PS3\"};\n  GamePads.prototype = {update:function() {\n    var i, j, l;\n    var buttons, buttonsLen;\n    for (i = 0, l = this.current.length; i < l; i++) {\n      buttons = this.current[i].pad.buttons;\n      buttonsLen = buttons.length;\n      for (j = 0; j < buttonsLen; j++) {\n        if (this.previous[i] === undefined) {\n          this.previous[i] = [];\n        }\n        this.previous[i][j] = buttons[j].pressed;\n      }\n    }\n    var pads = this.poll();\n    for (i = 0, l = pads.length; i < l; i++) {\n      this.current[i] = pads[i];\n    }\n  }, poll:function() {\n    var pads = [];\n    if (this.gamepadsSupported) {\n      var padDevices = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();\n      var i, len = padDevices.length;\n      for (i = 0; i < len; i++) {\n        if (padDevices[i]) {\n          pads.push({map:this.getMap(padDevices[i]), pad:padDevices[i]});\n        }\n      }\n    }\n    return pads;\n  }, getMap:function(pad) {\n    for (var code in PRODUCT_CODES) {\n      if (pad.id.indexOf(code) >= 0) {\n        return MAPS[PRODUCT_CODES[code]];\n      }\n    }\n    return MAPS.DEFAULT;\n  }, isPressed:function(index, button) {\n    if (!this.current[index]) {\n      return false;\n    }\n    var key = this.current[index].map.buttons[button];\n    return this.current[index].pad.buttons[pc[key]].pressed;\n  }, wasPressed:function(index, button) {\n    if (!this.current[index]) {\n      return false;\n    }\n    var key = this.current[index].map.buttons[button];\n    var i = pc[key];\n    return this.current[index].pad.buttons[i].pressed && !this.previous[index][i];\n  }, getAxis:function(index, axes) {\n    if (!this.current[index]) {\n      return false;\n    }\n    var key = this.current[index].map.axes[axes];\n    var value = this.current[index].pad.axes[pc[key]];\n    if (Math.abs(value) < this.deadZone) {\n      value = 0;\n    }\n    return value;\n  }};\n  return {GamePads:GamePads};\n}());\npc.extend(pc, function() {\n  var TouchEvent = function(device, event) {\n    this.element = event.target;\n    this.event = event;\n    this.touches = [];\n    this.changedTouches = [];\n    if (event) {\n      var i, l = event.touches.length;\n      for (i = 0; i < l; i++) {\n        this.touches.push(new Touch(event.touches[i]));\n      }\n      l = event.changedTouches.length;\n      for (i = 0; i < l; i++) {\n        this.changedTouches.push(new Touch(event.changedTouches[i]));\n      }\n    }\n  };\n  TouchEvent.prototype = {getTouchById:function(id, list) {\n    var i, l = list.length;\n    for (i = 0; i < l; i++) {\n      if (list[i].id === id) {\n        return list[i];\n      }\n    }\n    return null;\n  }};\n  var Touch = function(touch) {\n    var coords = pc.getTouchTargetCoords(touch);\n    this.id = touch.identifier;\n    this.x = coords.x;\n    this.y = coords.y;\n    this.target = touch.target;\n    this.touch = touch;\n  };\n  var TouchDevice = function(element) {\n    this._startHandler = this._handleTouchStart.bind(this);\n    this._endHandler = this._handleTouchEnd.bind(this);\n    this._moveHandler = this._handleTouchMove.bind(this);\n    this._cancelHandler = this._handleTouchCancel.bind(this);\n    this.attach(element);\n    pc.events.attach(this);\n  };\n  TouchDevice.prototype = {attach:function(element) {\n    if (this._element) {\n      this.detach();\n    }\n    this._element = element;\n    this._element.addEventListener(\"touchstart\", this._startHandler, false);\n    this._element.addEventListener(\"touchend\", this._endHandler, false);\n    this._element.addEventListener(\"touchmove\", this._moveHandler, false);\n    this._element.addEventListener(\"touchcancel\", this._cancelHandler, false);\n  }, detach:function() {\n    if (this._element) {\n      this._element.removeEventListener(\"touchstart\", this._startHandler, false);\n      this._element.removeEventListener(\"touchend\", this._endHandler, false);\n      this._element.removeEventListener(\"touchmove\", this._moveHandler, false);\n      this._element.removeEventListener(\"touchcancel\", this._cancelHandler, false);\n    }\n    this._element = null;\n  }, _handleTouchStart:function(e) {\n    this.fire(\"touchstart\", new TouchEvent(this, e));\n  }, _handleTouchEnd:function(e) {\n    this.fire(\"touchend\", new TouchEvent(this, e));\n  }, _handleTouchMove:function(e) {\n    e.preventDefault();\n    this.fire(\"touchmove\", new TouchEvent(this, e));\n  }, _handleTouchCancel:function(e) {\n    this.fire(\"touchcancel\", new TouchEvent(this, e));\n  }};\n  return {getTouchTargetCoords:function(touch) {\n    var totalOffsetX = 0;\n    var totalOffsetY = 0;\n    var target = touch.target;\n    while (!(target instanceof HTMLElement)) {\n      target = target.parentNode;\n    }\n    var currentElement = target;\n    do {\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;\n      currentElement = currentElement.offsetParent;\n    } while (currentElement);\n    return {x:touch.pageX - totalOffsetX, y:touch.pageY - totalOffsetY};\n  }, TouchDevice:TouchDevice, TouchEvent:TouchEvent};\n}());\npc.extend(pc, function() {\n  var Controller = function(element, options) {\n    options = options || {};\n    this._keyboard = options.keyboard || null;\n    this._mouse = options.mouse || null;\n    this._gamepads = options.gamepads || null;\n    this._element = null;\n    this._actions = {};\n    this._axes = {};\n    this._axesValues = {};\n    if (element) {\n      this.attach(element);\n    }\n  };\n  Controller.prototype.attach = function(element) {\n    this._element = element;\n    if (this._keyboard) {\n      this._keyboard.attach(element);\n    }\n    if (this._mouse) {\n      this._mouse.attach(element);\n    }\n  };\n  Controller.prototype.detach = function() {\n    if (this._keyboard) {\n      this._keyboard.detach();\n    }\n    if (this._mouse) {\n      this._mouse.detach();\n    }\n    this._element = null;\n  };\n  Controller.prototype.disableContextMenu = function() {\n    if (!this._mouse) {\n      this._enableMouse();\n    }\n    this._mouse.disableContextMenu();\n  };\n  Controller.prototype.enableContextMenu = function() {\n    if (!this._mouse) {\n      this._enableMouse();\n    }\n    this._mouse.enableContextMenu();\n  };\n  Controller.prototype.update = function(dt) {\n    if (this._keyboard) {\n      this._keyboard.update(dt);\n    }\n    if (this._mouse) {\n      this._mouse.update(dt);\n    }\n    if (this._gamepads) {\n      this._gamepads.update(dt);\n    }\n    this._axesValues = {};\n    for (var key in this._axes) {\n      this._axesValues[key] = [];\n    }\n  };\n  Controller.prototype.registerKeys = function(action, keys) {\n    if (!this._keyboard) {\n      this._enableKeyboard();\n    }\n    if (this._actions[action]) {\n      throw new Error(pc.string.format(\"Action: {0} already registered\", action));\n    }\n    if (keys === undefined) {\n      throw new Error(\"Invalid button\");\n    }\n    if (!keys.length) {\n      keys = [keys];\n    }\n    if (this._actions[action]) {\n      this._actions[action].push({type:pc.ACTION_KEYBOARD, keys:keys});\n    } else {\n      this._actions[action] = [{type:pc.ACTION_KEYBOARD, keys:keys}];\n    }\n  };\n  Controller.prototype.registerMouse = function(action, button) {\n    if (!this._mouse) {\n      this._enableMouse();\n    }\n    if (button === undefined) {\n      throw new Error(\"Invalid button\");\n    }\n    if (this._actions[action]) {\n      this._actions[action].push({type:pc.ACTION_MOUSE, button:button});\n    } else {\n      this._actions[action] = [{type:pc.ACTION_MOUSE, button:-button}];\n    }\n  };\n  Controller.prototype.registerPadButton = function(action, pad, button) {\n    if (button === undefined) {\n      throw new Error(\"Invalid button\");\n    }\n    if (this._actions[action]) {\n      this._actions[action].push({type:pc.ACTION_GAMEPAD, button:button, pad:pad});\n    } else {\n      this._actions[action] = [{type:pc.ACTION_GAMEPAD, button:button, pad:pad}];\n    }\n  };\n  Controller.prototype.registerAxis = function(options) {\n    var name = options.name;\n    if (!this._axes[name]) {\n      this._axes[name] = [];\n    }\n    var i = this._axes[name].push(name);\n    options = options || {};\n    options.pad = options.pad || pc.PAD_1;\n    var bind = function(controller, source, value, key) {\n      switch(source) {\n        case \"mousex\":\n          controller._mouse.on(pc.EVENT_MOUSEMOVE, function(e) {\n            controller._axesValues[name][i] = e.dx / 10;\n          });\n          break;\n        case \"mousey\":\n          controller._mouse.on(pc.EVENT_MOUSEMOVE, function(e) {\n            controller._axesValues[name][i] = e.dy / 10;\n          });\n          break;\n        case \"key\":\n          controller._axes[name].push(function() {\n            return controller._keyboard.isPressed(key) ? value : 0;\n          });\n          break;\n        case \"padrx\":\n          controller._axes[name].push(function() {\n            return controller._gamepads.getAxis(options.pad, pc.PAD_R_STICK_X);\n          });\n          break;\n        case \"padry\":\n          controller._axes[name].push(function() {\n            return controller._gamepads.getAxis(options.pad, pc.PAD_R_STICK_Y);\n          });\n          break;\n        case \"padlx\":\n          controller._axes[name].push(function() {\n            return controller._gamepads.getAxis(options.pad, pc.PAD_L_STICK_X);\n          });\n          break;\n        case \"padly\":\n          controller._axes[name].push(function() {\n            return controller._gamepads.getAxis(options.pad, pc.PAD_L_STICK_Y);\n          });\n          break;\n        default:\n          throw new Error(\"Unknown axis\");\n      }\n    };\n    bind(this, options.positive, 1, options.positiveKey);\n    if (options.negativeKey || options.negative !== options.positive) {\n      bind(this, options.negative, -1, options.negativeKey);\n    }\n  };\n  Controller.prototype.isPressed = function(actionName) {\n    if (!this._actions[actionName]) {\n      return false;\n    }\n    var action;\n    var index = 0;\n    var length = this._actions[actionName].length;\n    for (index = 0; index < length; ++index) {\n      action = this._actions[actionName][index];\n      switch(action.type) {\n        case pc.ACTION_KEYBOARD:\n          if (this._keyboard) {\n            var i, len = action.keys.length;\n            for (i = 0; i < len; i++) {\n              if (this._keyboard.isPressed(action.keys[i])) {\n                return true;\n              }\n            }\n          }\n          break;\n        case pc.ACTION_MOUSE:\n          if (this._mouse && this._mouse.isPressed(action.button)) {\n            return true;\n          }\n          break;\n        case pc.ACTION_GAMEPAD:\n          if (this._gamepads && this._gamepads.isPressed(action.pad, action.button)) {\n            return true;\n          }\n          break;\n      }\n    }\n    return false;\n  };\n  Controller.prototype.wasPressed = function(actionName) {\n    if (!this._actions[actionName]) {\n      return false;\n    }\n    var index = 0;\n    var length = this._actions[actionName].length;\n    for (index = 0; index < length; ++index) {\n      var action = this._actions[actionName][index];\n      switch(action.type) {\n        case pc.ACTION_KEYBOARD:\n          if (this._keyboard) {\n            var i, len = action.keys.length;\n            for (i = 0; i < len; i++) {\n              if (this._keyboard.wasPressed(action.keys[i])) {\n                return true;\n              }\n            }\n          }\n          break;\n        case pc.ACTION_MOUSE:\n          if (this._mouse && this._mouse.wasPressed(action.button)) {\n            return true;\n          }\n          break;\n        case pc.ACTION_GAMEPAD:\n          if (this._gamepads && this._gamepads.wasPressed(action.pad, action.button)) {\n            return true;\n          }\n          break;\n      }\n    }\n    return false;\n  };\n  Controller.prototype.getAxis = function(name) {\n    var value = 0;\n    if (this._axes[name]) {\n      var i, len = this._axes[name].length;\n      for (i = 0; i < len; i++) {\n        if (pc.type(this._axes[name][i]) === \"function\") {\n          var v = this._axes[name][i]();\n          if (Math.abs(v) > Math.abs(value)) {\n            value = v;\n          }\n        } else {\n          if (this._axesValues[name]) {\n            if (Math.abs(this._axesValues[name][i]) > Math.abs(value)) {\n              value = this._axesValues[name][i];\n            }\n          }\n        }\n      }\n    }\n    return value;\n  };\n  Controller.prototype._enableMouse = function() {\n    this._mouse = new pc.Mouse;\n    if (!this._element) {\n      throw new Error(\"Controller must be attached to an Element\");\n    }\n    this._mouse.attach(this._element);\n  };\n  Controller.prototype._enableKeyboard = function() {\n    this._keyboard = new pc.Keyboard;\n    if (!this._element) {\n      throw new Error(\"Controller must be attached to an Element\");\n    }\n    this._keyboard.attach(this._element);\n  };\n  return {Controller:Controller};\n}());\npc.extend(pc, function() {\n  var targetX, targetY;\n  var vecA = new pc.Vec3;\n  var vecB = new pc.Vec3;\n  var _pq = new pc.Vec3;\n  var _pa = new pc.Vec3;\n  var _pb = new pc.Vec3;\n  var _pc = new pc.Vec3;\n  var _pd = new pc.Vec3;\n  var _m = new pc.Vec3;\n  var _sct = new pc.Vec3;\n  var intersectLineQuad = function(p, q, corners) {\n    _pq.sub2(q, p);\n    _pa.sub2(corners[0], p);\n    _pb.sub2(corners[1], p);\n    _pc.sub2(corners[2], p);\n    _m.cross(_pc, _pq);\n    var v = _pa.dot(_m);\n    if (v >= 0) {\n      if (-_pb.dot(_m) < 0) {\n        return false;\n      }\n      if (scalarTriple(_pq, _pb, _pa) < 0) {\n        return false;\n      }\n    } else {\n      _pd.sub2(corners[3], p);\n      if (_pd.dot(_m) < 0) {\n        return false;\n      }\n      if (scalarTriple(_pq, _pa, _pd) < 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var scalarTriple = function(p1, p2, p3) {\n    return _sct.cross(p1, p2).dot(p3);\n  };\n  var ElementInputEvent = function(event, element) {\n    this.event = event;\n    this.element = element;\n    this._stopPropagation = false;\n  };\n  ElementInputEvent.prototype = {stopPropagation:function() {\n    this._stopPropagation = true;\n    this.event.stopImmediatePropagation();\n    this.event.stopPropagation();\n  }};\n  var ElementMouseEvent = function(event, element, x, y, lastX, lastY) {\n    this.x = x;\n    this.y = y;\n    this.ctrlKey = event.ctrlKey || false;\n    this.altKey = event.altKey || false;\n    this.shiftKey = event.shiftKey || false;\n    this.metaKey = event.metaKey || false;\n    this.button = event.button;\n    if (pc.Mouse.isPointerLocked()) {\n      this.dx = event.movementX || event.webkitMovementX || event.mozMovementX || 0;\n      this.dy = event.movementY || event.webkitMovementY || event.mozMovementY || 0;\n    } else {\n      this.dx = x - lastX;\n      this.dy = y - lastY;\n    }\n    if (event.detail) {\n      this.wheel = -1 * event.detail;\n    } else {\n      if (event.wheelDelta) {\n        this.wheel = event.wheelDelta / 120;\n      } else {\n        this.wheel = 0;\n      }\n    }\n  };\n  ElementMouseEvent = pc.inherits(ElementMouseEvent, ElementInputEvent);\n  var ElementTouchEvent = function(event, element, input) {\n    this.touches = event.touches;\n    this.changedTouches = event.changedTouches;\n  };\n  ElementTouchEvent = pc.inherits(ElementTouchEvent, ElementInputEvent);\n  var ElementInput = function(domElement) {\n    this._app = null;\n    this._attached = false;\n    this._target = null;\n    this._lastX = 0;\n    this._lastY = 0;\n    this._upHandler = this._handleUp.bind(this);\n    this._downHandler = this._handleDown.bind(this);\n    this._moveHandler = this._handleMove.bind(this);\n    this._wheelHandler = this._handleWheel.bind(this);\n    this._touchstartHandler = this._handleTouchStart.bind(this);\n    this._touchendHandler = this._handleTouchEnd.bind(this);\n    this._touchcancelHandler = this._touchendHandler;\n    this._touchmoveHandler = this._handleTouchMove.bind(this);\n    this._elements = [];\n    this._hoveredElement = null;\n    this._pressedElement = null;\n    this._touchedElements = {};\n    if (\"ontouchstart\" in window) {\n      this._clickedEntities = {};\n    }\n    this.attach(domElement);\n  };\n  ElementInput.prototype = {attach:function(domElement) {\n    if (this._attached) {\n      this._attached = false;\n      this.detach();\n    }\n    this._target = domElement;\n    this._attached = true;\n    window.addEventListener(\"mouseup\", this._upHandler, {passive:true});\n    window.addEventListener(\"mousedown\", this._downHandler, {passive:true});\n    window.addEventListener(\"mousemove\", this._moveHandler, {passive:true});\n    window.addEventListener(\"mousewheel\", this._wheelHandler, {passive:true});\n    window.addEventListener(\"DOMMouseScroll\", this._wheelHandler, {passive:true});\n    if (\"ontouchstart\" in window) {\n      this._target.addEventListener(\"touchstart\", this._touchstartHandler, {passive:true});\n      this._target.addEventListener(\"touchend\", this._touchendHandler, {passive:true});\n      this._target.addEventListener(\"touchmove\", this._touchmoveHandler, false);\n      this._target.addEventListener(\"touchcancel\", this._touchcancelHandler, {passive:true});\n    }\n  }, detach:function() {\n    if (!this._attached) {\n      return;\n    }\n    this._attached = false;\n    window.removeEventListener(\"mouseup\", this._upHandler, false);\n    window.removeEventListener(\"mousedown\", this._downHandler, false);\n    window.removeEventListener(\"mousemove\", this._moveHandler, false);\n    window.removeEventListener(\"mousewheel\", this._wheelHandler, false);\n    window.removeEventListener(\"DOMMouseScroll\", this._wheelHandler, false);\n    this._target.removeEventListener(\"touchstart\", this._touchstartHandler, false);\n    this._target.removeEventListener(\"touchend\", this._touchendHandler, false);\n    this._target.removeEventListener(\"touchmove\", this._touchmoveHandler, false);\n    this._target.removeEventListener(\"touchcancel\", this._touchcancelHandler, false);\n    this._target = null;\n  }, addElement:function(element) {\n    if (this._elements.indexOf(element) === -1) {\n      this._elements.push(element);\n    }\n  }, removeElement:function(element) {\n    var idx = this._elements.indexOf(element);\n    if (idx !== -1) {\n      this._elements.splice(idx, 1);\n    }\n  }, _handleUp:function(event) {\n    if (pc.Mouse.isPointerLocked()) {\n      return;\n    }\n    this._calcMouseCoords(event);\n    if (targetX === null) {\n      return;\n    }\n    this._onElementMouseEvent(event);\n  }, _handleDown:function(event) {\n    if (pc.Mouse.isPointerLocked()) {\n      return;\n    }\n    this._calcMouseCoords(event);\n    if (targetX === null) {\n      return;\n    }\n    this._onElementMouseEvent(event);\n  }, _handleMove:function(event) {\n    this._calcMouseCoords(event);\n    if (targetX === null) {\n      return;\n    }\n    this._onElementMouseEvent(event);\n    this._lastX = targetX;\n    this._lastY = targetY;\n  }, _handleWheel:function(event) {\n    this._calcMouseCoords(event);\n    if (targetX === null) {\n      return;\n    }\n    this._onElementMouseEvent(event);\n  }, _handleTouchStart:function(event) {\n    var cameras = this.app.systems.camera.cameras;\n    for (var i = cameras.length - 1; i >= 0; i--) {\n      var camera = cameras[i];\n      var done = 0;\n      for (var j = 0, len = event.changedTouches.length; j < len; j++) {\n        if (this._touchedElements[event.changedTouches[j].identifier]) {\n          done++;\n          continue;\n        }\n        var coords = this._calcTouchCoords(event.changedTouches[j]);\n        var element = this._getTargetElement(camera, coords.x, coords.y);\n        if (element) {\n          done++;\n          this._touchedElements[event.changedTouches[j].identifier] = element;\n          this._fireEvent(event.type, new ElementTouchEvent(event, element, this));\n        }\n      }\n      if (done === len) {\n        break;\n      }\n    }\n  }, _handleTouchEnd:function(event) {\n    var cameras = this.app.systems.camera.cameras;\n    for (var key in this._clickedEntities) {\n      delete this._clickedEntities[key];\n    }\n    for (var i = 0, len = event.changedTouches.length; i < len; i++) {\n      var touch = event.changedTouches[i];\n      var element = this._touchedElements[touch.identifier];\n      if (!element) {\n        continue;\n      }\n      delete this._touchedElements[touch.identifier];\n      this._fireEvent(event.type, new ElementTouchEvent(event, element, this));\n      if (event.touches.length === 0) {\n        var coords = this._calcTouchCoords(touch);\n        for (var c = cameras.length - 1; c >= 0; c--) {\n          var hovered = this._getTargetElement(cameras[c], coords.x, coords.y);\n          if (hovered === element) {\n            if (!this._clickedEntities[element.entity.getGuid()]) {\n              this._fireEvent(\"click\", new ElementTouchEvent(event, element, this));\n              this._clickedEntities[element.entity.getGuid()] = true;\n            }\n          }\n        }\n      }\n    }\n  }, _handleTouchMove:function(event) {\n    event.preventDefault();\n    for (var i = 0, len = event.changedTouches.length; i < len; i++) {\n      var element = this._touchedElements[event.changedTouches[i].identifier];\n      if (element) {\n        this._fireEvent(event.type, new ElementTouchEvent(event, element, this));\n      }\n    }\n  }, _onElementMouseEvent:function(event) {\n    var element;\n    var hovered = this._hoveredElement;\n    this._hoveredElement = null;\n    var cameras = this.app.systems.camera.cameras;\n    for (var i = cameras.length - 1; i >= 0; i--) {\n      var camera = cameras[i];\n      element = this._getTargetElement(camera, targetX, targetY);\n      if (element) {\n        break;\n      }\n    }\n    if (element) {\n      this._fireEvent(event.type, new ElementMouseEvent(event, element, targetX, targetY, this._lastX, this._lastY));\n      this._hoveredElement = element;\n      if (event.type === pc.EVENT_MOUSEDOWN) {\n        this._pressedElement = element;\n      }\n    }\n    if (hovered !== this._hoveredElement) {\n      if (hovered) {\n        this._fireEvent(\"mouseleave\", new ElementMouseEvent(event, hovered, targetX, targetY, this._lastX, this._lastY));\n      }\n      if (this._hoveredElement) {\n        this._fireEvent(\"mouseenter\", new ElementMouseEvent(event, this._hoveredElement, targetX, targetY, this._lastX, this._lastY));\n      }\n    }\n    if (event.type === pc.EVENT_MOUSEUP && this._pressedElement) {\n      if (this._pressedElement === this._hoveredElement) {\n        this._pressedElement = null;\n        if (!this._clickedEntities || !this._clickedEntities[this._hoveredElement.entity.getGuid()]) {\n          this._fireEvent(\"click\", new ElementMouseEvent(event, this._hoveredElement, targetX, targetY, this._lastX, this._lastY));\n        }\n      } else {\n        this._pressedElement = null;\n      }\n    }\n  }, _fireEvent:function(name, evt) {\n    var element = evt.element;\n    while (true) {\n      element.fire(name, evt);\n      if (evt._stopPropagation) {\n        break;\n      }\n      if (!element.entity.parent) {\n        break;\n      }\n      element = element.entity.parent.element;\n      if (!element) {\n        break;\n      }\n    }\n  }, _calcMouseCoords:function(event) {\n    var rect = this._target.getBoundingClientRect();\n    var left = Math.floor(rect.left);\n    var top = Math.floor(rect.top);\n    if (event.clientX < left || event.clientX >= left + this._target.clientWidth || event.clientY < top || event.clientY >= top + this._target.clientHeight) {\n      targetX = null;\n      targetY = null;\n    } else {\n      targetX = event.clientX - left;\n      targetY = event.clientY - top;\n    }\n  }, _calcTouchCoords:function(touch) {\n    var totalOffsetX = 0;\n    var totalOffsetY = 0;\n    var target = touch.target;\n    while (!(target instanceof HTMLElement)) {\n      target = target.parentNode;\n    }\n    var currentElement = target;\n    do {\n      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;\n      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;\n      currentElement = currentElement.offsetParent;\n    } while (currentElement);\n    return {x:touch.pageX - totalOffsetX, y:touch.pageY - totalOffsetY};\n  }, _sortElements:function(a, b) {\n    if (a.screen && !b.screen) {\n      return -1;\n    }\n    if (!a.screen && b.screen) {\n      return 1;\n    }\n    if (!a.screen && !b.screen) {\n      return 0;\n    }\n    if (a.screen.screen.screenSpace && !b.screen.screen.screenSpace) {\n      return -1;\n    }\n    if (b.screen.screen.screenSpace && !a.screen.screen.screenSpace) {\n      return 1;\n    }\n    return b.drawOrder - a.drawOrder;\n  }, _getTargetElement:function(camera, x, y) {\n    var result = null;\n    this._elements.sort(this._sortElements);\n    for (var i = 0, len = this._elements.length; i < len; i++) {\n      var element = this._elements[i];\n      if (element.screen && element.screen.screen.screenSpace) {\n        if (this._checkElement2d(x, y, element, camera)) {\n          result = element;\n          break;\n        }\n      } else {\n        if (this._checkElement3d(x, y, element, camera)) {\n          result = element;\n          break;\n        }\n      }\n    }\n    return result;\n  }, _checkElement2d:function(x, y, element, camera) {\n    var sw = this.app.graphicsDevice.width;\n    var sh = this.app.graphicsDevice.height;\n    var cameraWidth = camera.rect.z * sw;\n    var cameraHeight = camera.rect.w * sh;\n    var cameraLeft = camera.rect.x * sw;\n    var cameraRight = cameraLeft + cameraWidth;\n    var cameraBottom = (1 - camera.rect.y) * sh;\n    var cameraTop = cameraBottom - cameraHeight;\n    var _x = x * sw / this._target.clientWidth;\n    var _y = y * sh / this._target.clientHeight;\n    if (_x >= cameraLeft && _x <= cameraRight && _y <= cameraBottom && _y >= cameraTop) {\n      _x = sw * (_x - cameraLeft) / cameraWidth;\n      _y = sh * (_y - cameraTop) / cameraHeight;\n      _y = sh - _y;\n      var screenCorners = element.screenCorners;\n      vecA.set(_x, _y, 1);\n      vecB.set(_x, _y, -1);\n      if (intersectLineQuad(vecA, vecB, screenCorners)) {\n        return true;\n      }\n    }\n    return false;\n  }, _checkElement3d:function(x, y, element, camera) {\n    var sw = this._target.clientWidth;\n    var sh = this._target.clientHeight;\n    var cameraWidth = camera.rect.z * sw;\n    var cameraHeight = camera.rect.w * sh;\n    var cameraLeft = camera.rect.x * sw;\n    var cameraRight = cameraLeft + cameraWidth;\n    var cameraBottom = (1 - camera.rect.y) * sh;\n    var cameraTop = cameraBottom - cameraHeight;\n    var _x = x;\n    var _y = y;\n    if (x >= cameraLeft && x <= cameraRight && y <= cameraBottom && _y >= cameraTop) {\n      _x = sw * (_x - cameraLeft) / cameraWidth;\n      _y = sh * (_y - cameraTop) / cameraHeight;\n      var worldCorners = element.worldCorners;\n      var start = camera.entity.getPosition();\n      var end = vecA;\n      camera.screenToWorld(_x, _y, camera.farClip, end);\n      if (intersectLineQuad(start, end, worldCorners)) {\n        return true;\n      }\n    }\n    return false;\n  }};\n  Object.defineProperty(ElementInput.prototype, \"app\", {get:function() {\n    return this._app || pc.app;\n  }, set:function(value) {\n    this._app = value;\n  }});\n  return {ElementInput:ElementInput, ElementInputEvent:ElementInputEvent, ElementMouseEvent:ElementMouseEvent, ElementTouchEvent:ElementTouchEvent};\n}());\npc.extend(pc, function() {\n  var VrManager = function(app) {\n    pc.events.attach(this);\n    var self = this;\n    this.isSupported = VrManager.isSupported;\n    this.usesPolyfill = VrManager.usesPolyfill;\n    if (window.InitializeWebVRPolyfill) {\n      window.InitializeWebVRPolyfill();\n    }\n    this._index = {};\n    this.displays = [];\n    this.display = null;\n    this._app = app;\n    this._onDisplayConnect = this._onDisplayConnect.bind(this);\n    this._onDisplayDisconnect = this._onDisplayDisconnect.bind(this);\n    self._attach();\n    this._getDisplays(function(err, displays) {\n      if (err) {\n        self.fire(\"error\", err);\n      } else {\n        for (var i = 0; i < displays.length; i++) {\n          self._addDisplay(displays[i]);\n        }\n        self.fire(\"ready\", self.displays);\n      }\n    });\n  };\n  VrManager.isSupported = !!navigator.getVRDisplays;\n  VrManager.usesPolyfill = !!window.InitializeWebVRPolyfill;\n  VrManager.prototype = {_attach:function() {\n    window.addEventListener(\"vrdisplayconnect\", this._onDisplayConnect);\n    window.addEventListener(\"vrdisplaydisconnect\", this._onDisplayDisconnect);\n  }, _detach:function() {\n    window.removeEventListener(\"vrdisplayconnect\", this._onDisplayConnect);\n    window.removeEventListener(\"vrdisplaydisconnect\", this._onDisplayDisconnect);\n  }, destroy:function() {\n    this._detach();\n  }, poll:function() {\n    var l = this.displays.length;\n    if (!l) {\n      return;\n    }\n    for (var i = 0; i < l; i++) {\n      if (this.displays[i]._camera) {\n        this.displays[i].poll();\n      }\n    }\n  }, _getDisplays:function(callback) {\n    if (navigator.getVRDisplays) {\n      navigator.getVRDisplays().then(function(displays) {\n        if (callback) {\n          callback(null, displays);\n        }\n      });\n    } else {\n      if (callback) {\n        callback(new Error(\"WebVR not supported\"));\n      }\n    }\n  }, _addDisplay:function(vrDisplay) {\n    if (this._index[vrDisplay.displayId]) {\n      return;\n    }\n    var display = new pc.VrDisplay(this._app, vrDisplay);\n    this._index[display.id] = display;\n    this.displays.push(display);\n    if (!this.display) {\n      this.display = display;\n    }\n    this.fire(\"displayconnect\", display);\n  }, _onDisplayConnect:function(e) {\n    if (e.detail && e.detail.display) {\n      this._addDisplay(e.detail.display);\n    } else {\n      this._addDisplay(e.display);\n    }\n  }, _onDisplayDisconnect:function(e) {\n    var id;\n    if (e.detail && e.detail.display) {\n      id = e.detail.display.displayId;\n    } else {\n      id = e.display.displayId;\n    }\n    var display = this._index[id];\n    if (!display) {\n      return;\n    }\n    display.destroy();\n    delete this._index[display.id];\n    var ind = this.displays.indexOf(display);\n    this.displays.splice(ind, 1);\n    if (this.display === display) {\n      if (this.displays.length) {\n        this.display = this.displays[0];\n      } else {\n        this.display = null;\n      }\n    }\n    this.fire(\"displaydisconnect\", display);\n  }};\n  return {VrManager:VrManager};\n}());\npc.extend(pc, function() {\n  var VrDisplay = function(app, display) {\n    var self = this;\n    this._app = app;\n    this._device = app.graphicsDevice;\n    this.id = display.displayId;\n    this._frameData = null;\n    if (window.VRFrameData) {\n      this._frameData = new window.VRFrameData;\n    }\n    this.display = display;\n    this._camera = null;\n    this.sitToStandInv = new pc.Mat4;\n    this.leftView = new pc.Mat4;\n    this.leftProj = new pc.Mat4;\n    this.leftViewInv = new pc.Mat4;\n    this.leftPos = new pc.Vec3;\n    this.rightView = new pc.Mat4;\n    this.rightProj = new pc.Mat4;\n    this.rightViewInv = new pc.Mat4;\n    this.rightPos = new pc.Vec3;\n    this.combinedPos = new pc.Vec3;\n    this.combinedView = new pc.Mat4;\n    this.combinedProj = new pc.Mat4;\n    this.combinedViewInv = new pc.Mat4;\n    this.combinedFov = 0;\n    this.combinedAspect = 0;\n    this.presenting = false;\n    self._presentChange = function(event) {\n      var display;\n      if (event.display) {\n        display = event.display;\n      } else {\n        if (event.detail && event.detail.display) {\n          display = event.detail.display;\n        } else {\n          if (event.detail && event.detail.vrdisplay) {\n            display = event.detail.vrdisplay;\n          } else {\n            display = self.display;\n          }\n        }\n      }\n      if (display === self.display) {\n        self.presenting = self.display && self.display.isPresenting;\n        if (self.presenting) {\n          var leftEye = self.display.getEyeParameters(\"left\");\n          var rightEye = self.display.getEyeParameters(\"right\");\n          var w = Math.max(leftEye.renderWidth, rightEye.renderWidth) * 2;\n          var h = Math.max(leftEye.renderHeight, rightEye.renderHeight);\n          self._app.graphicsDevice.setResolution(w, h);\n          self._app._allowResize = false;\n        } else {\n          self._app.setCanvasResolution(pc.RESOLUTION_AUTO);\n          self._app._allowResize = true;\n        }\n        self.fire(\"beforepresentchange\", self);\n        self.fire(\"presentchange\", self);\n      }\n    };\n    window.addEventListener(\"vrdisplaypresentchange\", self._presentChange, false);\n    pc.events.attach(this);\n  };\n  VrDisplay.prototype = {destroy:function() {\n    window.removeEventListener(\"vrdisplaypresentchange\", self._presentChange);\n    if (this._camera) {\n      this._camera.vrDisplay = null;\n    }\n    this._camera = null;\n  }, poll:function() {\n    if (this.display) {\n      this.display.getFrameData(this._frameData);\n      this.leftProj.data = this._frameData.leftProjectionMatrix;\n      this.rightProj.data = this._frameData.rightProjectionMatrix;\n      var stage = this.display.stageParameters;\n      if (stage) {\n        this.sitToStandInv.set(stage.sittingToStandingTransform).invert();\n        this.combinedView.set(this._frameData.leftViewMatrix);\n        this.leftView.mul2(this.combinedView, this.sitToStandInv);\n        this.combinedView.set(this._frameData.rightViewMatrix);\n        this.rightView.mul2(this.combinedView, this.sitToStandInv);\n      } else {\n        this.leftView.set(this._frameData.leftViewMatrix);\n        this.rightView.set(this._frameData.rightViewMatrix);\n      }\n      var nx = this.leftProj.data[3] + this.leftProj.data[0];\n      var nz = this.leftProj.data[11] + this.leftProj.data[8];\n      var l = 1.0 / Math.sqrt(nx * nx + nz * nz);\n      nx *= l;\n      nz *= l;\n      var maxFov = -Math.atan2(nz, nx);\n      nx = this.rightProj.data[3] + this.rightProj.data[0];\n      nz = this.rightProj.data[11] + this.rightProj.data[8];\n      l = 1.0 / Math.sqrt(nx * nx + nz * nz);\n      nx *= l;\n      nz *= l;\n      maxFov = Math.max(maxFov, -Math.atan2(nz, nx));\n      maxFov *= 2.0;\n      this.combinedFov = maxFov;\n      var aspect = this.rightProj.data[5] / this.rightProj.data[0];\n      this.combinedAspect = aspect;\n      var view = this.combinedView;\n      view.copy(this.leftView);\n      view.invert();\n      this.leftViewInv.copy(view);\n      var pos = this.combinedPos.data;\n      pos[0] = this.leftPos.data[0] = view.data[12];\n      pos[1] = this.leftPos.data[1] = view.data[13];\n      pos[2] = this.leftPos.data[2] = view.data[14];\n      view.copy(this.rightView);\n      view.invert();\n      this.rightViewInv.copy(view);\n      var deltaX = pos[0] - view.data[12];\n      var deltaY = pos[1] - view.data[13];\n      var deltaZ = pos[2] - view.data[14];\n      var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);\n      this.rightPos.data[0] = view.data[12];\n      this.rightPos.data[1] = view.data[13];\n      this.rightPos.data[2] = view.data[14];\n      pos[0] += view.data[12];\n      pos[1] += view.data[13];\n      pos[2] += view.data[14];\n      pos[0] *= 0.5;\n      pos[1] *= 0.5;\n      pos[2] *= 0.5;\n      var b = Math.PI * 0.5;\n      var c = maxFov * 0.5;\n      var a = Math.PI - (b + c);\n      var offset = dist * 0.5 * Math.sin(a);\n      var fwdX = view.data[8];\n      var fwdY = view.data[9];\n      var fwdZ = view.data[10];\n      view.data[12] = pos[0] + fwdX * offset;\n      view.data[13] = pos[1] + fwdY * offset;\n      view.data[14] = pos[2] + fwdZ * offset;\n      this.combinedViewInv.copy(view);\n      view.invert();\n      this.combinedProj.setPerspective(maxFov * pc.math.RAD_TO_DEG, aspect, this.display.depthNear + offset, this.display.depthFar + offset, true);\n    }\n  }, requestPresent:function(callback) {\n    if (!this.display) {\n      if (callback) {\n        callback(new Error(\"No VrDisplay to requestPresent\"));\n      }\n      return;\n    }\n    if (this.presenting) {\n      if (callback) {\n        callback(new Error(\"VrDisplay already presenting\"));\n      }\n      return;\n    }\n    this.display.requestPresent([{source:this._device.canvas}]).then(function() {\n      if (callback) {\n        callback();\n      }\n    }, function(err) {\n      if (callback) {\n        callback(err);\n      }\n    });\n  }, exitPresent:function(callback) {\n    if (!this.display) {\n      if (callback) {\n        callback(new Error(\"No VrDisplay to exitPresent\"));\n      }\n    }\n    if (!this.presenting) {\n      if (callback) {\n        callback(new Error(\"VrDisplay not presenting\"));\n      }\n      return;\n    }\n    this.display.exitPresent().then(function() {\n      if (callback) {\n        callback();\n      }\n    }, function() {\n      if (callback) {\n        callback(new Error(\"exitPresent failed\"));\n      }\n    });\n  }, requestAnimationFrame:function(fn) {\n    if (this.display) {\n      this.display.requestAnimationFrame(fn);\n    }\n  }, submitFrame:function() {\n    if (this.display) {\n      this.display.submitFrame();\n    }\n  }, reset:function() {\n    if (this.display) {\n      this.display.resetPose();\n    }\n  }, setClipPlanes:function(n, f) {\n    if (this.display) {\n      this.display.depthNear = n;\n      this.display.depthFar = f;\n    }\n  }, getFrameData:function() {\n    if (this.display) {\n      return this._frameData;\n    }\n  }};\n  Object.defineProperty(VrDisplay.prototype, \"capabilities\", {get:function() {\n    if (this.display) {\n      return this.display.capabilities;\n    }\n    return {};\n  }});\n  return {VrDisplay:VrDisplay};\n}());\npc.extend(pc, function() {\n  var Http = function Http() {\n  };\n  Http.ContentType = {FORM_URLENCODED:\"application/x-www-form-urlencoded\", GIF:\"image/gif\", JPEG:\"image/jpeg\", DDS:\"image/dds\", JSON:\"application/json\", PNG:\"image/png\", TEXT:\"text/plain\", XML:\"application/xml\", WAV:\"audio/x-wav\", OGG:\"audio/ogg\", MP3:\"audio/mpeg\", MP4:\"audio/mp4\", AAC:\"audio/aac\", BIN:\"application/octet-stream\"};\n  Http.ResponseType = {TEXT:\"text\", ARRAY_BUFFER:\"arraybuffer\", BLOB:\"blob\", DOCUMENT:\"document\"};\n  Http.binaryExtensions = [\".model\", \".wav\", \".ogg\", \".mp3\", \".mp4\", \".m4a\", \".aac\", \".dds\"];\n  Http.prototype = {ContentType:Http.ContentType, ResponseType:Http.ResponseType, binaryExtensions:Http.binaryExtensions, get:function(url, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    return this.request(\"GET\", url, options, callback);\n  }, post:function(url, data, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    options.postdata = data;\n    return this.request(\"POST\", url, options, callback);\n  }, put:function(url, data, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    options.postdata = data;\n    return this.request(\"PUT\", url, options, callback);\n  }, del:function(url, options, callback) {\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    return this.request(\"DELETE\", url, options, callback);\n  }, request:function(method, url, options, callback) {\n    var uri, query, timestamp, postdata, xhr;\n    var errored = false;\n    if (typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n    options.callback = callback;\n    if (options.async == null) {\n      options.async = true;\n    }\n    if (options.headers == null) {\n      options.headers = {};\n    }\n    if (options.postdata != null) {\n      if (options.postdata instanceof Document) {\n        postdata = options.postdata;\n      } else {\n        if (options.postdata instanceof FormData) {\n          postdata = options.postdata;\n        } else {\n          if (options.postdata instanceof Object) {\n            var contentType = options.headers[\"Content-Type\"];\n            if (contentType === undefined) {\n              options.headers[\"Content-Type\"] = Http.ContentType.FORM_URLENCODED;\n              contentType = options.headers[\"Content-Type\"];\n            }\n            switch(contentType) {\n              case Http.ContentType.FORM_URLENCODED:\n                postdata = \"\";\n                var bFirstItem = true;\n                for (var key in options.postdata) {\n                  if (options.postdata.hasOwnProperty(key)) {\n                    if (bFirstItem) {\n                      bFirstItem = false;\n                    } else {\n                      postdata += \"&\";\n                    }\n                    postdata += escape(key) + \"=\" + escape(options.postdata[key]);\n                  }\n                }\n                break;\n              default:\n              case Http.ContentType.JSON:\n                if (contentType == null) {\n                  options.headers[\"Content-Type\"] = Http.ContentType.JSON;\n                }\n                postdata = JSON.stringify(options.postdata);\n                break;\n            }\n          } else {\n            postdata = options.postdata;\n          }\n        }\n      }\n    }\n    if (!xhr) {\n      xhr = new XMLHttpRequest;\n    }\n    if (options.cache === false) {\n      timestamp = pc.time.now();\n      uri = new pc.URI(url);\n      if (!uri.query) {\n        uri.query = \"ts=\" + timestamp;\n      } else {\n        uri.query = uri.query + \"&ts=\" + timestamp;\n      }\n      url = uri.toString();\n    }\n    if (options.query) {\n      uri = new pc.URI(url);\n      query = pc.extend(uri.getQuery(), options.query);\n      uri.setQuery(query);\n      url = uri.toString();\n    }\n    xhr.open(method, url, options.async);\n    xhr.withCredentials = options.withCredentials !== undefined ? options.withCredentials : false;\n    xhr.responseType = options.responseType || this._guessResponseType(url);\n    for (var header in options.headers) {\n      if (options.headers.hasOwnProperty(header)) {\n        xhr.setRequestHeader(header, options.headers[header]);\n      }\n    }\n    xhr.onreadystatechange = function() {\n      this._onReadyStateChange(method, url, options, xhr);\n    }.bind(this);\n    xhr.onerror = function() {\n      this._onError(method, url, options, xhr);\n      errored = true;\n    }.bind(this);\n    try {\n      xhr.send(postdata);\n    } catch (e) {\n      if (!errored) {\n        options.error(xhr.status, xhr, e);\n      }\n    }\n    return xhr;\n  }, _guessResponseType:function(url) {\n    var uri = new pc.URI(url);\n    var ext = pc.path.getExtension(uri.path);\n    if (Http.binaryExtensions.indexOf(ext) >= 0) {\n      return Http.ResponseType.ARRAY_BUFFER;\n    }\n    if (ext === \".xml\") {\n      return Http.ResponseType.DOCUMENT;\n    }\n    return Http.ResponseType.TEXT;\n  }, _isBinaryContentType:function(contentType) {\n    var binTypes = [Http.ContentType.MP4, Http.ContentType.WAV, Http.ContentType.OGG, Http.ContentType.MP3, Http.ContentType.BIN, Http.ContentType.DDS];\n    if (binTypes.indexOf(contentType) >= 0) {\n      return true;\n    }\n    return false;\n  }, _onReadyStateChange:function(method, url, options, xhr) {\n    if (xhr.readyState === 4) {\n      switch(xhr.status) {\n        case 0:\n          {\n            if (url[0] != \"/\") {\n              this._onSuccess(method, url, options, xhr);\n            }\n            break;\n          }\n        case 200:\n        case 201:\n        case 206:\n        case 304:\n          {\n            this._onSuccess(method, url, options, xhr);\n            break;\n          }\n        default:\n          {\n            this._onError(method, url, options, xhr);\n            break;\n          }\n      }\n    }\n  }, _onSuccess:function(method, url, options, xhr) {\n    var response;\n    var header;\n    var contentType;\n    var parts;\n    header = xhr.getResponseHeader(\"Content-Type\");\n    if (header) {\n      parts = header.split(\";\");\n      contentType = parts[0].trim();\n    }\n    if (contentType === this.ContentType.JSON || url.split(\"?\")[0].endsWith(\".json\")) {\n      response = JSON.parse(xhr.responseText);\n    } else {\n      if (this._isBinaryContentType(contentType)) {\n        response = xhr.response;\n      } else {\n        if (xhr.responseType === Http.ResponseType.ARRAY_BUFFER) {\n          logWARNING(pc.string.format(\"responseType: {0} being served with Content-Type: {1}\", Http.ResponseType.ARRAY_BUFFER, contentType));\n          response = xhr.response;\n        } else {\n          if (xhr.responseType === Http.ResponseType.DOCUMENT || contentType === this.ContentType.XML) {\n            response = xhr.responseXML;\n          } else {\n            response = xhr.responseText;\n          }\n        }\n      }\n    }\n    options.callback(null, response);\n  }, _onError:function(method, url, options, xhr) {\n    options.callback(xhr.status, null);\n  }};\n  return {Http:Http, http:new Http};\n}());\npc.extend(pc, function() {\n  var ScriptRegistry = function(app) {\n    pc.events.attach(this);\n    this.app = app;\n    this._scripts = {};\n    this._list = [];\n  };\n  ScriptRegistry.prototype.add = function(script) {\n    var self = this;\n    if (this._scripts.hasOwnProperty(script.__name)) {\n      setTimeout(function() {\n        if (script.prototype.swap) {\n          var old = self._scripts[script.__name];\n          var ind = self._list.indexOf(old);\n          self._list[ind] = script;\n          self._scripts[script.__name] = script;\n          self.fire(\"swap\", script.__name, script);\n          self.fire(\"swap:\" + script.__name, script);\n        } else {\n          console.warn(\"script registry already has '\" + script.__name + \"' script, define 'swap' method for new script type to enable code hot swapping\");\n        }\n      });\n      return false;\n    }\n    this._scripts[script.__name] = script;\n    this._list.push(script);\n    this.fire(\"add\", script.__name, script);\n    this.fire(\"add:\" + script.__name, script);\n    setTimeout(function() {\n      if (!self._scripts.hasOwnProperty(script.__name)) {\n        return;\n      }\n      var components = self.app.systems.script._components;\n      var i, scriptInstance, attributes;\n      var scriptInstances = [];\n      var scriptInstancesInitialized = [];\n      for (i = 0; i < components.length; i++) {\n        if (components[i]._scriptsIndex[script.__name] && components[i]._scriptsIndex[script.__name].awaiting) {\n          if (components[i]._scriptsData && components[i]._scriptsData[script.__name]) {\n            attributes = components[i]._scriptsData[script.__name].attributes;\n          }\n          scriptInstance = components[i].create(script.__name, {preloading:true, ind:components[i]._scriptsIndex[script.__name].ind, attributes:attributes});\n          if (scriptInstance) {\n            scriptInstances.push(scriptInstance);\n          }\n        }\n      }\n      for (i = 0; i < scriptInstances.length; i++) {\n        scriptInstances[i].__initializeAttributes();\n      }\n      for (i = 0; i < scriptInstances.length; i++) {\n        if (scriptInstances[i].enabled) {\n          scriptInstances[i]._initialized = true;\n          scriptInstancesInitialized.push(scriptInstances[i]);\n          if (scriptInstances[i].initialize) {\n            scriptInstances[i].initialize();\n          }\n        }\n      }\n      for (i = 0; i < scriptInstancesInitialized.length; i++) {\n        if (!scriptInstancesInitialized[i].enabled || scriptInstancesInitialized[i]._postInitialized) {\n          continue;\n        }\n        scriptInstancesInitialized[i]._postInitialized = true;\n        if (scriptInstancesInitialized[i].postInitialize) {\n          scriptInstancesInitialized[i].postInitialize();\n        }\n      }\n    });\n    return true;\n  };\n  ScriptRegistry.prototype.remove = function(script) {\n    var name = script;\n    if (typeof script === \"function\") {\n      name = script.__name;\n    }\n    if (!this._scripts.hasOwnProperty(name)) {\n      return false;\n    }\n    var item = this._scripts[name];\n    delete this._scripts[name];\n    var ind = this._list.indexOf(item);\n    this._list.splice(ind, 1);\n    this.fire(\"remove\", name, item);\n    this.fire(\"remove:\" + name, item);\n    return true;\n  };\n  ScriptRegistry.prototype.get = function(name) {\n    return this._scripts[name] || null;\n  };\n  ScriptRegistry.prototype.has = function(name) {\n    return this._scripts.hasOwnProperty(name);\n  };\n  ScriptRegistry.prototype.list = function() {\n    return this._list;\n  };\n  return {ScriptRegistry:ScriptRegistry};\n}());\npc.extend(pc, function() {\n  var rawToValue = function(app, args, value, old) {\n    var i;\n    switch(args.type) {\n      case \"boolean\":\n        return !!value;\n      case \"number\":\n        if (typeof value === \"number\") {\n          return value;\n        } else {\n          if (typeof value === \"string\") {\n            var v = parseInt(value, 10);\n            if (isNaN(v)) {\n              return null;\n            }\n            return v;\n          } else {\n            if (typeof value === \"boolean\") {\n              return 0 + value;\n            } else {\n              return null;\n            }\n          }\n        }\n        break;\n      case \"json\":\n        if (typeof value === \"object\") {\n          return value;\n        } else {\n          try {\n            return JSON.parse(value);\n          } catch (ex) {\n            return null;\n          }\n        }\n        break;\n      case \"asset\":\n        if (args.array) {\n          var result = [];\n          if (value instanceof Array) {\n            for (i = 0; i < value.length; i++) {\n              if (value[i] instanceof pc.Asset) {\n                result.push(value[i]);\n              } else {\n                if (typeof value[i] === \"number\") {\n                  result.push(app.assets.get(value[i]) || null);\n                } else {\n                  if (typeof value[i] === \"string\") {\n                    result.push(app.assets.get(parseInt(value[i], 10)) || null);\n                  } else {\n                    result.push(null);\n                  }\n                }\n              }\n            }\n          }\n          return result;\n        } else {\n          if (value instanceof pc.Asset) {\n            return value;\n          } else {\n            if (typeof value === \"number\") {\n              return app.assets.get(value) || null;\n            } else {\n              if (typeof value === \"string\") {\n                return app.assets.get(parseInt(value, 10)) || null;\n              } else {\n                return null;\n              }\n            }\n          }\n        }\n        break;\n      case \"entity\":\n        if (value instanceof pc.GraphNode) {\n          return value;\n        } else {\n          if (typeof value === \"string\") {\n            return app.root.findByGuid(value);\n          } else {\n            return null;\n          }\n        }\n        break;\n      case \"rgb\":\n      case \"rgba\":\n        if (value instanceof pc.Color) {\n          if (old instanceof pc.Color) {\n            old.copy(value);\n            return old;\n          } else {\n            return value.clone();\n          }\n        } else {\n          if (value instanceof Array && value.length >= 3 && value.length <= 4) {\n            for (i = 0; i < value.length; i++) {\n              if (typeof value[i] !== \"number\") {\n                return null;\n              }\n            }\n            if (!old) {\n              old = new pc.Color;\n            }\n            for (i = 0; i < 4; i++) {\n              old.data[i] = i === 4 && value.length === 3 ? 1 : value[i];\n            }\n            return old;\n          } else {\n            if (typeof value === \"string\" && /#([0-9abcdef]{2}){3,4}/i.test(value)) {\n              if (!old) {\n                old = new pc.Color;\n              }\n              old.fromString(value);\n              return old;\n            } else {\n              return null;\n            }\n          }\n        }\n        break;\n      case \"vec2\":\n      case \"vec3\":\n      case \"vec4\":\n        var len = parseInt(args.type.slice(3), 10);\n        if (value instanceof pc[\"Vec\" + len]) {\n          if (old instanceof pc[\"Vec\" + len]) {\n            old.copy(value);\n            return old;\n          } else {\n            return value.clone();\n          }\n        } else {\n          if (value instanceof Array && value.length === len) {\n            for (i = 0; i < value.length; i++) {\n              if (typeof value[i] !== \"number\") {\n                return null;\n              }\n            }\n            if (!old) {\n              old = new pc[\"Vec\" + len];\n            }\n            for (i = 0; i < len; i++) {\n              old.data[i] = value[i];\n            }\n            return old;\n          } else {\n            return null;\n          }\n        }\n        break;\n      case \"curve\":\n        if (value) {\n          var curve;\n          if (value instanceof pc.Curve || value instanceof pc.CurveSet) {\n            curve = value.clone();\n          } else {\n            var CurveType = value.keys[0] instanceof Array ? pc.CurveSet : pc.Curve;\n            curve = new CurveType(value.keys);\n            curve.type = value.type;\n          }\n          return curve;\n        }\n        break;\n    }\n    return value;\n  };\n  var ScriptAttributes = function(scriptType) {\n    this.scriptType = scriptType;\n    this.index = {};\n  };\n  ScriptAttributes.prototype.add = function(name, args) {\n    if (this.index[name]) {\n      console.warn(\"attribute '\" + name + \"' is already defined for script type '\" + this.scriptType.name + \"'\");\n      return;\n    } else {\n      if (pc.createScript.reservedAttributes[name]) {\n        console.warn(\"attribute '\" + name + \"' is a reserved attribute name\");\n        return;\n      }\n    }\n    this.index[name] = args;\n    Object.defineProperty(this.scriptType.prototype, name, {get:function() {\n      return this.__attributes[name];\n    }, set:function(raw) {\n      var old = this.__attributes[name];\n      this.__attributes[name] = rawToValue(this.app, args, raw, old);\n      this.fire(\"attr\", name, this.__attributes[name], old);\n      this.fire(\"attr:\" + name, this.__attributes[name], old);\n    }});\n  };\n  ScriptAttributes.prototype.remove = function(name) {\n    if (!this.index[name]) {\n      return false;\n    }\n    delete this.index[name];\n    delete this.scriptType.prototype[name];\n    return true;\n  };\n  ScriptAttributes.prototype.has = function(name) {\n    return !!this.index[name];\n  };\n  ScriptAttributes.prototype.get = function(name) {\n    return this.index[name] || null;\n  };\n  var createScript = function(name, app) {\n    if (pc.script.legacy) {\n      console.error(\"This project is using the legacy script system. You cannot call pc.createScript(). See: http://developer.playcanvas.com/en/user-manual/scripting/legacy/\");\n      return null;\n    }\n    if (createScript.reservedScripts[name]) {\n      throw new Error(\"script name: '\" + name + \"' is reserved, please change script name\");\n    }\n    var script = function(args) {\n      if (!args || !args.app || !args.entity) {\n        console.warn(\"script '\" + name + \"' has missing arguments in consructor\");\n      }\n      pc.events.attach(this);\n      this.app = args.app;\n      this.entity = args.entity;\n      this._enabled = typeof args.enabled === \"boolean\" ? args.enabled : true;\n      this._enabledOld = this.enabled;\n      this.__attributes = {};\n      this.__attributesRaw = args.attributes || null;\n      this.__scriptType = script;\n    };\n    script.__name = name;\n    script.attributes = new ScriptAttributes(script);\n    script.prototype.__initializeAttributes = function(force) {\n      if (!force && !this.__attributesRaw) {\n        return;\n      }\n      for (var key in script.attributes.index) {\n        if (this.__attributesRaw && this.__attributesRaw.hasOwnProperty(key)) {\n          this[key] = this.__attributesRaw[key];\n        } else {\n          if (!this.__attributes.hasOwnProperty(key)) {\n            if (script.attributes.index[key].hasOwnProperty(\"default\")) {\n              this[key] = script.attributes.index[key].default;\n            } else {\n              this[key] = null;\n            }\n          }\n        }\n      }\n      this.__attributesRaw = null;\n    };\n    script.extend = function(methods) {\n      for (var key in methods) {\n        if (!methods.hasOwnProperty(key)) {\n          continue;\n        }\n        script.prototype[key] = methods[key];\n      }\n    };\n    Object.defineProperty(script.prototype, \"enabled\", {get:function() {\n      return this._enabled && this.entity.script.enabled && this.entity.enabled;\n    }, set:function(value) {\n      this._enabled = !!value;\n      if (this.enabled === this._enabledOld) {\n        return;\n      }\n      this._enabledOld = this.enabled;\n      this.fire(this.enabled ? \"enable\" : \"disable\");\n      this.fire(\"state\", this.enabled);\n      if (!this._initialized && this.enabled) {\n        this._initialized = true;\n        this.__initializeAttributes(true);\n        if (this.initialize) {\n          this.entity.script._scriptMethod(this, pc.ScriptComponent.scriptMethods.initialize);\n        }\n      }\n      if (this._initialized && !this._postInitialized && this.enabled && !this.entity.script._beingEnabled) {\n        this._postInitialized = true;\n        if (this.postInitialize) {\n          this.entity.script._scriptMethod(this, pc.ScriptComponent.scriptMethods.postInitialize);\n        }\n      }\n    }});\n    var registry = app ? app.scripts : pc.Application.getApplication().scripts;\n    registry.add(script);\n    pc.ScriptHandler._push(script);\n    return script;\n  };\n  createScript.reservedScripts = [\"system\", \"entity\", \"create\", \"destroy\", \"swap\", \"move\", \"scripts\", \"_scripts\", \"_scriptsIndex\", \"_scriptsData\", \"enabled\", \"_oldState\", \"onEnable\", \"onDisable\", \"onPostStateChange\", \"_onSetEnabled\", \"_checkState\", \"_onBeforeRemove\", \"_onInitializeAttributes\", \"_onInitialize\", \"_onPostInitialize\", \"_onUpdate\", \"_onPostUpdate\", \"_callbacks\", \"has\", \"on\", \"off\", \"fire\", \"once\", \"hasEvent\"];\n  var reservedScripts = {};\n  var i;\n  for (i = 0; i < createScript.reservedScripts.length; i++) {\n    reservedScripts[createScript.reservedScripts[i]] = 1;\n  }\n  createScript.reservedScripts = reservedScripts;\n  createScript.reservedAttributes = [\"app\", \"entity\", \"enabled\", \"_enabled\", \"_enabledOld\", \"__attributes\", \"__attributesRaw\", \"__scriptType\", \"_callbacks\", \"has\", \"on\", \"off\", \"fire\", \"once\", \"hasEvent\"];\n  var reservedAttributes = {};\n  for (i = 0; i < createScript.reservedAttributes.length; i++) {\n    reservedAttributes[createScript.reservedAttributes[i]] = 1;\n  }\n  createScript.reservedAttributes = reservedAttributes;\n  return {createScript:createScript};\n}());\npc.script = function() {\n  var _legacy = false;\n  var _createdLoadingScreen = false;\n  var script = {app:null, create:function(name, callback) {\n    if (!_legacy) {\n      return;\n    }\n    var ScriptType = callback(pc.script.app);\n    ScriptType._pcScriptName = name;\n    pc.ScriptHandler._push(ScriptType);\n    this.fire(\"created\", name, callback);\n  }, attribute:function(name, type, defaultValue, options) {\n  }, createLoadingScreen:function(callback) {\n    if (_createdLoadingScreen) {\n      return;\n    }\n    _createdLoadingScreen = true;\n    var app = pc.Application.getApplication();\n    callback(app);\n  }};\n  Object.defineProperty(script, \"legacy\", {get:function() {\n    return _legacy;\n  }, set:function(value) {\n    _legacy = value;\n  }});\n  pc.events.attach(script);\n  return script;\n}();\npc.extend(pc, function() {\n  var Application = function(canvas, options) {\n    options = options || {};\n    pc.log.open();\n    pc.events.attach(this);\n    Application._applications[canvas.id] = this;\n    Application._currentApplication = this;\n    this._time = 0;\n    this.timeScale = 1;\n    this.maxDeltaTime = 0.1;\n    this.autoRender = true;\n    this.renderNextFrame = false;\n    this._librariesLoaded = false;\n    this._fillMode = pc.FILLMODE_KEEP_ASPECT;\n    this._resolutionMode = pc.RESOLUTION_FIXED;\n    this._allowResize = true;\n    this.context = this;\n    this.graphicsDevice = new pc.GraphicsDevice(canvas, options.graphicsDeviceOptions);\n    this.stats = new pc.ApplicationStats(this.graphicsDevice);\n    this.systems = new pc.ComponentSystemRegistry;\n    this._audioManager = new pc.SoundManager(options);\n    this.loader = new pc.ResourceLoader;\n    this.scene = new pc.Scene;\n    this.root = new pc.Entity(this);\n    this.root._enabledInHierarchy = true;\n    this._enableList = [];\n    this._enableList.size = 0;\n    this.assets = new pc.AssetRegistry(this.loader);\n    if (options.assetPrefix) {\n      this.assets.prefix = options.assetPrefix;\n    }\n    this.scriptsOrder = options.scriptsOrder || [];\n    this.scripts = new pc.ScriptRegistry(this);\n    var self = this;\n    this.defaultLayerWorld = new pc.Layer({name:\"World\", id:pc.LAYERID_WORLD});\n    if (this.graphicsDevice.webgl2) {\n      this.defaultLayerDepth = new pc.Layer({enabled:false, name:\"Depth\", id:pc.LAYERID_DEPTH, onEnable:function() {\n        if (this.renderTarget) {\n          return;\n        }\n        var depthBuffer = new pc.Texture(self.graphicsDevice, {format:pc.PIXELFORMAT_DEPTHSTENCIL, width:self.graphicsDevice.width, height:self.graphicsDevice.height});\n        depthBuffer.minFilter = pc.FILTER_NEAREST;\n        depthBuffer.magFilter = pc.FILTER_NEAREST;\n        depthBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n        depthBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n        this.renderTarget = new pc.RenderTarget({colorBuffer:null, depthBuffer:depthBuffer, autoResolve:false});\n        self.graphicsDevice.scope.resolve(\"uDepthMap\").setValue(depthBuffer);\n      }, onDisable:function() {\n        if (!this.renderTarget) {\n          return;\n        }\n        this.renderTarget._depthBuffer.destroy();\n        this.renderTarget.destroy();\n        this.renderTarget = null;\n      }, onPreRenderOpaque:function(cameraPass) {\n        var gl = self.graphicsDevice.gl;\n        this.srcFbo = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n        if (!this.renderTarget || (this.renderTarget.width !== self.graphicsDevice.width || this.renderTarget.height !== self.graphicsDevice.height)) {\n          this.onDisable();\n          this.onEnable();\n        }\n        this.oldClear = this.cameras[cameraPass].camera._clearOptions;\n        this.cameras[cameraPass].camera._clearOptions = this.depthClearOptions;\n      }, onPostRenderOpaque:function(cameraPass) {\n        if (!this.renderTarget) {\n          return;\n        }\n        this.cameras[cameraPass].camera._clearOptions = this.oldClear;\n        var gl = self.graphicsDevice.gl;\n        self.graphicsDevice.setRenderTarget(this.renderTarget);\n        self.graphicsDevice.updateBegin();\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.srcFbo);\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.renderTarget._glFrameBuffer);\n        gl.blitFramebuffer(0, 0, this.renderTarget.width, this.renderTarget.height, 0, 0, this.renderTarget.width, this.renderTarget.height, gl.DEPTH_BUFFER_BIT, gl.NEAREST);\n      }});\n      this.defaultLayerDepth.depthClearOptions = {flags:0};\n    } else {\n      this.defaultLayerDepth = new pc.Layer({enabled:false, name:\"Depth\", id:pc.LAYERID_DEPTH, shaderPass:pc.SHADER_DEPTH, onEnable:function() {\n        if (this.renderTarget) {\n          return;\n        }\n        var colorBuffer = new pc.Texture(self.graphicsDevice, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:self.graphicsDevice.width, height:self.graphicsDevice.height});\n        colorBuffer.minFilter = pc.FILTER_NEAREST;\n        colorBuffer.magFilter = pc.FILTER_NEAREST;\n        colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n        colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n        this.renderTarget = new pc.RenderTarget(self.graphicsDevice, colorBuffer, {depth:true, stencil:self.graphicsDevice.supportsStencil});\n        self.graphicsDevice.scope.resolve(\"uDepthMap\").setValue(colorBuffer);\n      }, onDisable:function() {\n        if (!this.renderTarget) {\n          return;\n        }\n        this.renderTarget._colorBuffer.destroy();\n        this.renderTarget.destroy();\n        this.renderTarget = null;\n      }, onPostCull:function(cameraPass) {\n        var visibleObjects = this.instances.visibleOpaque[cameraPass];\n        var visibleList = visibleObjects.list;\n        var visibleLength = 0;\n        var layers = self.scene.layers.layerList;\n        var subLayerEnabled = self.scene.layers.subLayerEnabled;\n        var isTransparent = self.scene.layers.subLayerList;\n        var rt = self.defaultLayerWorld.renderTarget;\n        var cam = this.cameras[cameraPass];\n        var layer;\n        var j;\n        var layerVisibleList, layerCamId, layerVisibleListLength, drawCall, transparent;\n        for (var i = 0; i < layers.length; i++) {\n          layer = layers[i];\n          if (layer === this) {\n            break;\n          }\n          if (layer.renderTarget !== rt || !layer.enabled || !subLayerEnabled[i]) {\n            continue;\n          }\n          layerCamId = layer.cameras.indexOf(cam);\n          if (layerCamId < 0) {\n            continue;\n          }\n          transparent = isTransparent[i];\n          layerVisibleList = transparent ? layer.instances.visibleTransparent[layerCamId] : layer.instances.visibleOpaque[layerCamId];\n          layerVisibleListLength = layerVisibleList.length;\n          layerVisibleList = layerVisibleList.list;\n          for (j = 0; j < layerVisibleListLength; j++) {\n            drawCall = layerVisibleList[j];\n            if (drawCall.material && drawCall.material.depthWrite && !drawCall._noDepthDrawGl1) {\n              visibleList[visibleLength] = drawCall;\n              visibleLength++;\n            }\n          }\n        }\n        visibleObjects.length = visibleLength;\n      }, onPreRenderOpaque:function(cameraPass) {\n        if (!this.renderTarget || (this.renderTarget.width !== self.graphicsDevice.width || this.renderTarget.height !== self.graphicsDevice.height)) {\n          this.onDisable();\n          this.onEnable();\n        }\n        this.oldClear = this.cameras[cameraPass].camera._clearOptions;\n        this.cameras[cameraPass].camera._clearOptions = this.rgbaDepthClearOptions;\n      }, onDrawCall:function() {\n        self.graphicsDevice.setColorWrite(true, true, true, true);\n      }, onPostRenderOpaque:function(cameraPass) {\n        if (!this.renderTarget) {\n          return;\n        }\n        this.cameras[cameraPass].camera._clearOptions = this.oldClear;\n      }});\n      this.defaultLayerDepth.rgbaDepthClearOptions = {color:[254.0 / 255, 254.0 / 255, 254.0 / 255, 254.0 / 255], depth:1.0, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH};\n    }\n    this.defaultLayerSkybox = new pc.Layer({enabled:false, name:\"Skybox\", id:pc.LAYERID_SKYBOX, opaqueSortMode:pc.SORTMODE_NONE});\n    this.defaultLayerUi = new pc.Layer({enabled:true, name:\"UI\", id:pc.LAYERID_UI, transparentSortMode:pc.SORTMODE_MANUAL, passThrough:true});\n    this.defaultLayerImmediate = new pc.Layer({enabled:true, name:\"Immediate\", id:pc.LAYERID_IMMEDIATE, opaqueSortMode:pc.SORTMODE_NONE, passThrough:true});\n    this.defaultLayerComposition = new pc.LayerComposition;\n    this.defaultLayerComposition.pushOpaque(this.defaultLayerWorld);\n    this.defaultLayerComposition.pushOpaque(this.defaultLayerDepth);\n    this.defaultLayerComposition.pushOpaque(this.defaultLayerSkybox);\n    this.defaultLayerComposition.pushTransparent(this.defaultLayerWorld);\n    this.defaultLayerComposition.pushOpaque(this.defaultLayerImmediate);\n    this.defaultLayerComposition.pushTransparent(this.defaultLayerImmediate);\n    this.defaultLayerComposition.pushTransparent(this.defaultLayerUi);\n    this.scene.layers = this.defaultLayerComposition;\n    this._immediateLayer = this.defaultLayerImmediate;\n    this.scene.on(\"set:layers\", function(oldComp, newComp) {\n      var list = newComp.layerList;\n      var layer;\n      for (var i = 0; i < list.length; i++) {\n        layer = list[i];\n        switch(layer.id) {\n          case pc.LAYERID_DEPTH:\n            layer.onEnable = self.defaultLayerDepth.onEnable;\n            layer.onDisable = self.defaultLayerDepth.onDisable;\n            layer.onPreRenderOpaque = self.defaultLayerDepth.onPreRenderOpaque;\n            layer.onPostRenderOpaque = self.defaultLayerDepth.onPostRenderOpaque;\n            layer.depthClearOptions = self.defaultLayerDepth.depthClearOptions;\n            layer.rgbaDepthClearOptions = self.defaultLayerDepth.rgbaDepthClearOptions;\n            layer.shaderPass = self.defaultLayerDepth.shaderPass;\n            layer.onPostCull = self.defaultLayerDepth.onPostCull;\n            layer.onDrawCall = self.defaultLayerDepth.onDrawCall;\n            break;\n          case pc.LAYERID_UI:\n            layer.passThrough = self.defaultLayerUi.passThrough;\n            break;\n          case pc.LAYERID_IMMEDIATE:\n            layer.passThrough = self.defaultLayerImmediate.passThrough;\n            break;\n        }\n      }\n    });\n    this.renderer = new pc.ForwardRenderer(this.graphicsDevice);\n    this.renderer.scene = this.scene;\n    this.lightmapper = new pc.Lightmapper(this.graphicsDevice, this.root, this.scene, this.renderer, this.assets);\n    this.once(\"prerender\", this._firstBake, this);\n    this.batcher = new pc.BatchManager(this.graphicsDevice, this.root, this.scene);\n    this.once(\"prerender\", this._firstBatch, this);\n    this.keyboard = options.keyboard || null;\n    this.mouse = options.mouse || null;\n    this.touch = options.touch || null;\n    this.gamepads = options.gamepads || null;\n    this.elementInput = options.elementInput || null;\n    if (this.elementInput) {\n      this.elementInput.app = this;\n    }\n    this.vr = null;\n    if (options.vr) {\n      this._onVrChange(options.vr);\n    }\n    this._inTools = false;\n    this._skyboxLast = 0;\n    this._scriptPrefix = options.scriptPrefix || \"\";\n    this.loader.addHandler(\"animation\", new pc.AnimationHandler);\n    this.loader.addHandler(\"model\", new pc.ModelHandler(this.graphicsDevice));\n    this.loader.addHandler(\"material\", new pc.MaterialHandler(this));\n    this.loader.addHandler(\"texture\", new pc.TextureHandler(this.graphicsDevice, this.assets, this.loader));\n    this.loader.addHandler(\"text\", new pc.TextHandler);\n    this.loader.addHandler(\"json\", new pc.JsonHandler);\n    this.loader.addHandler(\"audio\", new pc.AudioHandler(this._audioManager));\n    this.loader.addHandler(\"script\", new pc.ScriptHandler(this));\n    this.loader.addHandler(\"scene\", new pc.SceneHandler(this));\n    this.loader.addHandler(\"cubemap\", new pc.CubemapHandler(this.graphicsDevice, this.assets, this.loader));\n    this.loader.addHandler(\"html\", new pc.HtmlHandler);\n    this.loader.addHandler(\"css\", new pc.CssHandler);\n    this.loader.addHandler(\"shader\", new pc.ShaderHandler);\n    this.loader.addHandler(\"hierarchy\", new pc.HierarchyHandler(this));\n    this.loader.addHandler(\"scenesettings\", new pc.SceneSettingsHandler(this));\n    this.loader.addHandler(\"folder\", new pc.FolderHandler);\n    this.loader.addHandler(\"font\", new pc.FontHandler(this.loader));\n    this.loader.addHandler(\"binary\", new pc.BinaryHandler);\n    this.loader.addHandler(\"textureatlas\", new pc.TextureAtlasHandler(this.loader));\n    this.loader.addHandler(\"sprite\", new pc.SpriteHandler(this.assets, this.graphicsDevice));\n    new pc.RigidBodyComponentSystem(this);\n    new pc.CollisionComponentSystem(this);\n    new pc.AnimationComponentSystem(this);\n    new pc.ModelComponentSystem(this);\n    new pc.CameraComponentSystem(this);\n    new pc.LightComponentSystem(this);\n    if (pc.script.legacy) {\n      new pc.ScriptLegacyComponentSystem(this);\n    } else {\n      new pc.ScriptComponentSystem(this);\n    }\n    new pc.AudioSourceComponentSystem(this, this._audioManager);\n    new pc.SoundComponentSystem(this, this._audioManager);\n    new pc.AudioListenerComponentSystem(this, this._audioManager);\n    new pc.ParticleSystemComponentSystem(this);\n    new pc.ScreenComponentSystem(this);\n    new pc.ElementComponentSystem(this);\n    new pc.SpriteComponentSystem(this);\n    new pc.ZoneComponentSystem(this);\n    this._visibilityChangeHandler = this.onVisibilityChange.bind(this);\n    if (document.hidden !== undefined) {\n      this._hiddenAttr = \"hidden\";\n      document.addEventListener(\"visibilitychange\", this._visibilityChangeHandler, false);\n    } else {\n      if (document.mozHidden !== undefined) {\n        this._hiddenAttr = \"mozHidden\";\n        document.addEventListener(\"mozvisibilitychange\", this._visibilityChangeHandler, false);\n      } else {\n        if (document.msHidden !== undefined) {\n          this._hiddenAttr = \"msHidden\";\n          document.addEventListener(\"msvisibilitychange\", this._visibilityChangeHandler, false);\n        } else {\n          if (document.webkitHidden !== undefined) {\n            this._hiddenAttr = \"webkitHidden\";\n            document.addEventListener(\"webkitvisibilitychange\", this._visibilityChangeHandler, false);\n          }\n        }\n      }\n    }\n    this.tick = makeTick(this);\n  };\n  Application._currentApplication = null;\n  Application._applications = {};\n  Application.getApplication = function(id) {\n    if (id) {\n      return Application._applications[id];\n    } else {\n      return Application._currentApplication;\n    }\n  };\n  var Progress = function(length) {\n    this.length = length;\n    this.count = 0;\n    this.inc = function() {\n      this.count++;\n    };\n    this.done = function() {\n      return this.count === this.length;\n    };\n  };\n  Application.prototype = {configure:function(url, callback) {\n    var self = this;\n    pc.http.get(url, function(err, response) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      var props = response.application_properties;\n      var assets = response.assets;\n      self._parseApplicationProperties(props, function(err) {\n        self._onVrChange(props.vr);\n        self._parseAssets(assets);\n        if (!err) {\n          callback(null);\n        } else {\n          callback(err);\n        }\n      });\n    });\n  }, preload:function(callback) {\n    var self = this;\n    self.fire(\"preload:start\");\n    var assets = this.assets.list({preload:true});\n    var _assets = new Progress(assets.length);\n    var _done = false;\n    var done = function() {\n      if (!self.graphicsDevice) {\n        return;\n      }\n      if (!_done && _assets.done()) {\n        _done = true;\n        self.fire(\"preload:end\");\n        callback();\n      }\n    };\n    var total = assets.length;\n    var count = function() {\n      return _assets.count;\n    };\n    var i;\n    if (_assets.length) {\n      var onAssetLoad = function(asset) {\n        _assets.inc();\n        self.fire(\"preload:progress\", count() / total);\n        if (_assets.done()) {\n          done();\n        }\n      };\n      var onAssetError = function(err, asset) {\n        _assets.inc();\n        self.fire(\"preload:progress\", count() / total);\n        if (_assets.done()) {\n          done();\n        }\n      };\n      for (i = 0; i < assets.length; i++) {\n        if (!assets[i].loaded) {\n          assets[i].once(\"load\", onAssetLoad);\n          assets[i].once(\"error\", onAssetError);\n          this.assets.load(assets[i]);\n        } else {\n          _assets.inc();\n          self.fire(\"preload:progress\", count() / total);\n          if (_assets.done()) {\n            done();\n          }\n        }\n      }\n    } else {\n      done();\n    }\n  }, loadSceneHierarchy:function(url, callback) {\n    var self = this;\n    var handler = this.loader.getHandler(\"hierarchy\");\n    if (this.assets && this.assets.prefix && !pc.ABSOLUTE_URL.test(url)) {\n      url = pc.path.join(this.assets.prefix, url);\n    }\n    handler.load(url, function(err, data) {\n      if (err) {\n        if (callback) {\n          callback(err);\n        }\n        return;\n      }\n      var _loaded = function() {\n        self.systems.script.preloading = true;\n        var entity = handler.open(url, data);\n        self.systems.script.preloading = false;\n        self.loader.clearCache(url, \"hierarchy\");\n        self.root.addChild(entity);\n        pc.ComponentSystem.initialize(entity);\n        pc.ComponentSystem.postInitialize(entity);\n        if (callback) {\n          callback(err, entity);\n        }\n      };\n      self._preloadScripts(data, _loaded);\n    });\n  }, loadSceneSettings:function(url, callback) {\n    if (this.assets && this.assets.prefix && !pc.ABSOLUTE_URL.test(url)) {\n      url = pc.path.join(this.assets.prefix, url);\n    }\n    this.loader.load(url, \"scenesettings\", function(err, settings) {\n      if (!err) {\n        this.applySceneSettings(settings);\n        if (callback) {\n          callback(null);\n        }\n      } else {\n        if (callback) {\n          callback(err);\n        }\n      }\n    }.bind(this));\n  }, loadScene:function(url, callback) {\n    var self = this;\n    var handler = this.loader.getHandler(\"scene\");\n    if (this.assets && this.assets.prefix && !pc.ABSOLUTE_URL.test(url)) {\n      url = pc.path.join(this.assets.prefix, url);\n    }\n    handler.load(url, function(err, data) {\n      if (!err) {\n        var _loaded = function() {\n          self.systems.script.preloading = true;\n          var scene = handler.open(url, data);\n          self.systems.script.preloading = false;\n          self.loader.clearCache(url, \"scene\");\n          self.loader.patch({resource:scene, type:\"scene\"}, self.assets);\n          self.root.addChild(scene.root);\n          if (self.systems.rigidbody && typeof Ammo !== \"undefined\") {\n            self.systems.rigidbody.setGravity(scene._gravity.x, scene._gravity.y, scene._gravity.z);\n          }\n          if (callback) {\n            callback(null, scene);\n          }\n        };\n        this._preloadScripts(data, _loaded);\n      } else {\n        if (callback) {\n          callback(err);\n        }\n      }\n    }.bind(this));\n  }, _preloadScripts:function(sceneData, callback) {\n    if (!pc.script.legacy) {\n      callback();\n      return;\n    }\n    var self = this;\n    self.systems.script.preloading = true;\n    var scripts = this._getScriptReferences(sceneData);\n    var i = 0, l = scripts.length;\n    var progress = new Progress(l);\n    var scriptUrl;\n    var regex = /^http(s)?:\\/\\//;\n    if (l) {\n      var onLoad = function(err, ScriptType) {\n        if (err) {\n          console.error(err);\n        }\n        progress.inc();\n        if (progress.done()) {\n          self.systems.script.preloading = false;\n          callback();\n        }\n      };\n      for (i = 0; i < l; i++) {\n        scriptUrl = scripts[i];\n        if (!regex.test(scriptUrl.toLowerCase()) && self._scriptPrefix) {\n          scriptUrl = pc.path.join(self._scriptPrefix, scripts[i]);\n        }\n        this.loader.load(scriptUrl, \"script\", onLoad);\n      }\n    } else {\n      self.systems.script.preloading = false;\n      callback();\n    }\n  }, _parseApplicationProperties:function(props, callback) {\n    var i;\n    var len;\n    if (!props.useDevicePixelRatio) {\n      props.useDevicePixelRatio = props.use_device_pixel_ratio;\n    }\n    if (!props.resolutionMode) {\n      props.resolutionMode = props.resolution_mode;\n    }\n    if (!props.fillMode) {\n      props.fillMode = props.fill_mode;\n    }\n    if (!props.vrPolyfillUrl) {\n      props.vrPolyfillUrl = props.vr_polyfill_url;\n    }\n    this._width = props.width;\n    this._height = props.height;\n    if (props.useDevicePixelRatio) {\n      this.graphicsDevice.maxPixelRatio = window.devicePixelRatio;\n    }\n    this.setCanvasResolution(props.resolutionMode, this._width, this._height);\n    this.setCanvasFillMode(props.fillMode, this._width, this._height);\n    if (props.vr && props.vrPolyfillUrl) {\n      if (!pc.VrManager.isSupported || pc.platform.android) {\n        props.libraries.push(props.vrPolyfillUrl);\n      }\n    }\n    if (props.layers && props.layerOrder) {\n      var composition = new pc.LayerComposition;\n      var layers = {};\n      for (var key in props.layers) {\n        var data = props.layers[key];\n        data.id = parseInt(key, 10);\n        data.enabled = data.id !== pc.LAYERID_DEPTH;\n        layers[key] = new pc.Layer(data);\n      }\n      for (i = 0, len = props.layerOrder.length; i < len; i++) {\n        var sublayer = props.layerOrder[i];\n        var layer = layers[sublayer.layer];\n        if (!layer) {\n          continue;\n        }\n        if (sublayer.transparent) {\n          composition.pushTransparent(layer);\n        } else {\n          composition.pushOpaque(layer);\n        }\n        composition.subLayerEnabled[i] = sublayer.enabled;\n      }\n      this.scene.layers = composition;\n    }\n    if (props.batchGroups) {\n      for (i = 0, len = props.batchGroups.length; i < len; i++) {\n        var grp = props.batchGroups[i];\n        this.batcher.addGroup(grp.name, grp.dynamic, grp.maxAabbSize, grp.id, grp.layers);\n      }\n    }\n    this._loadLibraries(props.libraries, callback);\n  }, _loadLibraries:function(urls, callback) {\n    var len = urls.length;\n    var count = len;\n    var self = this;\n    var regex = /^http(s)?:\\/\\//;\n    if (len) {\n      var onLoad = function(err, script) {\n        count--;\n        if (err) {\n          callback(err);\n        } else {\n          if (count === 0) {\n            self.onLibrariesLoaded();\n            callback(null);\n          }\n        }\n      };\n      for (var i = 0; i < len; ++i) {\n        var url = urls[i];\n        if (!regex.test(url.toLowerCase()) && self._scriptPrefix) {\n          url = pc.path.join(self._scriptPrefix, url);\n        }\n        this.loader.load(url, \"script\", onLoad);\n      }\n    } else {\n      callback(null);\n    }\n  }, _parseAssets:function(assets) {\n    var i, id;\n    var list = [];\n    var scriptsIndex = {};\n    if (!pc.script.legacy) {\n      for (i = 0; i < this.scriptsOrder.length; i++) {\n        id = this.scriptsOrder[i];\n        if (!assets[id]) {\n          continue;\n        }\n        scriptsIndex[id] = true;\n        list.push(assets[id]);\n      }\n      for (id in assets) {\n        if (scriptsIndex[id]) {\n          continue;\n        }\n        list.push(assets[id]);\n      }\n    } else {\n      for (id in assets) {\n        list.push(assets[id]);\n      }\n    }\n    for (i = 0; i < list.length; i++) {\n      var data = list[i];\n      var asset = new pc.Asset(data.name, data.type, data.file, data.data);\n      asset.id = parseInt(data.id);\n      asset.preload = data.preload ? data.preload : false;\n      asset.tags.add(data.tags);\n      this.assets.add(asset);\n    }\n  }, _getScriptReferences:function(scene) {\n    var i, key;\n    var priorityScripts = [];\n    if (scene.settings.priority_scripts) {\n      priorityScripts = scene.settings.priority_scripts;\n    }\n    var _scripts = [];\n    var _index = {};\n    for (i = 0; i < priorityScripts.length; i++) {\n      _scripts.push(priorityScripts[i]);\n      _index[priorityScripts[i]] = true;\n    }\n    var entities = scene.entities;\n    for (key in entities) {\n      if (!entities[key].components.script) {\n        continue;\n      }\n      var scripts = entities[key].components.script.scripts;\n      for (i = 0; i < scripts.length; i++) {\n        if (_index[scripts[i].url]) {\n          continue;\n        }\n        _scripts.push(scripts[i].url);\n        _index[scripts[i].url] = true;\n      }\n    }\n    return _scripts;\n  }, start:function() {\n    this.fire(\"start\", {timestamp:pc.now(), target:this});\n    if (!this._librariesLoaded) {\n      this.onLibrariesLoaded();\n    }\n    pc.ComponentSystem.initialize(this.root);\n    this.fire(\"initialize\");\n    pc.ComponentSystem.postInitialize(this.root);\n    this.fire(\"postinitialize\");\n    this.tick();\n  }, update:function(dt) {\n    this.graphicsDevice.updateClientRect();\n    if (this.vr) {\n      this.vr.poll();\n    }\n    if (pc.script.legacy) {\n      pc.ComponentSystem.fixedUpdate(1.0 / 60.0, this._inTools);\n    }\n    pc.ComponentSystem.update(dt, this._inTools);\n    pc.ComponentSystem.postUpdate(dt, this._inTools);\n    this.fire(\"update\", dt);\n    if (this.controller) {\n      this.controller.update(dt);\n    }\n    if (this.mouse) {\n      this.mouse.update(dt);\n    }\n    if (this.keyboard) {\n      this.keyboard.update(dt);\n    }\n    if (this.gamepads) {\n      this.gamepads.update(dt);\n    }\n  }, render:function() {\n    this.fire(\"prerender\");\n    this.root.syncHierarchy();\n    this.batcher.updateAll();\n    pc._skipRenderCounter = 0;\n    this.renderer.renderComposition(this.scene.layers);\n    this.fire(\"postrender\");\n  }, _fillFrameStats:function(now, dt, ms) {\n    var stats = this.stats.frame;\n    stats.dt = dt;\n    stats.ms = ms;\n    if (now > stats._timeToCountFrames) {\n      stats.fps = stats._fpsAccum;\n      stats._fpsAccum = 0;\n      stats._timeToCountFrames = now + 1000;\n    } else {\n      stats._fpsAccum++;\n    }\n    stats.cameras = this.renderer._camerasRendered;\n    stats.materials = this.renderer._materialSwitches;\n    stats.shaders = this.graphicsDevice._shaderSwitchesPerFrame;\n    stats.shadowMapUpdates = this.renderer._shadowMapUpdates;\n    stats.shadowMapTime = this.renderer._shadowMapTime;\n    stats.depthMapTime = this.renderer._depthMapTime;\n    stats.forwardTime = this.renderer._forwardTime;\n    var prims = this.graphicsDevice._primsPerFrame;\n    stats.triangles = prims[pc.PRIMITIVE_TRIANGLES] / 3 + Math.max(prims[pc.PRIMITIVE_TRISTRIP] - 2, 0) + Math.max(prims[pc.PRIMITIVE_TRIFAN] - 2, 0);\n    stats.cullTime = this.renderer._cullTime;\n    stats.sortTime = this.renderer._sortTime;\n    stats.skinTime = this.renderer._skinTime;\n    stats.morphTime = this.renderer._morphTime;\n    stats.instancingTime = this.renderer._instancingTime;\n    stats.otherPrimitives = 0;\n    for (var i = 0; i < prims.length; i++) {\n      if (i < pc.PRIMITIVE_TRIANGLES) {\n        stats.otherPrimitives += prims[i];\n      }\n      prims[i] = 0;\n    }\n    this.renderer._camerasRendered = 0;\n    this.renderer._materialSwitches = 0;\n    this.renderer._shadowMapUpdates = 0;\n    this.graphicsDevice._shaderSwitchesPerFrame = 0;\n    this.renderer._cullTime = 0;\n    this.renderer._sortTime = 0;\n    this.renderer._skinTime = 0;\n    this.renderer._morphTime = 0;\n    this.renderer._instancingTime = 0;\n    this.renderer._shadowMapTime = 0;\n    this.renderer._depthMapTime = 0;\n    this.renderer._forwardTime = 0;\n    stats = this.stats.drawCalls;\n    stats.forward = this.renderer._forwardDrawCalls;\n    stats.depth = 0;\n    stats.shadow = this.renderer._shadowDrawCalls;\n    stats.skinned = this.renderer._skinDrawCalls;\n    stats.immediate = 0;\n    stats.instanced = 0;\n    stats.removedByInstancing = 0;\n    stats.total = this.graphicsDevice._drawCallsPerFrame;\n    stats.misc = stats.total - (stats.forward + stats.shadow);\n    this.renderer._depthDrawCalls = 0;\n    this.renderer._shadowDrawCalls = 0;\n    this.renderer._forwardDrawCalls = 0;\n    this.renderer._skinDrawCalls = 0;\n    this.renderer._immediateRendered = 0;\n    this.renderer._instancedDrawCalls = 0;\n    this.renderer._removedByInstancing = 0;\n    this.graphicsDevice._drawCallsPerFrame = 0;\n    this.stats.misc.renderTargetCreationTime = this.graphicsDevice.renderTargetCreationTime;\n    stats = this.stats.particles;\n    stats.updatesPerFrame = stats._updatesPerFrame;\n    stats.frameTime = stats._frameTime;\n    stats._updatesPerFrame = 0;\n    stats._frameTime = 0;\n  }, setCanvasFillMode:function(mode, width, height) {\n    this._fillMode = mode;\n    this.resizeCanvas(width, height);\n  }, setCanvasResolution:function(mode, width, height) {\n    this._resolutionMode = mode;\n    if (mode === pc.RESOLUTION_AUTO && width === undefined) {\n      width = this.graphicsDevice.canvas.clientWidth;\n      height = this.graphicsDevice.canvas.clientHeight;\n    }\n    this.graphicsDevice.resizeCanvas(width, height);\n  }, isFullscreen:function() {\n    return !!document.fullscreenElement;\n  }, enableFullscreen:function(element, success, error) {\n    element = element || this.graphicsDevice.canvas;\n    var s = function() {\n      success();\n      document.removeEventListener(\"fullscreenchange\", s);\n    };\n    var e = function() {\n      error();\n      document.removeEventListener(\"fullscreenerror\", e);\n    };\n    if (success) {\n      document.addEventListener(\"fullscreenchange\", s, false);\n    }\n    if (error) {\n      document.addEventListener(\"fullscreenerror\", e, false);\n    }\n    if (element.requestFullscreen) {\n      element.requestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n    } else {\n      error();\n    }\n  }, disableFullscreen:function(success) {\n    var s = function() {\n      success();\n      document.removeEventListener(\"fullscreenchange\", s);\n    };\n    if (success) {\n      document.addEventListener(\"fullscreenchange\", s, false);\n    }\n    document.exitFullscreen();\n  }, isHidden:function() {\n    return document[this._hiddenAttr];\n  }, onVisibilityChange:function() {\n    if (this.isHidden()) {\n      this._audioManager.suspend();\n    } else {\n      this._audioManager.resume();\n    }\n  }, resizeCanvas:function(width, height) {\n    if (!this._allowResize) {\n      return;\n    }\n    var windowWidth = window.innerWidth;\n    var windowHeight = window.innerHeight;\n    if (navigator.isCocoonJS) {\n      width = windowWidth;\n      height = windowHeight;\n      this.graphicsDevice.resizeCanvas(width, height);\n    } else {\n      if (this._fillMode === pc.FILLMODE_KEEP_ASPECT) {\n        var r = this.graphicsDevice.canvas.width / this.graphicsDevice.canvas.height;\n        var winR = windowWidth / windowHeight;\n        if (r > winR) {\n          width = windowWidth;\n          height = width / r;\n        } else {\n          height = windowHeight;\n          width = height * r;\n        }\n      } else {\n        if (this._fillMode === pc.FILLMODE_FILL_WINDOW) {\n          width = windowWidth;\n          height = windowHeight;\n        } else {\n        }\n      }\n      this.graphicsDevice.canvas.style.width = width + \"px\";\n      this.graphicsDevice.canvas.style.height = height + \"px\";\n      if (this._resolutionMode === pc.RESOLUTION_AUTO) {\n        this.setCanvasResolution(pc.RESOLUTION_AUTO);\n      }\n    }\n    return {width:width, height:height};\n  }, onLibrariesLoaded:function() {\n    this._librariesLoaded = true;\n    this.systems.rigidbody.onLibraryLoaded();\n    this.systems.collision.onLibraryLoaded();\n  }, applySceneSettings:function(settings) {\n    var asset;\n    if (this.systems.rigidbody && typeof Ammo !== \"undefined\") {\n      var gravity = settings.physics.gravity;\n      this.systems.rigidbody.setGravity(gravity[0], gravity[1], gravity[2]);\n    }\n    this.scene.applySettings(settings);\n    if (settings.render.hasOwnProperty(\"skybox\")) {\n      if (settings.render.skybox) {\n        asset = this.assets.get(settings.render.skybox);\n        if (asset) {\n          this.setSkybox(asset);\n        } else {\n          this.assets.once(\"add:\" + settings.render.skybox, this.setSkybox, this);\n        }\n      } else {\n        this.setSkybox(null);\n      }\n    }\n  }, setSkybox:function(asset) {\n    if (asset) {\n      if (this._skyboxLast === asset.id) {\n        if (this.scene.skyboxMip === 0 && !asset.loadFaces) {\n          this._skyboxLoad(asset);\n        } else {\n          this._onSkyboxChange(asset);\n        }\n        return;\n      }\n      if (this._skyboxLast) {\n        this.assets.off(\"add:\" + this._skyboxLast, this.setSkybox, this);\n        this.assets.off(\"load:\" + this._skyboxLast, this._onSkyboxChange, this);\n        this.assets.off(\"remove:\" + this._skyboxLast, this._skyboxRemove, this);\n      }\n      this._skyboxLast = asset.id;\n      this.assets.on(\"load:\" + asset.id, this._onSkyboxChange, this);\n      this.assets.once(\"remove:\" + asset.id, this._skyboxRemove, this);\n      if (asset.resource) {\n        this.scene.setSkybox(asset.resources);\n      }\n      this._skyboxLoad(asset);\n    } else {\n      if (!this._skyboxLast) {\n        return;\n      }\n      this._skyboxRemove({id:this._skyboxLast});\n    }\n  }, _onVrChange:function(enabled) {\n    if (enabled) {\n      if (!this.vr) {\n        this.vr = new pc.VrManager(this);\n      }\n    } else {\n      if (this.vr) {\n        this.vr.destroy();\n        this.vr = null;\n      }\n    }\n  }, _onSkyboxChange:function(asset) {\n    this.scene.setSkybox(asset.resources);\n  }, _skyboxLoad:function(asset) {\n    if (this.scene.skyboxMip === 0) {\n      asset.loadFaces = true;\n    }\n    this.assets.load(asset);\n    this._onSkyboxChange(asset);\n  }, _skyboxRemove:function(asset) {\n    if (!this._skyboxLast) {\n      return;\n    }\n    this.assets.off(\"add:\" + asset.id, this.setSkybox, this);\n    this.assets.off(\"load:\" + asset.id, this._onSkyboxChange, this);\n    this.assets.off(\"remove:\" + asset.id, this._skyboxRemove, this);\n    this.scene.setSkybox(null);\n    this._skyboxLast = null;\n  }, _firstBake:function() {\n    this.lightmapper.bake(null, this.scene.lightmapMode);\n  }, _firstBatch:function() {\n    if (this.scene._needsStaticPrepare) {\n      this.renderer.prepareStaticMeshes(this.graphicsDevice, this.scene);\n      this.scene._needsStaticPrepare = false;\n    }\n    this.batcher.generate();\n  }, destroy:function() {\n    Application._applications[this.graphicsDevice.canvas.id] = null;\n    if (Application._currentApplication === this) {\n      Application._currentApplication = null;\n    }\n    this.off(\"librariesloaded\");\n    document.removeEventListener(\"visibilitychange\", this._visibilityChangeHandler);\n    document.removeEventListener(\"mozvisibilitychange\", this._visibilityChangeHandler);\n    document.removeEventListener(\"msvisibilitychange\", this._visibilityChangeHandler);\n    document.removeEventListener(\"webkitvisibilitychange\", this._visibilityChangeHandler);\n    this.root.destroy();\n    this.root = null;\n    if (this.mouse) {\n      this.mouse.off(\"mouseup\");\n      this.mouse.off(\"mousedown\");\n      this.mouse.off(\"mousewheel\");\n      this.mouse.off(\"mousemove\");\n      this.mouse.detach();\n      this.mouse = null;\n    }\n    if (this.keyboard) {\n      this.keyboard.off(\"keydown\");\n      this.keyboard.off(\"keyup\");\n      this.keyboard.off(\"keypress\");\n      this.keyboard.detach();\n      this.keyboard = null;\n    }\n    if (this.touch) {\n      this.touch.off(\"touchstart\");\n      this.touch.off(\"touchend\");\n      this.touch.off(\"touchmove\");\n      this.touch.off(\"touchcancel\");\n      this.touch.detach();\n      this.touch = null;\n    }\n    if (this.elementInput) {\n      this.elementInput.detach();\n      this.elementInput = null;\n    }\n    if (this.controller) {\n      this.controller = null;\n    }\n    pc.ComponentSystem.destroy();\n    var assets = this.assets.list();\n    for (var i = 0; i < assets.length; i++) {\n      assets[i].unload();\n    }\n    this.loader.destroy();\n    this.loader = null;\n    this.scene = null;\n    this.systems = [];\n    this.context = null;\n    this.graphicsDevice.clearShaderCache();\n    this.graphicsDevice.destroy();\n    this.graphicsDevice.destroyed = true;\n    this.graphicsDevice = null;\n    this.renderer = null;\n    this.tick = null;\n    if (this._audioManager) {\n      this._audioManager.destroy();\n      this._audioManager = null;\n    }\n    pc.http = new pc.Http;\n    pc.ParticleEmitter.DEFAULT_PARAM_TEXTURE = null;\n    pc.destroyPostEffectQuad();\n  }};\n  var makeTick = function(_app) {\n    var app = _app;\n    return function(timestamp) {\n      if (!app.graphicsDevice) {\n        return;\n      }\n      Application._currentApplication = app;\n      pc.app = app;\n      var now = timestamp || pc.now();\n      var ms = now - (app._time || now);\n      var dt = ms / 1000.0;\n      dt = pc.math.clamp(dt, 0, app.maxDeltaTime);\n      dt *= app.timeScale;\n      app._time = now;\n      if (app.vr && app.vr.display) {\n        app.vr.display.requestAnimationFrame(app.tick);\n      } else {\n        window.requestAnimationFrame(app.tick);\n      }\n      if (app.graphicsDevice.contextLost) {\n        return;\n      }\n      app.update(dt);\n      if (app.autoRender || app.renderNextFrame) {\n        app.render();\n        app.renderNextFrame = false;\n      }\n      _frameEndData.timestamp = pc.now();\n      _frameEndData.target = app;\n      app.fire(\"frameend\", _frameEndData);\n      app.fire(\"frameEnd\", _frameEndData);\n      if (app.vr && app.vr.display && app.vr.display.presenting) {\n        app.vr.display.submitFrame();\n      }\n    };\n  };\n  var _frameEndData = {};\n  return {FILLMODE_NONE:\"NONE\", FILLMODE_FILL_WINDOW:\"FILL_WINDOW\", FILLMODE_KEEP_ASPECT:\"KEEP_ASPECT\", RESOLUTION_AUTO:\"AUTO\", RESOLUTION_FIXED:\"FIXED\", Application:Application};\n}());\npc.ApplicationStats = function(device) {\n  this.frame = {fps:0, ms:0, dt:0, updateStart:0, updateTime:0, renderStart:0, renderTime:0, physicsStart:0, physicsTime:0, cullTime:0, sortTime:0, skinTime:0, morphTime:0, instancingTime:0, triangles:0, otherPrimitives:0, shaders:0, materials:0, cameras:0, shadowMapUpdates:0, shadowMapTime:0, depthMapTime:0, forwardTime:0, _timeToCountFrames:0, _fpsAccum:0};\n  this.drawCalls = {forward:0, depth:0, shadow:0, immediate:0, misc:0, total:0, skinned:0, instanced:0, removedByInstancing:0};\n  this.misc = {renderTargetCreationTime:0};\n  this.particles = {updatesPerFrame:0, _updatesPerFrame:0, frameTime:0, _frameTime:0};\n  this.vram = device._vram;\n  this.shaders = device._shaderStats;\n  Object.defineProperty(this.vram, \"totalUsed\", {get:function() {\n    return this.tex + this.vb + this.ib;\n  }});\n  Object.defineProperty(this, \"scene\", {get:function() {\n    return pc.Application._currentApplication.scene._stats;\n  }});\n  Object.defineProperty(this, \"lightmapper\", {get:function() {\n    return pc.Application._currentApplication.lightmapper._stats;\n  }});\n  Object.defineProperty(this, \"batcher\", {get:function() {\n    return pc.Application._currentApplication.batcher._stats;\n  }});\n  pc.events.attach(this);\n};\npc.extend(pc, function() {\n  var ComponentSystemRegistry = function() {\n  };\n  ComponentSystemRegistry.prototype = {add:function(name, system) {\n    if (!this[name]) {\n      this[name] = system;\n      system.name = name;\n    } else {\n      throw new Error(pc.string.format(\"ComponentSystem name '{0}' already registered or not allowed\", name));\n    }\n  }, remove:function(name) {\n    if (!this[name]) {\n      throw new Error(pc.string.format(\"No ComponentSystem named '{0}' registered\", name));\n    }\n    delete this[name];\n  }, list:function() {\n    var list = Object.keys(this);\n    var defaultPriority = 1;\n    var priorities = {\"collisionrect\":0.5, \"collisioncircle\":0.5};\n    list.sort(function(a, b) {\n      var pa = priorities[a] || defaultPriority;\n      var pb = priorities[b] || defaultPriority;\n      if (pa < pb) {\n        return -1;\n      } else {\n        if (pa > pb) {\n          return 1;\n        }\n      }\n      return 0;\n    });\n    return list.map(function(key) {\n      return this[key];\n    }, this);\n  }, getComponentSystemOrder:function() {\n    var index;\n    var names = Object.keys(this);\n    index = names.indexOf(\"collisionrect\");\n    names.splice(index, 1);\n    names.unshift(\"collisionrect\");\n    index = names.indexOf(\"collisioncircle\");\n    names.splice(index, 1);\n    names.unshift(\"collisioncircle\");\n    return names;\n  }};\n  return {ComponentSystemRegistry:ComponentSystemRegistry};\n}());\npc.extend(pc, function() {\n  var ComponentSystem = function(app) {\n    this.app = app;\n    this.dataStore = {};\n    this.schema = [];\n    pc.events.attach(this);\n  };\n  pc.extend(ComponentSystem, {initialize:function(root) {\n    ComponentSystem.fire(\"initialize\", root);\n  }, postInitialize:function(root) {\n    ComponentSystem.fire(\"postInitialize\", root);\n  }, update:function(dt, inTools) {\n    if (inTools) {\n      ComponentSystem.fire(\"toolsUpdate\", dt);\n    } else {\n      ComponentSystem.fire(\"update\", dt);\n    }\n  }, fixedUpdate:function(dt, inTools) {\n    ComponentSystem.fire(\"fixedUpdate\", dt);\n  }, postUpdate:function(dt, inTools) {\n    ComponentSystem.fire(\"postUpdate\", dt);\n  }});\n  ComponentSystem.prototype = {get store() {\n    return this.dataStore;\n  }, addComponent:function(entity, data) {\n    var component = new this.ComponentType(this, entity);\n    var componentData = new this.DataType;\n    data = data || {};\n    this.dataStore[entity._guid] = {entity:entity, data:componentData};\n    entity[this.id] = component;\n    entity.c[this.id] = component;\n    this.initializeComponentData(component, data, []);\n    this.fire(\"add\", entity, component);\n    return component;\n  }, removeComponent:function(entity) {\n    var record = this.dataStore[entity._guid];\n    var component = entity.c[this.id];\n    this.fire(\"beforeremove\", entity, component);\n    delete this.dataStore[entity._guid];\n    delete entity[this.id];\n    delete entity.c[this.id];\n    this.fire(\"remove\", entity, record.data);\n  }, cloneComponent:function(entity, clone) {\n    var src = this.dataStore[entity._guid];\n    return this.addComponent(clone, src.data);\n  }, initializeComponentData:function(component, data, properties) {\n    data = data || {};\n    properties.forEach(function(value) {\n      if (data[value] !== undefined) {\n        component[value] = data[value];\n      } else {\n        component[value] = component.data[value];\n      }\n    }, this);\n    if (component.enabled && component.entity.enabled) {\n      component.onEnable();\n    }\n  }};\n  pc.events.attach(ComponentSystem);\n  ComponentSystem.destroy = function() {\n    ComponentSystem.off(\"initialize\");\n    ComponentSystem.off(\"postInitialize\");\n    ComponentSystem.off(\"toolsUpdate\");\n    ComponentSystem.off(\"update\");\n    ComponentSystem.off(\"fixedUpdate\");\n    ComponentSystem.off(\"postUpdate\");\n  };\n  return {ComponentSystem:ComponentSystem};\n}());\npc.extend(pc, function() {\n  var Component = function(system, entity) {\n    this.system = system;\n    this.entity = entity;\n    pc.events.attach(this);\n    if (this.system.schema && !this._accessorsBuilt) {\n      this.buildAccessors(this.system.schema);\n    }\n    this.on(\"set\", function(name, oldValue, newValue) {\n      this.fire(\"set_\" + name, name, oldValue, newValue);\n    });\n    this.on(\"set_enabled\", this.onSetEnabled, this);\n  };\n  Component._buildAccessors = function(obj, schema) {\n    schema.forEach(function(prop) {\n      Object.defineProperty(obj, prop, {get:function() {\n        return this.data[prop];\n      }, set:function(value) {\n        var data = this.data;\n        var oldValue = data[prop];\n        data[prop] = value;\n        this.fire(\"set\", prop, oldValue, value);\n      }, configurable:true});\n    });\n    obj._accessorsBuilt = true;\n  };\n  Component.prototype = {get data() {\n    var record = this.system.store[this.entity._guid];\n    if (record) {\n      return record.data;\n    } else {\n      return null;\n    }\n  }, buildAccessors:function(schema) {\n    Component._buildAccessors(this, schema);\n  }, onSetEnabled:function(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      if (this.entity.enabled) {\n        if (newValue) {\n          this.onEnable();\n        } else {\n          this.onDisable();\n        }\n      }\n    }\n  }, onEnable:function() {\n  }, onDisable:function() {\n  }, onPostStateChange:function() {\n  }};\n  return {Component:Component};\n}());\npc.extend(pc, function() {\n  var ComponentData = function() {\n  };\n  return {ComponentData:ComponentData};\n}());\npc.extend(pc, function() {\n  var AnimationComponent = function(system, entity) {\n    this.animationsIndex = {};\n    this.on(\"set_animations\", this.onSetAnimations, this);\n    this.on(\"set_assets\", this.onSetAssets, this);\n    this.on(\"set_loop\", this.onSetLoop, this);\n  };\n  AnimationComponent = pc.inherits(AnimationComponent, pc.Component);\n  pc.extend(AnimationComponent.prototype, {play:function(name, blendTime) {\n    if (!this.data.animations[name]) {\n      console.error(pc.string.format(\"Trying to play animation '{0}' which doesn't exist\", name));\n      return;\n    }\n    if (!this.enabled || !this.entity.enabled) {\n      return;\n    }\n    blendTime = blendTime || 0;\n    var data = this.data;\n    data.prevAnim = data.currAnim;\n    data.currAnim = name;\n    if (data.model) {\n      data.blending = blendTime > 0 && data.prevAnim;\n      if (data.blending) {\n        data.blendTime = blendTime;\n        data.blendTimeRemaining = blendTime;\n        data.fromSkel.animation = data.animations[data.prevAnim];\n        data.fromSkel.addTime(data.skeleton._time);\n        data.toSkel.animation = data.animations[data.currAnim];\n      } else {\n        data.skeleton.animation = data.animations[data.currAnim];\n      }\n    }\n    data.playing = true;\n  }, getAnimation:function(name) {\n    return this.data.animations[name];\n  }, setModel:function(model) {\n    var data = this.data;\n    if (model) {\n      var graph = model.getGraph();\n      data.fromSkel = new pc.Skeleton(graph);\n      data.toSkel = new pc.Skeleton(graph);\n      data.skeleton = new pc.Skeleton(graph);\n      data.skeleton.looping = data.loop;\n      data.skeleton.setGraph(graph);\n    }\n    data.model = model;\n    if (data.animations && data.currAnim && data.animations[data.currAnim]) {\n      this.play(data.currAnim);\n    }\n  }, loadAnimationAssets:function(ids) {\n    if (!ids || !ids.length) {\n      return;\n    }\n    var self = this;\n    var assets = this.system.app.assets;\n    var i, l = ids.length;\n    var onAssetReady = function(asset) {\n      self.animations[asset.name] = asset.resource;\n      self.animationsIndex[asset.id] = asset.name;\n      self.animations = self.animations;\n    };\n    var onAssetAdd = function(asset) {\n      asset.off(\"change\", self.onAssetChanged, self);\n      asset.on(\"change\", self.onAssetChanged, self);\n      asset.off(\"remove\", self.onAssetRemoved, self);\n      asset.on(\"remove\", self.onAssetRemoved, self);\n      if (asset.resource) {\n        onAssetReady(asset);\n      } else {\n        asset.once(\"load\", onAssetReady, self);\n        if (self.enabled && self.entity.enabled) {\n          assets.load(asset);\n        }\n      }\n    };\n    for (i = 0; i < l; i++) {\n      var asset = assets.get(ids[i]);\n      if (asset) {\n        onAssetAdd(asset);\n      } else {\n        assets.on(\"add:\" + ids[i], onAssetAdd);\n      }\n    }\n  }, onAssetChanged:function(asset, attribute, newValue, oldValue) {\n    if (attribute === \"resource\") {\n      if (newValue) {\n        this.animations[asset.name] = newValue;\n        this.animationsIndex[asset.id] = asset.name;\n        if (this.data.currAnim === asset.name) {\n          if (this.data.playing && this.data.enabled && this.entity.enabled) {\n            this.play(asset.name, 0);\n          }\n        }\n      } else {\n        delete this.animations[asset.name];\n        delete this.animationsIndex[asset.id];\n      }\n    }\n  }, onAssetRemoved:function(asset) {\n    asset.off(\"remove\", this.onAssetRemoved, this);\n    if (this.animations && this.animations[asset.name]) {\n      delete this.animations[asset.name];\n      delete this.animationsIndex[asset.id];\n      if (this.data.currAnim === asset.name) {\n        this._stopCurrentAnimation();\n      }\n    }\n  }, _stopCurrentAnimation:function() {\n    this.data.currAnim = null;\n    this.data.playing = false;\n    if (this.data.skeleton) {\n      this.data.skeleton.currentTime = 0;\n      this.data.skeleton.animation = null;\n    }\n  }, onSetAnimations:function(name, oldValue, newValue) {\n    var data = this.data;\n    var modelComponent = this.entity.model;\n    if (modelComponent) {\n      var m = modelComponent.model;\n      if (m && m !== data.model) {\n        this.entity.animation.setModel(m);\n      }\n    }\n    if (!data.currAnim && data.activate && data.enabled && this.entity.enabled) {\n      for (var animName in data.animations) {\n        this.play(animName, 0);\n        break;\n      }\n    }\n  }, onSetAssets:function(name, oldValue, newValue) {\n    if (oldValue && oldValue.length) {\n      for (var i = 0; i < oldValue.length; i++) {\n        if (oldValue[i]) {\n          var asset = this.system.app.assets.get(oldValue[i]);\n          if (asset) {\n            asset.off(\"change\", this.onAssetChanged, this);\n            asset.off(\"remove\", this.onAssetRemoved, this);\n            var animName = this.animationsIndex[asset.id];\n            if (this.data.currAnim === animName) {\n              this._stopCurrentAnimation();\n            }\n            delete this.animations[animName];\n            delete this.animationsIndex[asset.id];\n          }\n        }\n      }\n    }\n    var ids = newValue.map(function(value) {\n      if (value instanceof pc.Asset) {\n        return value.id;\n      } else {\n        return value;\n      }\n    });\n    this.loadAnimationAssets(ids);\n  }, onSetLoop:function(name, oldValue, newValue) {\n    if (this.data.skeleton) {\n      this.data.skeleton.looping = this.data.loop;\n    }\n  }, onSetCurrentTime:function(name, oldValue, newValue) {\n    this.data.skeleton.currentTime = newValue;\n    this.data.skeleton.addTime(0);\n    this.data.skeleton.updateGraph();\n  }, onEnable:function() {\n    AnimationComponent._super.onEnable.call(this);\n    var assets = this.data.assets;\n    var registry = this.system.app.assets;\n    if (assets) {\n      for (var i = 0, len = assets.length; i < len; i++) {\n        var asset = assets[i];\n        if (!(asset instanceof pc.Asset)) {\n          asset = registry.get(asset);\n        }\n        if (asset && !asset.resource) {\n          registry.load(asset);\n        }\n      }\n    }\n    if (this.data.activate && !this.data.currAnim) {\n      for (var animName in this.data.animations) {\n        this.play(animName, 0);\n        break;\n      }\n    }\n  }, onBeforeRemove:function() {\n    for (var i = 0; i < this.assets.length; i++) {\n      var asset = this.system.app.assets.get(this.assets[i]);\n      if (!asset) {\n        continue;\n      }\n      asset.off(\"change\", this.onAssetChanged, this);\n      asset.off(\"remove\", this.onAssetRemoved, this);\n    }\n    delete this.data.animation;\n    delete this.data.skeleton;\n    delete this.data.fromSkel;\n    delete this.data.toSkel;\n  }});\n  Object.defineProperties(AnimationComponent.prototype, {currentTime:{get:function() {\n    return this.data.skeleton._time;\n  }, set:function(currentTime) {\n    this.data.skeleton.currentTime = currentTime;\n    this.data.skeleton.addTime(0);\n    this.data.skeleton.updateGraph();\n  }}, duration:{get:function() {\n    return this.data.animations[this.data.currAnim].duration;\n  }}});\n  return {AnimationComponent:AnimationComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"assets\", \"speed\", \"loop\", \"activate\", \"animations\", \"skeleton\", \"model\", \"prevAnim\", \"currAnim\", \"fromSkel\", \"toSkel\", \"blending\", \"blendTimeRemaining\", \"playing\"];\n  var AnimationComponentSystem = function AnimationComponentSystem(app) {\n    this.id = \"animation\";\n    this.description = \"Specifies the animation assets that can run on the model specified by the Entity's model Component.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.AnimationComponent;\n    this.DataType = pc.AnimationComponentData;\n    this.schema = _schema;\n    this.on(\"beforeremove\", this.onBeforeRemove, this);\n    this.on(\"update\", this.onUpdate, this);\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n  };\n  AnimationComponentSystem = pc.inherits(AnimationComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.AnimationComponent.prototype, _schema);\n  pc.extend(AnimationComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    properties = [\"activate\", \"enabled\", \"loop\", \"speed\", \"assets\"];\n    AnimationComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, cloneComponent:function(entity, clone) {\n    var key;\n    this.addComponent(clone, {});\n    clone.animation.data.assets = pc.extend([], entity.animation.assets);\n    clone.animation.data.speed = entity.animation.speed;\n    clone.animation.data.loop = entity.animation.loop;\n    clone.animation.data.activate = entity.animation.activate;\n    clone.animation.data.enabled = entity.animation.enabled;\n    var clonedAnimations = {};\n    var animations = entity.animation.animations;\n    for (key in animations) {\n      if (animations.hasOwnProperty(key)) {\n        clonedAnimations[key] = animations[key];\n      }\n    }\n    clone.animation.animations = clonedAnimations;\n    var clonedAnimationsIndex = {};\n    var animationsIndex = entity.animation.animationsIndex;\n    for (key in animationsIndex) {\n      if (animationsIndex.hasOwnProperty(key)) {\n        clonedAnimationsIndex[key] = animationsIndex[key];\n      }\n    }\n    clone.animation.animationsIndex = clonedAnimationsIndex;\n  }, onBeforeRemove:function(entity, component) {\n    component.onBeforeRemove();\n  }, onUpdate:function(dt) {\n    var components = this.store;\n    for (var id in components) {\n      if (components.hasOwnProperty(id)) {\n        var component = components[id];\n        var componentData = component.data;\n        if (componentData.enabled && componentData.playing && component.entity.enabled) {\n          var skeleton = componentData.skeleton;\n          if (skeleton !== null && componentData.model !== null) {\n            if (componentData.blending) {\n              componentData.blendTimeRemaining -= dt;\n              if (componentData.blendTimeRemaining < 0.0) {\n                componentData.blendTimeRemaining = 0.0;\n              }\n              var alpha = 1.0 - componentData.blendTimeRemaining / componentData.blendTime;\n              skeleton.blend(componentData.fromSkel, componentData.toSkel, alpha);\n            } else {\n              var delta = dt * componentData.speed;\n              skeleton.addTime(delta);\n              if (skeleton._time === skeleton._animation.duration && !componentData.loop) {\n                componentData.playing = false;\n              }\n            }\n            if (componentData.blending && componentData.blendTimeRemaining === 0.0) {\n              componentData.blending = false;\n              skeleton.animation = componentData.toSkel._animation;\n            }\n            skeleton.updateGraph();\n          }\n        }\n      }\n    }\n  }});\n  return {AnimationComponentSystem:AnimationComponentSystem};\n}());\npc.extend(pc, function() {\n  var AnimationComponentData = function() {\n    this.assets = [];\n    this.speed = 1.0;\n    this.loop = true;\n    this.activate = true;\n    this.enabled = true;\n    this.animations = {};\n    this.skeleton = null;\n    this.model = null;\n    this.prevAnim = null;\n    this.currAnim = null;\n    this.fromSkel = null;\n    this.toSkel = null;\n    this.blending = false;\n    this.blendTime = 0;\n    this.blendTimeRemaining = 0;\n    this.playing = false;\n  };\n  AnimationComponentData = pc.inherits(AnimationComponentData, pc.ComponentData);\n  return {AnimationComponentData:AnimationComponentData};\n}());\npc.extend(pc, function() {\n  var ModelComponent = function ModelComponent(system, entity) {\n    this.on(\"set_type\", this.onSetType, this);\n    this.on(\"set_asset\", this.onSetAsset, this);\n    this.on(\"set_castShadows\", this.onSetCastShadows, this);\n    this.on(\"set_receiveShadows\", this.onSetReceiveShadows, this);\n    this.on(\"set_castShadowsLightmap\", this.onSetCastShadowsLightmap, this);\n    this.on(\"set_lightmapped\", this.onSetLightmapped, this);\n    this.on(\"set_lightmapSizeMultiplier\", this.onSetLightmapSizeMultiplier, this);\n    this.on(\"set_isStatic\", this.onSetIsStatic, this);\n    this.on(\"set_model\", this.onSetModel, this);\n    this.on(\"set_material\", this.onSetMaterial, this);\n    this.on(\"set_mapping\", this.onSetMapping, this);\n    this.on(\"set_layers\", this.onSetLayers, this);\n    this.on(\"set_batchGroupId\", this.onSetBatchGroupId, this);\n    Object.defineProperty(this, \"materialAsset\", {set:this.setMaterialAsset.bind(this), get:this.getMaterialAsset.bind(this)});\n    this._assetOld = 0;\n    this._materialEvents = null;\n    this._dirtyModelAsset = false;\n    this._dirtyMaterialAsset = false;\n    this._clonedModel = false;\n  };\n  ModelComponent = pc.inherits(ModelComponent, pc.Component);\n  pc.extend(ModelComponent.prototype, {setVisible:function(visible) {\n    console.warn(\"WARNING: setVisible: Function is deprecated. Set enabled property instead.\");\n    this.enabled = visible;\n  }, _onAssetLoad:function(asset) {\n    if (asset.resource) {\n      this._onModelLoaded(asset.resource.clone());\n      this._clonedModel = true;\n    }\n  }, addModelToLayers:function() {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addMeshInstances(this.meshInstances);\n    }\n  }, removeModelFromLayers:function(model) {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeMeshInstances(model.meshInstances);\n    }\n  }, _onAssetUnload:function(asset) {\n    if (!this.model) {\n      return;\n    }\n    this.removeModelFromLayers(this.model);\n    this.model = null;\n  }, _onAssetChange:function(asset, attribute, newValue, oldValue) {\n    if (attribute === \"data\") {\n      this.mapping = this.data.mapping;\n    }\n  }, _onAssetRemove:function(asset) {\n    if (this.asset === asset.id) {\n      this.asset = null;\n    }\n  }, _setModelAsset:function(id) {\n    if (this._assetOld === id) {\n      return;\n    }\n    var assets = this.system.app.assets;\n    var asset = id !== null ? assets.get(id) : null;\n    this._dirtyModelAsset = true;\n    this._onModelAsset(asset || null);\n    if (!asset && id !== null) {\n      assets.once(\"add:\" + id, this._onModelAsset, this);\n    }\n  }, _onModelAsset:function(asset) {\n    var assets = this.system.app.assets;\n    if (this._assetOld) {\n      assets.off(\"add:\" + this._assetOld, this._onModelAsset, this);\n      var assetOld = assets.get(this._assetOld);\n      if (assetOld) {\n        assetOld.off(\"load\", this._onAssetLoad, this);\n        assetOld.off(\"unload\", this._onAssetUnload, this);\n        assetOld.off(\"change\", this._onAssetChange, this);\n        assetOld.off(\"remove\", this._onAssetRemove, this);\n      }\n    }\n    this._assetOld = asset ? asset.id : 0;\n    if (asset) {\n      asset.on(\"load\", this._onAssetLoad, this);\n      asset.on(\"unload\", this._onAssetUnload, this);\n      asset.on(\"change\", this._onAssetChange, this);\n      asset.on(\"remove\", this._onAssetRemove, this);\n      if (asset.resource) {\n        this._dirtyModelAsset = false;\n        this._onModelLoaded(asset.resource.clone());\n        this._clonedModel = true;\n      } else {\n        if (this.enabled && this.entity.enabled) {\n          this._dirtyModelAsset = false;\n          assets.load(asset);\n        }\n      }\n    } else {\n      this._dirtyModelAsset = false;\n    }\n  }, remove:function() {\n    this._onModelAsset(null);\n  }, _onModelLoaded:function(model) {\n    if (this.data.type === \"asset\") {\n      this.model = model;\n    }\n  }, onSetType:function(name, oldValue, newValue) {\n    var data = this.data;\n    if (newValue) {\n      var mesh = null;\n      this._area = null;\n      if (newValue === \"asset\") {\n        if (this.data.asset !== null) {\n          this._setModelAsset(this.data.asset);\n        } else {\n          this.model = null;\n        }\n      } else {\n        switch(newValue) {\n          case \"box\":\n            mesh = this.system.box;\n            this._area = {x:2, y:2, z:2, uv:2.0 / 3};\n            break;\n          case \"capsule\":\n            mesh = this.system.capsule;\n            this._area = {x:Math.PI * 2, y:Math.PI, z:Math.PI * 2, uv:1.0 / 3 + 1.0 / 3 / 3 * 2};\n            break;\n          case \"sphere\":\n            mesh = this.system.sphere;\n            this._area = {x:Math.PI, y:Math.PI, z:Math.PI, uv:1};\n            break;\n          case \"cone\":\n            mesh = this.system.cone;\n            this._area = {x:2.54, y:2.54, z:2.54, uv:1.0 / 3 + 1.0 / 3 / 3};\n            break;\n          case \"cylinder\":\n            mesh = this.system.cylinder;\n            this._area = {x:Math.PI, y:0.79 * 2, z:Math.PI, uv:1.0 / 3 + 1.0 / 3 / 3 * 2};\n            break;\n          case \"plane\":\n            mesh = this.system.plane;\n            this._area = {x:0, y:1, z:0, uv:1};\n            break;\n          default:\n            throw new Error(\"Invalid model type: \" + newValue);\n        }\n        var node = new pc.GraphNode;\n        var model = new pc.Model;\n        model.graph = node;\n        model.meshInstances = [new pc.MeshInstance(node, mesh, data.material)];\n        if (this.system._inTools) {\n          model.generateWireframe();\n        }\n        this.model = model;\n        this.asset = null;\n      }\n    }\n  }, onSetAsset:function(name, oldValue, newValue) {\n    var id = null;\n    if (this.data.type === \"asset\") {\n      if (newValue !== null) {\n        id = newValue;\n        if (newValue instanceof pc.Asset) {\n          this.data.asset = newValue.id;\n          id = newValue.id;\n        }\n      } else {\n        this.model = null;\n      }\n    }\n    if (id === null) {\n      this.data.asset = null;\n    }\n    this._setModelAsset(id);\n  }, onSetCastShadows:function(name, oldValue, newValue) {\n    var layer;\n    var model = this.data.model;\n    if (model) {\n      var layers = this.layers;\n      var scene = this.system.app.scene;\n      if (oldValue && !newValue) {\n        for (i = 0; i < layers.length; i++) {\n          layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n          if (!layer) {\n            continue;\n          }\n          layer.removeShadowCasters(model.meshInstances);\n        }\n      }\n      var meshInstances = model.meshInstances;\n      for (var i = 0; i < meshInstances.length; i++) {\n        meshInstances[i].castShadow = newValue;\n      }\n      if (!oldValue && newValue) {\n        for (i = 0; i < layers.length; i++) {\n          layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n          if (!layer) {\n            continue;\n          }\n          layer.addShadowCasters(model.meshInstances);\n        }\n      }\n    }\n  }, onSetCastShadowsLightmap:function(name, oldValue, newValue) {\n  }, onSetLightmapped:function(name, oldValue, newValue) {\n    var i, m, mask;\n    if (this.data.model) {\n      var rcv = this.data.model.meshInstances;\n      if (newValue) {\n        for (i = 0; i < rcv.length; i++) {\n          m = rcv[i];\n          mask = m.mask;\n          m.mask = (mask | pc.MASK_BAKED) & ~(pc.MASK_DYNAMIC | pc.MASK_LIGHTMAP);\n        }\n      } else {\n        for (i = 0; i < rcv.length; i++) {\n          m = rcv[i];\n          m.deleteParameter(\"texture_lightMap\");\n          m.deleteParameter(\"texture_dirLightMap\");\n          m._shaderDefs &= ~pc.SHADERDEF_LM;\n          mask = m.mask;\n          m.mask = (mask | pc.MASK_DYNAMIC) & ~(pc.MASK_BAKED | pc.MASK_LIGHTMAP);\n        }\n      }\n    }\n  }, onSetLightmapSizeMultiplier:function(name, oldValue, newValue) {\n    this.data.lightmapSizeMultiplier = newValue;\n  }, onSetIsStatic:function(name, oldValue, newValue) {\n    var i, m;\n    if (this.data.model) {\n      var rcv = this.data.model.meshInstances;\n      for (i = 0; i < rcv.length; i++) {\n        m = rcv[i];\n        m.isStatic = newValue;\n      }\n    }\n  }, onSetLayers:function(name, oldValue, newValue) {\n    if (!this.meshInstances) {\n      return;\n    }\n    var i, layer;\n    for (i = 0; i < oldValue.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(oldValue[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeMeshInstances(this.meshInstances);\n    }\n    if (!this.enabled || !this.entity.enabled) {\n      return;\n    }\n    for (i = 0; i < newValue.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(newValue[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addMeshInstances(this.meshInstances);\n    }\n  }, onLayersChanged:function(oldComp, newComp) {\n    this.addModelToLayers();\n    oldComp.off(\"add\", this.onLayerAdded, this);\n    oldComp.off(\"remove\", this.onLayerRemoved, this);\n    newComp.on(\"add\", this.onLayerAdded, this);\n    newComp.on(\"remove\", this.onLayerRemoved, this);\n  }, onLayerAdded:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.addMeshInstances(this.meshInstances);\n  }, onLayerRemoved:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.removeMeshInstances(this.meshInstances);\n  }, onSetBatchGroupId:function(name, oldValue, newValue) {\n    if (oldValue >= 0) {\n      this.system.app.batcher._markGroupDirty(oldValue);\n    }\n    if (newValue >= 0) {\n      this.system.app.batcher._markGroupDirty(newValue);\n    }\n    if (newValue < 0 && oldValue >= 0 && this.enabled && this.entity.enabled) {\n      this.addModelToLayers();\n    }\n  }, onSetModel:function(name, oldValue, newValue) {\n    if (oldValue) {\n      this.removeModelFromLayers(oldValue);\n      this.entity.removeChild(oldValue.getGraph());\n      delete oldValue._entity;\n      if (this._clonedModel) {\n        oldValue.destroy();\n        this._clonedModel = false;\n      }\n    }\n    if (newValue) {\n      var componentData = this.data;\n      var meshInstances = newValue.meshInstances;\n      for (var i = 0; i < meshInstances.length; i++) {\n        meshInstances[i].castShadow = componentData.castShadows;\n        meshInstances[i].receiveShadow = componentData.receiveShadows;\n      }\n      this.lightmapped = componentData.lightmapped;\n      this.isStatic = componentData.isStatic;\n      this.entity.addChild(newValue.graph);\n      if (this.enabled && this.entity.enabled) {\n        this.addModelToLayers();\n      }\n      newValue._entity = this.entity;\n      if (this.entity.animation) {\n        this.entity.animation.setModel(newValue);\n      }\n      if (this.data.type === \"asset\") {\n        this.mapping = this.data.mapping;\n      } else {\n        this._unsetMaterialEvents();\n      }\n    } else {\n      this._unsetMaterialEvents();\n    }\n  }, _onMaterialAssetRemove:function(asset) {\n    var assets = this.system.app.assets;\n    var id = isNaN(asset) ? asset.id : asset;\n    if (asset && isNaN(asset) && asset.resource === this.material) {\n      this.material = pc.ModelHandler.DEFAULT_MATERIAL;\n    }\n    assets.off(\"add:\" + id, this._onMaterialAssetAdd, this);\n    assets.off(\"load:\" + id, this._onMaterialAssetLoad, this);\n    assets.off(\"unload:\" + id, this._onMaterialAssetUnload, this);\n    assets.off(\"remove:\" + id, this._onMaterialAssetRemove, this);\n  }, _onMaterialAssetAdd:function(asset) {\n    var assets = this.system.app.assets;\n    if (asset.resource) {\n      this.material = asset.resource;\n      this._dirtyMaterialAsset = false;\n    } else {\n      if (this.enabled && this.entity.enabled) {\n        this._dirtyMaterialAsset = false;\n        assets.load(asset);\n      }\n    }\n  }, _onMaterialAssetLoad:function(asset) {\n    var assets = this.system.app.assets;\n    if (asset.resource) {\n      this.material = asset.resource;\n      this._dirtyMaterialAsset = false;\n    } else {\n      if (this.enabled && this.entity.enabled) {\n        this._dirtyMaterialAsset = false;\n        assets.load(asset);\n      }\n    }\n  }, _onMaterialAssetUnload:function(asset) {\n    if (asset && isNaN(asset) && asset.resource === this.material) {\n      this.material = pc.ModelHandler.DEFAULT_MATERIAL;\n    }\n  }, setMaterialAsset:function(value) {\n    this._dirtyMaterialAsset = true;\n    var id = typeof value === \"number\" || !value ? value : value.id;\n    var assets = this.system.app.assets;\n    var self = this;\n    if (this.data.materialAsset !== id) {\n      if (this.data.materialAsset) {\n        this._onMaterialAssetRemove(this.data.materialAsset);\n      }\n      if (id) {\n        assets.on(\"load:\" + id, this._onMaterialAssetLoad, this);\n        assets.on(\"unload:\" + id, this._onMaterialAssetUnload, this);\n        assets.on(\"remove:\" + id, this._onMaterialAssetRemove, this);\n      }\n    }\n    if (id !== undefined && id !== null) {\n      var asset = assets.get(id);\n      if (asset) {\n        this._onMaterialAssetLoad(asset);\n      }\n      assets.once(\"add:\" + id, this._onMaterialAssetAdd, this);\n    } else {\n      if (id === null) {\n        self.material = pc.ModelHandler.DEFAULT_MATERIAL;\n        self._dirtyMaterialAsset = false;\n      }\n    }\n    var valueOld = this.data.materialAsset;\n    this.data.materialAsset = id;\n    this.fire(\"set\", \"materialAsset\", valueOld, id);\n  }, getMaterialAsset:function() {\n    return this.system.app.assets.get(this.data.materialAsset);\n  }, onSetMaterial:function(name, oldValue, newValue) {\n    if (newValue !== oldValue) {\n      this.data.material = newValue;\n      if (this.data.model && this.data.type !== \"asset\") {\n        var meshInstances = this.data.model.meshInstances;\n        for (var i = 0; i < meshInstances.length; i++) {\n          meshInstances[i].material = newValue;\n        }\n      }\n    }\n  }, onSetMapping:function(name, oldValue, newValue) {\n    if (this.data.type !== \"asset\" || !this.data.model) {\n      return;\n    }\n    this._unsetMaterialEvents();\n    if (!newValue) {\n      newValue = {};\n    }\n    var meshInstances = this.data.model.meshInstances;\n    var modelAsset = this.asset ? this.system.app.assets.get(this.asset) : null;\n    var assetMapping = modelAsset ? modelAsset.data.mapping : null;\n    for (var i = 0, len = meshInstances.length; i < len; i++) {\n      if (newValue[i] !== undefined) {\n        if (newValue[i]) {\n          this._loadAndSetMeshInstanceMaterial(newValue[i], meshInstances[i], i);\n        } else {\n          meshInstances[i].material = pc.ModelHandler.DEFAULT_MATERIAL;\n        }\n      } else {\n        if (assetMapping) {\n          if (assetMapping[i] && (assetMapping[i].material || assetMapping[i].path)) {\n            var idOrPath = assetMapping[i].material || assetMapping[i].path;\n            this._loadAndSetMeshInstanceMaterial(idOrPath, meshInstances[i], i);\n          } else {\n            meshInstances[i].material = pc.ModelHandler.DEFAULT_MATERIAL;\n          }\n        }\n      }\n    }\n  }, _setMaterialEvent:function(index, event, id, handler) {\n    var evt = event + \":\" + id;\n    this.system.app.assets.on(evt, handler, this);\n    if (!this._materialEvents) {\n      this._materialEvents = [];\n    }\n    if (!this._materialEvents[index]) {\n      this._materialEvents[index] = {};\n    }\n    this._materialEvents[index][evt] = {id:id, handler:handler};\n  }, _unsetMaterialEvents:function() {\n    var assets = this.system.app.assets;\n    var events = this._materialEvents;\n    if (!events) {\n      return;\n    }\n    for (var i = 0, len = events.length; i < len; i++) {\n      if (!events[i]) {\n        continue;\n      }\n      var evt = events[i];\n      for (var key in evt) {\n        assets.off(key, evt[key].handler, this);\n      }\n    }\n    this._materialEvents = null;\n  }, _getAssetByIdOrPath:function(idOrPath) {\n    var asset = null;\n    var isPath = isNaN(parseInt(idOrPath, 10));\n    if (!isPath) {\n      asset = this.system.app.assets.get(idOrPath);\n    } else {\n      if (this.asset) {\n        var url = this._getMaterialAssetUrl(idOrPath);\n        if (url) {\n          asset = this.system.app.assets.getByUrl(url);\n        }\n      }\n    }\n    return asset;\n  }, _getMaterialAssetUrl:function(path) {\n    if (!this.asset) {\n      return null;\n    }\n    var modelAsset = this.system.app.assets.get(this.asset);\n    if (!modelAsset) {\n      return null;\n    }\n    var fileUrl = modelAsset.getFileUrl();\n    var dirUrl = pc.path.getDirectory(fileUrl);\n    return pc.path.join(dirUrl, path);\n  }, _loadAndSetMeshInstanceMaterial:function(idOrPath, meshInstance, index) {\n    var self = this;\n    var assets = this.system.app.assets;\n    var asset = this._getAssetByIdOrPath(idOrPath);\n    if (!asset) {\n      return;\n    }\n    var handleMaterial = function(asset) {\n      if (asset.resource) {\n        meshInstance.material = asset.resource;\n        self._setMaterialEvent(index, \"remove\", asset.id, function() {\n          meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;\n        });\n      } else {\n        self._setMaterialEvent(index, \"load\", asset.id, function(asset) {\n          meshInstance.material = asset.resource;\n          self._setMaterialEvent(index, \"remove\", asset.id, function() {\n            meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;\n          });\n        });\n        if (self.enabled && self.entity.enabled) {\n          assets.load(asset);\n        }\n      }\n    };\n    if (asset) {\n      handleMaterial(asset);\n    } else {\n      meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;\n      var isPath = isNaN(parseInt(idOrPath, 10));\n      self._setMaterialEvent(index, isPath ? \"add:url\" : \"add\", idOrPath, handleMaterial);\n    }\n  }, onSetReceiveShadows:function(name, oldValue, newValue) {\n    if (newValue !== undefined) {\n      var componentData = this.data;\n      if (componentData.model) {\n        var meshInstances = componentData.model.meshInstances;\n        for (var i = 0; i < meshInstances.length; i++) {\n          meshInstances[i].receiveShadow = newValue;\n        }\n      }\n    }\n  }, onEnable:function() {\n    ModelComponent._super.onEnable.call(this);\n    this.system.app.scene.on(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.on(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.on(\"remove\", this.onLayerRemoved, this);\n    }\n    var asset;\n    var model = this.data.model;\n    var isAsset = this.data.type === \"asset\";\n    if (model) {\n      this.addModelToLayers();\n    } else {\n      if (isAsset && this._dirtyModelAsset) {\n        asset = this.data.asset;\n        if (!asset) {\n          return;\n        }\n        asset = this.system.app.assets.get(asset);\n        if (asset) {\n          this._onModelAsset(asset);\n        }\n      }\n    }\n    if (this._dirtyMaterialAsset) {\n      var materialAsset = this.data.materialAsset;\n      if (materialAsset) {\n        materialAsset = this.system.app.assets.get(materialAsset);\n        if (materialAsset && !materialAsset.resource) {\n          this._onMaterialAssetLoad(materialAsset);\n        }\n      }\n    }\n    if (isAsset) {\n      var mapping = this.data.mapping;\n      if (mapping) {\n        for (var index in mapping) {\n          if (mapping[index]) {\n            asset = this._getAssetByIdOrPath(mapping[index]);\n            if (asset && !asset.resource) {\n              this.system.app.assets.load(asset);\n            }\n          }\n        }\n      }\n    }\n  }, onDisable:function() {\n    ModelComponent._super.onDisable.call(this);\n    this.system.app.scene.off(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.off(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.off(\"remove\", this.onLayerRemoved, this);\n    }\n    var model = this.data.model;\n    if (model) {\n      this.removeModelFromLayers(this.model);\n    }\n  }, hide:function() {\n    var model = this.data.model;\n    if (model) {\n      var i, l;\n      var instances = model.meshInstances;\n      for (i = 0, l = instances.length; i < l; i++) {\n        instances[i].visible = false;\n      }\n    }\n  }, show:function() {\n    var model = this.data.model;\n    if (model) {\n      var i, l;\n      var instances = model.meshInstances;\n      for (i = 0, l = instances.length; i < l; i++) {\n        instances[i].visible = true;\n      }\n    }\n  }});\n  Object.defineProperty(ModelComponent.prototype, \"meshInstances\", {get:function() {\n    if (!this.model) {\n      return null;\n    }\n    return this.model.meshInstances;\n  }, set:function(value) {\n    if (!this.model) {\n      return;\n    }\n    this.model.meshInstances = value;\n  }});\n  return {ModelComponent:ModelComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"type\", \"asset\", \"materialAsset\", \"castShadows\", \"receiveShadows\", \"castShadowsLightmap\", \"lightmapped\", \"lightmapSizeMultiplier\", \"isStatic\", \"material\", \"model\", \"layers\", \"batchGroupId\", \"mapping\"];\n  var ModelComponentSystem = function ModelComponentSystem(app) {\n    this.id = \"model\";\n    this.description = \"Renders a 3D model at the location of the Entity.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ModelComponent;\n    this.DataType = pc.ModelComponentData;\n    this.schema = _schema;\n    var gd = app.graphicsDevice;\n    this.box = pc.createBox(gd, {halfExtents:new pc.Vec3(0.5, 0.5, 0.5)});\n    this.capsule = pc.createCapsule(gd, {radius:0.5, height:2});\n    this.sphere = pc.createSphere(gd, {radius:0.5});\n    this.cone = pc.createCone(gd, {baseRadius:0.5, peakRadius:0, height:1});\n    this.cylinder = pc.createCylinder(gd, {radius:0.5, height:1});\n    this.plane = pc.createPlane(gd, {halfExtents:new pc.Vec2(0.5, 0.5), widthSegments:1, lengthSegments:1});\n    this.defaultMaterial = new pc.StandardMaterial;\n    this.on(\"beforeremove\", this.onRemove, this);\n  };\n  ModelComponentSystem = pc.inherits(ModelComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ModelComponent.prototype, _schema);\n  pc.extend(ModelComponentSystem.prototype, {initializeComponentData:function(component, _data, properties) {\n    properties = [\"enabled\", \"material\", \"materialAsset\", \"asset\", \"castShadows\", \"receiveShadows\", \"castShadowsLightmap\", \"lightmapped\", \"lightmapSizeMultiplier\", \"type\", \"mapping\", \"layers\", \"isStatic\", \"batchGroupId\"];\n    var data = {};\n    var name;\n    for (var i = 0; i < properties.length; i++) {\n      name = properties[i];\n      data[name] = _data[name];\n    }\n    data.material = this.defaultMaterial;\n    if (data.batchGroupId === null || data.batchGroupId === undefined) {\n      data.batchGroupId = -1;\n    }\n    if (data.layers && pc.type(data.layers) === \"array\") {\n      data.layers = data.layers.slice(0);\n    }\n    ModelComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, removeComponent:function(entity) {\n    var data = entity.model.data;\n    entity.model.asset = null;\n    if (data.type !== \"asset\" && data.model) {\n      entity.model.removeModelFromLayers(entity.model.model);\n      entity.removeChild(data.model.getGraph());\n      data.model = null;\n    }\n    ModelComponentSystem._super.removeComponent.call(this, entity);\n  }, cloneComponent:function(entity, clone) {\n    var data = {type:entity.model.type, asset:entity.model.asset, castShadows:entity.model.castShadows, receiveShadows:entity.model.receiveShadows, castShadowsLightmap:entity.model.castShadowsLightmap, lightmapped:entity.model.lightmapped, lightmapSizeMultiplier:entity.model.lightmapSizeMultiplier, isStatic:entity.model.isStatic, enabled:entity.model.enabled, layers:entity.model.layers, batchGroupId:entity.model.batchGroupId, mapping:pc.extend({}, entity.model.mapping)};\n    var materialAsset = entity.model.materialAsset;\n    if (!(materialAsset instanceof pc.Asset) && materialAsset != null) {\n      materialAsset = this.app.assets.get(materialAsset);\n    }\n    var material = entity.model.material;\n    if (!material || material === pc.ModelHandler.DEFAULT_MATERIAL || !materialAsset || material === materialAsset.resource) {\n      data.materialAsset = materialAsset;\n    }\n    var component = this.addComponent(clone, data);\n    if (!data.materialAsset) {\n      component.material = material;\n    }\n    if (entity.model.model) {\n      var meshInstances = entity.model.model.meshInstances;\n      var meshInstancesClone = component.model.meshInstances;\n      for (var i = 0; i < meshInstances.length; i++) {\n        meshInstancesClone[i].mask = meshInstances[i].mask;\n        meshInstancesClone[i].material = meshInstances[i].material;\n        meshInstancesClone[i].layer = meshInstances[i].layer;\n        meshInstancesClone[i].receiveShadow = meshInstances[i].receiveShadow;\n      }\n    }\n  }, onRemove:function(entity, component) {\n    entity.model.materialAsset = null;\n    component.remove();\n  }});\n  return {ModelComponentSystem:ModelComponentSystem};\n}());\npc.extend(pc, function() {\n  var ModelComponentData = function() {\n    this.enabled = true;\n    this.type = \"asset\";\n    this.asset = null;\n    this.castShadows = true;\n    this.receiveShadows = true;\n    this.materialAsset = null;\n    this.mapping = null;\n    this.castShadowsLightmap = true;\n    this.lightmapped = false;\n    this.lightmapSizeMultiplier = 1;\n    this.isStatic = false;\n    this.layers = [pc.LAYERID_WORLD];\n    this.batchGroupId = -1;\n    this.material = null;\n    this.model = null;\n  };\n  ModelComponentData = pc.inherits(ModelComponentData, pc.ComponentData);\n  return {ModelComponentData:ModelComponentData};\n}());\npc.extend(pc, function() {\n  var CameraComponent = function CameraComponent(system, entity) {\n    this.on(\"set_aspectRatioMode\", this.onSetAspectRatioMode, this);\n    this.on(\"set_aspectRatio\", this.onSetAspectRatio, this);\n    this.on(\"set_camera\", this.onSetCamera, this);\n    this.on(\"set_clearColor\", this.onSetClearColor, this);\n    this.on(\"set_fov\", this.onSetFov, this);\n    this.on(\"set_orthoHeight\", this.onSetOrthoHeight, this);\n    this.on(\"set_nearClip\", this.onSetNearClip, this);\n    this.on(\"set_farClip\", this.onSetFarClip, this);\n    this.on(\"set_projection\", this.onSetProjection, this);\n    this.on(\"set_priority\", this.onSetPriority, this);\n    this.on(\"set_clearColorBuffer\", this.updateClearFlags, this);\n    this.on(\"set_clearDepthBuffer\", this.updateClearFlags, this);\n    this.on(\"set_clearStencilBuffer\", this.updateClearFlags, this);\n    this.on(\"set_renderTarget\", this.onSetRenderTarget, this);\n    this.on(\"set_rect\", this.onSetRect, this);\n    this.on(\"set_scissorRect\", this.onSetScissorRect, this);\n    this.on(\"set_horizontalFov\", this.onSetHorizontalFov, this);\n    this.on(\"set_frustumCulling\", this.onSetFrustumCulling, this);\n    this.on(\"set_calculateTransform\", this.onSetCalculateTransform, this);\n    this.on(\"set_calculateProjection\", this.onSetCalculateProjection, this);\n    this.on(\"set_cullFaces\", this.onSetCullFaces, this);\n    this.on(\"set_flipFaces\", this.onSetFlipFaces, this);\n    this.on(\"set_layers\", this.onSetLayers, this);\n  };\n  CameraComponent = pc.inherits(CameraComponent, pc.Component);\n  Object.defineProperty(CameraComponent.prototype, \"projectionMatrix\", {get:function() {\n    return this.data.camera.getProjectionMatrix();\n  }});\n  Object.defineProperty(CameraComponent.prototype, \"viewMatrix\", {get:function() {\n    var wtm = this.data.camera._node.getWorldTransform();\n    return wtm.clone().invert();\n  }});\n  Object.defineProperty(CameraComponent.prototype, \"frustum\", {get:function() {\n    return this.data.camera.frustum;\n  }});\n  Object.defineProperty(CameraComponent.prototype, \"vrDisplay\", {get:function() {\n    return this.data.camera.vrDisplay;\n  }, set:function(value) {\n    this.data.camera.vrDisplay = value;\n    if (value) {\n      value._camera = this.data.camera;\n    }\n  }});\n  Object.defineProperty(CameraComponent.prototype, \"node\", {get:function() {\n    return this.data.camera._node;\n  }});\n  pc.extend(CameraComponent.prototype, {screenToWorld:function(screenx, screeny, cameraz, worldCoord) {\n    var device = this.system.app.graphicsDevice;\n    return this.data.camera.screenToWorld(screenx, screeny, cameraz, device.clientRect.width, device.clientRect.height, worldCoord);\n  }, worldToScreen:function(worldCoord, screenCoord) {\n    var device = this.system.app.graphicsDevice;\n    return this.data.camera.worldToScreen(worldCoord, device.clientRect.width, device.clientRect.height, screenCoord);\n  }, onSetAspectRatioMode:function(name, oldValue, newValue) {\n    this.data.camera.aspectRatioMode = newValue;\n  }, onSetAspectRatio:function(name, oldValue, newValue) {\n    this.data.camera.aspectRatio = newValue;\n  }, onSetCamera:function(name, oldValue, newValue) {\n    if (oldValue) {\n      oldValue._node = null;\n    }\n    newValue._node = this.entity;\n  }, onSetClearColor:function(name, oldValue, newValue) {\n    this.data.camera.clearColor[0] = newValue.data[0];\n    this.data.camera.clearColor[1] = newValue.data[1];\n    this.data.camera.clearColor[2] = newValue.data[2];\n    this.data.camera.clearColor[3] = newValue.data[3];\n  }, onSetFov:function(name, oldValue, newValue) {\n    this.data.camera.fov = newValue;\n  }, onSetOrthoHeight:function(name, oldValue, newValue) {\n    this.data.camera.orthoHeight = newValue;\n  }, onSetNearClip:function(name, oldValue, newValue) {\n    this.data.camera.nearClip = newValue;\n  }, onSetFarClip:function(name, oldValue, newValue) {\n    this.data.camera.farClip = newValue;\n  }, onSetHorizontalFov:function(name, oldValue, newValue) {\n    this.data.camera.horizontalFov = newValue;\n  }, onSetFrustumCulling:function(name, oldValue, newValue) {\n    this.data.camera.frustumCulling = newValue;\n  }, onSetCalculateTransform:function(name, oldValue, newValue) {\n    this._calculateTransform = newValue;\n    this.camera.overrideCalculateTransform = !!newValue;\n  }, onSetCalculateProjection:function(name, oldValue, newValue) {\n    this._calculateProjection = newValue;\n    this.camera._projMatDirty = true;\n    this.camera.overrideCalculateProjection = !!newValue;\n  }, onSetCullFaces:function(name, oldValue, newValue) {\n    this.camera._cullFaces = newValue;\n  }, onSetFlipFaces:function(name, oldValue, newValue) {\n    this.camera._flipFaces = newValue;\n  }, onSetProjection:function(name, oldValue, newValue) {\n    this.data.camera.projection = newValue;\n  }, onSetPriority:function(name, oldValue, newValue) {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer._sortCameras();\n    }\n  }, onSetLayers:function(name, oldValue, newValue) {\n    var i, layer;\n    for (i = 0; i < oldValue.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(oldValue[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeCamera(this);\n    }\n    if (!this.enabled || !this.entity.enabled) {\n      return;\n    }\n    for (i = 0; i < newValue.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(newValue[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addCamera(this);\n    }\n  }, addCameraToLayers:function() {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addCamera(this);\n    }\n  }, removeCameraFromLayers:function() {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeCamera(this);\n    }\n  }, onLayersChanged:function(oldComp, newComp) {\n    this.addCameraToLayers();\n    oldComp.off(\"add\", this.onLayerAdded, this);\n    oldComp.off(\"remove\", this.onLayerRemoved, this);\n    newComp.on(\"add\", this.onLayerAdded, this);\n    newComp.on(\"remove\", this.onLayerRemoved, this);\n  }, onLayerAdded:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.addCamera(this);\n  }, onLayerRemoved:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.removeCamera(this);\n  }, updateClearFlags:function() {\n    var flags = 0;\n    if (this.clearColorBuffer) {\n      flags = flags | pc.CLEARFLAG_COLOR;\n    }\n    if (this.clearDepthBuffer) {\n      flags = flags | pc.CLEARFLAG_DEPTH;\n    }\n    if (this.clearStencilBuffer) {\n      flags = flags | pc.CLEARFLAG_STENCIL;\n    }\n    this.data.camera.clearFlags = flags;\n  }, onSetRenderTarget:function(name, oldValue, newValue) {\n    this.data.camera.renderTarget = newValue;\n  }, onSetRect:function(name, oldValue, newValue) {\n    this.data.camera.setRect(newValue.data[0], newValue.data[1], newValue.data[2], newValue.data[3]);\n  }, onSetScissorRect:function(name, oldValue, newValue) {\n    this.data.camera.setScissorRect(newValue.data[0], newValue.data[1], newValue.data[2], newValue.data[3]);\n  }, onEnable:function() {\n    CameraComponent._super.onEnable.call(this);\n    this.system.addCamera(this);\n    this.system.app.scene.on(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.on(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.on(\"remove\", this.onLayerRemoved, this);\n    }\n    if (this.enabled && this.entity.enabled) {\n      this.addCameraToLayers();\n    }\n    this.postEffects.enable();\n  }, onDisable:function() {\n    CameraComponent._super.onDisable.call(this);\n    this.postEffects.disable();\n    this.removeCameraFromLayers();\n    this.system.app.scene.off(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.off(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.off(\"remove\", this.onLayerRemoved, this);\n    }\n    this.system.removeCamera(this);\n  }, calculateAspectRatio:function(rt) {\n    var src = rt ? rt : this.system.app.graphicsDevice;\n    var rect = this.rect;\n    return src.width * rect.z / (src.height * rect.w);\n  }, frameBegin:function(rt) {\n    if (this.aspectRatioMode === pc.ASPECT_AUTO) {\n      this.aspectRatio = this.calculateAspectRatio(rt);\n    }\n    this.data.isRendering = true;\n  }, frameEnd:function() {\n    this.data.isRendering = false;\n  }, enterVr:function(display, callback) {\n    if (display instanceof Function && !callback) {\n      callback = display;\n      display = null;\n    }\n    if (!this.system.app.vr) {\n      callback(\"VrManager not created. Enable VR in project settings.\");\n      return;\n    }\n    if (!display) {\n      display = this.system.app.vr.display;\n    }\n    if (display) {\n      var self = this;\n      if (display.capabilities.canPresent) {\n        display.requestPresent(function(err) {\n          if (!err) {\n            self.vrDisplay = display;\n            self.vrDisplay.once(\"beforepresentchange\", function(display) {\n              if (!display.presenting) {\n                self.vrDisplay = null;\n              }\n            });\n          }\n          callback(err);\n        });\n      } else {\n        self.vrDisplay = display;\n        callback();\n      }\n    } else {\n      callback(\"No pc.VrDisplay to present\");\n    }\n  }, exitVr:function(callback) {\n    if (this.vrDisplay) {\n      if (this.vrDisplay.capabilities.canPresent) {\n        var display = this.vrDisplay;\n        this.vrDisplay = null;\n        display.exitPresent(callback);\n      } else {\n        this.vrDisplay = null;\n        callback();\n      }\n    } else {\n      callback(\"Not presenting VR\");\n    }\n  }});\n  return {CameraComponent:CameraComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"clearColorBuffer\", \"clearColor\", \"clearDepthBuffer\", \"clearStencilBuffer\", \"frustumCulling\", \"projection\", \"fov\", \"orthoHeight\", \"nearClip\", \"farClip\", \"priority\", \"rect\", \"scissorRect\", \"camera\", \"aspectRatio\", \"aspectRatioMode\", \"horizontalFov\", \"model\", \"renderTarget\", \"calculateTransform\", \"calculateProjection\", \"cullFaces\", \"flipFaces\", \"layers\"];\n  var CameraComponentSystem = function(app) {\n    this.id = \"camera\";\n    this.description = \"Renders the scene from the location of the Entity.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.CameraComponent;\n    this.DataType = pc.CameraComponentData;\n    this.schema = _schema;\n    this.cameras = [];\n    this.on(\"beforeremove\", this.onBeforeRemove, this);\n    this.on(\"remove\", this.onRemove, this);\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n  };\n  CameraComponentSystem = pc.inherits(CameraComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.CameraComponent.prototype, _schema);\n  pc.extend(CameraComponentSystem.prototype, {initializeComponentData:function(component, _data, properties) {\n    properties = [\"postEffects\", \"enabled\", \"model\", \"camera\", \"aspectRatio\", \"aspectRatioMode\", \"horizontalFov\", \"renderTarget\", \"clearColor\", \"fov\", \"orthoHeight\", \"nearClip\", \"farClip\", \"projection\", \"priority\", \"clearColorBuffer\", \"clearDepthBuffer\", \"clearStencilBuffer\", \"frustumCulling\", \"rect\", \"scissorRect\", \"calculateTransform\", \"calculateProjection\", \"cullFaces\", \"flipFaces\", \"layers\"];\n    var data = {};\n    properties.forEach(function(prop) {\n      data[prop] = _data[prop];\n    });\n    if (data.layers && pc.type(data.layers) === \"array\") {\n      data.layers = data.layers.slice(0);\n    }\n    if (data.clearColor && pc.type(data.clearColor) === \"array\") {\n      var c = data.clearColor;\n      data.clearColor = new pc.Color(c[0], c[1], c[2], c[3]);\n    }\n    if (data.rect && pc.type(data.rect) === \"array\") {\n      var rect = data.rect;\n      data.rect = new pc.Vec4(rect[0], rect[1], rect[2], rect[3]);\n    }\n    if (data.scissorRect && pc.type(data.scissorRect) === \"array\") {\n      var scissorRect = data.scissorRect;\n      data.scissorRect = new pc.Vec4(scissorRect[0], scissorRect[1], scissorRect[2], scissorRect[3]);\n    }\n    if (data.activate) {\n      console.warn(\"WARNING: activate: Property is deprecated. Set enabled property instead.\");\n      data.enabled = data.activate;\n    }\n    data.camera = new pc.Camera;\n    data._node = component.entity;\n    data.camera._component = component;\n    var self = component;\n    data.camera.calculateTransform = function(mat, mode) {\n      if (!self._calculateTransform) {\n        return null;\n      }\n      return self._calculateTransform(mat, mode);\n    };\n    data.camera.calculateProjection = function(mat, mode) {\n      if (!self._calculateProjection) {\n        return null;\n      }\n      return self._calculateProjection(mat, mode);\n    };\n    data.postEffects = new pc.PostEffectQueue(this.app, component);\n    CameraComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, onBeforeRemove:function(entity, component) {\n    this.removeCamera(component);\n  }, onRemove:function(entity, data) {\n    data.camera = null;\n  }, onUpdate:function(dt) {\n    var components = this.store;\n    var component, componentData, cam, vrDisplay;\n    if (this.app.vr) {\n      for (var id in components) {\n        component = components[id];\n        componentData = component.data;\n        cam = componentData.camera;\n        vrDisplay = cam.vrDisplay;\n        if (componentData.enabled && component.entity.enabled && vrDisplay) {\n          vrDisplay.setClipPlanes(cam._nearClip, cam._farClip);\n          if (cam._node) {\n            cam._node.localTransform.copy(vrDisplay.combinedViewInv);\n            cam._node._dirtyLocal = false;\n            cam._node._dirtify();\n          }\n        }\n      }\n    }\n  }, addCamera:function(camera) {\n    this.cameras.push(camera);\n    this.sortCamerasByPriority();\n  }, removeCamera:function(camera) {\n    var index = this.cameras.indexOf(camera);\n    if (index >= 0) {\n      this.cameras.splice(index, 1);\n      this.sortCamerasByPriority();\n    }\n  }, sortCamerasByPriority:function() {\n    this.cameras.sort(function(a, b) {\n      return a.priority - b.priority;\n    });\n  }});\n  return {CameraComponentSystem:CameraComponentSystem};\n}());\npc.extend(pc, function() {\n  var CameraComponentData = function() {\n    this.clearColor = new pc.Color(0.722, 0.722, 0.722, 1);\n    this.clearColorBuffer = true;\n    this.clearDepthBuffer = true;\n    this.clearStencilBuffer = true;\n    this.nearClip = 0.1;\n    this.farClip = 1000;\n    this.fov = 45;\n    this.orthoHeight = 100;\n    this.projection = pc.PROJECTION_PERSPECTIVE;\n    this.priority = 0;\n    this.rect = new pc.Vec4(0, 0, 1, 1);\n    this.scissorRect = new pc.Vec4(0, 0, 1, 1);\n    this.enabled = true;\n    this.frustumCulling = false;\n    this.cullFaces = true;\n    this.flipFaces = false;\n    this.layers = [pc.LAYERID_WORLD, pc.LAYERID_DEPTH, pc.LAYERID_SKYBOX, pc.LAYERID_UI, pc.LAYERID_IMMEDIATE];\n    this.camera = null;\n    this.aspectRatio = 16 / 9;\n    this.aspectRatioMode = pc.ASPECT_AUTO;\n    this.renderTarget = null;\n    this.postEffects = null;\n    this.isRendering = false;\n    this.calculateTransform = null;\n    this.calculateProjection = null;\n  };\n  CameraComponentData = pc.inherits(CameraComponentData, pc.ComponentData);\n  return {CameraComponentData:CameraComponentData};\n}());\npc.extend(pc, function() {\n  function PostEffectQueue(app, camera) {\n    var self = this;\n    this.app = app;\n    this.camera = camera;\n    this.effects = [];\n    this.enabled = false;\n    this.depthTarget = null;\n    this.renderTargetScale = 1;\n    this.resizeTimeout = null;\n    this.resizeLast = 0;\n    this._resizeTimeoutCallback = function() {\n      self.resizeRenderTargets();\n    };\n    camera.on(\"set_rect\", this.onCameraRectChanged, this);\n  }\n  PostEffectQueue.prototype = {_createOffscreenTarget:function(useDepth, hdr) {\n    var rect = this.camera.rect;\n    var width = Math.floor(rect.z * this.app.graphicsDevice.width * this.renderTargetScale);\n    var height = Math.floor(rect.w * this.app.graphicsDevice.height * this.renderTargetScale);\n    var device = this.app.graphicsDevice;\n    var format = hdr ? device.getHdrFormat() : pc.PIXELFORMAT_R8_G8_B8_A8;\n    var colorBuffer = new pc.Texture(device, {format:format, width:width, height:height});\n    colorBuffer.minFilter = pc.FILTER_NEAREST;\n    colorBuffer.magFilter = pc.FILTER_NEAREST;\n    colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n    colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n    return new pc.RenderTarget(this.app.graphicsDevice, colorBuffer, {depth:useDepth});\n  }, _resizeOffscreenTarget:function(rt) {\n    var rect = this.camera.rect;\n    var width = Math.floor(rect.z * this.app.graphicsDevice.width * this.renderTargetScale);\n    var height = Math.floor(rect.w * this.app.graphicsDevice.height * this.renderTargetScale);\n    var device = this.app.graphicsDevice;\n    var format = rt.colorBuffer.format;\n    rt._colorBuffer.destroy();\n    var colorBuffer = new pc.Texture(device, {format:format, width:width, height:height});\n    colorBuffer.minFilter = pc.FILTER_NEAREST;\n    colorBuffer.magFilter = pc.FILTER_NEAREST;\n    colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n    colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n    rt._colorBuffer = colorBuffer;\n    rt.destroy();\n  }, setRenderTargetScale:function(scale) {\n    this.renderTargetScale = scale;\n    this.resizeRenderTargets();\n  }, addEffect:function(effect) {\n    var isFirstEffect = this.effects.length === 0;\n    var effects = this.effects;\n    var newEntry = {effect:effect, inputTarget:this._createOffscreenTarget(isFirstEffect, effect.hdr), outputTarget:null};\n    if (!this.layer) {\n      this.layer = new pc.Layer({opaqueSortMode:pc.SORTMODE_NONE, transparentSortMode:pc.SORTMODE_NONE, passThrough:true, name:\"PostEffectQueue\", renderTarget:this.camera.renderTarget, clear:false, onPostRender:function() {\n        for (var i = 0; i < this._commandList.length; i++) {\n          this._commandList[i]();\n        }\n      }});\n      var layerList = this.app.scene.layers.layerList;\n      var order = 0;\n      var i;\n      var start = layerList.length - 1;\n      for (i = start; i >= 0; i--) {\n        if (layerList[i].id === pc.LAYERID_UI) {\n          start = i - 1;\n          layerList[i].overrideClear = true;\n          layerList[i].clearColorBuffer = false;\n          layerList[i].clearDepthBuffer = this.camera.clearDepthBuffer;\n          layerList[i].clearStencilBuffer = this.camera.clearStencilBuffer;\n          break;\n        }\n      }\n      for (i = start; i >= 0; i--) {\n        if (layerList[i].cameras.indexOf(this.camera) >= 0) {\n          if (order === 0) {\n            order = i + 1;\n          }\n          layerList[i].renderTarget = newEntry.inputTarget;\n        }\n      }\n      this.app.scene.layers.insertOpaque(this.layer, order);\n      this.layer._commandList = [];\n      this.layer.isPostEffect = true;\n    }\n    effects.push(newEntry);\n    var len = effects.length;\n    if (len > 1) {\n      effects[len - 2].outputTarget = newEntry.inputTarget;\n    }\n    this.enable();\n  }, removeEffect:function(effect) {\n    var index = -1;\n    for (var i = 0, len = this.effects.length; i < len; i++) {\n      if (this.effects[i].effect === effect) {\n        index = i;\n        break;\n      }\n    }\n    if (index >= 0) {\n      if (index > 0) {\n        this.effects[index - 1].outputTarget = index + 1 < this.effects.length ? this.effects[index + 1].inputTarget : null;\n      } else {\n        if (this.effects.length > 1) {\n          if (!this.effects[1].inputTarget._depth) {\n            this.effects[1].inputTarget.destroy();\n            this.effects[1].inputTarget = this._createOffscreenTarget(true, this.effects[1].hdr);\n          }\n          this.camera.renderTarget = this.effects[1].inputTarget;\n        }\n      }\n      this.effects[index].inputTarget.destroy();\n      this.effects.splice(index, 1);\n    }\n    if (this.enabled) {\n      if (effect.needsDepthBuffer) {\n        this.camera.releaseDepthMap();\n      }\n    }\n    if (this.effects.length === 0) {\n      this.disable();\n    }\n  }, requestDepthMap:function() {\n    for (var i = 0, len = this.effects.length; i < len; i++) {\n      var effect = this.effects[i].effect;\n      if (effect.needsDepthBuffer) {\n        this.camera.camera.requestDepthMap();\n      }\n    }\n  }, releaseDepthMap:function() {\n    for (var i = 0, len = this.effects.length; i < len; i++) {\n      var effect = this.effects[i].effect;\n      if (effect.needsDepthBuffer) {\n        this.camera.releaseDepthMap();\n      }\n    }\n  }, destroy:function() {\n    for (var i = 0, len = this.effects.length; i < len; i++) {\n      this.effects[i].inputTarget.destroy();\n    }\n    this.effects.length = 0;\n    this.disable();\n  }, enable:function() {\n    if (!this.enabled && this.effects.length) {\n      this.enabled = true;\n      var self = this;\n      this.requestDepthMap();\n      this.app.graphicsDevice.on(\"resizecanvas\", this._onCanvasResized, this);\n      this.command = function() {\n        if (self.enabled) {\n          var rect = null;\n          var len = self.effects.length;\n          if (len) {\n            self.layer.renderTarget = self.effects[0].inputTarget;\n            for (var i = 0; i < len; i++) {\n              var fx = self.effects[i];\n              if (i === len - 1) {\n                rect = self.camera.rect;\n              }\n              fx.effect.render(fx.inputTarget, fx.outputTarget, rect);\n            }\n          }\n        }\n      };\n      this.layer._commandList.push(this.command);\n    }\n  }, disable:function() {\n    if (this.enabled) {\n      this.enabled = false;\n      this.app.graphicsDevice.off(\"resizecanvas\", this._onCanvasResized, this);\n      this.camera.renderTarget = null;\n      this.releaseDepthMap();\n      var rect = this.camera.rect;\n      var i = this.layer._commandList.indexOf(this.command);\n      if (i >= 0) {\n        this.layer._commandList.splice(i, 1);\n      }\n    }\n  }, _onCanvasResized:function(width, height) {\n    var rect = this.camera.rect;\n    var device = this.app.graphicsDevice;\n    this.camera.camera.aspectRatio = device.width * rect.z / (device.height * rect.w);\n    if (this.resizeTimeout) {\n      return;\n    }\n    if (pc.now() - this.resizeLast > 100) {\n      this.resizeRenderTargets();\n    } else {\n      this.resizeTimeout = setTimeout(this._resizeTimeoutCallback, 100);\n    }\n  }, resizeRenderTargets:function() {\n    if (this.resizeTimeout) {\n      clearTimeout(this.resizeTimeout);\n      this.resizeTimeout = null;\n    }\n    this.resizeLast = pc.now();\n    var rect = this.camera.rect;\n    var desiredWidth = Math.floor(rect.z * this.app.graphicsDevice.width * this.renderTargetScale);\n    var desiredHeight = Math.floor(rect.w * this.app.graphicsDevice.height * this.renderTargetScale);\n    var effects = this.effects;\n    for (var i = 0, len = effects.length; i < len; i++) {\n      var fx = effects[i];\n      if (fx.inputTarget.width !== desiredWidth || fx.inputTarget.height !== desiredHeight) {\n        this._resizeOffscreenTarget(fx.inputTarget);\n      }\n    }\n  }, onCameraRectChanged:function(name, oldValue, newValue) {\n    if (this.enabled) {\n      this.resizeRenderTargets();\n    }\n  }};\n  return {PostEffectQueue:PostEffectQueue};\n}());\npc.extend(pc, function() {\n  var _backbufferRt = [null, null];\n  var _constInput = null;\n  var _constScreenSize;\n  var _constScreenSizeValue = new pc.Vec4;\n  var _postEffectChain = [];\n  var _backbufferRtUsed = false;\n  var _backbufferRt2Used = false;\n  var _backbufferRtWrittenByPost = false;\n  var _regexUniforms = /uniform[ \\t\\n\\r]+\\S+[ \\t\\n\\r]+\\S+[ \\t\\n\\r]*;/g;\n  var _regexUniformStart = /\\S+[ \\t\\n\\r]*;/;\n  var _regexUniformEnd = /[ \\t\\n\\r]*;/;\n  var _regexVariables = /(float|int|bool|vec2|vec3|vec4|struct)([ \\t\\n\\r]+[^;]+[ \\t\\n\\r]*,*)+;/g;\n  var _regexVariableSurroundings = /(float|int|bool|vec2|vec3|vec4|struct|,|;|\\{|\\})/g;\n  var _regexIrrelevantVariables = /(uniform|varying|in|out)[ \\t\\n\\r]+(float|int|bool|vec2|vec3|vec4|struct)([ \\t\\n\\r]+[^;]+[ \\t\\n\\r]*,*)+;/g;\n  var _regexIrrelevantVariableSurroundings = /(float|int|bool|vec2|vec3|vec4|struct|uniform|varying|in|out|,|;|\\{|\\})/g;\n  var _regexVersion = /#version/g;\n  var _regexFragColor = /out highp vec4 pc_fragColor;/g;\n  var _regexFragColor2 = /#define gl_FragColor/g;\n  var _regexFragColor3 = /gl_FragColor/g;\n  var _regexColorBuffer = /uniform[ \\t\\n\\r]+sampler2D[ \\t\\n\\r]+uColorBuffer;/g;\n  var _regexUv = /(varying|in)[ \\t\\n\\r]+vec2[ \\t\\n\\r]+vUv0;/g;\n  var _regexColorBufferSample = /(texture2D|texture)[ \\t\\n\\r]*\\([ \\t\\n\\r]*uColorBuffer/g;\n  var _regexMain = /void[ \\t\\n\\r]+main/g;\n  var _createBackbufferRt = function(id, device, format) {\n    var tex = new pc.Texture(device, {format:format, width:device.width, height:device.height});\n    tex.minFilter = pc.FILTER_NEAREST;\n    tex.magFilter = pc.FILTER_NEAREST;\n    tex.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n    tex.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n    _backbufferRt[id]._colorBuffer = tex;\n  };\n  var _destroyBackbufferRt = function(id) {\n    _backbufferRt[id].colorBuffer.destroy();\n    _backbufferRt[id].destroy();\n  };\n  var _collectUniforms = function(code) {\n    var strs = code.match(_regexUniforms) || [];\n    var start, end, uname;\n    var uniforms = [];\n    for (var i = 0; i < strs.length; i++) {\n      start = strs[i].search(_regexUniformStart);\n      end = strs[i].search(_regexUniformEnd);\n      uname = strs[i].substr(start, end - start);\n      if (uname !== \"uColorBuffer\") {\n        uniforms.push(uname);\n      }\n    }\n    return uniforms;\n  };\n  var _uniformsCollide = function(layers, chain, count, shader) {\n    var uniforms = _collectUniforms(shader.definition.fshader);\n    if (uniforms.length === 0) {\n      return false;\n    }\n    var i, j, k, uniforms2;\n    var uname;\n    for (i = 0; i < count; i++) {\n      for (j = 0; j < uniforms.length; j++) {\n        uname = uniforms[j];\n        uniforms2 = _collectUniforms(layers[chain[i]].shader.definition.fshader);\n        for (k = 0; k < uniforms2.length; k++) {\n          if (uniforms2[k] === uname) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  var _collectGlobalTempVars = function(code, list) {\n    var len = code.length;\n    var chr;\n    var scopeStart = 0;\n    var scopeEnd = 0;\n    var scopeDepth = 0;\n    var codeStart = 0;\n    var codeWithoutScopes = \"\";\n    var i, j;\n    for (i = 0; i < len; i++) {\n      chr = code.charAt(i);\n      if (chr === \"{\") {\n        if (scopeDepth === 0) {\n          scopeStart = i;\n        }\n        scopeDepth++;\n      } else {\n        if (chr === \"}\") {\n          if (scopeDepth === 1) {\n            scopeEnd = i;\n            codeWithoutScopes += code.substr(codeStart, scopeStart - codeStart + 1);\n            codeStart = scopeEnd;\n          }\n          scopeDepth--;\n        }\n      }\n    }\n    codeWithoutScopes += code.substr(codeStart, code.length - codeStart + 1);\n    var collisions = null;\n    var decls = codeWithoutScopes.match(_regexVariables) || [];\n    var vars, varName;\n    for (i = 0; i < decls.length; i++) {\n      vars = decls[i].split(\",\");\n      for (j = 0; j < vars.length; j++) {\n        varName = vars[j].replace(_regexVariableSurroundings, \"\").trim();\n        if (list.indexOf(varName) >= 0) {\n          if (!collisions) {\n            collisions = [];\n          }\n          collisions.push(varName);\n        } else {\n          list.push(varName);\n        }\n      }\n    }\n    var irrelevantDecls = codeWithoutScopes.match(_regexIrrelevantVariables) || [];\n    var index;\n    for (i = 0; i < irrelevantDecls.length; i++) {\n      vars = irrelevantDecls[i].split(\",\");\n      for (j = 0; j < vars.length; j++) {\n        varName = vars[j].replace(_regexIrrelevantVariableSurroundings, \"\").trim();\n        index = list.indexOf(varName);\n        if (index >= 0) {\n          list.splice(index, 1);\n        }\n      }\n    }\n    return collisions;\n  };\n  function PostEffectPass(app, options) {\n    this.app = app;\n    this.srcRenderTarget = options.srcRenderTarget;\n    this.hdr = options.hdr;\n    this.blending = options.blending;\n    this.shader = options.shader;\n    this.setup = options.setup;\n    var self = this;\n    var device = app.graphicsDevice;\n    this.layer = new pc.Layer({opaqueSortMode:pc.SORTMODE_NONE, transparentSortMode:pc.SORTMODE_NONE, passThrough:true, name:options.name, onPostRender:function() {\n      if (self.srcRenderTarget) {\n        _constScreenSizeValue.x = self.srcRenderTarget.width;\n        _constScreenSizeValue.y = self.srcRenderTarget.height;\n        _constScreenSizeValue.z = 1.0 / self.srcRenderTarget.width;\n        _constScreenSizeValue.w = 1.0 / self.srcRenderTarget.height;\n      } else {\n        _constScreenSizeValue.x = device.width;\n        _constScreenSizeValue.y = device.height;\n        _constScreenSizeValue.z = 1.0 / device.width;\n        _constScreenSizeValue.w = 1.0 / device.height;\n      }\n      _constScreenSize.setValue(_constScreenSizeValue.data);\n      if (this._postEffectCombined && this._postEffectCombined < 0) {\n        if (self.setup) {\n          self.setup(device, self, _constScreenSizeValue, null, this.renderTarget);\n        }\n        return;\n      }\n      var src;\n      if (this._postEffectCombinedSrc) {\n        src = this._postEffectCombinedSrc;\n      } else {\n        src = self.srcRenderTarget ? self.srcRenderTarget : _backbufferRt[this._backbufferRtId];\n      }\n      if (src._samples > 1) {\n        src.resolve(true, false);\n      }\n      var tex = src._colorBuffer;\n      tex.magFilter = (this._postEffectCombinedShader ? this._postEffectCombinedBilinear : this.postEffectBilinear) ? pc.FILTER_LINEAR : pc.FILTER_NEAREST;\n      _constInput.setValue(tex);\n      if (self.setup) {\n        self.setup(device, self, _constScreenSizeValue, src, this.renderTarget);\n      }\n      var shader = this._postEffectCombinedShader ? this._postEffectCombinedShader : this.shader;\n      if (shader) {\n        pc.drawQuadWithShader(device, this.renderTarget, shader, null, null, self.blending);\n      }\n      if (self.srcRenderTarget) {\n        return;\n      }\n      var layers = app.scene.layers.layerList;\n      for (var i = 0; i < layers.length; i++) {\n        if (layers[i] === self.layer) {\n          break;\n        }\n        if (layers[i].renderTarget === _backbufferRt[0] || layers[i].renderTarget === _backbufferRt[1]) {\n          layers[i].renderTarget = null;\n        }\n      }\n    }});\n    this.layer._generateCameraHash();\n    this.layer.isPostEffect = true;\n    this.layer.unmodifiedUvs = options.unmodifiedUvs;\n    this.layer.postEffectBilinear = options.bilinear;\n    this.layer.postEffect = this;\n    this.layer.shader = options.shader;\n    this.layer.renderTarget = options.destRenderTarget;\n    if (!_constInput) {\n      _constInput = device.scope.resolve(\"uColorBuffer\");\n      _constScreenSize = device.scope.resolve(\"uScreenSize\");\n      var _backbufferMsaa = device.supportsMsaa ? 4 : 1;\n      for (var i = 0; i < 2; i++) {\n        _backbufferRt[i] = new pc.RenderTarget({depth:true, stencil:device.supportsStencil, samples:_backbufferMsaa, autoResolve:false});\n        _backbufferRt[i].name = \"backbuffer\" + i;\n      }\n      app.on(\"prerender\", function() {\n        var layers = app.scene.layers.layerList;\n        var i, j;\n        var offset = 0;\n        var rtId = 0;\n        _backbufferRtUsed = false;\n        _backbufferRt2Used = false;\n        _backbufferRtWrittenByPost = false;\n        var backbufferRtFormat = pc.PIXELFORMAT_R8_G8_B8_A8;\n        if (app.scene.layers._dirty) {\n          var iterator = 0;\n          var breakChain = false;\n          var collisions, k;\n          for (i = 0; i < layers.length; i++) {\n            breakChain = false;\n            if (layers[i].isPostEffect && (iterator === 0 || layers[i].unmodifiedUvs && layers[i].shader && !_uniformsCollide(layers, _postEffectChain, iterator, layers[i].shader))) {\n              _postEffectChain[iterator] = i;\n              iterator++;\n              if (i === layers.length - 1) {\n                breakChain = true;\n              }\n            } else {\n              if (iterator > 0) {\n                breakChain = true;\n              }\n            }\n            if (breakChain) {\n              if (iterator > 1) {\n                var cachedName = \"post_\";\n                var layer;\n                for (j = 0; j < iterator; j++) {\n                  layer = layers[_postEffectChain[j]];\n                  cachedName += layer.name ? layer.name : layer.id;\n                  if (j < iterator - 1) {\n                    cachedName += \"_\";\n                  }\n                }\n                var shader = device.programLib._cache[cachedName];\n                if (!shader) {\n                  var subCode;\n                  var code = \"vec4 shaderOutput;\\n\";\n                  var mainCode = \"void main() {\\n\";\n                  var globalTempVars = [];\n                  for (j = 0; j < iterator; j++) {\n                    subCode = layers[_postEffectChain[j]].shader.definition.fshader + \"\\n\";\n                    subCode = subCode.replace(_regexVersion, \"//\").replace(_regexFragColor, \"//\").replace(_regexFragColor2, \"//\").replace(_regexFragColor3, \"shaderOutput\");\n                    if (j > 0) {\n                      subCode = subCode.replace(_regexColorBuffer, \"//\").replace(_regexUv, \"//\").replace(_regexColorBufferSample, \"shaderOutput;//\");\n                    }\n                    subCode = subCode.replace(_regexMain, \"void main\" + j);\n                    collisions = _collectGlobalTempVars(subCode, globalTempVars);\n                    if (collisions) {\n                      for (k = 0; k < collisions.length; k++) {\n                        subCode = subCode.replace(new RegExp(\"\\\\b\" + collisions[k] + \"\\\\b\", \"g\"), collisions[k] + \"NNNN\" + j);\n                      }\n                    }\n                    code += subCode;\n                    mainCode += \"main\" + j + \"();\\n\";\n                  }\n                  mainCode += \"gl_FragColor = shaderOutput;\\n}\\n\";\n                  shader = pc.shaderChunks.createShaderFromCode(device, pc.shaderChunks.fullscreenQuadVS, code + mainCode, cachedName);\n                }\n                for (j = 0; j < iterator; j++) {\n                  layers[_postEffectChain[j]]._postEffectCombined = j === iterator - 1 ? 1 : -1;\n                }\n                layers[_postEffectChain[iterator - 1]]._postEffectCombinedShader = shader;\n                layers[_postEffectChain[iterator - 1]]._postEffectCombinedBilinear = layers[_postEffectChain[0]].postEffectBilinear;\n                layers[_postEffectChain[iterator - 1]]._postEffectCombinedSrc = layers[_postEffectChain[0]].postEffect.srcRenderTarget;\n              }\n              _postEffectChain[0] = i;\n              iterator = 1;\n            }\n          }\n        }\n        for (i = 0; i < layers.length; i++) {\n          if (layers[i].isPostEffect && (!layers[i].postEffect.srcRenderTarget && !layers[i]._postEffectCombined || !layers[i].postEffect._postEffectCombinedSrc && layers[i]._postEffectCombined >= 0)) {\n            for (j = i - 1; j >= offset; j--) {\n              if (!layers[j].renderTarget) {\n                layers[j].renderTarget = _backbufferRt[rtId];\n              }\n            }\n            layers[i]._backbufferRtId = rtId;\n            offset = i;\n            _backbufferRtUsed = true;\n            if (rtId === 1) {\n              _backbufferRt2Used = true;\n            }\n            if (layers[i].postEffect.hdr) {\n              if (device.webgl2 && device.extTextureFloatRenderable) {\n                backbufferRtFormat = pc.PIXELFORMAT_111110F;\n              } else {\n                if (device.extTextureHalfFloatLinear && device.extTextureHalfFloatRenderable) {\n                  backbufferRtFormat = pc.PIXELFORMAT_RGBA16F;\n                } else {\n                  backbufferRtFormat = pc.PIXELFORMAT_R8_G8_B8_A8;\n                }\n              }\n            }\n            if (layers[i].postEffect.shader && !layers[i].renderTarget) {\n              rtId = 1 - rtId;\n            }\n          } else {\n            if (!layers[i].isPostEffect && !layers[i].renderTarget && _backbufferRtUsed) {\n              layers[i].renderTarget = _backbufferRt[rtId];\n            }\n          }\n          if (layers[i].isPostEffect && !layers[i].renderTarget) {\n            _backbufferRtWrittenByPost = true;\n          }\n        }\n        if (_backbufferRtUsed) {\n          if (!_backbufferRt[0].colorBuffer) {\n            _createBackbufferRt(0, device, backbufferRtFormat);\n          } else {\n            if (_backbufferRt[0].width !== device.width || _backbufferRt[0].height !== device.height || _backbufferRt[0]._colorBuffer._format !== backbufferRtFormat) {\n              _destroyBackbufferRt(0);\n              _createBackbufferRt(0, device, backbufferRtFormat);\n            }\n          }\n        }\n        if (_backbufferRt2Used) {\n          if (!_backbufferRt[1].colorBuffer) {\n            _createBackbufferRt(1, device, backbufferRtFormat);\n          } else {\n            if (_backbufferRt[1].width !== device.width || _backbufferRt[1].height !== device.height || _backbufferRt[1]._colorBuffer._format !== backbufferRtFormat) {\n              _destroyBackbufferRt(1);\n              _createBackbufferRt(1, device, backbufferRtFormat);\n            }\n          }\n        }\n      }, this);\n      app.on(\"postrender\", function() {\n        var device = app.graphicsDevice;\n        if (_backbufferRtUsed && !_backbufferRtWrittenByPost) {\n          var layers = app.scene.layers.layerList;\n          var rt;\n          for (var i = layers.length - 1; i >= 0; i--) {\n            rt = layers[i].renderTarget;\n            if (rt === _backbufferRt[0] || rt === _backbufferRt[1]) {\n              break;\n            }\n          }\n          if (rt) {\n            if (rt._samples > 1) {\n              rt.resolve(true, false);\n            }\n            device.copyRenderTarget(rt, null, true, false);\n          }\n        }\n      }, this);\n    }\n  }\n  PostEffectPass.prototype.addToComposition = function(order) {\n    this.app.scene.layers.insertTransparent(this.layer, order);\n  };\n  return {PostEffectPass:PostEffectPass};\n}());\npc.extend(pc, function() {\n  var _props = [];\n  var _propsDefault = [];\n  function _defineProperty(name, defaultValue, setFunc, skipEqualsCheck) {\n    var c = LightComponent.prototype;\n    _props.push(name);\n    _propsDefault.push(defaultValue);\n    Object.defineProperty(c, name, {get:function() {\n      return this.data[name];\n    }, set:function(value) {\n      var data = this.data;\n      var oldValue = data[name];\n      if (!skipEqualsCheck && oldValue === value) {\n        return;\n      }\n      data[name] = value;\n      if (setFunc) {\n        setFunc.call(this, value, oldValue);\n      }\n    }, configurable:true});\n  }\n  var LightComponent = function LightComponent(system, entity) {\n    this._cookieAsset = null;\n    this._cookieAssetId = null;\n    this._cookieAssetAdd = false;\n    this._cookieMatrix = null;\n  };\n  LightComponent = pc.inherits(LightComponent, pc.Component);\n  var _defineProps = function(c, d, s) {\n    _defineProperty(\"enabled\", true, function(newValue, oldValue) {\n      this.onSetEnabled(null, oldValue, newValue);\n    });\n    _defineProperty(\"light\", null);\n    _defineProperty(\"type\", \"directional\", function(newValue, oldValue) {\n      this.system.changeType(this, oldValue, newValue);\n      this.refreshProperties();\n    });\n    _defineProperty(\"color\", new pc.Color(1, 1, 1), function(newValue, oldValue) {\n      this.light.setColor(newValue);\n    }, true);\n    _defineProperty(\"intensity\", 1, function(newValue, oldValue) {\n      this.light.intensity = newValue;\n    });\n    _defineProperty(\"castShadows\", false, function(newValue, oldValue) {\n      this.light.castShadows = newValue;\n    });\n    _defineProperty(\"shadowDistance\", 40, function(newValue, oldValue) {\n      this.light.shadowDistance = newValue;\n    });\n    _defineProperty(\"shadowResolution\", 1024, function(newValue, oldValue) {\n      this.light.shadowResolution = newValue;\n    });\n    _defineProperty(\"shadowBias\", 0.05, function(newValue, oldValue) {\n      this.light.shadowBias = -0.01 * newValue;\n    });\n    _defineProperty(\"normalOffsetBias\", 0, function(newValue, oldValue) {\n      this.light.normalOffsetBias = newValue;\n    });\n    _defineProperty(\"range\", 10, function(newValue, oldValue) {\n      this.light.attenuationEnd = newValue;\n    });\n    _defineProperty(\"innerConeAngle\", 40, function(newValue, oldValue) {\n      this.light.innerConeAngle = newValue;\n    });\n    _defineProperty(\"outerConeAngle\", 45, function(newValue, oldValue) {\n      this.light.outerConeAngle = newValue;\n    });\n    _defineProperty(\"falloffMode\", pc.LIGHTFALLOFF_LINEAR, function(newValue, oldValue) {\n      this.light.falloffMode = newValue;\n    });\n    _defineProperty(\"shadowType\", pc.SHADOW_PCF3, function(newValue, oldValue) {\n      this.light.shadowType = newValue;\n    });\n    _defineProperty(\"vsmBlurSize\", 11, function(newValue, oldValue) {\n      this.light.vsmBlurSize = newValue;\n    });\n    _defineProperty(\"vsmBlurMode\", pc.BLUR_GAUSSIAN, function(newValue, oldValue) {\n      this.light.vsmBlurMode = newValue;\n    });\n    _defineProperty(\"vsmBias\", 0.01 * 0.25, function(newValue, oldValue) {\n      this.light.vsmBias = newValue;\n    });\n    _defineProperty(\"cookieAsset\", null, function(newValue, oldValue) {\n      if (this._cookieAssetId && (newValue instanceof pc.Asset && newValue.id === this._cookieAssetId || newValue === this._cookieAssetId)) {\n        return;\n      }\n      this.onCookieAssetRemove();\n      this._cookieAssetId = null;\n      if (newValue instanceof pc.Asset) {\n        this.data.cookieAsset = newValue.id;\n        this._cookieAssetId = newValue.id;\n        this.onCookieAssetAdd(newValue);\n      } else {\n        if (typeof newValue === \"number\") {\n          this._cookieAssetId = newValue;\n          var asset = this.system.app.assets.get(newValue);\n          if (asset) {\n            this.onCookieAssetAdd(asset);\n          } else {\n            this._cookieAssetAdd = true;\n            this.system.app.assets.on(\"add:\" + this._cookieAssetId, this.onCookieAssetAdd, this);\n          }\n        }\n      }\n    });\n    _defineProperty(\"cookie\", null, function(newValue, oldValue) {\n      this.light.cookie = newValue;\n    });\n    _defineProperty(\"cookieIntensity\", 1, function(newValue, oldValue) {\n      this.light.cookieIntensity = newValue;\n    });\n    _defineProperty(\"cookieFalloff\", true, function(newValue, oldValue) {\n      this.light.cookieFalloff = newValue;\n    });\n    _defineProperty(\"cookieChannel\", \"rgb\", function(newValue, oldValue) {\n      this.light.cookieChannel = newValue;\n    });\n    _defineProperty(\"cookieAngle\", 0, function(newValue, oldValue) {\n      if (newValue !== 0 || this.cookieScale !== null) {\n        if (!this._cookieMatrix) {\n          this._cookieMatrix = new pc.Vec4;\n        }\n        var scx = 1;\n        var scy = 1;\n        if (this.cookieScale) {\n          scx = this.cookieScale.x;\n          scy = this.cookieScale.y;\n        }\n        var c = Math.cos(newValue * pc.math.DEG_TO_RAD);\n        var s = Math.sin(newValue * pc.math.DEG_TO_RAD);\n        this._cookieMatrix.set(c / scx, -s / scx, s / scy, c / scy);\n        this.light.cookieTransform = this._cookieMatrix;\n      } else {\n        this.light.cookieTransform = null;\n      }\n    });\n    _defineProperty(\"cookieScale\", null, function(newValue, oldValue) {\n      if (newValue !== null || this.cookieAngle !== 0) {\n        if (!this._cookieMatrix) {\n          this._cookieMatrix = new pc.Vec4;\n        }\n        var scx = newValue.x;\n        var scy = newValue.y;\n        var c = Math.cos(this.cookieAngle * pc.math.DEG_TO_RAD);\n        var s = Math.sin(this.cookieAngle * pc.math.DEG_TO_RAD);\n        this._cookieMatrix.set(c / scx, -s / scx, s / scy, c / scy);\n        this.light.cookieTransform = this._cookieMatrix;\n      } else {\n        this.light.cookieTransform = null;\n      }\n    }, true);\n    _defineProperty(\"cookieOffset\", null, function(newValue, oldValue) {\n      this.light.cookieOffset = newValue;\n    }, true);\n    _defineProperty(\"shadowUpdateMode\", pc.SHADOWUPDATE_REALTIME, function(newValue, oldValue) {\n      this.light.shadowUpdateMode = newValue;\n    });\n    _defineProperty(\"mask\", 1, function(newValue, oldValue) {\n      this.light.mask = newValue;\n    });\n    _defineProperty(\"affectDynamic\", true, function(newValue, oldValue) {\n      if (newValue) {\n        this.light.mask |= pc.MASK_DYNAMIC;\n      } else {\n        this.light.mask &= ~pc.MASK_DYNAMIC;\n      }\n      this.light.mask = this.light._mask;\n    });\n    _defineProperty(\"affectLightmapped\", false, function(newValue, oldValue) {\n      if (newValue) {\n        this.light.mask |= pc.MASK_BAKED;\n        if (this.bake) {\n          this.light.mask &= ~pc.MASK_LIGHTMAP;\n        }\n      } else {\n        this.light.mask &= ~pc.MASK_BAKED;\n        if (this.bake) {\n          this.light.mask |= pc.MASK_LIGHTMAP;\n        }\n      }\n      this.light.mask = this.light._mask;\n    });\n    _defineProperty(\"bake\", false, function(newValue, oldValue) {\n      if (newValue) {\n        this.light.mask |= pc.MASK_LIGHTMAP;\n        if (this.affectLightmapped) {\n          this.light.mask &= ~pc.MASK_BAKED;\n        }\n      } else {\n        this.light.mask &= ~pc.MASK_LIGHTMAP;\n        if (this.affectLightmapped) {\n          this.light.mask |= pc.MASK_BAKED;\n        }\n      }\n      this.light.mask = this.light._mask;\n    });\n    _defineProperty(\"bakeDir\", true, function(newValue, oldValue) {\n      this.light.bakeDir = newValue;\n    });\n    _defineProperty(\"isStatic\", false, function(newValue, oldValue) {\n      this.light.isStatic = newValue;\n    });\n    _defineProperty(\"layers\", [pc.LAYERID_WORLD], function(newValue, oldValue) {\n      var i, layer;\n      for (i = 0; i < oldValue.length; i++) {\n        layer = this.system.app.scene.layers.getLayerById(oldValue[i]);\n        if (!layer) {\n          continue;\n        }\n        layer.removeLight(this);\n      }\n      for (i = 0; i < newValue.length; i++) {\n        layer = this.system.app.scene.layers.getLayerById(newValue[i]);\n        if (!layer) {\n          continue;\n        }\n        if (this.enabled && this.entity.enabled) {\n          layer.addLight(this);\n        }\n      }\n    });\n  };\n  _defineProps();\n  Object.defineProperty(LightComponent.prototype, \"enable\", {get:function() {\n    console.warn(\"WARNING: enable: Property is deprecated. Query enabled property instead.\");\n    return this.enabled;\n  }, set:function(value) {\n    console.warn(\"WARNING: enable: Property is deprecated. Set enabled property instead.\");\n    this.enabled = value;\n  }});\n  pc.extend(LightComponent.prototype, {addLightToLayers:function() {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addLight(this);\n    }\n  }, removeLightFromLayers:function() {\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeLight(this);\n    }\n  }, onLayersChanged:function(oldComp, newComp) {\n    if (this.enabled && this.entity.enabled) {\n      this.addLightToLayers();\n    }\n    oldComp.off(\"add\", this.onLayerAdded, this);\n    oldComp.off(\"remove\", this.onLayerRemoved, this);\n    newComp.on(\"add\", this.onLayerAdded, this);\n    newComp.on(\"remove\", this.onLayerRemoved, this);\n  }, onLayerAdded:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    if (this.enabled && this.entity.enabled) {\n      layer.addLight(this);\n    }\n  }, onLayerRemoved:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.removeLight(this);\n  }, refreshProperties:function() {\n    var name;\n    for (var i = 0; i < _props.length; i++) {\n      name = _props[i];\n      this[name] = this[name];\n    }\n    if (this.enabled && this.entity.enabled) {\n      this.onEnable();\n    }\n  }, updateShadow:function() {\n    this.light.updateShadow();\n  }, onCookieAssetSet:function() {\n    var forceLoad = false;\n    if (this._cookieAsset.type === \"cubemap\" && !this._cookieAsset.loadFaces) {\n      this._cookieAsset.loadFaces = true;\n      forceLoad = true;\n    }\n    if (!this._cookieAsset.resource || forceLoad) {\n      this.system.app.assets.load(this._cookieAsset);\n    }\n    if (this._cookieAsset.resource) {\n      this.onCookieAssetLoad();\n    }\n  }, onCookieAssetAdd:function(asset) {\n    if (this._cookieAssetId !== asset.id) {\n      return;\n    }\n    this._cookieAsset = asset;\n    if (this.light._enabled) {\n      this.onCookieAssetSet();\n    }\n    this._cookieAsset.on(\"load\", this.onCookieAssetLoad, this);\n    this._cookieAsset.on(\"remove\", this.onCookieAssetRemove, this);\n  }, onCookieAssetLoad:function() {\n    if (!this._cookieAsset || !this._cookieAsset.resource) {\n      return;\n    }\n    this.cookie = this._cookieAsset.resource;\n  }, onCookieAssetRemove:function() {\n    if (!this._cookieAssetId) {\n      return;\n    }\n    if (this._cookieAssetAdd) {\n      this.system.app.assets.off(\"add:\" + this._cookieAssetId, this.onCookieAssetAdd, this);\n      this._cookieAssetAdd = false;\n    }\n    if (this._cookieAsset) {\n      this._cookieAsset.off(\"load\", this.onCookieAssetLoad, this);\n      this._cookieAsset.off(\"remove\", this.onCookieAssetRemove, this);\n      this._cookieAsset = null;\n    }\n    this.cookie = null;\n  }, onEnable:function() {\n    LightComponent._super.onEnable.call(this);\n    this.light.enabled = true;\n    this.system.app.scene.on(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.on(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.on(\"remove\", this.onLayerRemoved, this);\n    }\n    if (this.enabled && this.entity.enabled) {\n      this.addLightToLayers();\n    }\n    if (this._cookieAsset && !this.cookie) {\n      this.onCookieAssetSet();\n    }\n  }, onDisable:function() {\n    LightComponent._super.onDisable.call(this);\n    this.light.enabled = false;\n    this.system.app.scene.off(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.off(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.off(\"remove\", this.onLayerRemoved, this);\n    }\n    this.removeLightFromLayers();\n  }});\n  return {LightComponent:LightComponent, _lightProps:_props, _lightPropsDefault:_propsDefault};\n}());\npc.extend(pc, function() {\n  var lightTypes = {\"directional\":pc.LIGHTTYPE_DIRECTIONAL, \"point\":pc.LIGHTTYPE_POINT, \"spot\":pc.LIGHTTYPE_SPOT};\n  var LightComponentSystem = function(app) {\n    this.id = \"light\";\n    this.description = \"Enables the Entity to emit light.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.LightComponent;\n    this.DataType = pc.LightComponentData;\n    this.on(\"remove\", this.onRemove, this);\n  };\n  LightComponentSystem = pc.inherits(LightComponentSystem, pc.ComponentSystem);\n  pc.extend(LightComponentSystem.prototype, {initializeComponentData:function(component, _data) {\n    var data = {};\n    var _props = pc._lightProps;\n    var name;\n    for (var i = 0; i < _props.length; i++) {\n      name = _props[i];\n      data[name] = _data[name];\n    }\n    if (!data.type) {\n      data.type = component.data.type;\n    }\n    component.data.type = data.type;\n    if (data.layers && pc.type(data.layers) === \"array\") {\n      data.layers = data.layers.slice(0);\n    }\n    if (data.color && pc.type(data.color) === \"array\") {\n      data.color = new pc.Color(data.color[0], data.color[1], data.color[2]);\n    }\n    if (data.cookieOffset && data.cookieOffset instanceof Array) {\n      data.cookieOffset = new pc.Vec2(data.cookieOffset[0], data.cookieOffset[1]);\n    }\n    if (data.cookieScale && data.cookieScale instanceof Array) {\n      data.cookieScale = new pc.Vec2(data.cookieScale[0], data.cookieScale[1]);\n    }\n    if (data.enable) {\n      console.warn(\"WARNING: enable: Property is deprecated. Set enabled property instead.\");\n      data.enabled = data.enable;\n    }\n    var light = new pc.Light;\n    light.type = lightTypes[data.type];\n    light._node = component.entity;\n    light._scene = this.app.scene;\n    component.data.light = light;\n    LightComponentSystem._super.initializeComponentData.call(this, component, data, _props);\n  }, cloneComponent:function(entity, clone) {\n    var light = entity.light;\n    var data = [];\n    var name;\n    var _props = pc._lightProps;\n    for (var i = 0; i < _props.length; i++) {\n      name = _props[i];\n      if (name === \"light\") {\n        continue;\n      }\n      if (light[name] && light[name].clone) {\n        data[name] = light[name].clone();\n      } else {\n        data[name] = light[name];\n      }\n    }\n    this.addComponent(clone, data);\n  }, changeType:function(component, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      component.light.type = lightTypes[newValue];\n    }\n  }});\n  return {LightComponentSystem:LightComponentSystem};\n}());\npc.extend(pc, function() {\n  var LightComponentData = function() {\n    var _props = pc._lightProps;\n    var _propsDefault = pc._lightPropsDefault;\n    var value;\n    for (var i = 0; i < _props.length; i++) {\n      value = _propsDefault[i];\n      if (value && value.clone) {\n        this[_props[i]] = value.clone();\n      } else {\n        this[_props[i]] = value;\n      }\n    }\n  };\n  LightComponentData = pc.inherits(LightComponentData, pc.ComponentData);\n  return {LightComponentData:LightComponentData};\n}());\npc.extend(pc, function() {\n  var ScriptComponent = function ScriptComponent(system, entity) {\n    this._scripts = [];\n    this._scriptsIndex = {};\n    this._scriptsData = null;\n    this._oldState = true;\n    this._beingEnabled = false;\n    this.on(\"set_enabled\", this._onSetEnabled, this);\n  };\n  ScriptComponent = pc.inherits(ScriptComponent, pc.Component);\n  ScriptComponent.scriptMethods = {initialize:\"initialize\", postInitialize:\"postInitialize\", update:\"update\", postUpdate:\"postUpdate\", swap:\"swap\"};\n  pc.extend(ScriptComponent.prototype, {onEnable:function() {\n    ScriptComponent._super.onEnable.call(this);\n    this._beingEnabled = true;\n    this._checkState();\n    if (!this.entity._beingEnabled) {\n      this.onPostStateChange();\n    }\n    this._beingEnabled = false;\n  }, onDisable:function() {\n    ScriptComponent._super.onDisable.call(this);\n    this._checkState();\n  }, onPostStateChange:function() {\n    var script;\n    for (var i = 0, len = this.scripts.length; i < len; i++) {\n      script = this.scripts[i];\n      if (script._initialized && !script._postInitialized && script.enabled) {\n        script._postInitialized = true;\n        if (script.postInitialize) {\n          this._scriptMethod(script, ScriptComponent.scriptMethods.postInitialize);\n        }\n      }\n    }\n  }, _onSetEnabled:function(prop, old, value) {\n    this._beingEnabled = true;\n    this._checkState();\n    this._beingEnabled = false;\n  }, _checkState:function() {\n    var state = this.enabled && this.entity.enabled;\n    if (state === this._oldState) {\n      return;\n    }\n    this._oldState = state;\n    this.fire(state ? \"enable\" : \"disable\");\n    this.fire(\"state\", state);\n    var script;\n    for (var i = 0, len = this.scripts.length; i < len; i++) {\n      script = this.scripts[i];\n      script.enabled = script._enabled;\n    }\n  }, _onBeforeRemove:function() {\n    this.fire(\"remove\");\n    var destroyed = true;\n    while (this.scripts.length > 0 && destroyed) {\n      destroyed = this.destroy(this.scripts[0].__scriptType.__name);\n    }\n  }, _onInitializeAttributes:function() {\n    for (var i = 0, len = this.scripts.length; i < len; i++) {\n      this.scripts[i].__initializeAttributes();\n    }\n  }, _scriptMethod:function(script, method, arg) {\n    try {\n      script[method](arg);\n    } catch (ex) {\n      script.enabled = false;\n      if (!script._callbacks || !script._callbacks.error) {\n        console.warn('unhandled exception while calling \"' + method + '\" for \"' + script.__scriptType.__name + '\" script: ', ex);\n        console.error(ex);\n      }\n      script.fire(\"error\", ex, method);\n      this.fire(\"error\", script, ex, method);\n    }\n  }, _onInitialize:function() {\n    var script, scripts = this._scripts;\n    for (var i = 0, len = scripts.length; i < len; i++) {\n      script = scripts[i];\n      if (!script._initialized && script.enabled) {\n        script._initialized = true;\n        if (script.initialize) {\n          this._scriptMethod(script, ScriptComponent.scriptMethods.initialize);\n        }\n      }\n    }\n  }, _onPostInitialize:function() {\n    this.onPostStateChange();\n  }, _onUpdate:function(dt) {\n    var script, scripts = this._scripts;\n    for (var i = 0, len = scripts.length; i < len; i++) {\n      script = scripts[i];\n      if (script.update && script.enabled) {\n        this._scriptMethod(script, ScriptComponent.scriptMethods.update, dt);\n      }\n    }\n  }, _onPostUpdate:function(dt) {\n    var script, scripts = this._scripts;\n    for (var i = 0, len = scripts.length; i < len; i++) {\n      script = scripts[i];\n      if (script.postUpdate && script.enabled) {\n        this._scriptMethod(script, ScriptComponent.scriptMethods.postUpdate, dt);\n      }\n    }\n  }, has:function(name) {\n    var scriptType = name;\n    if (typeof scriptType === \"string\") {\n      scriptType = this.system.app.scripts.get(scriptType);\n    }\n    return !!this._scriptsIndex[scriptType.__name];\n  }, create:function(name, args) {\n    var self = this;\n    args = args || {};\n    var scriptType = name;\n    var scriptName = name;\n    if (typeof scriptType === \"string\") {\n      scriptType = this.system.app.scripts.get(scriptType);\n    } else {\n      if (scriptType) {\n        scriptName = scriptType.__name;\n      }\n    }\n    if (scriptType) {\n      if (!this._scriptsIndex[scriptType.__name] || !this._scriptsIndex[scriptType.__name].instance) {\n        var scriptInstance = new scriptType({app:this.system.app, entity:this.entity, enabled:args.hasOwnProperty(\"enabled\") ? args.enabled : true, attributes:args.attributes || null});\n        var ind = -1;\n        if (typeof args.ind === \"number\" && args.ind !== -1 && this._scripts.length > args.ind) {\n          ind = args.ind;\n        }\n        if (ind === -1) {\n          this._scripts.push(scriptInstance);\n        } else {\n          this._scripts.splice(ind, 0, scriptInstance);\n        }\n        this._scriptsIndex[scriptType.__name] = {instance:scriptInstance, onSwap:function() {\n          self.swap(scriptType.__name);\n        }};\n        this[scriptType.__name] = scriptInstance;\n        if (!args.preloading) {\n          scriptInstance.__initializeAttributes();\n        }\n        this.fire(\"create\", scriptType.__name, scriptInstance);\n        this.fire(\"create:\" + scriptType.__name, scriptInstance);\n        this.system.app.scripts.on(\"swap:\" + scriptType.__name, this._scriptsIndex[scriptType.__name].onSwap);\n        if (!args.preloading) {\n          if (scriptInstance.enabled && !scriptInstance._initialized) {\n            scriptInstance._initialized = true;\n            if (scriptInstance.initialize) {\n              this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.initialize);\n            }\n          }\n          if (scriptInstance.enabled && !scriptInstance._postInitialized) {\n            scriptInstance._postInitialized = true;\n            if (scriptInstance.postInitialize) {\n              this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.postInitialize);\n            }\n          }\n        }\n        return scriptInstance;\n      } else {\n        console.warn(\"script '\" + scriptName + \"' is already added to entity '\" + this.entity.name + \"'\");\n      }\n    } else {\n      this._scriptsIndex[scriptName] = {awaiting:true, ind:this._scripts.length};\n      console.warn(\"script '\" + scriptName + \"' is not found, awaiting it to be added to registry\");\n    }\n    return null;\n  }, destroy:function(name) {\n    var scriptName = name;\n    var scriptType = name;\n    if (typeof scriptType === \"string\") {\n      scriptType = this.system.app.scripts.get(scriptType);\n      if (scriptType) {\n        scriptName = scriptType.__name;\n      }\n    }\n    var scriptData = this._scriptsIndex[scriptName];\n    delete this._scriptsIndex[scriptName];\n    if (!scriptData) {\n      return false;\n    }\n    if (scriptData.instance) {\n      var ind = this._scripts.indexOf(scriptData.instance);\n      this._scripts.splice(ind, 1);\n    }\n    this.system.app.scripts.off(\"swap:\" + scriptName, scriptData.onSwap);\n    delete this[scriptName];\n    this.fire(\"destroy\", scriptName, scriptData.instance || null);\n    this.fire(\"destroy:\" + scriptName, scriptData.instance || null);\n    if (scriptData.instance) {\n      scriptData.instance.fire(\"destroy\");\n    }\n    return true;\n  }, swap:function(script) {\n    var scriptType = script;\n    if (typeof scriptType === \"string\") {\n      scriptType = this.system.app.scripts.get(scriptType);\n    }\n    var old = this._scriptsIndex[scriptType.__name];\n    if (!old || !old.instance) {\n      return false;\n    }\n    var scriptInstanceOld = old.instance;\n    var ind = this._scripts.indexOf(scriptInstanceOld);\n    var scriptInstance = new scriptType({app:this.system.app, entity:this.entity, enabled:scriptInstanceOld.enabled, attributes:scriptInstanceOld.__attributes});\n    if (!scriptInstance.swap) {\n      return false;\n    }\n    scriptInstance.__initializeAttributes();\n    this._scripts[ind] = scriptInstance;\n    this._scriptsIndex[scriptType.__name].instance = scriptInstance;\n    this[scriptType.__name] = scriptInstance;\n    this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.swap, scriptInstanceOld);\n    this.fire(\"swap\", scriptType.__name, scriptInstance);\n    this.fire(\"swap:\" + scriptType.__name, scriptInstance);\n    return true;\n  }, move:function(name, ind) {\n    if (ind >= this._scripts.length) {\n      return false;\n    }\n    var scriptName = name;\n    if (typeof scriptName !== \"string\") {\n      scriptName = name.__name;\n    }\n    var scriptData = this._scriptsIndex[scriptName];\n    if (!scriptData || !scriptData.instance) {\n      return false;\n    }\n    var indOld = this._scripts.indexOf(scriptData.instance);\n    if (indOld === -1 || indOld === ind) {\n      return false;\n    }\n    this._scripts.splice(ind, 0, this._scripts.splice(indOld, 1)[0]);\n    this.fire(\"move\", scriptName, scriptData.instance, ind, indOld);\n    this.fire(\"move:\" + scriptName, scriptData.instance, ind, indOld);\n    return true;\n  }});\n  Object.defineProperty(ScriptComponent.prototype, \"scripts\", {get:function() {\n    return this._scripts;\n  }, set:function(value) {\n    this._scriptsData = value;\n    for (var key in value) {\n      if (!value.hasOwnProperty(key)) {\n        continue;\n      }\n      var script = this._scriptsIndex[key];\n      if (script) {\n        if (typeof value[key].enabled === \"boolean\") {\n          script.enabled = !!value[key].enabled;\n        }\n        if (typeof value[key].attributes === \"object\") {\n          for (var attr in value[key].attributes) {\n            if (pc.createScript.reservedAttributes[attr]) {\n              continue;\n            }\n            if (!script.__attributes.hasOwnProperty(attr)) {\n              var scriptType = this.system.app.scripts.get(key);\n              if (scriptType) {\n                scriptType.attributes.add(attr, {});\n              }\n            }\n            script[attr] = value[key].attributes[attr];\n          }\n        }\n      } else {\n        console.log(this.order);\n      }\n    }\n  }});\n  return {ScriptComponent:ScriptComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\"];\n  var ScriptComponentSystem = function ScriptComponentSystem(app) {\n    this.id = \"script\";\n    this.app = app;\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ScriptComponent;\n    this.DataType = pc.ScriptComponentData;\n    this.schema = _schema;\n    this._components = [];\n    this.preloading = true;\n    this.on(\"beforeremove\", this._onBeforeRemove, this);\n    pc.ComponentSystem.on(\"initialize\", this._onInitialize, this);\n    pc.ComponentSystem.on(\"postInitialize\", this._onPostInitialize, this);\n    pc.ComponentSystem.on(\"update\", this._onUpdate, this);\n    pc.ComponentSystem.on(\"postUpdate\", this._onPostUpdate, this);\n  };\n  ScriptComponentSystem = pc.inherits(ScriptComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ScriptComponent.prototype, _schema);\n  pc.extend(ScriptComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    this._components.push(component);\n    component.enabled = data.hasOwnProperty(\"enabled\") ? !!data.enabled : true;\n    if (data.hasOwnProperty(\"order\") && data.hasOwnProperty(\"scripts\")) {\n      component._scriptsData = data.scripts;\n      for (var i = 0; i < data.order.length; i++) {\n        component.create(data.order[i], {enabled:data.scripts[data.order[i]].enabled, attributes:data.scripts[data.order[i]].attributes, preloading:this.preloading});\n      }\n    }\n  }, cloneComponent:function(entity, clone) {\n    var i, key;\n    var order = [];\n    var scripts = {};\n    for (i = 0; i < entity.script._scripts.length; i++) {\n      var scriptInstance = entity.script._scripts[i];\n      var scriptName = scriptInstance.__scriptType.__name;\n      order.push(scriptName);\n      var attributes = {};\n      for (key in scriptInstance.__attributes) {\n        attributes[key] = scriptInstance.__attributes[key];\n      }\n      scripts[scriptName] = {enabled:scriptInstance._enabled, attributes:attributes};\n    }\n    for (key in entity.script._scriptsIndex) {\n      if (key.awayting) {\n        order.splice(key.ind, 0, key);\n      }\n    }\n    var data = {enabled:entity.script.enabled, order:order, scripts:scripts};\n    return this.addComponent(clone, data);\n  }, _callComponentMethod:function(name, dt) {\n    for (var i = 0; i < this._components.length; i++) {\n      if (!this._components[i].entity.enabled || !this._components[i].enabled) {\n        continue;\n      }\n      this._components[i][name](dt);\n    }\n  }, _onInitialize:function() {\n    this.preloading = false;\n    for (var i = 0; i < this._components.length; i++) {\n      this._components[i]._onInitializeAttributes();\n    }\n    this._callComponentMethod(\"_onInitialize\");\n  }, _onPostInitialize:function() {\n    this._callComponentMethod(\"_onPostInitialize\");\n  }, _onUpdate:function(dt) {\n    this._callComponentMethod(\"_onUpdate\", dt);\n  }, _onPostUpdate:function(dt) {\n    this._callComponentMethod(\"_onPostUpdate\", dt);\n  }, _onBeforeRemove:function(entity, component) {\n    var ind = this._components.indexOf(component);\n    if (ind === -1) {\n      return;\n    }\n    component._onBeforeRemove();\n    this._components.splice(ind, 1);\n  }});\n  return {ScriptComponentSystem:ScriptComponentSystem};\n}());\npc.extend(pc, function() {\n  var ScriptComponentData = function() {\n    this.enabled = true;\n  };\n  ScriptComponentData = pc.inherits(ScriptComponentData, pc.ComponentData);\n  return {ScriptComponentData:ScriptComponentData};\n}());\npc.extend(pc, function() {\n  var ScriptLegacyComponent = function ScriptLegacyComponent(system, entity) {\n    this.on(\"set_scripts\", this.onSetScripts, this);\n  };\n  ScriptLegacyComponent = pc.inherits(ScriptLegacyComponent, pc.Component);\n  pc.extend(ScriptLegacyComponent.prototype, {send:function(name, functionName) {\n    console.warn(\"DEPRECATED: ScriptLegacyComponent.send() is deprecated and will be removed soon. Please use: http://developer.playcanvas.com/user-manual/scripting/communication/\");\n    var args = pc.makeArray(arguments).slice(2);\n    var instances = this.entity.script.instances;\n    var fn;\n    if (instances && instances[name]) {\n      fn = instances[name].instance[functionName];\n      if (fn) {\n        return fn.apply(instances[name].instance, args);\n      }\n    }\n  }, onEnable:function() {\n    ScriptLegacyComponent._super.onEnable.call(this);\n    if (this.data.areScriptsLoaded && !this.system.preloading) {\n      if (!this.data.initialized) {\n        this.system._initializeScriptComponent(this);\n      } else {\n        this.system._enableScriptComponent(this);\n      }\n      if (!this.data.postInitialized) {\n        this.system._postInitializeScriptComponent(this);\n      }\n    }\n  }, onDisable:function() {\n    ScriptLegacyComponent._super.onDisable.call(this);\n    this.system._disableScriptComponent(this);\n  }, onSetScripts:function(name, oldValue, newValue) {\n    if (!this.system._inTools || this.runInTools) {\n      if (this._updateScriptAttributes(oldValue, newValue)) {\n        return;\n      }\n      if (this.enabled) {\n        this.system._disableScriptComponent(this);\n      }\n      this.system._destroyScriptComponent(this);\n      this.data.areScriptsLoaded = false;\n      var scripts = newValue;\n      var urls = scripts.map(function(s) {\n        return s.url;\n      });\n      if (this._loadFromCache(urls)) {\n        return;\n      }\n      this._loadScripts(urls);\n    }\n  }, _updateScriptAttributes:function(oldValue, newValue) {\n    var onlyUpdateAttributes = true;\n    if (oldValue.length !== newValue.length) {\n      onlyUpdateAttributes = false;\n    } else {\n      var i, len = newValue.length;\n      for (i = 0; i < len; i++) {\n        if (oldValue[i].url !== newValue[i].url) {\n          onlyUpdateAttributes = false;\n          break;\n        }\n      }\n    }\n    if (onlyUpdateAttributes) {\n      for (var key in this.instances) {\n        if (this.instances.hasOwnProperty(key)) {\n          this.system._updateAccessors(this.entity, this.instances[key]);\n        }\n      }\n    }\n    return onlyUpdateAttributes;\n  }, _loadFromCache:function(urls) {\n    var i, len;\n    var cached = [];\n    var prefix = this.system.app._scriptPrefix || \"\";\n    var regex = /^http(s)?:\\/\\//i;\n    for (i = 0, len = urls.length; i < len; i++) {\n      var url = urls[i];\n      if (!regex.test(url)) {\n        url = pc.path.join(prefix, url);\n      }\n      var type = this.system.app.loader.getFromCache(url, \"script\");\n      if (!type) {\n        return false;\n      } else {\n        cached.push(type);\n      }\n    }\n    for (i = 0, len = cached.length; i < len; i++) {\n      var ScriptType = cached[i];\n      if (ScriptType === true) {\n        continue;\n      }\n      if (ScriptType && this.entity.script) {\n        if (!this.entity.script.instances[ScriptType._pcScriptName]) {\n          var instance = new ScriptType(this.entity);\n          this.system._preRegisterInstance(this.entity, urls[i], ScriptType._pcScriptName, instance);\n        }\n      }\n    }\n    if (this.data) {\n      this.data.areScriptsLoaded = true;\n    }\n    if (!this.system.preloading) {\n      this.system.onInitialize(this.entity);\n      this.system.onPostInitialize(this.entity);\n    }\n    return true;\n  }, _loadScripts:function(urls) {\n    var count = urls.length;\n    var prefix = this.system.app._scriptPrefix || \"\";\n    urls.forEach(function(url) {\n      var _url = null;\n      var _unprefixed = null;\n      if (url.toLowerCase().startsWith(\"http://\") || url.toLowerCase().startsWith(\"https://\")) {\n        _unprefixed = url;\n        _url = url;\n      } else {\n        _unprefixed = url;\n        _url = pc.path.join(prefix, url);\n      }\n      this.system.app.loader.load(_url, \"script\", function(err, ScriptType) {\n        count--;\n        if (!err) {\n          if (ScriptType && this.entity.script) {\n            if (!this.entity.script.instances[ScriptType._pcScriptName]) {\n              var instance = new ScriptType(this.entity);\n              this.system._preRegisterInstance(this.entity, _unprefixed, ScriptType._pcScriptName, instance);\n            }\n          }\n        } else {\n          console.error(err);\n        }\n        if (count === 0) {\n          this.data.areScriptsLoaded = true;\n          if (!this.system.preloading) {\n            this.system.onInitialize(this.entity);\n            this.system.onPostInitialize(this.entity);\n          }\n        }\n      }.bind(this));\n    }.bind(this));\n  }});\n  return {ScriptLegacyComponent:ScriptLegacyComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"scripts\", \"instances\", \"runInTools\"];\n  var INITIALIZE = \"initialize\";\n  var POST_INITIALIZE = \"postInitialize\";\n  var UPDATE = \"update\";\n  var POST_UPDATE = \"postUpdate\";\n  var FIXED_UPDATE = \"fixedUpdate\";\n  var TOOLS_UPDATE = \"toolsUpdate\";\n  var ON_ENABLE = \"onEnable\";\n  var ON_DISABLE = \"onDisable\";\n  var ScriptLegacyComponentSystem = function ScriptLegacyComponentSystem(app) {\n    this.id = \"script\";\n    this.description = \"Allows the Entity to run JavaScript fragments to implement custom behavior.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ScriptLegacyComponent;\n    this.DataType = pc.ScriptLegacyComponentData;\n    this.schema = _schema;\n    this.preloading = false;\n    this.instancesWithUpdate = [];\n    this.instancesWithFixedUpdate = [];\n    this.instancesWithPostUpdate = [];\n    this.instancesWithToolsUpdate = [];\n    this.on(\"beforeremove\", this.onBeforeRemove, this);\n    pc.ComponentSystem.on(INITIALIZE, this.onInitialize, this);\n    pc.ComponentSystem.on(POST_INITIALIZE, this.onPostInitialize, this);\n    pc.ComponentSystem.on(UPDATE, this.onUpdate, this);\n    pc.ComponentSystem.on(FIXED_UPDATE, this.onFixedUpdate, this);\n    pc.ComponentSystem.on(POST_UPDATE, this.onPostUpdate, this);\n    pc.ComponentSystem.on(TOOLS_UPDATE, this.onToolsUpdate, this);\n  };\n  ScriptLegacyComponentSystem = pc.inherits(ScriptLegacyComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ScriptLegacyComponent.prototype, _schema);\n  pc.extend(ScriptLegacyComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    properties = [\"runInTools\", \"enabled\", \"scripts\"];\n    if (data.scripts && data.scripts.length) {\n      data.scripts.forEach(function(script) {\n        if (script.attributes && pc.type(script.attributes) === \"array\") {\n          var dict = {};\n          for (var i = 0; i < script.attributes.length; i++) {\n            dict[script.attributes[i].name] = script.attributes[i];\n          }\n          script.attributes = dict;\n        }\n      });\n    }\n    ScriptLegacyComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, cloneComponent:function(entity, clone) {\n    var src = this.dataStore[entity._guid];\n    var data = {runInTools:src.data.runInTools, scripts:[], enabled:src.data.enabled};\n    var scripts = src.data.scripts;\n    for (var i = 0, len = scripts.length; i < len; i++) {\n      var attributes = scripts[i].attributes;\n      if (attributes) {\n        delete scripts[i].attributes;\n      }\n      data.scripts.push(pc.extend({}, scripts[i]));\n      if (attributes) {\n        data.scripts[i].attributes = this._cloneAttributes(attributes);\n        scripts[i].attributes = attributes;\n      }\n    }\n    return this.addComponent(clone, data);\n  }, onBeforeRemove:function(entity, component) {\n    if (component.enabled) {\n      this._disableScriptComponent(component);\n    }\n    this._destroyScriptComponent(component);\n  }, onInitialize:function(root) {\n    this._registerInstances(root);\n    if (root.enabled) {\n      if (root.script && root.script.enabled) {\n        this._initializeScriptComponent(root.script);\n      }\n      var children = root._children;\n      var i, len = children.length;\n      for (i = 0; i < len; i++) {\n        if (children[i] instanceof pc.Entity) {\n          this.onInitialize(children[i]);\n        }\n      }\n    }\n  }, onPostInitialize:function(root) {\n    if (root.enabled) {\n      if (root.script && root.script.enabled) {\n        this._postInitializeScriptComponent(root.script);\n      }\n      var children = root._children;\n      var i, len = children.length;\n      for (i = 0; i < len; i++) {\n        if (children[i] instanceof pc.Entity) {\n          this.onPostInitialize(children[i]);\n        }\n      }\n    }\n  }, _callInstancesMethod:function(script, method) {\n    var instances = script.data.instances;\n    for (var name in instances) {\n      if (instances.hasOwnProperty(name)) {\n        var instance = instances[name].instance;\n        if (instance[method]) {\n          instance[method].call(instance);\n        }\n      }\n    }\n  }, _initializeScriptComponent:function(script) {\n    this._callInstancesMethod(script, INITIALIZE);\n    script.data.initialized = true;\n    if (script.enabled && script.entity.enabled) {\n      this._enableScriptComponent(script);\n    }\n  }, _enableScriptComponent:function(script) {\n    this._callInstancesMethod(script, ON_ENABLE);\n  }, _disableScriptComponent:function(script) {\n    this._callInstancesMethod(script, ON_DISABLE);\n  }, _destroyScriptComponent:function(script) {\n    var index;\n    var instances = script.data.instances;\n    for (var name in instances) {\n      if (instances.hasOwnProperty(name)) {\n        var instance = instances[name].instance;\n        if (instance.destroy) {\n          instance.destroy();\n        }\n        if (instance.update) {\n          index = this.instancesWithUpdate.indexOf(instance);\n          if (index >= 0) {\n            this.instancesWithUpdate.splice(index, 1);\n          }\n        }\n        if (instance.fixedUpdate) {\n          index = this.instancesWithFixedUpdate.indexOf(instance);\n          if (index >= 0) {\n            this.instancesWithFixedUpdate.splice(index, 1);\n          }\n        }\n        if (instance.postUpdate) {\n          index = this.instancesWithPostUpdate.indexOf(instance);\n          if (index >= 0) {\n            this.instancesWithPostUpdate.splice(index, 1);\n          }\n        }\n        if (instance.toolsUpdate) {\n          index = this.instancesWithToolsUpdate.indexOf(instance);\n          if (index >= 0) {\n            this.instancesWithToolsUpdate.splice(index, 1);\n          }\n        }\n        if (script.instances[name].instance === script[name]) {\n          delete script[name];\n        }\n        delete script.instances[name];\n      }\n    }\n  }, _postInitializeScriptComponent:function(script) {\n    this._callInstancesMethod(script, POST_INITIALIZE);\n    script.data.postInitialized = true;\n  }, _updateInstances:function(method, updateList, dt) {\n    var item;\n    for (var i = 0, len = updateList.length; i < len; i++) {\n      item = updateList[i];\n      if (item && item.entity && item.entity.enabled && item.entity.script.enabled) {\n        item[method].call(item, dt);\n      }\n    }\n  }, onUpdate:function(dt) {\n    this._updateInstances(UPDATE, this.instancesWithUpdate, dt);\n  }, onFixedUpdate:function(dt) {\n    this._updateInstances(FIXED_UPDATE, this.instancesWithFixedUpdate, dt);\n  }, onPostUpdate:function(dt) {\n    this._updateInstances(POST_UPDATE, this.instancesWithPostUpdate, dt);\n  }, onToolsUpdate:function(dt) {\n    this._updateInstances(TOOLS_UPDATE, this.instancesWithToolsUpdate, dt);\n  }, broadcast:function(name, functionName) {\n    console.warn(\"DEPRECATED: ScriptLegacyComponentSystem.broadcast() is deprecated and will be removed soon. Please use: http://developer.playcanvas.com/user-manual/scripting/communication/\");\n    var args = pc.makeArray(arguments).slice(2);\n    var id, data, fn;\n    var dataStore = this.store;\n    for (id in dataStore) {\n      if (dataStore.hasOwnProperty(id)) {\n        data = dataStore[id].data;\n        if (data.instances[name]) {\n          fn = data.instances[name].instance[functionName];\n          if (fn) {\n            fn.apply(data.instances[name].instance, args);\n          }\n        }\n      }\n    }\n  }, _preRegisterInstance:function(entity, url, name, instance) {\n    if (entity.script) {\n      entity.script.data._instances = entity.script.data._instances || {};\n      if (entity.script.data._instances[name]) {\n        throw Error(pc.string.format(\"Script name collision '{0}'. Scripts from '{1}' and '{2}' {{3}}\", name, url, entity.script.data._instances[name].url, entity._guid));\n      }\n      entity.script.data._instances[name] = {url:url, name:name, instance:instance};\n    }\n  }, _registerInstances:function(entity) {\n    var preRegistered, instance, instanceName;\n    if (entity.script) {\n      if (entity.script.data._instances) {\n        entity.script.instances = entity.script.data._instances;\n        for (instanceName in entity.script.instances) {\n          preRegistered = entity.script.instances[instanceName];\n          instance = preRegistered.instance;\n          pc.events.attach(instance);\n          if (instance.update) {\n            this.instancesWithUpdate.push(instance);\n          }\n          if (instance.fixedUpdate) {\n            this.instancesWithFixedUpdate.push(instance);\n          }\n          if (instance.postUpdate) {\n            this.instancesWithPostUpdate.push(instance);\n          }\n          if (instance.toolsUpdate) {\n            this.instancesWithToolsUpdate.push(instance);\n          }\n          if (entity.script.scripts) {\n            this._createAccessors(entity, preRegistered);\n          }\n          if (entity.script[instanceName]) {\n            throw Error(pc.string.format(\"Script with name '{0}' is already attached to Script Component\", instanceName));\n          } else {\n            entity.script[instanceName] = instance;\n          }\n        }\n        delete entity.script.data._instances;\n      }\n    }\n    var children = entity._children;\n    var i, len = children.length;\n    for (i = 0; i < len; i++) {\n      if (children[i] instanceof pc.Entity) {\n        this._registerInstances(children[i]);\n      }\n    }\n  }, _cloneAttributes:function(attributes) {\n    var result = {};\n    for (var key in attributes) {\n      if (!attributes.hasOwnProperty(key)) {\n        continue;\n      }\n      if (attributes[key].type !== \"entity\") {\n        result[key] = pc.extend({}, attributes[key]);\n      } else {\n        var val = attributes[key].value;\n        delete attributes[key].value;\n        result[key] = pc.extend({}, attributes[key]);\n        result[key].value = val;\n        attributes[key].value = val;\n      }\n    }\n    return result;\n  }, _createAccessors:function(entity, instance) {\n    var self = this;\n    var i;\n    var len = entity.script.scripts.length;\n    var url = instance.url;\n    for (i = 0; i < len; i++) {\n      var script = entity.script.scripts[i];\n      if (script.url === url) {\n        var attributes = script.attributes;\n        if (script.name && attributes) {\n          for (var key in attributes) {\n            if (attributes.hasOwnProperty(key)) {\n              self._createAccessor(attributes[key], instance);\n            }\n          }\n          entity.script.data.attributes[script.name] = self._cloneAttributes(attributes);\n        }\n        break;\n      }\n    }\n  }, _createAccessor:function(attribute, instance) {\n    var self = this;\n    attribute = {name:attribute.name, value:attribute.value, type:attribute.type};\n    self._convertAttributeValue(attribute);\n    Object.defineProperty(instance.instance, attribute.name, {get:function() {\n      return attribute.value;\n    }, set:function(value) {\n      var oldValue = attribute.value;\n      attribute.value = value;\n      self._convertAttributeValue(attribute);\n      instance.instance.fire(\"set\", attribute.name, oldValue, attribute.value);\n    }, configurable:true});\n  }, _updateAccessors:function(entity, instance) {\n    var self = this;\n    var i;\n    var len = entity.script.scripts.length;\n    var key;\n    var url = instance.url;\n    var scriptComponent, script, name, attributes;\n    var previousAttributes;\n    var oldAttribute;\n    for (i = 0; i < len; i++) {\n      scriptComponent = entity.script;\n      script = scriptComponent.scripts[i];\n      if (script.url === url) {\n        name = script.name;\n        attributes = script.attributes;\n        if (name) {\n          if (attributes) {\n            for (key in attributes) {\n              if (attributes.hasOwnProperty(key)) {\n                self._createAccessor(attributes[key], instance);\n              }\n            }\n          }\n          previousAttributes = scriptComponent.data.attributes[name];\n          if (previousAttributes) {\n            for (key in previousAttributes) {\n              oldAttribute = previousAttributes[key];\n              if (!(key in attributes)) {\n                delete instance.instance[oldAttribute.name];\n              } else {\n                if (attributes[key].value !== oldAttribute.value) {\n                  if (instance.instance.onAttributeChanged) {\n                    instance.instance.onAttributeChanged(oldAttribute.name, oldAttribute.value, attributes[key].value);\n                  }\n                }\n              }\n            }\n          }\n          if (attributes) {\n            scriptComponent.data.attributes[name] = self._cloneAttributes(attributes);\n          } else {\n            delete scriptComponent.data.attributes[name];\n          }\n        }\n        break;\n      }\n    }\n  }, _convertAttributeValue:function(attribute) {\n    if (attribute.type === \"rgb\" || attribute.type === \"rgba\") {\n      if (pc.type(attribute.value) === \"array\") {\n        attribute.value = attribute.value.length === 3 ? new pc.Color(attribute.value[0], attribute.value[1], attribute.value[2]) : new pc.Color(attribute.value[0], attribute.value[1], attribute.value[2], attribute.value[3]);\n      }\n    } else {\n      if (attribute.type === \"vec2\") {\n        if (pc.type(attribute.value) === \"array\") {\n          attribute.value = new pc.Vec2(attribute.value[0], attribute.value[1]);\n        }\n      } else {\n        if (attribute.type === \"vec3\" || attribute.type === \"vector\") {\n          if (pc.type(attribute.value) === \"array\") {\n            attribute.value = new pc.Vec3(attribute.value[0], attribute.value[1], attribute.value[2]);\n          }\n        } else {\n          if (attribute.type === \"vec4\") {\n            if (pc.type(attribute.value) === \"array\") {\n              attribute.value = new pc.Vec4(attribute.value[0], attribute.value[1], attribute.value[2], attribute.value[3]);\n            }\n          } else {\n            if (attribute.type === \"entity\") {\n              if (attribute.value !== null && typeof attribute.value === \"string\") {\n                attribute.value = this.app.root.findByGuid(attribute.value);\n              }\n            } else {\n              if (attribute.type === \"curve\" || attribute.type === \"colorcurve\") {\n                var curveType = attribute.value.keys[0] instanceof Array ? pc.CurveSet : pc.Curve;\n                attribute.value = new curveType(attribute.value.keys);\n                attribute.value.type = attribute.value.type;\n              }\n            }\n          }\n        }\n      }\n    }\n  }});\n  return {ScriptLegacyComponentSystem:ScriptLegacyComponentSystem};\n}());\npc.extend(pc, function() {\n  var ScriptLegacyComponentData = function() {\n    this.scripts = [];\n    this.enabled = true;\n    this.instances = {};\n    this._instances = {};\n    this.runInTools = false;\n    this.attributes = {};\n    this.initialized = false;\n    this.postInitialized = false;\n    this.areScriptsLoaded = false;\n  };\n  ScriptLegacyComponentData = pc.inherits(ScriptLegacyComponentData, pc.ComponentData);\n  return {ScriptLegacyComponentData:ScriptLegacyComponentData};\n}());\npc.extend(pc, {DISTANCE_LINEAR:\"linear\", DISTANCE_INVERSE:\"inverse\", DISTANCE_EXPONENTIAL:\"exponential\"});\npc.extend(pc, function() {\n  var instanceOptions = {volume:0, pitch:0, loop:false, startTime:0, duration:0, position:new pc.Vec3, maxDistance:0, refDistance:0, rollOffFactor:0, distanceModel:0, onPlay:null, onPause:null, onResume:null, onStop:null, onEnd:null};\n  var SoundSlot = function(component, name, options) {\n    options = options || {};\n    this._component = component;\n    this._assets = component.system.app.assets;\n    this._manager = component.system.manager;\n    this._name = name || \"Untitled\";\n    this._volume = options.volume !== undefined ? pc.math.clamp(Number(options.volume) || 0, 0, 1) : 1;\n    this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;\n    this._loop = !!(options.loop !== undefined ? options.loop : false);\n    this._duration = options.duration > 0 ? options.duration : null;\n    this._startTime = Math.max(0, Number(options.startTime) || 0);\n    this._overlap = !!options.overlap;\n    this._autoPlay = !!options.autoPlay;\n    this._firstNode = null;\n    this._lastNode = null;\n    this._asset = options.asset;\n    if (this._asset instanceof pc.Asset) {\n      this._asset = this._asset.id;\n    }\n    this._onInstancePlayHandler = this._onInstancePlay.bind(this);\n    this._onInstancePauseHandler = this._onInstancePause.bind(this);\n    this._onInstanceResumeHandler = this._onInstanceResume.bind(this);\n    this._onInstanceStopHandler = this._onInstanceStop.bind(this);\n    this._onInstanceEndHandler = this._onInstanceEnd.bind(this);\n    this.instances = [];\n    pc.events.attach(this);\n  };\n  SoundSlot.prototype = {play:function() {\n    if (!this.overlap && (this.isPlaying || this.isPaused)) {\n      this.stop();\n    }\n    var instance = this._createInstance();\n    this.instances.push(instance);\n    if (!this.isLoaded) {\n      var onLoad = function(sound) {\n        var playWhenLoaded = instance._playWhenLoaded;\n        instance.sound = sound;\n        if (playWhenLoaded) {\n          instance.play();\n        }\n      };\n      this.off(\"load\", onLoad);\n      this.once(\"load\", onLoad);\n      this.load();\n    } else {\n      instance.play();\n    }\n    return instance;\n  }, pause:function() {\n    var paused = false;\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      if (instances[i].pause()) {\n        paused = true;\n      }\n    }\n    return paused;\n  }, resume:function() {\n    var resumed = false;\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      if (instances[i].resume()) {\n        resumed = true;\n      }\n    }\n    return resumed;\n  }, stop:function() {\n    var stopped = false;\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      if (instances[i].stop()) {\n        stopped = true;\n      }\n    }\n    instances.length = 0;\n    return stopped;\n  }, load:function() {\n    if (!this._hasAsset()) {\n      return;\n    }\n    var asset = this._assets.get(this._asset);\n    if (!asset) {\n      this._assets.off(\"add:\" + this._asset, this._onAssetAdd, this);\n      this._assets.once(\"add:\" + this._asset, this._onAssetAdd, this);\n      return;\n    }\n    asset.off(\"remove\", this._onAssetRemoved, this);\n    asset.on(\"remove\", this._onAssetRemoved, this);\n    if (!asset.resource) {\n      asset.off(\"load\", this._onAssetLoad, this);\n      asset.once(\"load\", this._onAssetLoad, this);\n      this._assets.load(asset);\n      return;\n    }\n    this.fire(\"load\", asset.resource);\n  }, setExternalNodes:function(firstNode, lastNode) {\n    if (!firstNode) {\n      console.error(\"The firstNode must have a valid AudioNode\");\n      return;\n    }\n    if (!lastNode) {\n      lastNode = firstNode;\n    }\n    this._firstNode = firstNode;\n    this._lastNode = lastNode;\n    if (!this._overlap) {\n      var instances = this.instances;\n      for (var i = 0, len = instances.length; i < len; i++) {\n        instances[i].setExternalNodes(firstNode, lastNode);\n      }\n    }\n  }, clearExternalNodes:function() {\n    this._firstNode = null;\n    this._lastNode = null;\n    if (!this._overlap) {\n      var instances = this.instances;\n      for (var i = 0, len = instances.length; i < len; i++) {\n        instances[i].clearExternalNodes();\n      }\n    }\n  }, getExternalNodes:function() {\n    return [this._firstNode, this._lastNode];\n  }, _hasAsset:function() {\n    return this._asset != null;\n  }, _createInstance:function() {\n    var instance = null;\n    var component = this._component;\n    var sound = null;\n    if (this._hasAsset()) {\n      var asset = this._assets.get(this._asset);\n      if (asset) {\n        sound = asset.resource;\n      }\n    }\n    var data = instanceOptions;\n    data.volume = this._volume * component.volume;\n    data.pitch = this._pitch * component.pitch;\n    data.loop = this._loop;\n    data.startTime = this._startTime;\n    data.duration = this._duration;\n    data.onPlay = this._onInstancePlayHandler;\n    data.onPause = this._onInstancePauseHandler;\n    data.onResume = this._onInstanceResumeHandler;\n    data.onStop = this._onInstanceStopHandler;\n    data.onEnd = this._onInstanceEndHandler;\n    if (component.positional) {\n      data.position.copy(component.entity.getPosition());\n      data.maxDistance = component.maxDistance;\n      data.refDistance = component.refDistance;\n      data.rollOffFactor = component.rollOffFactor;\n      data.distanceModel = component.distanceModel;\n      instance = new pc.SoundInstance3d(this._manager, sound, data);\n    } else {\n      instance = new pc.SoundInstance(this._manager, sound, data);\n    }\n    if (this._firstNode) {\n      instance.setExternalNodes(this._firstNode, this._lastNode);\n    }\n    return instance;\n  }, _onInstancePlay:function(instance) {\n    this.fire(\"play\", instance);\n    this._component.fire(\"play\", this, instance);\n  }, _onInstancePause:function(instance) {\n    this.fire(\"pause\", instance);\n    this._component.fire(\"pause\", this, instance);\n  }, _onInstanceResume:function(instance) {\n    this.fire(\"resume\", instance);\n    this._component.fire(\"resume\", this, instance);\n  }, _onInstanceStop:function(instance) {\n    this.fire(\"stop\", instance);\n    this._component.fire(\"stop\", this, instance);\n  }, _onInstanceEnd:function(instance) {\n    var idx = this.instances.indexOf(instance);\n    if (idx !== -1) {\n      this.instances.splice(idx, 1);\n    }\n    this.fire(\"end\", instance);\n    this._component.fire(\"end\", this, instance);\n  }, _onAssetAdd:function(asset) {\n    this.load();\n  }, _onAssetLoad:function(asset) {\n    this.load();\n  }, _onAssetRemoved:function(asset) {\n    asset.off(\"remove\", this._onAssetRemoved, this);\n    this._assets.off(\"add:\" + asset.id, this._onAssetAdd, this);\n    this.stop();\n  }, updatePosition:function(position) {\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      instances[i].position = position;\n    }\n  }};\n  Object.defineProperty(SoundSlot.prototype, \"name\", {get:function() {\n    return this._name;\n  }, set:function(value) {\n    this._name = value;\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"volume\", {get:function() {\n    return this._volume;\n  }, set:function(value) {\n    this._volume = pc.math.clamp(Number(value) || 0, 0, 1);\n    if (!this._overlap) {\n      var instances = this.instances;\n      for (var i = 0, len = instances.length; i < len; i++) {\n        instances[i].volume = this._volume * this._component.volume;\n      }\n    }\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"pitch\", {get:function() {\n    return this._pitch;\n  }, set:function(value) {\n    this._pitch = Math.max(Number(value) || 0, 0.01);\n    if (!this._overlap) {\n      var instances = this.instances;\n      for (var i = 0, len = instances.length; i < len; i++) {\n        instances[i].pitch = this.pitch * this._component.pitch;\n      }\n    }\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"loop\", {get:function() {\n    return this._loop;\n  }, set:function(value) {\n    this._loop = !!value;\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      instances[i].loop = this._loop;\n    }\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"autoPlay\", {get:function() {\n    return this._autoPlay;\n  }, set:function(value) {\n    this._autoPlay = !!value;\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"overlap\", {get:function() {\n    return this._overlap;\n  }, set:function(value) {\n    this._overlap = !!value;\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"startTime\", {get:function() {\n    return this._startTime;\n  }, set:function(value) {\n    this._startTime = Math.max(0, Number(value) || 0);\n    if (!this._overlap) {\n      var instances = this.instances;\n      for (var i = 0, len = instances.length; i < len; i++) {\n        instances[i].startTime = this._startTime;\n      }\n    }\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"duration\", {get:function() {\n    var assetDuration = 0;\n    if (this._hasAsset()) {\n      var asset = this._assets.get(this._asset);\n      assetDuration = asset.resource ? asset.resource.duration : 0;\n    }\n    if (this._duration != null) {\n      return this._duration % (assetDuration || 1);\n    } else {\n      return assetDuration;\n    }\n  }, set:function(value) {\n    this._duration = Math.max(0, Number(value) || 0) || null;\n    if (!this._overlap) {\n      var instances = this.instances;\n      for (var i = 0, len = instances.length; i < len; i++) {\n        instances[i].duration = this._duration;\n      }\n    }\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"asset\", {get:function() {\n    return this._asset;\n  }, set:function(value) {\n    var old = this._asset;\n    if (old) {\n      this._assets.off(\"add:\" + old, this._onAssetAdd, this);\n      var oldAsset = this._assets.get(old);\n      if (oldAsset) {\n        oldAsset.off(\"remove\", this._onAssetRemoved, this);\n      }\n    }\n    this._asset = value;\n    if (this._asset instanceof pc.Asset) {\n      this._asset = this._asset.id;\n    }\n    if (this._hasAsset() && this._component.enabled && this._component.entity.enabled) {\n      this.load();\n    }\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"isLoaded\", {get:function() {\n    if (this._hasAsset()) {\n      var asset = this._assets.get(this._asset);\n      if (asset) {\n        return !!asset.resource;\n      }\n    }\n    return false;\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"isPlaying\", {get:function() {\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      if (instances[i].isPlaying) {\n        return true;\n      }\n    }\n    return false;\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"isPaused\", {get:function() {\n    var instances = this.instances;\n    var len = instances.length;\n    if (len === 0) {\n      return false;\n    }\n    for (var i = 0; i < len; i++) {\n      if (!instances[i].isPaused) {\n        return false;\n      }\n    }\n    return true;\n  }});\n  Object.defineProperty(SoundSlot.prototype, \"isStopped\", {get:function() {\n    var instances = this.instances;\n    for (var i = 0, len = instances.length; i < len; i++) {\n      if (!instances[i].isStopped) {\n        return false;\n      }\n    }\n    return true;\n  }});\n  return {SoundSlot:SoundSlot};\n}());\npc.extend(pc, function() {\n  var SoundComponent = function(system, entity) {\n    this.on(\"set_slots\", this.onSetSlots, this);\n    this.on(\"set_volume\", this.onSetVolume, this);\n    this.on(\"set_pitch\", this.onSetPitch, this);\n    this.on(\"set_refDistance\", this.onSetRefDistance, this);\n    this.on(\"set_maxDistance\", this.onSetMaxDistance, this);\n    this.on(\"set_rollOffFactor\", this.onSetRollOffFactor, this);\n    this.on(\"set_distanceModel\", this.onSetDistanceModel, this);\n    this.on(\"set_positional\", this.onSetPositional, this);\n  };\n  SoundComponent = pc.inherits(SoundComponent, pc.Component);\n  pc.extend(SoundComponent.prototype, {onSetSlots:function(name, oldValue, newValue) {\n    var key;\n    if (oldValue) {\n      for (key in oldValue) {\n        oldValue[key].stop();\n      }\n    }\n    var slots = {};\n    for (key in newValue) {\n      if (!(newValue[key] instanceof pc.SoundSlot)) {\n        if (newValue[key].name) {\n          slots[newValue[key].name] = new pc.SoundSlot(this, newValue[key].name, newValue[key]);\n        }\n      } else {\n        slots[newValue[key].name] = newValue[key];\n      }\n    }\n    this.data.slots = slots;\n    if (this.enabled && this.entity.enabled) {\n      this.onEnable();\n    }\n  }, onSetVolume:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          instances[i].volume = slot.volume * newValue;\n        }\n      }\n    }\n  }, onSetPitch:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          instances[i].pitch = slot.pitch * newValue;\n        }\n      }\n    }\n  }, onSetRefDistance:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          instances[i].refDistance = newValue;\n        }\n      }\n    }\n  }, onSetMaxDistance:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          instances[i].maxDistance = newValue;\n        }\n      }\n    }\n  }, onSetRollOffFactor:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          instances[i].rollOffFactor = newValue;\n        }\n      }\n    }\n  }, onSetDistanceModel:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          instances[i].distanceModel = newValue;\n        }\n      }\n    }\n  }, onSetPositional:function(name, oldValue, newValue) {\n    var slots = this.data.slots;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (!slot.overlap) {\n        var instances = slot.instances;\n        for (var i = 0, len = instances.length; i < len; i++) {\n          var isPlaying = instances[i].isPlaying || instances[i].isSuspended;\n          var currentTime = instances[i].currentTime;\n          if (isPlaying) {\n            instances[i].stop();\n          }\n          instances[i] = slot._createInstance();\n          if (isPlaying) {\n            instances[i].play();\n            instances[i].currentTime = currentTime;\n          }\n        }\n      }\n    }\n  }, onEnable:function() {\n    SoundComponent._super.onEnable.call(this);\n    if (this.system._inTools) {\n      return;\n    }\n    var slots = this.data.slots;\n    var playingBeforeDisable = this.data.playingBeforeDisable;\n    for (var key in slots) {\n      var slot = slots[key];\n      if (slot.autoPlay && slot.isStopped) {\n        slot.play();\n      } else {\n        if (playingBeforeDisable[key]) {\n          slot.resume();\n        } else {\n          if (!slot.isLoaded) {\n            slot.load();\n          }\n        }\n      }\n    }\n  }, onDisable:function() {\n    SoundComponent._super.onDisable.call(this);\n    var slots = this.data.slots;\n    var playingBeforeDisable = {};\n    for (var key in slots) {\n      if (!slots[key].overlap) {\n        if (slots[key].isPlaying) {\n          slots[key].pause();\n          playingBeforeDisable[key] = true;\n        }\n      }\n    }\n    this.data.playingBeforeDisable = playingBeforeDisable;\n  }, addSlot:function(name, options) {\n    var slots = this.data.slots;\n    if (slots[name]) {\n      logWARNING(\"A sound slot with name \" + name + \" already exists on Entity \" + this.entity.getPath());\n      return null;\n    }\n    var slot = new pc.SoundSlot(this, name, options);\n    slots[name] = slot;\n    if (slot.autoPlay && this.enabled && this.entity.enabled) {\n      slot.play();\n    }\n    return slot;\n  }, removeSlot:function(name) {\n    var slots = this.data.slots;\n    if (slots[name]) {\n      slots[name].stop();\n      delete slots[name];\n    }\n  }, slot:function(name) {\n    return this.data.slots[name];\n  }, play:function(name) {\n    if (!this.enabled || !this.entity.enabled) {\n      return null;\n    }\n    var slot = this.slots[name];\n    if (!slot) {\n      logWARNING(\"Trying to play sound slot with name \" + name + \" which does not exist\");\n      return null;\n    }\n    return slot.play();\n  }, pause:function(name) {\n    var slot;\n    var slots = this.data.slots;\n    if (name) {\n      slot = slots[name];\n      if (!slot) {\n        logWARNING(\"Trying to pause sound slot with name \" + name + \" which does not exist\");\n        return;\n      }\n      slot.pause();\n    } else {\n      for (var key in slots) {\n        slots[key].pause();\n      }\n    }\n  }, resume:function(name) {\n    var slot;\n    var slots = this.data.slots;\n    if (name) {\n      slot = slots[name];\n      if (!slot) {\n        logWARNING(\"Trying to resume sound slot with name \" + name + \" which does not exist\");\n        return;\n      }\n      if (slot.isPaused) {\n        slot.resume();\n      }\n    } else {\n      for (var key in slots) {\n        slots[key].resume();\n      }\n    }\n  }, stop:function(name) {\n    var slot;\n    var slots = this.data.slots;\n    if (name) {\n      slot = slots[name];\n      if (!slot) {\n        logWARNING(\"Trying to stop sound slot with name \" + name + \" which does not exist\");\n        return;\n      }\n      slot.stop();\n    } else {\n      for (var key in slots) {\n        slots[key].stop();\n      }\n    }\n  }});\n  return {SoundComponent:SoundComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"volume\", \"pitch\", \"positional\", \"refDistance\", \"maxDistance\", \"rollOffFactor\", \"distanceModel\", \"slots\"];\n  var SoundComponentSystem = function(app, manager) {\n    this.id = \"sound\";\n    this.description = \"Allows an Entity to play sounds\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.SoundComponent;\n    this.DataType = pc.SoundComponentData;\n    this.schema = _schema;\n    this.manager = manager;\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n    this.on(\"beforeremove\", this.onBeforeRemove, this);\n  };\n  SoundComponentSystem = pc.inherits(SoundComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.SoundComponent.prototype, _schema);\n  pc.extend(SoundComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    properties = [\"volume\", \"pitch\", \"positional\", \"refDistance\", \"maxDistance\", \"rollOffFactor\", \"distanceModel\", \"slots\", \"enabled\"];\n    SoundComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, cloneComponent:function(entity, clone) {\n    var key;\n    var oldData = entity.sound.data;\n    var newData = {};\n    for (key in oldData) {\n      if (oldData.hasOwnProperty(key)) {\n        newData[key] = oldData[key];\n      }\n    }\n    newData.slots = {};\n    for (key in oldData.slots) {\n      var oldSlot = oldData.slots[key];\n      if (oldSlot instanceof pc.SoundSlot) {\n        newData.slots[key] = {name:oldSlot.name, volume:oldSlot.volume, pitch:oldSlot.pitch, loop:oldSlot.loop, duration:oldSlot.duration, startTime:oldSlot.startTime, overlap:oldSlot.overlap, autoPlay:oldSlot.autoPlay, asset:oldSlot.asset};\n      } else {\n        newData.slots[key] = oldSlot;\n      }\n    }\n    newData.playingBeforeDisable = {};\n    return this.addComponent(clone, newData);\n  }, onUpdate:function(dt) {\n    var store = this.store;\n    for (var id in store) {\n      if (store.hasOwnProperty(id)) {\n        var item = store[id];\n        var entity = item.entity;\n        var componentData = item.data;\n        if (componentData.enabled && entity.enabled && componentData.positional) {\n          var position = entity.getPosition();\n          var slots = componentData.slots;\n          for (var key in slots) {\n            slots[key].updatePosition(position);\n          }\n        }\n      }\n    }\n  }, onBeforeRemove:function(entity, component) {\n    var slots = component.slots;\n    for (var key in slots) {\n      if (!slots[key].overlap) {\n        slots[key].stop();\n      }\n    }\n  }});\n  Object.defineProperty(SoundComponentSystem.prototype, \"volume\", {get:function() {\n    return this.manager.volume;\n  }, set:function(volume) {\n    this.manager.volume = volume;\n  }});\n  Object.defineProperty(SoundComponentSystem.prototype, \"context\", {get:function() {\n    if (!pc.SoundManager.hasAudioContext()) {\n      console.warn(\"WARNING: Audio context is not supported on this browser\");\n      return null;\n    }\n    return this.manager.context;\n  }});\n  return {SoundComponentSystem:SoundComponentSystem};\n}());\npc.SoundComponentData = function SoundComponentData() {\n  this.enabled = true;\n  this.volume = 1;\n  this.pitch = 1;\n  this.positional = true;\n  this.refDistance = 1;\n  this.maxDistance = 10000;\n  this.rollOffFactor = 1;\n  this.distanceModel = pc.DISTANCE_LINEAR;\n  this.slots = {};\n  this.playingBeforeDisable = {};\n};\npc.extend(pc, function() {\n  var AudioSourceComponent = function(system, entity) {\n    this.on(\"set_assets\", this.onSetAssets, this);\n    this.on(\"set_loop\", this.onSetLoop, this);\n    this.on(\"set_volume\", this.onSetVolume, this);\n    this.on(\"set_pitch\", this.onSetPitch, this);\n    this.on(\"set_minDistance\", this.onSetMinDistance, this);\n    this.on(\"set_maxDistance\", this.onSetMaxDistance, this);\n    this.on(\"set_rollOffFactor\", this.onSetRollOffFactor, this);\n    this.on(\"set_distanceModel\", this.onSetDistanceModel, this);\n    this.on(\"set_3d\", this.onSet3d, this);\n  };\n  AudioSourceComponent = pc.inherits(AudioSourceComponent, pc.Component);\n  pc.extend(AudioSourceComponent.prototype, {play:function(name) {\n    if (!this.enabled || !this.entity.enabled) {\n      return;\n    }\n    if (this.channel) {\n      this.stop();\n    }\n    var channel;\n    var componentData = this.data;\n    if (componentData.sources[name]) {\n      if (!componentData[\"3d\"]) {\n        channel = this.system.manager.playSound(componentData.sources[name], componentData);\n        componentData.currentSource = name;\n        componentData.channel = channel;\n      } else {\n        var pos = this.entity.getPosition();\n        channel = this.system.manager.playSound3d(componentData.sources[name], pos, componentData);\n        componentData.currentSource = name;\n        componentData.channel = channel;\n      }\n    }\n  }, pause:function() {\n    if (this.channel) {\n      this.channel.pause();\n    }\n  }, unpause:function() {\n    if (this.channel && this.channel.paused) {\n      this.channel.unpause();\n    }\n  }, stop:function() {\n    if (this.channel) {\n      this.channel.stop();\n      this.channel = null;\n    }\n  }, onSetAssets:function(name, oldValue, newValue) {\n    var newAssets = [];\n    var i, len = newValue.length;\n    if (oldValue && oldValue.length) {\n      for (i = 0; i < oldValue.length; i++) {\n        if (oldValue[i]) {\n          var asset = this.system.app.assets.get(oldValue[i]);\n          if (asset) {\n            asset.off(\"change\", this.onAssetChanged, this);\n            asset.off(\"remove\", this.onAssetRemoved, this);\n            if (this.currentSource === asset.name) {\n              this.stop();\n            }\n          }\n        }\n      }\n    }\n    if (len) {\n      for (i = 0; i < len; i++) {\n        if (oldValue.indexOf(newValue[i]) < 0) {\n          if (newValue[i] instanceof pc.Asset) {\n            newAssets.push(newValue[i].id);\n          } else {\n            newAssets.push(newValue[i]);\n          }\n        }\n      }\n    }\n    if (!this.system._inTools && newAssets.length) {\n      this.loadAudioSourceAssets(newAssets);\n    }\n  }, onAssetChanged:function(asset, attribute, newValue, oldValue) {\n    if (attribute === \"resource\") {\n      var sources = this.data.sources;\n      if (sources) {\n        this.data.sources[asset.name] = newValue;\n        if (this.data.currentSource === asset.name) {\n          if (this.channel) {\n            if (this.channel.paused) {\n              this.play(asset.name);\n              this.pause();\n            } else {\n              this.play(asset.name);\n            }\n          }\n        }\n      }\n    }\n  }, onAssetRemoved:function(asset) {\n    asset.off(\"remove\", this.onAssetRemoved, this);\n    if (this.data.sources[asset.name]) {\n      delete this.data.sources[asset.name];\n      if (this.data.currentSource === asset.name) {\n        this.stop();\n        this.data.currentSource = null;\n      }\n    }\n  }, onSetLoop:function(name, oldValue, newValue) {\n    if (oldValue != newValue) {\n      if (this.channel) {\n        this.channel.setLoop(newValue);\n      }\n    }\n  }, onSetVolume:function(name, oldValue, newValue) {\n    if (oldValue != newValue) {\n      if (this.channel) {\n        this.channel.setVolume(newValue);\n      }\n    }\n  }, onSetPitch:function(name, oldValue, newValue) {\n    if (oldValue != newValue) {\n      if (this.channel) {\n        this.channel.setPitch(newValue);\n      }\n    }\n  }, onSetMaxDistance:function(name, oldValue, newValue) {\n    if (oldValue != newValue) {\n      if (this.channel instanceof pc.Channel3d) {\n        this.channel.setMaxDistance(newValue);\n      }\n    }\n  }, onSetMinDistance:function(name, oldValue, newValue) {\n    if (oldValue != newValue) {\n      if (this.channel instanceof pc.Channel3d) {\n        this.channel.setMinDistance(newValue);\n      }\n    }\n  }, onSetRollOffFactor:function(name, oldValue, newValue) {\n    if (oldValue != newValue) {\n      if (this.channel instanceof pc.Channel3d) {\n        this.channel.setRollOffFactor(newValue);\n      }\n    }\n  }, onSetDistanceModel:function(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      if (this.channel instanceof pc.Channel3d) {\n        this.channel.setDistanceModel(newValue);\n      }\n    }\n  }, onSet3d:function(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      if (this.system.initialized && this.currentSource) {\n        var paused = false;\n        var suspended = false;\n        if (this.channel) {\n          paused = this.channel.paused;\n          suspended = this.channel.suspended;\n        }\n        this.play(this.currentSource);\n        if (this.channel) {\n          this.channel.paused = paused;\n          this.channel.suspended = suspended;\n        }\n      }\n    }\n  }, onEnable:function() {\n    AudioSourceComponent._super.onEnable.call(this);\n    var assets = this.data.assets;\n    if (assets) {\n      var registry = this.system.app.assets;\n      for (var i = 0, len = assets.length; i < len; i++) {\n        var asset = assets[i];\n        if (!(asset instanceof pc.Asset)) {\n          asset = registry.get(asset);\n        }\n        if (asset && !asset.resource) {\n          registry.load(asset);\n        }\n      }\n    }\n    if (this.system.initialized) {\n      if (this.data.activate && !this.channel) {\n        this.play(this.currentSource);\n      } else {\n        this.unpause();\n      }\n    }\n  }, onDisable:function() {\n    AudioSourceComponent._super.onDisable.call(this);\n    this.pause();\n  }, loadAudioSourceAssets:function(ids) {\n    var self = this;\n    var assets = ids.map(function(id) {\n      return this.system.app.assets.get(id);\n    }, this);\n    var sources = {};\n    var currentSource = null;\n    var count = assets.length;\n    var _error = function(e) {\n      count--;\n    };\n    var _done = function() {\n      this.data.sources = sources;\n      this.data.currentSource = currentSource;\n      if (this.enabled && this.activate && currentSource) {\n        this.onEnable();\n      }\n    }.bind(this);\n    assets.forEach(function(asset, index) {\n      if (asset) {\n        currentSource = currentSource || asset.name;\n        asset.off(\"change\", this.onAssetChanged, this);\n        asset.on(\"change\", this.onAssetChanged, this);\n        asset.off(\"remove\", this.onAssetRemoved, this);\n        asset.on(\"remove\", this.onAssetRemoved, this);\n        asset.off(\"error\", _error, this);\n        asset.on(\"error\", _error, this);\n        asset.ready(function(asset) {\n          sources[asset.name] = asset.resource;\n          count--;\n          if (count === 0) {\n            _done();\n          }\n        });\n        if (!asset.resource && self.enabled && self.entity.enabled) {\n          this.system.app.assets.load(asset);\n        }\n      } else {\n        count--;\n        if (count === 0) {\n          _done();\n        }\n        this.system.app.assets.on(\"add:\" + ids[index], function(asset) {\n          asset.ready(function(asset) {\n            self.data.sources[asset.name] = asset.resource;\n          });\n          if (!asset.resource) {\n            self.system.app.assets.load(asset);\n          }\n        });\n      }\n    }, this);\n  }});\n  return {AudioSourceComponent:AudioSourceComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"assets\", \"volume\", \"pitch\", \"loop\", \"activate\", \"3d\", \"minDistance\", \"maxDistance\", \"rollOffFactor\", \"distanceModel\", \"sources\", \"currentSource\", \"channel\"];\n  var AudioSourceComponentSystem = function(app, manager) {\n    this.id = \"audiosource\";\n    this.description = \"Specifies audio assets that can be played at the position of the Entity.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.AudioSourceComponent;\n    this.DataType = pc.AudioSourceComponentData;\n    this.schema = _schema;\n    this.manager = manager;\n    this.initialized = false;\n    pc.ComponentSystem.on(\"initialize\", this.onInitialize, this);\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n    this.on(\"remove\", this.onRemove, this);\n  };\n  AudioSourceComponentSystem = pc.inherits(AudioSourceComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.AudioSourceComponent.prototype, _schema);\n  pc.extend(AudioSourceComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    properties = [\"activate\", \"volume\", \"pitch\", \"loop\", \"3d\", \"minDistance\", \"maxDistance\", \"rollOffFactor\", \"distanceModel\", \"enabled\", \"assets\"];\n    AudioSourceComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n    component.paused = !(component.enabled && component.activate);\n  }, onInitialize:function(root) {\n    if (root.audiosource && root.enabled && root.audiosource.enabled && root.audiosource.activate) {\n      root.audiosource.play(root.audiosource.currentSource);\n    }\n    var children = root._children;\n    var i, len = children.length;\n    for (i = 0; i < len; i++) {\n      if (children[i] instanceof pc.Entity) {\n        this.onInitialize(children[i]);\n      }\n    }\n    this.initialized = true;\n  }, onUpdate:function(dt) {\n    var components = this.store;\n    for (var id in components) {\n      if (components.hasOwnProperty(id)) {\n        var component = components[id];\n        var entity = component.entity;\n        var componentData = component.data;\n        if (componentData.enabled && entity.enabled && componentData.channel instanceof pc.Channel3d) {\n          var pos = entity.getPosition();\n          componentData.channel.setPosition(pos);\n        }\n      }\n    }\n  }, onRemove:function(entity, data) {\n    if (data.channel) {\n      data.channel.stop();\n      data.channel = null;\n    }\n  }, setVolume:function(volume) {\n    this.manager.setVolume(volume);\n  }});\n  return {AudioSourceComponentSystem:AudioSourceComponentSystem};\n}());\npc.AudioSourceComponentData = function AudioSourceComponentData() {\n  this.enabled = true;\n  this.assets = [];\n  this.activate = true;\n  this.volume = 1;\n  this.pitch = 1;\n  this.loop = false;\n  this[\"3d\"] = true;\n  this.minDistance = 1;\n  this.maxDistance = 10000;\n  this.rollOffFactor = 1;\n  this.distanceModel = pc.DISTANCE_INVERSE;\n  this.paused = true;\n  this.sources = {};\n  this.currentSource = null;\n  this.channel = null;\n};\npc.extend(pc, function() {\n  var AudioListenerComponent = function(system, entity) {\n  };\n  AudioListenerComponent = pc.inherits(AudioListenerComponent, pc.Component);\n  pc.extend(AudioListenerComponent.prototype, {setCurrentListener:function() {\n    if (this.enabled && this.entity.audiolistener && this.entity.enabled) {\n      this.system.current = this.entity;\n      var position = this.system.current.getPosition();\n      this.system.manager.listener.setPosition(position);\n    }\n  }, onEnable:function() {\n    AudioListenerComponent._super.onEnable.call(this);\n    this.setCurrentListener();\n  }, onDisable:function() {\n    AudioListenerComponent._super.onDisable.call(this);\n    if (this.system.current === this.entity) {\n      this.system.current = null;\n    }\n  }});\n  return {AudioListenerComponent:AudioListenerComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\"];\n  var AudioListenerComponentSystem = function(app, manager) {\n    this.id = \"audiolistener\";\n    this.description = \"Specifies the location of the listener for 3D audio playback.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.AudioListenerComponent;\n    this.DataType = pc.AudioListenerComponentData;\n    this.schema = _schema;\n    this.manager = manager;\n    this.current = null;\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n  };\n  AudioListenerComponentSystem = pc.inherits(AudioListenerComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.AudioListenerComponent.prototype, _schema);\n  pc.extend(AudioListenerComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    properties = [\"enabled\"];\n    AudioListenerComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, onUpdate:function(dt) {\n    if (this.current) {\n      var position = this.current.getPosition();\n      this.manager.listener.setPosition(position);\n      var wtm = this.current.getWorldTransform();\n      this.manager.listener.setOrientation(wtm);\n    }\n  }});\n  return {AudioListenerComponentSystem:AudioListenerComponentSystem};\n}());\npc.extend(pc, function() {\n  var AudioListenerComponentData = function() {\n    this.enabled = true;\n  };\n  AudioListenerComponentData = pc.inherits(AudioListenerComponentData, pc.ComponentData);\n  return {AudioListenerComponentData:AudioListenerComponentData};\n}());\npc.extend(pc, {BODYTYPE_STATIC:\"static\", BODYTYPE_DYNAMIC:\"dynamic\", BODYTYPE_KINEMATIC:\"kinematic\", BODYFLAG_STATIC_OBJECT:1, BODYFLAG_KINEMATIC_OBJECT:2, BODYFLAG_NORESPONSE_OBJECT:4, BODYSTATE_ACTIVE_TAG:1, BODYSTATE_ISLAND_SLEEPING:2, BODYSTATE_WANTS_DEACTIVATION:3, BODYSTATE_DISABLE_DEACTIVATION:4, BODYSTATE_DISABLE_SIMULATION:5, BODYGROUP_NONE:0, BODYGROUP_DEFAULT:1, BODYGROUP_DYNAMIC:1, BODYGROUP_STATIC:2, BODYGROUP_KINEMATIC:4, BODYGROUP_ENGINE_1:8, BODYGROUP_TRIGGER:16, BODYGROUP_ENGINE_2:32, \nBODYGROUP_ENGINE_3:64, BODYGROUP_USER_1:128, BODYGROUP_USER_2:256, BODYGROUP_USER_3:512, BODYGROUP_USER_4:1024, BODYGROUP_USER_5:2048, BODYGROUP_USER_6:4096, BODYGROUP_USER_7:8192, BODYGROUP_USER_8:16384, BODYMASK_NONE:0, BODYMASK_ALL:65535, BODYMASK_STATIC:2, BODYMASK_NOT_STATIC:65535 ^ 2, BODYMASK_NOT_STATIC_KINEMATIC:65535 ^ (2 | 4)});\npc.extend(pc, function() {\n  var ammoTransform;\n  var ammoVec1, ammoVec2, ammoQuat, ammoOrigin;\n  var RigidBodyComponent = function RigidBodyComponent(system, entity) {\n    if (typeof Ammo !== \"undefined\" && !ammoTransform) {\n      ammoTransform = new Ammo.btTransform;\n      ammoVec1 = new Ammo.btVector3;\n      ammoVec2 = new Ammo.btVector3;\n      ammoQuat = new Ammo.btQuaternion;\n      ammoOrigin = new Ammo.btVector3(0, 0, 0);\n    }\n    this.on(\"set_mass\", this.onSetMass, this);\n    this.on(\"set_linearDamping\", this.onSetLinearDamping, this);\n    this.on(\"set_angularDamping\", this.onSetAngularDamping, this);\n    this.on(\"set_linearFactor\", this.onSetLinearFactor, this);\n    this.on(\"set_angularFactor\", this.onSetAngularFactor, this);\n    this.on(\"set_friction\", this.onSetFriction, this);\n    this.on(\"set_restitution\", this.onSetRestitution, this);\n    this.on(\"set_type\", this.onSetType, this);\n    this.on(\"set_group\", this.onSetGroupOrMask, this);\n    this.on(\"set_mask\", this.onSetGroupOrMask, this);\n    this.on(\"set_body\", this.onSetBody, this);\n    this._displacement = new pc.Vec3(0, 0, 0);\n    this._linearVelocity = new pc.Vec3(0, 0, 0);\n    this._angularVelocity = new pc.Vec3(0, 0, 0);\n  };\n  RigidBodyComponent = pc.inherits(RigidBodyComponent, pc.Component);\n  Object.defineProperty(RigidBodyComponent.prototype, \"bodyType\", {get:function() {\n    console.warn(\"WARNING: bodyType: Function is deprecated. Query type property instead.\");\n    return this.type;\n  }, set:function(type) {\n    console.warn(\"WARNING: bodyType: Function is deprecated. Set type property instead.\");\n    this.type = type;\n  }});\n  Object.defineProperty(RigidBodyComponent.prototype, \"linearVelocity\", {get:function() {\n    if (!this.isKinematic()) {\n      if (this.body) {\n        var vel = this.body.getLinearVelocity();\n        this._linearVelocity.set(vel.x(), vel.y(), vel.z());\n      }\n    }\n    return this._linearVelocity;\n  }, set:function(lv) {\n    this.activate();\n    if (!this.isKinematic()) {\n      if (this.body) {\n        ammoVec1.setValue(lv.x, lv.y, lv.z);\n        this.body.setLinearVelocity(ammoVec1);\n      }\n    }\n    this._linearVelocity.copy(lv);\n  }});\n  Object.defineProperty(RigidBodyComponent.prototype, \"angularVelocity\", {get:function() {\n    if (!this.isKinematic()) {\n      if (this.body) {\n        var vel = this.body.getAngularVelocity();\n        this._angularVelocity.set(vel.x(), vel.y(), vel.z());\n      }\n    }\n    return this._angularVelocity;\n  }, set:function(av) {\n    this.activate();\n    if (!this.isKinematic()) {\n      if (this.body) {\n        ammoVec1.setValue(av.x, av.y, av.z);\n        this.body.setAngularVelocity(ammoVec1);\n      }\n    }\n    this._angularVelocity.copy(av);\n  }});\n  pc.extend(RigidBodyComponent.prototype, {createBody:function() {\n    var entity = this.entity;\n    var shape;\n    if (entity.collision) {\n      shape = entity.collision.shape;\n      if (entity.trigger) {\n        entity.trigger.destroy();\n        delete entity.trigger;\n      }\n    }\n    if (shape) {\n      if (this.body) {\n        this.system.removeBody(this.body);\n        Ammo.destroy(this.body);\n      }\n      var isStaticOrKinematic = this.isStaticOrKinematic();\n      var mass = isStaticOrKinematic ? 0 : this.mass;\n      var localInertia = new Ammo.btVector3(0, 0, 0);\n      if (!isStaticOrKinematic) {\n        shape.calculateLocalInertia(mass, localInertia);\n      }\n      var pos = entity.getPosition();\n      var rot = entity.getRotation();\n      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);\n      var startTransform = new Ammo.btTransform;\n      startTransform.setIdentity();\n      startTransform.getOrigin().setValue(pos.x, pos.y, pos.z);\n      startTransform.setRotation(ammoQuat);\n      var motionState = new Ammo.btDefaultMotionState(startTransform);\n      var bodyInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      var body = new Ammo.btRigidBody(bodyInfo);\n      body.setRestitution(this.restitution);\n      body.setFriction(this.friction);\n      body.setDamping(this.linearDamping, this.angularDamping);\n      var v;\n      v = this.linearFactor;\n      ammoVec1.setValue(v.x, v.y, v.z);\n      body.setLinearFactor(ammoVec1);\n      v = this.angularFactor;\n      ammoVec1.setValue(v.x, v.y, v.z);\n      body.setAngularFactor(ammoVec1);\n      body.entity = entity;\n      if (this.isKinematic()) {\n        body.setCollisionFlags(body.getCollisionFlags() | pc.BODYFLAG_KINEMATIC_OBJECT);\n        body.setActivationState(pc.BODYSTATE_DISABLE_DEACTIVATION);\n      }\n      entity.rigidbody.body = body;\n      if (this.enabled && this.entity.enabled) {\n        this.enableSimulation();\n      }\n    }\n  }, isActive:function() {\n    if (this.body) {\n      return this.body.isActive();\n    }\n    return false;\n  }, activate:function() {\n    if (this.body) {\n      this.body.activate();\n    }\n  }, enableSimulation:function() {\n    if (this.entity.collision && this.entity.collision.enabled && !this.data.simulationEnabled) {\n      var body = this.body;\n      if (body) {\n        this.system.addBody(body, this.group, this.mask);\n        if (this.isKinematic()) {\n          body.forceActivationState(pc.BODYSTATE_DISABLE_DEACTIVATION);\n          body.activate();\n        } else {\n          body.forceActivationState(pc.BODYFLAG_ACTIVE_TAG);\n          this.syncEntityToBody();\n        }\n        this.data.simulationEnabled = true;\n      }\n    }\n  }, disableSimulation:function() {\n    var body = this.body;\n    if (body && this.data.simulationEnabled) {\n      this.system.removeBody(body);\n      body.forceActivationState(pc.BODYSTATE_DISABLE_SIMULATION);\n      this.data.simulationEnabled = false;\n    }\n  }, applyForce:function() {\n    var x, y, z;\n    var px, py, pz;\n    switch(arguments.length) {\n      case 1:\n        x = arguments[0].x;\n        y = arguments[0].y;\n        z = arguments[0].z;\n        break;\n      case 2:\n        x = arguments[0].x;\n        y = arguments[0].y;\n        z = arguments[0].z;\n        px = arguments[1].x;\n        py = arguments[1].y;\n        pz = arguments[1].z;\n        break;\n      case 3:\n        x = arguments[0];\n        y = arguments[1];\n        z = arguments[2];\n        break;\n      case 6:\n        x = arguments[0];\n        y = arguments[1];\n        z = arguments[2];\n        px = arguments[3];\n        py = arguments[4];\n        pz = arguments[5];\n        break;\n    }\n    var body = this.body;\n    if (body) {\n      body.activate();\n      ammoVec1.setValue(x, y, z);\n      if (px !== undefined) {\n        ammoVec2.setValue(px, py, pz);\n        body.applyForce(ammoVec1, ammoVec2);\n      } else {\n        body.applyForce(ammoVec1, ammoOrigin);\n      }\n    }\n  }, applyTorque:function() {\n    var x, y, z;\n    switch(arguments.length) {\n      case 1:\n        x = arguments[0].x;\n        y = arguments[0].y;\n        z = arguments[0].z;\n        break;\n      case 3:\n        x = arguments[0];\n        y = arguments[1];\n        z = arguments[2];\n        break;\n      default:\n        console.error(\"ERROR: applyTorque: function takes 1 or 3 arguments\");\n        return;\n    }\n    var body = this.body;\n    if (body) {\n      body.activate();\n      ammoVec1.setValue(x, y, z);\n      body.applyTorque(ammoVec1);\n    }\n  }, applyImpulse:function() {\n    var x, y, z;\n    var px, py, pz;\n    switch(arguments.length) {\n      case 1:\n        x = arguments[0].x;\n        y = arguments[0].y;\n        z = arguments[0].z;\n        break;\n      case 2:\n        x = arguments[0].x;\n        y = arguments[0].y;\n        z = arguments[0].z;\n        px = arguments[1].x;\n        py = arguments[1].y;\n        pz = arguments[1].z;\n        break;\n      case 3:\n        x = arguments[0];\n        y = arguments[1];\n        z = arguments[2];\n        break;\n      case 6:\n        x = arguments[0];\n        y = arguments[1];\n        z = arguments[2];\n        px = arguments[0];\n        py = arguments[1];\n        pz = arguments[2];\n        break;\n    }\n    var body = this.body;\n    if (body) {\n      body.activate();\n      ammoVec1.setValue(x, y, z);\n      if (px !== undefined) {\n        ammoVec2.setValue(px, py, pz);\n        body.applyImpulse(ammoVec1, ammoVec2);\n      } else {\n        body.applyImpulse(ammoVec1, ammoOrigin);\n      }\n    }\n  }, applyTorqueImpulse:function() {\n    var x, y, z;\n    switch(arguments.length) {\n      case 1:\n        x = arguments[0].x;\n        y = arguments[0].y;\n        z = arguments[0].z;\n        break;\n      case 3:\n        x = arguments[0];\n        y = arguments[1];\n        z = arguments[2];\n        break;\n      default:\n        console.error(\"ERROR: applyTorqueImpulse: function takes 1 or 3 arguments\");\n        return;\n    }\n    var body = this.body;\n    if (body) {\n      body.activate();\n      ammoVec1.setValue(x, y, z);\n      body.applyTorqueImpulse(ammoVec1);\n    }\n  }, isStatic:function() {\n    return this.type === pc.BODYTYPE_STATIC;\n  }, isStaticOrKinematic:function() {\n    return this.type === pc.BODYTYPE_STATIC || this.type === pc.BODYTYPE_KINEMATIC;\n  }, isKinematic:function() {\n    return this.type === pc.BODYTYPE_KINEMATIC;\n  }, syncEntityToBody:function() {\n    var body = this.body;\n    if (body) {\n      var pos = this.entity.getPosition();\n      var rot = this.entity.getRotation();\n      var transform = body.getWorldTransform();\n      transform.getOrigin().setValue(pos.x, pos.y, pos.z);\n      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);\n      transform.setRotation(ammoQuat);\n      if (this.isKinematic()) {\n        var motionState = this.body.getMotionState();\n        if (motionState) {\n          motionState.setWorldTransform(transform);\n        }\n      }\n      body.activate();\n    }\n  }, syncBodyToEntity:function() {\n    var body = this.body;\n    if (body.isActive()) {\n      var motionState = body.getMotionState();\n      if (motionState) {\n        motionState.getWorldTransform(ammoTransform);\n        var p = ammoTransform.getOrigin();\n        var q = ammoTransform.getRotation();\n        this.entity.setPosition(p.x(), p.y(), p.z());\n        this.entity.setRotation(q.x(), q.y(), q.z(), q.w());\n      }\n    }\n  }, teleport:function() {\n    if (arguments.length < 3) {\n      if (arguments[0]) {\n        this.entity.setPosition(arguments[0]);\n      }\n      if (arguments[1]) {\n        if (arguments[1] instanceof pc.Quat) {\n          this.entity.setRotation(arguments[1]);\n        } else {\n          this.entity.setEulerAngles(arguments[1]);\n        }\n      }\n    } else {\n      if (arguments.length === 6) {\n        this.entity.setEulerAngles(arguments[3], arguments[4], arguments[5]);\n      }\n      this.entity.setPosition(arguments[0], arguments[1], arguments[2]);\n    }\n    this.syncEntityToBody();\n  }, _updateKinematic:function(dt) {\n    this._displacement.copy(this._linearVelocity).scale(dt);\n    this.entity.translate(this._displacement);\n    this._displacement.copy(this._angularVelocity).scale(dt);\n    this.entity.rotate(this._displacement.x, this._displacement.y, this._displacement.z);\n    if (this.body.getMotionState()) {\n      var pos = this.entity.getPosition();\n      var rot = this.entity.getRotation();\n      ammoTransform.getOrigin().setValue(pos.x, pos.y, pos.z);\n      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);\n      ammoTransform.setRotation(ammoQuat);\n      this.body.getMotionState().setWorldTransform(ammoTransform);\n    }\n  }, onEnable:function() {\n    RigidBodyComponent._super.onEnable.call(this);\n    if (!this.body) {\n      this.createBody();\n    }\n    this.enableSimulation();\n  }, onDisable:function() {\n    RigidBodyComponent._super.onDisable.call(this);\n    this.disableSimulation();\n  }, onSetMass:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      var isEnabled = this.enabled && this.entity.enabled;\n      if (isEnabled) {\n        this.disableSimulation();\n      }\n      var mass = newValue;\n      var localInertia = new Ammo.btVector3(0, 0, 0);\n      body.getCollisionShape().calculateLocalInertia(mass, localInertia);\n      body.setMassProps(mass, localInertia);\n      body.updateInertiaTensor();\n      if (isEnabled) {\n        this.enableSimulation();\n      }\n    }\n  }, onSetLinearDamping:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      body.setDamping(newValue, this.data.angularDamping);\n    }\n  }, onSetAngularDamping:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      body.setDamping(this.data.linearDamping, newValue);\n    }\n  }, onSetLinearFactor:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      ammoVec1.setValue(newValue.x, newValue.y, newValue.z);\n      body.setLinearFactor(ammoVec1);\n    }\n  }, onSetAngularFactor:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      ammoVec1.setValue(newValue.x, newValue.y, newValue.z);\n      body.setAngularFactor(ammoVec1);\n    }\n  }, onSetFriction:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      body.setFriction(newValue);\n    }\n  }, onSetRestitution:function(name, oldValue, newValue) {\n    var body = this.data.body;\n    if (body) {\n      body.setRestitution(newValue);\n    }\n  }, onSetType:function(name, oldValue, newValue) {\n    if (newValue !== oldValue) {\n      this.disableSimulation();\n      if (newValue === pc.BODYTYPE_DYNAMIC) {\n        this.data.group = pc.BODYGROUP_DYNAMIC;\n        this.data.mask = pc.BODYMASK_ALL;\n      } else {\n        if (newValue === pc.BODYTYPE_KINEMATIC) {\n          this.data.group = pc.BODYGROUP_KINEMATIC;\n          this.data.mask = pc.BODYMASK_ALL;\n        } else {\n          this.data.group = pc.BODYGROUP_STATIC;\n          this.data.mask = pc.BODYMASK_NOT_STATIC;\n        }\n      }\n      this.createBody();\n    }\n  }, onSetGroupOrMask:function(name, oldValue, newValue) {\n    if (newValue !== oldValue) {\n      var isEnabled = this.enabled && this.entity.enabled;\n      if (isEnabled) {\n        this.disableSimulation();\n        this.enableSimulation();\n      }\n    }\n  }, onSetBody:function(name, oldValue, newValue) {\n    if (this.body && this.data.simulationEnabled) {\n      this.body.activate();\n    }\n  }});\n  return {RigidBodyComponent:RigidBodyComponent};\n}());\npc.extend(pc, function() {\n  var ammoRayStart, ammoRayEnd;\n  var collisions = {};\n  var frameCollisions = {};\n  var WARNED_RAYCAST_CALLBACK = false;\n  var RaycastResult = function RaycastResult(entity, point, normal) {\n    this.entity = entity;\n    this.point = point;\n    this.normal = normal;\n  };\n  var SingleContactResult = function SingleContactResult(a, b, contactPoint) {\n    if (arguments.length === 0) {\n      this.a = null;\n      this.b = null;\n      this.localPointA = new pc.Vec3;\n      this.localPointB = new pc.Vec3;\n      this.pointA = new pc.Vec3;\n      this.pointB = new pc.Vec3;\n      this.normal = new pc.Vec3;\n    } else {\n      this.a = a;\n      this.b = b;\n      this.localPointA = contactPoint.localPoint;\n      this.localPointB = contactPoint.localPointOther;\n      this.pointA = contactPoint.point;\n      this.pointB = contactPoint.pointOther;\n      this.normal = contactPoint.normal;\n    }\n  };\n  var ContactPoint = function ContactPoint(localPoint, localPointOther, point, pointOther, normal) {\n    if (arguments.length === 0) {\n      this.localPoint = new pc.Vec3;\n      this.localPointOther = new pc.Vec3;\n      this.point = new pc.Vec3;\n      this.pointOther = new pc.Vec3;\n      this.normal = new pc.Vec3;\n    } else {\n      this.localPoint = localPoint;\n      this.localPointOther = localPointOther;\n      this.point = point;\n      this.pointOther = pointOther;\n      this.normal = normal;\n    }\n  };\n  var ContactResult = function ContactResult(other, contacts) {\n    this.other = other;\n    this.contacts = contacts;\n  };\n  var _schema = [\"enabled\", \"type\", \"mass\", \"linearDamping\", \"angularDamping\", \"linearFactor\", \"angularFactor\", \"friction\", \"restitution\", \"group\", \"mask\", \"body\"];\n  var RigidBodyComponentSystem = function RigidBodyComponentSystem(app) {\n    this.id = \"rigidbody\";\n    this.description = \"Adds the entity to the scene's physical simulation.\";\n    app.systems.add(this.id, this);\n    this._stats = app.stats.frame;\n    this.ComponentType = pc.RigidBodyComponent;\n    this.DataType = pc.RigidBodyComponentData;\n    this.contactPointPool = new pc.AllocatePool(ContactPoint, 1);\n    this.contactResultPool = new pc.AllocatePool(ContactResult, 1);\n    this.singleContactResultPool = new pc.AllocatePool(SingleContactResult, 1);\n    this.schema = _schema;\n    this.maxSubSteps = 10;\n    this.fixedTimeStep = 1 / 60;\n    this.on(\"remove\", this.onRemove, this);\n  };\n  RigidBodyComponentSystem = pc.inherits(RigidBodyComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.RigidBodyComponent.prototype, _schema);\n  pc.extend(RigidBodyComponentSystem.prototype, {onLibraryLoaded:function() {\n    if (typeof Ammo !== \"undefined\") {\n      var collisionConfiguration = new Ammo.btDefaultCollisionConfiguration;\n      var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n      var overlappingPairCache = new Ammo.btDbvtBroadphase;\n      var solver = new Ammo.btSequentialImpulseConstraintSolver;\n      this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);\n      this._ammoGravity = new Ammo.btVector3(0, -9.82, 0);\n      this.dynamicsWorld.setGravity(this._ammoGravity);\n      ammoRayStart = new Ammo.btVector3;\n      ammoRayEnd = new Ammo.btVector3;\n      pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n    } else {\n      pc.ComponentSystem.off(\"update\", this.onUpdate, this);\n    }\n  }, initializeComponentData:function(component, _data, properties) {\n    properties = [\"enabled\", \"mass\", \"linearDamping\", \"angularDamping\", \"linearFactor\", \"angularFactor\", \"friction\", \"restitution\", \"type\", \"group\", \"mask\"];\n    var data = {};\n    properties.forEach(function(prop) {\n      data[prop] = _data[prop];\n    });\n    if (_data.bodyType) {\n      data.type = _data.bodyType;\n      console.warn(\"WARNING: rigidbody.bodyType: Property is deprecated. Use type instead.\");\n    }\n    if (data.linearFactor && pc.type(data.linearFactor) === \"array\") {\n      data.linearFactor = new pc.Vec3(data.linearFactor[0], data.linearFactor[1], data.linearFactor[2]);\n    }\n    if (data.angularFactor && pc.type(data.angularFactor) === \"array\") {\n      data.angularFactor = new pc.Vec3(data.angularFactor[0], data.angularFactor[1], data.angularFactor[2]);\n    }\n    RigidBodyComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, cloneComponent:function(entity, clone) {\n    var data = {enabled:entity.rigidbody.enabled, mass:entity.rigidbody.mass, linearDamping:entity.rigidbody.linearDamping, angularDamping:entity.rigidbody.angularDamping, linearFactor:[entity.rigidbody.linearFactor.x, entity.rigidbody.linearFactor.y, entity.rigidbody.linearFactor.z], angularFactor:[entity.rigidbody.angularFactor.x, entity.rigidbody.angularFactor.y, entity.rigidbody.angularFactor.z], friction:entity.rigidbody.friction, restitution:entity.rigidbody.restitution, type:entity.rigidbody.type, \n    group:entity.rigidbody.group, mask:entity.rigidbody.mask};\n    this.addComponent(clone, data);\n  }, onRemove:function(entity, data) {\n    if (data.body) {\n      this.removeBody(data.body);\n      Ammo.destroy(data.body);\n    }\n    data.body = null;\n  }, addBody:function(body, group, mask) {\n    if (group !== undefined && mask !== undefined) {\n      this.dynamicsWorld.addRigidBody(body, group, mask);\n    } else {\n      this.dynamicsWorld.addRigidBody(body);\n    }\n    return body;\n  }, removeBody:function(body) {\n    this.dynamicsWorld.removeRigidBody(body);\n  }, addConstraint:function(constraint) {\n    this.dynamicsWorld.addConstraint(constraint);\n    return constraint;\n  }, removeConstraint:function(constraint) {\n    this.dynamicsWorld.removeConstraint(constraint);\n  }, setGravity:function() {\n    var x, y, z;\n    if (arguments.length === 1) {\n      x = arguments[0].x;\n      y = arguments[0].y;\n      z = arguments[0].z;\n    } else {\n      x = arguments[0];\n      y = arguments[1];\n      z = arguments[2];\n    }\n    this._ammoGravity.setValue(x, y, z);\n    this.dynamicsWorld.setGravity(this._ammoGravity);\n  }, raycastFirst:function(start, end, callback) {\n    var result = null;\n    ammoRayStart.setValue(start.x, start.y, start.z);\n    ammoRayEnd.setValue(end.x, end.y, end.z);\n    var rayCallback = new Ammo.ClosestRayResultCallback(ammoRayStart, ammoRayEnd);\n    this.dynamicsWorld.rayTest(ammoRayStart, ammoRayEnd, rayCallback);\n    if (rayCallback.hasHit()) {\n      var collisionObj = rayCallback.get_m_collisionObject();\n      var body = Ammo.castObject(collisionObj, Ammo.btRigidBody);\n      if (body) {\n        var point = rayCallback.get_m_hitPointWorld();\n        var normal = rayCallback.get_m_hitNormalWorld();\n        result = new RaycastResult(body.entity, new pc.Vec3(point.x(), point.y(), point.z()), new pc.Vec3(normal.x(), normal.y(), normal.z()));\n        if (callback) {\n          callback(result);\n          if (!WARNED_RAYCAST_CALLBACK) {\n            console.warn(\"[DEPRECATED]: pc.RigidBodyComponentSystem#rayCastFirst no longer requires a callback. The result of the raycast is returned by the function instead.\");\n            WARNED_RAYCAST_CALLBACK = true;\n          }\n        }\n      }\n    }\n    Ammo.destroy(rayCallback);\n    return result;\n  }, _storeCollision:function(entity, other) {\n    var isNewCollision = false;\n    var guid = entity._guid;\n    collisions[guid] = collisions[guid] || {others:[], entity:entity};\n    if (collisions[guid].others.indexOf(other) < 0) {\n      collisions[guid].others.push(other);\n      isNewCollision = true;\n    }\n    frameCollisions[guid] = frameCollisions[guid] || {others:[], entity:entity};\n    frameCollisions[guid].others.push(other);\n    return isNewCollision;\n  }, _createContactPointFromAmmo:function(contactPoint) {\n    var contact = this.contactPointPool.allocate();\n    contact.localPoint.set(contactPoint.get_m_localPointA().x(), contactPoint.get_m_localPointA().y(), contactPoint.get_m_localPointA().z());\n    contact.localPointOther.set(contactPoint.get_m_localPointB().x(), contactPoint.get_m_localPointB().y(), contactPoint.get_m_localPointB().z());\n    contact.point.set(contactPoint.getPositionWorldOnA().x(), contactPoint.getPositionWorldOnA().y(), contactPoint.getPositionWorldOnA().z());\n    contact.pointOther.set(contactPoint.getPositionWorldOnB().x(), contactPoint.getPositionWorldOnB().y(), contactPoint.getPositionWorldOnB().z());\n    contact.normal.set(contactPoint.get_m_normalWorldOnB().x(), contactPoint.get_m_normalWorldOnB().y(), contactPoint.get_m_normalWorldOnB().z());\n    return contact;\n  }, _createReverseContactPointFromAmmo:function(contactPoint) {\n    var contact = this.contactPointPool.allocate();\n    contact.localPointOther.set(contactPoint.get_m_localPointA().x(), contactPoint.get_m_localPointA().y(), contactPoint.get_m_localPointA().z());\n    contact.localPoint.set(contactPoint.get_m_localPointB().x(), contactPoint.get_m_localPointB().y(), contactPoint.get_m_localPointB().z());\n    contact.pointOther.set(contactPoint.getPositionWorldOnA().x(), contactPoint.getPositionWorldOnA().y(), contactPoint.getPositionWorldOnA().z());\n    contact.point.set(contactPoint.getPositionWorldOnB().x(), contactPoint.getPositionWorldOnB().y(), contactPoint.getPositionWorldOnB().z());\n    contact.normal.set(contactPoint.get_m_normalWorldOnB().x(), contactPoint.get_m_normalWorldOnB().y(), contactPoint.get_m_normalWorldOnB().z());\n    return contact;\n  }, _createSingleContactResult:function(a, b, contactPoint) {\n    var result = this.singleContactResultPool.allocate();\n    result.a = a;\n    result.b = b;\n    result.localPointA = contactPoint.localPoint;\n    result.localPointB = contactPoint.localPointOther;\n    result.pointA = contactPoint.point;\n    result.pointB = contactPoint.pointOther;\n    result.normal = contactPoint.normal;\n    return result;\n  }, _createContactResult:function(other, contacts) {\n    var result = this.contactResultPool.allocate();\n    result.other = other;\n    result.contacts = contacts;\n    return result;\n  }, _cleanOldCollisions:function() {\n    for (var guid in collisions) {\n      if (collisions.hasOwnProperty(guid)) {\n        var entity = collisions[guid].entity;\n        var entityCollision = entity.collision;\n        var others = collisions[guid].others;\n        var length = others.length;\n        var i = length;\n        while (i--) {\n          var other = others[i];\n          if (!frameCollisions[guid] || frameCollisions[guid].others.indexOf(other) < 0) {\n            others.splice(i, 1);\n            if (entityCollision && other.collision) {\n              if (entity.rigidbody && other.rigidbody) {\n                entityCollision.fire(\"collisionend\", other);\n              } else {\n                if (entity.trigger) {\n                  entityCollision.fire(\"triggerleave\", other);\n                }\n              }\n            }\n          }\n        }\n        if (others.length === 0) {\n          delete collisions[guid];\n        }\n      }\n    }\n  }, onUpdate:function(dt) {\n    this.dynamicsWorld.stepSimulation(dt, this.maxSubSteps, this.fixedTimeStep);\n    var components = this.store;\n    for (var id in components) {\n      if (components.hasOwnProperty(id)) {\n        var entity = components[id].entity;\n        var componentData = components[id].data;\n        if (componentData.body && componentData.body.isActive() && componentData.enabled && entity.enabled) {\n          if (componentData.type === pc.BODYTYPE_DYNAMIC) {\n            entity.rigidbody.syncBodyToEntity();\n          } else {\n            if (componentData.type === pc.BODYTYPE_KINEMATIC) {\n              entity.rigidbody._updateKinematic(dt);\n            }\n          }\n        }\n      }\n    }\n    var dispatcher = this.dynamicsWorld.getDispatcher();\n    var numManifolds = dispatcher.getNumManifolds();\n    var i, j;\n    frameCollisions = {};\n    for (i = 0; i < numManifolds; i++) {\n      var manifold = dispatcher.getManifoldByIndexInternal(i);\n      var body0 = manifold.getBody0();\n      var body1 = manifold.getBody1();\n      var wb0 = Ammo.castObject(body0, Ammo.btRigidBody);\n      var wb1 = Ammo.castObject(body1, Ammo.btRigidBody);\n      var e0 = wb0.entity;\n      var e1 = wb1.entity;\n      if (!e0 || !e1) {\n        continue;\n      }\n      var flags0 = body0.getCollisionFlags();\n      var flags1 = body1.getCollisionFlags();\n      var numContacts = manifold.getNumContacts();\n      var forwardContacts = [];\n      var reverseContacts = [];\n      var newCollision, e0Events, e1Events;\n      if (numContacts > 0) {\n        if (flags0 & pc.BODYFLAG_NORESPONSE_OBJECT || flags1 & pc.BODYFLAG_NORESPONSE_OBJECT) {\n          e0Events = e0.collision ? e0.collision.hasEvent(\"triggerenter\") || e0.collision.hasEvent(\"triggerleave\") : false;\n          e1Events = e1.collision ? e1.collision.hasEvent(\"triggerenter\") || e1.collision.hasEvent(\"triggerleave\") : false;\n          if (e0Events) {\n            newCollision = this._storeCollision(e0, e1);\n            if (newCollision) {\n              if (e0.collision && !(flags1 & pc.BODYFLAG_NORESPONSE_OBJECT)) {\n                e0.collision.fire(\"triggerenter\", e1);\n              }\n            }\n          }\n          if (e1Events) {\n            newCollision = this._storeCollision(e1, e0);\n            if (newCollision) {\n              if (e1.collision && !(flags0 & pc.BODYFLAG_NORESPONSE_OBJECT)) {\n                e1.collision.fire(\"triggerenter\", e0);\n              }\n            }\n          }\n        } else {\n          e0Events = e0.collision ? e0.collision.hasEvent(\"collisionstart\") || e0.collision.hasEvent(\"collisionend\") || e0.collision.hasEvent(\"contact\") : false;\n          e1Events = e1.collision ? e1.collision.hasEvent(\"collisionstart\") || e1.collision.hasEvent(\"collisionend\") || e1.collision.hasEvent(\"contact\") : false;\n          var globalEvents = this.hasEvent(\"contact\");\n          if (globalEvents || e0Events || e1Events) {\n            for (j = 0; j < numContacts; j++) {\n              var btContactPoint = manifold.getContactPoint(j);\n              var contactPoint = this._createContactPointFromAmmo(btContactPoint);\n              var reverseContactPoint = null;\n              if (e0Events || e1Events) {\n                reverseContactPoint = this._createReverseContactPointFromAmmo(btContactPoint);\n                forwardContacts.push(contactPoint);\n                reverseContacts.push(reverseContactPoint);\n              }\n              if (globalEvents) {\n                var result = this._createSingleContactResult(e0, e1, contactPoint);\n                this.fire(\"contact\", result);\n              }\n            }\n            if (e0Events) {\n              var forwardResult = this._createContactResult(e1, forwardContacts);\n              if (e0.collision) {\n                e0.collision.fire(\"contact\", forwardResult);\n              }\n              newCollision = this._storeCollision(e0, e1);\n              if (newCollision && e0.collision) {\n                e0.collision.fire(\"collisionstart\", forwardResult);\n              }\n            }\n            if (e1Events) {\n              var reverseResult = this._createContactResult(e0, reverseContacts);\n              if (e1.collision) {\n                e1.collision.fire(\"contact\", reverseResult);\n              }\n              newCollision = this._storeCollision(e1, e0);\n              if (newCollision && e1.collision) {\n                e1.collision.fire(\"collisionstart\", reverseResult);\n              }\n            }\n          }\n        }\n      }\n    }\n    this._cleanOldCollisions();\n    this.contactPointPool.freeAll();\n    this.contactResultPool.freeAll();\n    this.singleContactResultPool.freeAll();\n  }});\n  return {RIGIDBODY_TYPE_STATIC:\"static\", RIGIDBODY_TYPE_DYNAMIC:\"dynamic\", RIGIDBODY_TYPE_KINEMATIC:\"kinematic\", RIGIDBODY_CF_STATIC_OBJECT:1, RIGIDBODY_CF_KINEMATIC_OBJECT:2, RIGIDBODY_CF_NORESPONSE_OBJECT:4, RIGIDBODY_ACTIVE_TAG:1, RIGIDBODY_ISLAND_SLEEPING:2, RIGIDBODY_WANTS_DEACTIVATION:3, RIGIDBODY_DISABLE_DEACTIVATION:4, RIGIDBODY_DISABLE_SIMULATION:5, RigidBodyComponentSystem:RigidBodyComponentSystem};\n}());\npc.extend(pc, function() {\n  var RigidBodyComponentData = function() {\n    this.enabled = true;\n    this.mass = 1;\n    this.linearDamping = 0;\n    this.angularDamping = 0;\n    this.linearFactor = new pc.Vec3(1, 1, 1);\n    this.angularFactor = new pc.Vec3(1, 1, 1);\n    this.friction = 0.5;\n    this.restitution = 0;\n    this.type = pc.BODYTYPE_STATIC;\n    this.group = pc.BODYGROUP_STATIC;\n    this.mask = pc.BODYMASK_NOT_STATIC;\n    this.body = null;\n    this.simulationEnabled = false;\n  };\n  RigidBodyComponentData = pc.inherits(RigidBodyComponentData, pc.ComponentData);\n  return {RigidBodyComponentData:RigidBodyComponentData};\n}());\npc.extend(pc, function() {\n  var ammoVec1, ammoQuat;\n  var Trigger = function Trigger(app, component, data) {\n    this.entity = component.entity;\n    this.component = component;\n    this.app = app;\n    if (typeof Ammo !== \"undefined\") {\n      ammoVec1 = new Ammo.btVector3;\n      ammoQuat = new Ammo.btQuaternion;\n    }\n    this.initialize(data);\n  };\n  Trigger.prototype = {initialize:function(data) {\n    var entity = this.entity;\n    var shape = data.shape;\n    if (shape && typeof Ammo !== \"undefined\") {\n      if (entity.trigger) {\n        entity.trigger.destroy();\n      }\n      var mass = 1;\n      var localInertia = new Ammo.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      var pos = entity.getPosition();\n      var rot = entity.getRotation();\n      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);\n      var startTransform = new Ammo.btTransform;\n      startTransform.setIdentity();\n      startTransform.getOrigin().setValue(pos.x, pos.y, pos.z);\n      startTransform.setRotation(ammoQuat);\n      var motionState = new Ammo.btDefaultMotionState(startTransform);\n      var bodyInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      var body = new Ammo.btRigidBody(bodyInfo);\n      this.body = body;\n      body.setRestitution(0);\n      body.setFriction(0);\n      body.setDamping(0, 0);\n      ammoVec1.setValue(0, 0, 0);\n      body.setLinearFactor(ammoVec1);\n      body.setAngularFactor(ammoVec1);\n      body.setCollisionFlags(body.getCollisionFlags() | pc.BODYFLAG_NORESPONSE_OBJECT);\n      body.entity = entity;\n      if (this.component.enabled && entity.enabled) {\n        this.enable();\n      }\n    }\n  }, destroy:function() {\n    if (this.body) {\n      this.app.systems.rigidbody.removeBody(this.body);\n    }\n  }, syncEntityToBody:function() {\n    var body = this.body;\n    if (body) {\n      var position = this.entity.getPosition();\n      var rotation = this.entity.getRotation();\n      var transform = body.getWorldTransform();\n      transform.getOrigin().setValue(position.x, position.y, position.z);\n      ammoQuat.setValue(rotation.x, rotation.y, rotation.z, rotation.w);\n      transform.setRotation(ammoQuat);\n      body.activate();\n    }\n  }, enable:function() {\n    var body = this.body;\n    if (!body) {\n      return;\n    }\n    this.app.systems.rigidbody.addBody(body, pc.BODYGROUP_TRIGGER, pc.BODYMASK_NOT_STATIC ^ pc.BODYGROUP_TRIGGER);\n    body.forceActivationState(pc.BODYSTATE_ACTIVE_TAG);\n    body.activate();\n    this.syncEntityToBody();\n  }, disable:function() {\n    var body = this.body;\n    if (!body) {\n      return;\n    }\n    this.app.systems.rigidbody.removeBody(body);\n    body.forceActivationState(pc.BODYSTATE_DISABLE_SIMULATION);\n  }};\n  return {Trigger:Trigger};\n}());\npc.extend(pc, function() {\n  var CollisionComponent = function CollisionComponent(system, entity) {\n    this.on(\"set_type\", this.onSetType, this);\n    this.on(\"set_halfExtents\", this.onSetHalfExtents, this);\n    this.on(\"set_radius\", this.onSetRadius, this);\n    this.on(\"set_height\", this.onSetHeight, this);\n    this.on(\"set_axis\", this.onSetAxis, this);\n    this.on(\"set_asset\", this.onSetAsset, this);\n    this.on(\"set_model\", this.onSetModel, this);\n  };\n  CollisionComponent = pc.inherits(CollisionComponent, pc.Component);\n  pc.extend(CollisionComponent.prototype, {onSetType:function(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      this.system.changeType(this, oldValue, newValue);\n    }\n  }, onSetHalfExtents:function(name, oldValue, newValue) {\n    if (this.data.initialized && this.data.type === \"box\") {\n      this.system.recreatePhysicalShapes(this);\n    }\n  }, onSetRadius:function(name, oldValue, newValue) {\n    if (this.data.initialized && (this.data.type === \"sphere\" || this.data.type === \"capsule\" || this.data.type === \"cylinder\")) {\n      this.system.recreatePhysicalShapes(this);\n    }\n  }, onSetHeight:function(name, oldValue, newValue) {\n    if (this.data.initialized && (this.data.type === \"capsule\" || this.data.type === \"cylinder\")) {\n      this.system.recreatePhysicalShapes(this);\n    }\n  }, onSetAxis:function(name, oldValue, newValue) {\n    if (this.data.initialized && (this.data.type === \"capsule\" || this.data.type === \"cylinder\")) {\n      this.system.recreatePhysicalShapes(this);\n    }\n  }, onSetAsset:function(name, oldValue, newValue) {\n    var asset;\n    var assets = this.system.app.assets;\n    if (oldValue) {\n      asset = assets.get(oldValue);\n      if (asset) {\n        asset.off(\"remove\", this.onAssetRemoved, this);\n      }\n    }\n    if (newValue) {\n      if (newValue instanceof pc.Asset) {\n        this.data.asset = newValue.id;\n      }\n      asset = assets.get(this.data.asset);\n      if (asset) {\n        asset.off(\"remove\", this.onAssetRemoved, this);\n        asset.on(\"remove\", this.onAssetRemoved, this);\n      }\n    }\n    if (this.data.initialized && this.data.type === \"mesh\") {\n      if (!newValue) {\n        this.data.model = null;\n      }\n      this.system.recreatePhysicalShapes(this);\n    }\n  }, onSetModel:function(name, oldValue, newValue) {\n    if (this.data.initialized && this.data.type === \"mesh\") {\n      this.system.implementations.mesh.doRecreatePhysicalShape(this);\n    }\n  }, onAssetRemoved:function(asset) {\n    asset.off(\"remove\", this.onAssetRemoved, this);\n    if (this.data.asset === asset.id) {\n      this.asset = null;\n    }\n  }, onEnable:function() {\n    CollisionComponent._super.onEnable.call(this);\n    if (this.data.type === \"mesh\" && this.data.asset && this.data.initialized) {\n      var asset = this.system.app.assets.get(this.data.asset);\n      if (asset && (!asset.resource || !this.data.shape)) {\n        this.system.recreatePhysicalShapes(this);\n        return;\n      }\n    }\n    if (this.entity.trigger) {\n      this.entity.trigger.enable();\n    } else {\n      if (this.entity.rigidbody) {\n        if (this.entity.rigidbody.enabled) {\n          this.entity.rigidbody.enableSimulation();\n        }\n      }\n    }\n  }, onDisable:function() {\n    CollisionComponent._super.onDisable.call(this);\n    if (this.entity.trigger) {\n      this.entity.trigger.disable();\n    } else {\n      if (this.entity.rigidbody) {\n        this.entity.rigidbody.disableSimulation();\n      }\n    }\n  }});\n  return {CollisionComponent:CollisionComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"type\", \"halfExtents\", \"radius\", \"axis\", \"height\", \"asset\", \"shape\", \"model\"];\n  var CollisionComponentSystem = function CollisionComponentSystem(app) {\n    this.id = \"collision\";\n    this.description = \"Specifies a collision volume.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.CollisionComponent;\n    this.DataType = pc.CollisionComponentData;\n    this.schema = _schema;\n    this.implementations = {};\n    this.on(\"remove\", this.onRemove, this);\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n  };\n  CollisionComponentSystem = pc.inherits(CollisionComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.CollisionComponent.prototype, _schema);\n  CollisionComponentSystem.prototype = pc.extend(CollisionComponentSystem.prototype, {onLibraryLoaded:function() {\n    if (typeof Ammo !== \"undefined\") {\n    } else {\n      pc.ComponentSystem.off(\"update\", this.onUpdate, this);\n    }\n  }, initializeComponentData:function(component, _data, properties) {\n    var idx;\n    var data = {};\n    properties = [\"type\", \"halfExtents\", \"radius\", \"axis\", \"height\", \"shape\", \"model\", \"asset\", \"enabled\"];\n    properties.forEach(function(prop) {\n      data[prop] = _data[prop];\n    });\n    if (_data.hasOwnProperty(\"asset\")) {\n      idx = properties.indexOf(\"model\");\n      if (idx !== -1) {\n        properties.splice(idx, 1);\n      }\n    } else {\n      if (_data.hasOwnProperty(\"model\")) {\n        idx = properties.indexOf(\"asset\");\n        if (idx !== -1) {\n          properties.splice(idx, 1);\n        }\n      }\n    }\n    if (!data.type) {\n      data.type = component.data.type;\n    }\n    component.data.type = data.type;\n    if (data.halfExtents && pc.type(data.halfExtents) === \"array\") {\n      data.halfExtents = new pc.Vec3(data.halfExtents[0], data.halfExtents[1], data.halfExtents[2]);\n    }\n    var impl = this._createImplementation(data.type);\n    impl.beforeInitialize(component, data);\n    CollisionComponentSystem._super.initializeComponentData.call(this.system, component, data, properties);\n    impl.afterInitialize(component, data);\n  }, _createImplementation:function(type) {\n    if (this.implementations[type] === undefined) {\n      var impl;\n      switch(type) {\n        case \"box\":\n          impl = new CollisionBoxSystemImpl(this);\n          break;\n        case \"sphere\":\n          impl = new CollisionSphereSystemImpl(this);\n          break;\n        case \"capsule\":\n          impl = new CollisionCapsuleSystemImpl(this);\n          break;\n        case \"cylinder\":\n          impl = new CollisionCylinderSystemImpl(this);\n          break;\n        case \"mesh\":\n          impl = new CollisionMeshSystemImpl(this);\n          break;\n        default:\n          throw \"Invalid collision system type: \" + type;\n      }\n      this.implementations[type] = impl;\n    }\n    return this.implementations[type];\n  }, _getImplementation:function(entity) {\n    return this.implementations[entity.collision.data.type];\n  }, cloneComponent:function(entity, clone) {\n    return this._getImplementation(entity).clone(entity, clone);\n  }, onRemove:function(entity, data) {\n    this.implementations[data.type].remove(entity, data);\n  }, onUpdate:function(dt) {\n    var id, entity, data;\n    var components = this.store;\n    for (id in components) {\n      entity = components[id].entity;\n      data = components[id].data;\n      if (data.enabled && entity.enabled) {\n        if (!entity.rigidbody && entity.trigger) {\n          entity.trigger.syncEntityToBody();\n        }\n      }\n    }\n  }, onTransformChanged:function(component, position, rotation, scale) {\n    this.implementations[component.data.type].updateTransform(component, position, rotation, scale);\n  }, changeType:function(component, previousType, newType) {\n    this.implementations[previousType].remove(component.entity, component.data);\n    this._createImplementation(newType).reset(component, component.data);\n  }, recreatePhysicalShapes:function(component) {\n    this.implementations[component.data.type].recreatePhysicalShapes(component);\n  }});\n  var CollisionSystemImpl = function(system) {\n    this.system = system;\n  };\n  CollisionSystemImpl.prototype = {beforeInitialize:function(component, data) {\n    data.shape = this.createPhysicalShape(component.entity, data);\n    data.model = new pc.Model;\n    data.model.graph = new pc.GraphNode;\n  }, afterInitialize:function(component, data) {\n    this.recreatePhysicalShapes(component);\n    component.data.initialized = true;\n  }, reset:function(component, data) {\n    this.beforeInitialize(component, data);\n    this.afterInitialize(component, data);\n  }, recreatePhysicalShapes:function(component) {\n    var entity = component.entity;\n    var data = component.data;\n    if (typeof Ammo !== \"undefined\") {\n      data.shape = this.createPhysicalShape(component.entity, data);\n      if (entity.rigidbody) {\n        entity.rigidbody.disableSimulation();\n        entity.rigidbody.createBody();\n      } else {\n        if (!entity.trigger) {\n          entity.trigger = new pc.Trigger(this.system.app, component, data);\n        } else {\n          entity.trigger.initialize(data);\n        }\n      }\n    }\n  }, createPhysicalShape:function(entity, data) {\n    return undefined;\n  }, updateTransform:function(component, position, rotation, scale) {\n    if (component.entity.trigger) {\n      component.entity.trigger.syncEntityToBody();\n    }\n  }, remove:function(entity, data) {\n    var app = this.system.app;\n    if (entity.rigidbody && entity.rigidbody.body) {\n      app.systems.rigidbody.removeBody(entity.rigidbody.body);\n      entity.rigidbody.disableSimulation();\n    }\n    if (entity.trigger) {\n      entity.trigger.destroy();\n      delete entity.trigger;\n    }\n    if (app.scene.containsModel(data.model)) {\n      app.root.removeChild(data.model.graph);\n      app.scene.removeModel(data.model);\n    }\n  }, clone:function(entity, clone) {\n    var src = this.system.dataStore[entity._guid];\n    var data = {enabled:src.data.enabled, type:src.data.type, halfExtents:[src.data.halfExtents.x, src.data.halfExtents.y, src.data.halfExtents.z], radius:src.data.radius, axis:src.data.axis, height:src.data.height, asset:src.data.asset, model:src.data.model};\n    return this.system.addComponent(clone, data);\n  }};\n  var CollisionBoxSystemImpl = function(system) {\n  };\n  CollisionBoxSystemImpl = pc.inherits(CollisionBoxSystemImpl, CollisionSystemImpl);\n  CollisionBoxSystemImpl.prototype = pc.extend(CollisionBoxSystemImpl.prototype, {createPhysicalShape:function(entity, data) {\n    if (typeof Ammo !== \"undefined\") {\n      var he = data.halfExtents;\n      var ammoHe = new Ammo.btVector3(he ? he.x : 0.5, he ? he.y : 0.5, he ? he.z : 0.5);\n      return new Ammo.btBoxShape(ammoHe);\n    } else {\n      return undefined;\n    }\n  }});\n  var CollisionSphereSystemImpl = function(system) {\n  };\n  CollisionSphereSystemImpl = pc.inherits(CollisionSphereSystemImpl, CollisionSystemImpl);\n  CollisionSphereSystemImpl.prototype = pc.extend(CollisionSphereSystemImpl.prototype, {createPhysicalShape:function(entity, data) {\n    if (typeof Ammo !== \"undefined\") {\n      return new Ammo.btSphereShape(data.radius);\n    } else {\n      return undefined;\n    }\n  }});\n  var CollisionCapsuleSystemImpl = function(system) {\n  };\n  CollisionCapsuleSystemImpl = pc.inherits(CollisionCapsuleSystemImpl, CollisionSystemImpl);\n  CollisionCapsuleSystemImpl.prototype = pc.extend(CollisionCapsuleSystemImpl.prototype, {createPhysicalShape:function(entity, data) {\n    var shape = null;\n    var axis = data.axis !== undefined ? data.axis : 1;\n    var radius = data.radius || 0.5;\n    var height = Math.max((data.height || 2) - 2 * radius, 0);\n    if (typeof Ammo !== \"undefined\") {\n      switch(axis) {\n        case 0:\n          shape = new Ammo.btCapsuleShapeX(radius, height);\n          break;\n        case 1:\n          shape = new Ammo.btCapsuleShape(radius, height);\n          break;\n        case 2:\n          shape = new Ammo.btCapsuleShapeZ(radius, height);\n          break;\n      }\n    }\n    return shape;\n  }});\n  var CollisionCylinderSystemImpl = function(system) {\n  };\n  CollisionCylinderSystemImpl = pc.inherits(CollisionCylinderSystemImpl, CollisionSystemImpl);\n  CollisionCylinderSystemImpl.prototype = pc.extend(CollisionCylinderSystemImpl.prototype, {createPhysicalShape:function(entity, data) {\n    var halfExtents = null;\n    var shape = null;\n    var axis = data.axis !== undefined ? data.axis : 1;\n    var radius = data.radius !== undefined ? data.radius : 0.5;\n    var height = data.height !== undefined ? data.height : 1;\n    if (typeof Ammo !== \"undefined\") {\n      switch(axis) {\n        case 0:\n          halfExtents = new Ammo.btVector3(height * 0.5, radius, radius);\n          shape = new Ammo.btCylinderShapeX(halfExtents);\n          break;\n        case 1:\n          halfExtents = new Ammo.btVector3(radius, height * 0.5, radius);\n          shape = new Ammo.btCylinderShape(halfExtents);\n          break;\n        case 2:\n          halfExtents = new Ammo.btVector3(radius, radius, height * 0.5);\n          shape = new Ammo.btCylinderShapeZ(halfExtents);\n          break;\n      }\n    }\n    return shape;\n  }});\n  var CollisionMeshSystemImpl = function(system) {\n  };\n  CollisionMeshSystemImpl = pc.inherits(CollisionMeshSystemImpl, CollisionSystemImpl);\n  CollisionMeshSystemImpl.prototype = pc.extend(CollisionMeshSystemImpl.prototype, {beforeInitialize:function(component, data) {\n  }, createPhysicalShape:function(entity, data) {\n    if (typeof Ammo !== \"undefined\" && data.model) {\n      var model = data.model;\n      var shape = new Ammo.btCompoundShape;\n      var i, j;\n      for (i = 0; i < model.meshInstances.length; i++) {\n        var meshInstance = model.meshInstances[i];\n        var mesh = meshInstance.mesh;\n        var ib = mesh.indexBuffer[pc.RENDERSTYLE_SOLID];\n        var vb = mesh.vertexBuffer;\n        var format = vb.getFormat();\n        var stride = format.size / 4;\n        var positions;\n        for (j = 0; j < format.elements.length; j++) {\n          var element = format.elements[j];\n          if (element.name === pc.SEMANTIC_POSITION) {\n            positions = new Float32Array(vb.lock(), element.offset);\n          }\n        }\n        var indices = new Uint16Array(ib.lock());\n        var numTriangles = mesh.primitive[0].count / 3;\n        var v1 = new Ammo.btVector3;\n        var v2 = new Ammo.btVector3;\n        var v3 = new Ammo.btVector3;\n        var i1, i2, i3;\n        var base = mesh.primitive[0].base;\n        var triMesh = new Ammo.btTriangleMesh;\n        for (j = 0; j < numTriangles; j++) {\n          i1 = indices[base + j * 3] * stride;\n          i2 = indices[base + j * 3 + 1] * stride;\n          i3 = indices[base + j * 3 + 2] * stride;\n          v1.setValue(positions[i1], positions[i1 + 1], positions[i1 + 2]);\n          v2.setValue(positions[i2], positions[i2 + 1], positions[i2 + 2]);\n          v3.setValue(positions[i3], positions[i3 + 1], positions[i3 + 2]);\n          triMesh.addTriangle(v1, v2, v3, true);\n        }\n        var useQuantizedAabbCompression = true;\n        var triMeshShape = new Ammo.btBvhTriangleMeshShape(triMesh, useQuantizedAabbCompression);\n        var wtm = meshInstance.node.getWorldTransform();\n        var scl = wtm.getScale();\n        triMeshShape.setLocalScaling(new Ammo.btVector3(scl.x, scl.y, scl.z));\n        var pos = meshInstance.node.getPosition();\n        var rot = meshInstance.node.getRotation();\n        var transform = new Ammo.btTransform;\n        transform.setIdentity();\n        transform.getOrigin().setValue(pos.x, pos.y, pos.z);\n        var ammoQuat = new Ammo.btQuaternion;\n        ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);\n        transform.setRotation(ammoQuat);\n        shape.addChildShape(transform, triMeshShape);\n      }\n      var entityTransform = entity.getWorldTransform();\n      var scale = entityTransform.getScale();\n      var vec = new Ammo.btVector3;\n      vec.setValue(scale.x, scale.y, scale.z);\n      shape.setLocalScaling(vec);\n      return shape;\n    } else {\n      return undefined;\n    }\n  }, recreatePhysicalShapes:function(component) {\n    var data = component.data;\n    if (data.asset !== null && component.enabled && component.entity.enabled) {\n      this.loadModelAsset(component);\n    } else {\n      this.doRecreatePhysicalShape(component);\n    }\n  }, loadModelAsset:function(component) {\n    var self = this;\n    var id = component.data.asset;\n    var data = component.data;\n    var assets = this.system.app.assets;\n    var asset = assets.get(id);\n    if (asset) {\n      asset.ready(function(asset) {\n        data.model = asset.resource;\n        self.doRecreatePhysicalShape(component);\n      });\n      assets.load(asset);\n    } else {\n      assets.once(\"add:\" + id, function(asset) {\n        asset.ready(function(asset) {\n          data.model = asset.resource;\n          self.doRecreatePhysicalShape(component);\n        });\n        assets.load(asset);\n      });\n    }\n  }, doRecreatePhysicalShape:function(component) {\n    var entity = component.entity;\n    var data = component.data;\n    if (data.model) {\n      if (data.shape) {\n        Ammo.destroy(data.shape);\n      }\n      data.shape = this.createPhysicalShape(entity, data);\n      if (entity.rigidbody) {\n        entity.rigidbody.createBody();\n      } else {\n        if (!entity.trigger) {\n          entity.trigger = new pc.Trigger(this.system.app, component, data);\n        } else {\n          entity.trigger.initialize(data);\n        }\n      }\n    } else {\n      this.remove(entity, data);\n    }\n  }, updateTransform:function(component, position, rotation, scale) {\n    if (component.shape) {\n      var entityTransform = component.entity.getWorldTransform();\n      var worldScale = entityTransform.getScale();\n      var previousScale = component.shape.getLocalScaling();\n      if (worldScale.x !== previousScale.x() || worldScale.y !== previousScale.y() || worldScale.z !== previousScale.z()) {\n        this.doRecreatePhysicalShape(component);\n      }\n    }\n    CollisionMeshSystemImpl._super.updateTransform.call(this, component, position, rotation, scale);\n  }});\n  return {CollisionComponentSystem:CollisionComponentSystem};\n}());\npc.extend(pc, function() {\n  var CollisionComponentData = function() {\n    this.enabled = true;\n    this.type = \"box\";\n    this.halfExtents = new pc.Vec3(0.5, 0.5, 0.5);\n    this.radius = 0.5;\n    this.axis = 1;\n    this.height = 2;\n    this.asset = null;\n    this.shape = null;\n    this.model = null;\n    this.initialized = false;\n  };\n  CollisionComponentData = pc.inherits(CollisionComponentData, pc.ComponentData);\n  return {CollisionComponentData:CollisionComponentData};\n}());\npc.extend(pc, function() {\n  var SIMPLE_PROPERTIES = [\"emitterExtents\", \"emitterRadius\", \"loop\", \"initialVelocity\", \"animSpeed\", \"normalMap\"];\n  var COMPLEX_PROPERTIES = [\"numParticles\", \"lifetime\", \"rate\", \"rate2\", \"startAngle\", \"startAngle2\", \"lighting\", \"halfLambert\", \"intensity\", \"wrap\", \"wrapBounds\", \"depthWrite\", \"noFog\", \"sort\", \"stretch\", \"alignToMotion\", \"preWarm\", \"emitterShape\", \"animTilesX\", \"animTilesY\", \"animFrames\", \"animLoop\", \"colorMap\", \"localSpace\"];\n  var GRAPH_PROPERTIES = [\"scaleGraph\", \"scaleGraph2\", \"colorGraph\", \"colorGraph2\", \"alphaGraph\", \"alphaGraph2\", \"velocityGraph\", \"velocityGraph2\", \"localVelocityGraph\", \"localVelocityGraph2\", \"rotationSpeedGraph\", \"rotationSpeedGraph2\"];\n  var ASSET_PROPERTIES = [\"colorMapAsset\", \"normalMapAsset\", \"mesh\"];\n  var depthLayer;\n  var ParticleSystemComponent = function ParticleSystemComponent(system, entity) {\n    this.on(\"set_colorMapAsset\", this.onSetColorMapAsset, this);\n    this.on(\"set_normalMapAsset\", this.onSetNormalMapAsset, this);\n    this.on(\"set_mesh\", this.onSetMesh, this);\n    this.on(\"set_loop\", this.onSetLoop, this);\n    this.on(\"set_blendType\", this.onSetBlendType, this);\n    this.on(\"set_depthSoftening\", this.onSetDepthSoftening, this);\n    this.on(\"set_layers\", this.onSetLayers, this);\n    SIMPLE_PROPERTIES.forEach(function(prop) {\n      this.on(\"set_\" + prop, this.onSetSimpleProperty, this);\n    }.bind(this));\n    COMPLEX_PROPERTIES.forEach(function(prop) {\n      this.on(\"set_\" + prop, this.onSetComplexProperty, this);\n    }.bind(this));\n    GRAPH_PROPERTIES.forEach(function(prop) {\n      this.on(\"set_\" + prop, this.onSetGraphProperty, this);\n    }.bind(this));\n    this._requestedDepth = false;\n  };\n  ParticleSystemComponent = pc.inherits(ParticleSystemComponent, pc.Component);\n  pc.extend(ParticleSystemComponent.prototype, {addModelToLayers:function() {\n    if (!this.data.model) {\n      return;\n    }\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addMeshInstances(this.data.model.meshInstances);\n      this.emitter._layer = layer;\n    }\n  }, removeModelFromLayers:function(model) {\n    if (!this.data.model) {\n      return;\n    }\n    var layer;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeMeshInstances(this.data.model.meshInstances);\n    }\n  }, onSetLayers:function(name, oldValue, newValue) {\n    if (!this.data.model) {\n      return;\n    }\n    var i, layer;\n    for (i = 0; i < oldValue.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(oldValue[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeMeshInstances(this.data.model.meshInstances);\n    }\n    if (!this.enabled || !this.entity.enabled) {\n      return;\n    }\n    for (i = 0; i < newValue.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(newValue[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addMeshInstances(this.data.model.meshInstances);\n    }\n  }, onLayersChanged:function(oldComp, newComp) {\n    this.addModelToLayers();\n    oldComp.off(\"add\", this.onLayerAdded, this);\n    oldComp.off(\"remove\", this.onLayerRemoved, this);\n    newComp.on(\"add\", this.onLayerAdded, this);\n    newComp.on(\"remove\", this.onLayerRemoved, this);\n  }, onLayerAdded:function(layer) {\n    if (!this.data.model) {\n      return;\n    }\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.addMeshInstances(this.data.model.meshInstances);\n  }, onLayerRemoved:function(layer) {\n    if (!this.data.model) {\n      return;\n    }\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.removeMeshInstances(this.data.model.meshInstances);\n  }, onSetColorMapAsset:function(name, oldValue, newValue) {\n    var self = this;\n    var asset;\n    var assets = this.system.app.assets;\n    if (oldValue) {\n      asset = assets.get(oldValue);\n      if (asset) {\n        asset.off(\"remove\", this.onColorMapRemoved, this);\n      }\n    }\n    if (newValue) {\n      if (newValue instanceof pc.Asset) {\n        this.data.colorMapAsset = newValue.id;\n        newValue = newValue.id;\n      }\n      asset = assets.get(newValue);\n      if (asset) {\n        asset.on(\"remove\", this.onColorMapRemoved, this);\n        asset.ready(function(asset) {\n          self.colorMap = asset.resource;\n        });\n        if (self.enabled && self.entity.enabled) {\n          assets.load(asset);\n        }\n      } else {\n        assets.once(\"add:\" + newValue, function(asset) {\n          asset.on(\"remove\", this.onColorMapRemoved, this);\n          asset.ready(function(asset) {\n            self.colorMap = asset.resource;\n          });\n          if (self.enabled && self.entity.enabled) {\n            assets.load(asset);\n          }\n        });\n      }\n    } else {\n      this.colorMap = null;\n    }\n  }, onColorMapRemoved:function(asset) {\n    asset.off(\"remove\", this.onColorMapRemoved, this);\n    this.colorMapAsset = null;\n  }, onSetNormalMapAsset:function(name, oldValue, newValue) {\n    var self = this;\n    var asset;\n    var assets = this.system.app.assets;\n    if (oldValue) {\n      asset = assets.get(oldValue);\n      if (asset) {\n        asset.off(\"remove\", this.onNormalMapRemoved, this);\n      }\n    }\n    if (newValue) {\n      if (newValue instanceof pc.Asset) {\n        this.data.normalMapAsset = newValue.id;\n        newValue = newValue.id;\n      }\n      asset = assets.get(newValue);\n      if (asset) {\n        asset.on(\"remove\", this.onNormalMapRemoved, this);\n        asset.ready(function(asset) {\n          self.normalMap = asset.resource;\n        });\n        if (self.enabled && self.entity.enabled) {\n          assets.load(asset);\n        }\n      } else {\n        assets.once(\"add:\" + newValue, function(asset) {\n          asset.on(\"remove\", this.onNormalMapRemoved, this);\n          asset.ready(function(asset) {\n            self.normalMap = asset.resource;\n          });\n          if (self.enabled && self.entity.enabled) {\n            assets.load(asset);\n          }\n        });\n      }\n    } else {\n      this.normalMap = null;\n    }\n  }, onNormalMapRemoved:function(asset) {\n    asset.off(\"remove\", this.onNormalMapRemoved, this);\n    this.normalMapAsset = null;\n  }, onSetMesh:function(name, oldValue, newValue) {\n    var self = this;\n    var asset;\n    var assets = this.system.app.assets;\n    if (oldValue && typeof oldValue === \"number\") {\n      asset = assets.get(oldValue);\n      if (asset) {\n        asset.off(\"remove\", this.onMeshRemoved, this);\n      }\n    }\n    if (newValue) {\n      if (newValue instanceof pc.Asset) {\n        this.data.mesh = newValue.id;\n        newValue = newValue.id;\n      }\n      if (typeof newValue === \"number\") {\n        asset = assets.get(newValue);\n        if (asset) {\n          asset.on(\"remove\", this.onMeshRemoved, this);\n          asset.ready(function(asset) {\n            self._onMeshChanged(asset.resource);\n          });\n          if (self.enabled && self.entity.enabled) {\n            assets.load(asset);\n          }\n        } else {\n          assets.once(\"add:\" + newValue, function(asset) {\n            asset.on(\"remove\", this.onMeshRemoved, this);\n            asset.ready(function(asset) {\n              self._onMeshChanged(asset.resource);\n            });\n            if (self.enabled && self.entity.enabled) {\n              assets.load(asset);\n            }\n          });\n        }\n      } else {\n        this._onMeshChanged(newValue);\n      }\n    } else {\n      this._onMeshChanged(null);\n    }\n  }, _onMeshChanged:function(mesh) {\n    if (mesh && !(mesh instanceof pc.Mesh)) {\n      if (mesh.meshInstances[0]) {\n        mesh = mesh.meshInstances[0].mesh;\n      } else {\n        mesh = null;\n      }\n    }\n    this.data.mesh = mesh;\n    if (this.emitter) {\n      this.emitter.mesh = mesh;\n      this.emitter.resetMaterial();\n      this.rebuild();\n    }\n  }, onMeshRemoved:function(asset) {\n    asset.off(\"remove\", this.onMeshRemoved, this);\n    this.mesh = null;\n  }, onSetLoop:function(name, oldValue, newValue) {\n    if (this.emitter) {\n      this.emitter[name] = newValue;\n      this.emitter.resetTime();\n    }\n  }, onSetBlendType:function(name, oldValue, newValue) {\n    if (this.emitter) {\n      this.emitter[name] = newValue;\n      this.emitter.material.blendType = newValue;\n      this.emitter.resetMaterial();\n      this.rebuild();\n    }\n  }, _requestDepth:function() {\n    if (this._requestedDepth) {\n      return;\n    }\n    if (!depthLayer) {\n      depthLayer = this.system.app.scene.layers.getLayerById(pc.LAYERID_DEPTH);\n    }\n    if (depthLayer) {\n      depthLayer.incrementCounter();\n      this._requestedDepth = true;\n    }\n  }, _releaseDepth:function() {\n    if (!this._requestedDepth) {\n      return;\n    }\n    if (depthLayer) {\n      depthLayer.decrementCounter();\n      this._requestedDepth = false;\n    }\n  }, onSetDepthSoftening:function(name, oldValue, newValue) {\n    if (oldValue !== newValue) {\n      if (newValue) {\n        if (this.enabled && this.entity.enabled) {\n          this._requestDepth();\n        }\n        if (this.emitter) {\n          this.emitter[name] = newValue;\n        }\n      } else {\n        if (this.enabled && this.entity.enabled) {\n          this._releaseDepth();\n        }\n        if (this.emitter) {\n          this.emitter[name] = newValue;\n        }\n      }\n      if (this.emitter) {\n        this.reset();\n        this.emitter.resetMaterial();\n        this.rebuild();\n      }\n    }\n  }, onSetSimpleProperty:function(name, oldValue, newValue) {\n    if (this.emitter) {\n      this.emitter[name] = newValue;\n      this.emitter.resetMaterial();\n    }\n  }, onSetComplexProperty:function(name, oldValue, newValue) {\n    if (this.emitter) {\n      this.emitter[name] = newValue;\n      this.reset();\n      this.emitter.resetMaterial();\n      this.rebuild();\n    }\n  }, onSetGraphProperty:function(name, oldValue, newValue) {\n    if (this.emitter) {\n      this.emitter[name] = newValue;\n      this.emitter.rebuildGraphs();\n      this.emitter.resetMaterial();\n    }\n  }, onEnable:function() {\n    for (var i = 0, len = ASSET_PROPERTIES.length; i < len; i++) {\n      var asset = this.data[ASSET_PROPERTIES[i]];\n      if (asset) {\n        if (!(asset instanceof pc.Asset)) {\n          var id = parseInt(asset, 10);\n          if (id >= 0) {\n            asset = this.system.app.assets.get(asset);\n          } else {\n            continue;\n          }\n        }\n        if (asset && !asset.resource) {\n          this.system.app.assets.load(asset);\n        }\n      }\n    }\n    var firstRun = false;\n    if (!this.emitter) {\n      var mesh = this.data.mesh;\n      if (!(mesh instanceof pc.Mesh)) {\n        mesh = null;\n      }\n      firstRun = true;\n      this.emitter = new pc.ParticleEmitter(this.system.app.graphicsDevice, {numParticles:this.data.numParticles, emitterExtents:this.data.emitterExtents, emitterRadius:this.data.emitterRadius, emitterShape:this.data.emitterShape, initialVelocity:this.data.initialVelocity, wrap:this.data.wrap, localSpace:this.data.localSpace, wrapBounds:this.data.wrapBounds, lifetime:this.data.lifetime, rate:this.data.rate, rate2:this.data.rate2, animTilesX:this.data.animTilesX, animTilesY:this.data.animTilesY, animNumFrames:this.data.animNumFrames, \n      animSpeed:this.data.animSpeed, animLoop:this.data.animLoop, startAngle:this.data.startAngle, startAngle2:this.data.startAngle2, scaleGraph:this.data.scaleGraph, scaleGraph2:this.data.scaleGraph2, colorGraph:this.data.colorGraph, colorGraph2:this.data.colorGraph2, alphaGraph:this.data.alphaGraph, alphaGraph2:this.data.alphaGraph2, localVelocityGraph:this.data.localVelocityGraph, localVelocityGraph2:this.data.localVelocityGraph2, velocityGraph:this.data.velocityGraph, velocityGraph2:this.data.velocityGraph2, \n      rotationSpeedGraph:this.data.rotationSpeedGraph, rotationSpeedGraph2:this.data.rotationSpeedGraph2, colorMap:this.data.colorMap, normalMap:this.data.normalMap, loop:this.data.loop, preWarm:this.data.preWarm, sort:this.data.sort, stretch:this.data.stretch, alignToMotion:this.data.alignToMotion, lighting:this.data.lighting, halfLambert:this.data.halfLambert, intensity:this.data.intensity, depthSoftening:this.data.depthSoftening, scene:this.system.app.scene, mesh:mesh, depthWrite:this.data.depthWrite, \n      noFog:this.data.noFog, node:this.entity, blendType:this.data.blendType});\n      this.emitter.meshInstance.node = this.entity;\n      this.psys = new pc.Model;\n      this.psys.graph = this.entity;\n      this.psys.emitter = this.emitter;\n      this.psys.meshInstances = [this.emitter.meshInstance];\n      this.data.model = this.psys;\n      this.emitter.psys = this.psys;\n      if (!this.data.autoPlay) {\n        this.pause();\n        this.emitter.meshInstance.visible = false;\n      }\n    }\n    if (this.data.model && this.emitter.colorMap) {\n      this.addModelToLayers();\n    }\n    this.system.app.scene.on(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.on(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.on(\"remove\", this.onLayerRemoved, this);\n    }\n    if (this.enabled && this.entity.enabled) {\n      this._requestDepth();\n    }\n    ParticleSystemComponent._super.onEnable.call(this);\n  }, onDisable:function() {\n    ParticleSystemComponent._super.onDisable.call(this);\n    this.system.app.scene.off(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.off(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.off(\"remove\", this.onLayerRemoved, this);\n    }\n    if (this.data.model) {\n      this.removeModelFromLayers();\n      if (this.data.depthSoftening) {\n        this._releaseDepth();\n      }\n    }\n  }, reset:function() {\n    if (this.emitter) {\n      this.emitter.reset();\n    }\n  }, stop:function() {\n    if (this.emitter) {\n      this.emitter.loop = false;\n      this.emitter.resetTime();\n      this.emitter.addTime(0, true);\n    }\n  }, pause:function() {\n    this.data.paused = true;\n  }, unpause:function() {\n    this.data.paused = false;\n  }, play:function() {\n    this.data.paused = false;\n    if (this.emitter) {\n      this.emitter.meshInstance.visible = true;\n      this.emitter.loop = this.data.loop;\n      this.emitter.resetTime();\n    }\n  }, isPlaying:function() {\n    if (this.data.paused) {\n      return false;\n    } else {\n      if (this.emitter && this.emitter.loop) {\n        return true;\n      } else {\n        return Date.now() <= this.emitter.endTime;\n      }\n    }\n  }, rebuild:function() {\n    var enabled = this.enabled;\n    this.enabled = false;\n    if (this.emitter) {\n      this.emitter.rebuild();\n      this.emitter.meshInstance.node = this.entity;\n      this.data.model.meshInstances = [this.emitter.meshInstance];\n    }\n    this.enabled = enabled;\n  }});\n  return {ParticleSystemComponent:ParticleSystemComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\", \"autoPlay\", \"numParticles\", \"lifetime\", \"rate\", \"rate2\", \"startAngle\", \"startAngle2\", \"loop\", \"preWarm\", \"lighting\", \"halfLambert\", \"intensity\", \"depthWrite\", \"noFog\", \"depthSoftening\", \"sort\", \"blendType\", \"stretch\", \"alignToMotion\", \"emitterShape\", \"emitterExtents\", \"emitterRadius\", \"initialVelocity\", \"wrap\", \"wrapBounds\", \"localSpace\", \"colorMapAsset\", \"normalMapAsset\", \"mesh\", \"localVelocityGraph\", \"localVelocityGraph2\", \"velocityGraph\", \"velocityGraph2\", \"rotationSpeedGraph\", \n  \"rotationSpeedGraph2\", \"scaleGraph\", \"scaleGraph2\", \"colorGraph\", \"colorGraph2\", \"alphaGraph\", \"alphaGraph2\", \"colorMap\", \"normalMap\", \"animTilesX\", \"animTilesY\", \"animNumFrames\", \"animSpeed\", \"animLoop\", \"layers\"];\n  var ParticleSystemComponentSystem = function ParticleSystemComponentSystem(app) {\n    this.id = \"particlesystem\";\n    this.description = \"Updates and renders particle system in the scene.\";\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ParticleSystemComponent;\n    this.DataType = pc.ParticleSystemComponentData;\n    this.schema = _schema;\n    this.propertyTypes = {emitterExtents:\"vec3\", wrapBounds:\"vec3\", localVelocityGraph:\"curveset\", localVelocityGraph2:\"curveset\", velocityGraph:\"curveset\", velocityGraph2:\"curveset\", colorGraph:\"curveset\", colorGraph2:\"curveset\", alphaGraph:\"curve\", alphaGraph2:\"curve\", rotationSpeedGraph:\"curve\", rotationSpeedGraph2:\"curve\", scaleGraph:\"curve\", scaleGraph2:\"curve\"};\n    this.on(\"beforeremove\", this.onRemove, this);\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n  };\n  ParticleSystemComponentSystem = pc.inherits(ParticleSystemComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ParticleSystemComponent.prototype, _schema);\n  pc.extend(ParticleSystemComponentSystem.prototype, {initializeComponentData:function(component, _data, properties) {\n    var data = {};\n    properties = [];\n    var types = this.propertyTypes;\n    var type;\n    for (var prop in _data) {\n      if (_data.hasOwnProperty(prop)) {\n        properties.push(prop);\n        data[prop] = _data[prop];\n      }\n      if (types[prop] === \"vec3\") {\n        if (pc.type(data[prop]) === \"array\") {\n          data[prop] = new pc.Vec3(data[prop][0], data[prop][1], data[prop][2]);\n        }\n      } else {\n        if (types[prop] === \"curve\") {\n          if (!(data[prop] instanceof pc.Curve)) {\n            type = data[prop].type;\n            data[prop] = new pc.Curve(data[prop].keys);\n            data[prop].type = type;\n          }\n        } else {\n          if (types[prop] === \"curveset\") {\n            if (!(data[prop] instanceof pc.CurveSet)) {\n              type = data[prop].type;\n              data[prop] = new pc.CurveSet(data[prop].keys);\n              data[prop].type = type;\n            }\n          }\n        }\n      }\n      if (data.layers && pc.type(data.layers) === \"array\") {\n        data.layers = data.layers.slice(0);\n      }\n    }\n    ParticleSystemComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, cloneComponent:function(entity, clone) {\n    var source = entity.particlesystem.data;\n    var schema = this.schema;\n    var data = {};\n    for (var i = 0, len = schema.length; i < len; i++) {\n      var prop = schema[i];\n      var sourceProp = source[prop];\n      if (sourceProp instanceof pc.Vec3 || sourceProp instanceof pc.Curve || sourceProp instanceof pc.CurveSet) {\n        sourceProp = sourceProp.clone();\n        data[prop] = sourceProp;\n      } else {\n        if (prop === \"layers\") {\n          data.layers = source.layers.slice(0);\n        } else {\n          if (sourceProp !== null && sourceProp !== undefined) {\n            data[prop] = sourceProp;\n          }\n        }\n      }\n    }\n    return this.addComponent(clone, data);\n  }, onUpdate:function(dt) {\n    var components = this.store;\n    var numSteps, i, j, c;\n    var stats = this.app.stats.particles;\n    for (var id in components) {\n      if (components.hasOwnProperty(id)) {\n        c = components[id];\n        var entity = c.entity;\n        var data = c.data;\n        if (data.enabled && entity.enabled) {\n          var emitter = data.model.emitter;\n          if (!emitter.meshInstance.visible) {\n            continue;\n          }\n          if (emitter.lighting) {\n            var layer, lightCube;\n            var layers = data.layers;\n            for (i = 0; i < layers.length; i++) {\n              layer = this.app.scene.layers.getLayerById(layers[i]);\n              if (!layer) {\n                continue;\n              }\n              if (!layer._lightCube) {\n                layer._lightCube = new Float32Array(6 * 3);\n              }\n              lightCube = layer._lightCube;\n              for (i = 0; i < 6; i++) {\n                lightCube[i * 3] = this.app.scene.ambientLight.data[0];\n                lightCube[i * 3 + 1] = this.app.scene.ambientLight.data[1];\n                lightCube[i * 3 + 2] = this.app.scene.ambientLight.data[2];\n              }\n              var dirs = layer._sortedLights[pc.LIGHTTYPE_DIRECTIONAL];\n              for (j = 0; j < dirs.length; j++) {\n                for (c = 0; c < 6; c++) {\n                  var weight = Math.max(emitter.lightCubeDir[c].dot(dirs[j]._direction), 0) * dirs[j]._intensity;\n                  lightCube[c * 3] += dirs[j]._color.data[0] * weight;\n                  lightCube[c * 3 + 1] += dirs[j]._color.data[1] * weight;\n                  lightCube[c * 3 + 2] += dirs[j]._color.data[2] * weight;\n                }\n              }\n            }\n            emitter.constantLightCube.setValue(lightCube);\n          }\n          if (!data.paused) {\n            emitter.simTime += dt;\n            numSteps = 0;\n            if (emitter.simTime > emitter.fixedTimeStep) {\n              numSteps = Math.floor(emitter.simTime / emitter.fixedTimeStep);\n              emitter.simTime -= numSteps * emitter.fixedTimeStep;\n            }\n            if (numSteps) {\n              numSteps = Math.min(numSteps, emitter.maxSubSteps);\n              for (i = 0; i < numSteps; i++) {\n                emitter.addTime(emitter.fixedTimeStep);\n              }\n              stats._updatesPerFrame += numSteps;\n              stats._frameTime += emitter._addTimeTime;\n              emitter._addTimeTime = 0;\n            }\n            emitter.finishFrame();\n          }\n        }\n      }\n    }\n  }, onRemove:function(entity, component) {\n    var data = component.data;\n    if (data.model) {\n      entity.removeChild(data.model.getGraph());\n      data.model = null;\n    }\n    if (component.emitter) {\n      component.emitter.destroy();\n      component.emitter = null;\n    }\n  }});\n  return {ParticleSystemComponentSystem:ParticleSystemComponentSystem};\n}());\npc.extend(pc, function() {\n  var ParticleSystemComponentData = function() {\n    this.numParticles = 1;\n    this.rate = 1;\n    this.rate2 = null;\n    this.startAngle = 0;\n    this.startAngle2 = null;\n    this.lifetime = 50;\n    this.emitterExtents = new pc.Vec3;\n    this.emitterRadius = 0;\n    this.emitterShape = pc.EMITTERSHAPE_BOX;\n    this.initialVelocity = 0;\n    this.wrapBounds = new pc.Vec3;\n    this.localSpace = false;\n    this.colorMap = null;\n    this.colorMapAsset = null;\n    this.normalMap = null;\n    this.normalMapAsset = null;\n    this.loop = true;\n    this.preWarm = false;\n    this.sort = 0;\n    this.mode = pc.PARTICLEMODE_GPU;\n    this.scene = null;\n    this.lighting = false;\n    this.halfLambert = false;\n    this.intensity = 1;\n    this.stretch = 0.0;\n    this.alignToMotion = false;\n    this.depthSoftening = 0;\n    this.mesh = null;\n    this.depthWrite = false;\n    this.noFog = false;\n    this.animTilesX = 1;\n    this.animTilesY = 1;\n    this.animNumFrames = 1;\n    this.animSpeed = 1;\n    this.animLoop = true;\n    this.scaleGraph = null;\n    this.scaleGraph2 = null;\n    this.colorGraph = null;\n    this.colorGraph2 = null;\n    this.alphaGraph = null;\n    this.alphaGraph2 = null;\n    this.localVelocityGraph = null;\n    this.localVelocityGraph2 = null;\n    this.velocityGraph = null;\n    this.velocityGraph2 = null;\n    this.rotationSpeedGraph = null;\n    this.rotationSpeedGraph2 = null;\n    this.blendType = pc.BLEND_NORMAL;\n    this.model = null;\n    this.enabled = true;\n    this.paused = false;\n    this.autoPlay = true;\n    this.layers = [pc.LAYERID_WORLD];\n  };\n  ParticleSystemComponentData = pc.inherits(ParticleSystemComponentData, pc.ComponentData);\n  return {ParticleSystemComponentData:ParticleSystemComponentData};\n}());\npc.extend(pc, function() {\n  var SpriteAnimationClip = function(component, data) {\n    this._component = component;\n    this._frame = 0;\n    this._sprite = null;\n    this._spriteAsset = null;\n    this.spriteAsset = data.spriteAsset;\n    this.name = data.name;\n    this.fps = data.fps || 0;\n    this.loop = data.loop || false;\n    this._playing = false;\n    this._paused = false;\n    this._time = 0;\n    pc.events.attach(this);\n  };\n  SpriteAnimationClip.prototype = {_onSpriteAssetAdded:function(asset) {\n    this._component.system.app.assets.off(\"add:\" + asset.id, this._onSpriteAssetAdded, this);\n    if (this._spriteAsset === asset.id) {\n      this._bindSpriteAsset(asset);\n    }\n  }, _bindSpriteAsset:function(asset) {\n    asset.on(\"load\", this._onSpriteAssetLoad, this);\n    asset.on(\"remove\", this._onSpriteAssetRemove, this);\n    if (asset.resource) {\n      this._onSpriteAssetLoad(asset);\n    } else {\n      this._component.system.app.assets.load(asset);\n    }\n  }, _onSpriteAssetLoad:function(asset) {\n    if (!asset.resource) {\n      this.sprite = null;\n    } else {\n      if (!asset.resource.atlas) {\n        var atlasAssetId = asset.data.textureAtlasAsset;\n        var assets = this._component.system.app.assets;\n        assets.off(\"load:\" + atlasAssetId, this._onTextureAtlasLoad, this);\n        assets.once(\"load:\" + atlasAssetId, this._onTextureAtlasLoad, this);\n      } else {\n        this.sprite = asset.resource;\n      }\n    }\n  }, _onTextureAtlasLoad:function(atlasAsset) {\n    var spriteAsset = this._spriteAsset;\n    if (spriteAsset instanceof pc.Asset) {\n      this._onSpriteAssetLoad(spriteAsset);\n    } else {\n      this._onSpriteAssetLoad(this._component.system.app.assets.get(spriteAsset));\n    }\n  }, _onSpriteAssetRemove:function(asset) {\n    this.sprite = null;\n  }, _onSpriteMeshesChange:function() {\n    if (this._component.currentClip === this) {\n      this._component._showFrame(this.frame);\n    }\n  }, _onSpritePpuChanged:function() {\n    if (this._component.currentClip === this) {\n      if (this.sprite.renderMode !== pc.SPRITE_RENDERMODE_SIMPLE) {\n        this._component._showFrame(this.frame);\n      }\n    }\n  }, _update:function(dt) {\n    if (this.fps === 0) {\n      return;\n    }\n    if (!this._playing || this._paused || !this._sprite) {\n      return;\n    }\n    var dir = this.fps < 0 ? -1 : 1;\n    var time = this._time + dt * this._component.speed * dir;\n    var duration = this.duration;\n    var end = time > duration || time < 0;\n    this._setTime(time);\n    var frame = this.frame;\n    if (this._sprite) {\n      frame = Math.floor(this._sprite.frameKeys.length * this._time / duration);\n    } else {\n      frame = 0;\n    }\n    if (frame !== this._frame) {\n      this._setFrame(frame);\n    }\n    if (end) {\n      if (this.loop) {\n        this.fire(\"loop\");\n        this._component.fire(\"loop\", this);\n      } else {\n        this._playing = false;\n        this._paused = false;\n        this.fire(\"end\");\n        this._component.fire(\"end\", this);\n      }\n    }\n  }, _setTime:function(value) {\n    this._time = value;\n    var duration = this.duration;\n    if (this._time < 0) {\n      if (this.loop) {\n        this._time = this._time % duration + duration;\n      } else {\n        this._time = 0;\n      }\n    } else {\n      if (this._time > duration) {\n        if (this.loop) {\n          this._time = this._time % duration;\n        } else {\n          this._time = duration;\n        }\n      }\n    }\n  }, _setFrame:function(value) {\n    if (this._sprite) {\n      this._frame = pc.math.clamp(value, 0, this._sprite.frameKeys.length - 1);\n    } else {\n      this._frame = value;\n    }\n    if (this._component.currentClip === this) {\n      this._component._showFrame(this._frame);\n    }\n  }, _destroy:function() {\n    if (this._sprite) {\n      this._sprite = null;\n    }\n    if (this._spriteAsset) {\n      this._spriteAsset = null;\n    }\n  }, play:function() {\n    if (this._playing) {\n      return;\n    }\n    this._playing = true;\n    this._paused = false;\n    this.frame = 0;\n    this.fire(\"play\");\n    this._component.fire(\"play\", this);\n  }, pause:function() {\n    if (!this._playing || this._paused) {\n      return;\n    }\n    this._paused = true;\n    this.fire(\"pause\");\n    this._component.fire(\"pause\", this);\n  }, resume:function() {\n    if (!this._paused) {\n      return;\n    }\n    this._paused = false;\n    this.fire(\"resume\");\n    this._component.fire(\"resume\", this);\n  }, stop:function() {\n    if (!this._playing) {\n      return;\n    }\n    this._playing = false;\n    this._paused = false;\n    this._time = 0;\n    this.frame = 0;\n    this.fire(\"stop\");\n    this._component.fire(\"stop\", this);\n  }};\n  Object.defineProperty(SpriteAnimationClip.prototype, \"spriteAsset\", {get:function() {\n    return this._spriteAsset;\n  }, set:function(value) {\n    var assets = this._component.system.app.assets;\n    var id = value;\n    if (value instanceof pc.Asset) {\n      id = value.id;\n    }\n    if (this._spriteAsset !== id) {\n      if (this._spriteAsset) {\n        var prev = assets.get(this._spriteAsset);\n        if (prev) {\n          prev.off(\"load\", this._onSpriteAssetLoad, this);\n          prev.off(\"remove\", this._onSpriteAssetRemove, this);\n          var atlasAssetId = prev.data && prev.data.textureAtlasAsset;\n          if (atlasAssetId) {\n            assets.off(\"load:\" + atlasAssetId, this._onTextureAtlasLoad, this);\n          }\n        }\n      }\n      this._spriteAsset = id;\n      if (this._spriteAsset) {\n        var asset = assets.get(this._spriteAsset);\n        if (!asset) {\n          this.sprite = null;\n          assets.on(\"add:\" + this._spriteAsset, this._onSpriteAssetAdded, this);\n        } else {\n          this._bindSpriteAsset(asset);\n        }\n      } else {\n        this.sprite = null;\n      }\n    }\n  }});\n  Object.defineProperty(SpriteAnimationClip.prototype, \"sprite\", {get:function() {\n    return this._sprite;\n  }, set:function(value) {\n    if (this._sprite) {\n      this._sprite.off(\"set:meshes\", this._onSpriteMeshesChange, this);\n      this._sprite.off(\"set:pixelsPerUnit\", this._onSpritePpuChanged, this);\n      this._sprite.off(\"set:atlas\", this._onSpriteMeshesChange, this);\n      if (this._sprite.atlas) {\n        this._sprite.atlas.off(\"set:texture\", this._onSpriteMeshesChange, this);\n      }\n    }\n    this._sprite = value;\n    if (this._sprite) {\n      this._sprite.on(\"set:meshes\", this._onSpriteMeshesChange, this);\n      this._sprite.on(\"set:pixelsPerUnit\", this._onSpritePpuChanged, this);\n      this._sprite.on(\"set:atlas\", this._onSpriteMeshesChange, this);\n      if (this._sprite.atlas) {\n        this._sprite.atlas.on(\"set:texture\", this._onSpriteMeshesChange, this);\n      }\n    }\n    if (this._component.currentClip === this) {\n      var mi;\n      if (!value || !value.atlas) {\n        mi = this._component._meshInstance;\n        if (mi) {\n          mi.deleteParameter(\"texture_emissiveMap\");\n          mi.deleteParameter(\"texture_opacityMap\");\n        }\n        this._component._hideModel();\n      } else {\n        if (value.atlas.texture) {\n          mi = this._component._meshInstance;\n          if (mi) {\n            mi.setParameter(\"texture_emissiveMap\", value.atlas.texture);\n            mi.setParameter(\"texture_opacityMap\", value.atlas.texture);\n          }\n          if (this._component.enabled && this._component.entity.enabled) {\n            this._component._showModel();\n          }\n        }\n        if (this.time && this.fps) {\n          this.time = this.time;\n        } else {\n          this.frame = this.frame;\n        }\n      }\n    }\n  }});\n  Object.defineProperty(SpriteAnimationClip.prototype, \"frame\", {get:function() {\n    return this._frame;\n  }, set:function(value) {\n    this._setFrame(value);\n    var fps = this.fps || Number.MIN_VALUE;\n    this._setTime(this._frame / fps);\n  }});\n  Object.defineProperty(SpriteAnimationClip.prototype, \"isPlaying\", {get:function() {\n    return this._playing;\n  }});\n  Object.defineProperty(SpriteAnimationClip.prototype, \"isPaused\", {get:function() {\n    return this._paused;\n  }});\n  Object.defineProperty(SpriteAnimationClip.prototype, \"duration\", {get:function() {\n    if (this._sprite) {\n      var fps = this.fps || Number.MIN_VALUE;\n      return this._sprite.frameKeys.length / Math.abs(fps);\n    } else {\n      return 0;\n    }\n  }});\n  Object.defineProperty(SpriteAnimationClip.prototype, \"time\", {get:function() {\n    return this._time;\n  }, set:function(value) {\n    this._setTime(value);\n    if (this._sprite) {\n      this.frame = Math.min(this._sprite.frameKeys.length - 1, Math.floor(this._time * Math.abs(this.fps)));\n    } else {\n      this.frame = 0;\n    }\n  }});\n  return {SpriteAnimationClip:SpriteAnimationClip};\n}());\npc.extend(pc, function() {\n  pc.SPRITETYPE_SIMPLE = \"simple\";\n  pc.SPRITETYPE_ANIMATED = \"animated\";\n  var PARAM_EMISSIVE_MAP = \"texture_emissiveMap\";\n  var PARAM_OPACITY_MAP = \"texture_opacityMap\";\n  var PARAM_EMISSIVE = \"material_emissive\";\n  var PARAM_OPACITY = \"material_opacity\";\n  var PARAM_INNER_OFFSET = \"innerOffset\";\n  var PARAM_OUTER_SCALE = \"outerScale\";\n  var PARAM_ATLAS_RECT = \"atlasRect\";\n  var SpriteComponent = function SpriteComponent(system, entity) {\n    this._type = pc.SPRITETYPE_SIMPLE;\n    this._material = system.defaultMaterial;\n    this._color = new pc.Color(1, 1, 1, 1);\n    this._speed = 1;\n    this._flipX = false;\n    this._flipY = false;\n    this._width = 1;\n    this._height = 1;\n    this._drawOrder = 0;\n    this._layers = [pc.LAYERID_WORLD];\n    this._outerScale = new pc.Vec2(1, 1);\n    this._innerOffset = new pc.Vec4;\n    this._atlasRect = new pc.Vec4;\n    this._batchGroupId = -1;\n    this._batchGroup = null;\n    this._node = new pc.GraphNode;\n    this._model = new pc.Model;\n    this._model.graph = this._node;\n    this._meshInstance = null;\n    entity.addChild(this._model.graph);\n    this._model._entity = entity;\n    this._updateAabbFunc = this._updateAabb.bind(this);\n    this._addedModel = false;\n    this._autoPlayClip = null;\n    this._clips = {};\n    this._defaultClip = new pc.SpriteAnimationClip(this, {name:this.entity.name, fps:0, loop:false, spriteAsset:null});\n    this._currentClip = this._defaultClip;\n  };\n  SpriteComponent = pc.inherits(SpriteComponent, pc.Component);\n  pc.extend(SpriteComponent.prototype, {onEnable:function() {\n    SpriteComponent._super.onEnable.call(this);\n    this.system.app.scene.on(\"set:layers\", this._onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.on(\"add\", this._onLayerAdded, this);\n      this.system.app.scene.layers.on(\"remove\", this._onLayerRemoved, this);\n    }\n    this._showModel();\n    if (this._autoPlayClip) {\n      this._tryAutoPlay();\n    }\n  }, onDisable:function() {\n    SpriteComponent._super.onDisable.call(this);\n    this.system.app.scene.off(\"set:layers\", this._onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.off(\"add\", this._onLayerAdded, this);\n      this.system.app.scene.layers.off(\"remove\", this._onLayerRemoved, this);\n    }\n    this.stop();\n    this._hideModel();\n  }, onDestroy:function() {\n    this._currentClip = null;\n    if (this._defaultClip) {\n      this._defaultClip._destroy();\n      this._defaultClip = null;\n    }\n    for (var key in this._clips) {\n      this._clips[key]._destroy();\n    }\n    this._clips = null;\n    this._hideModel();\n    this._model = null;\n    if (this._node) {\n      if (this._node.parent) {\n        this._node.parent.removeChild(this._node);\n      }\n      this._node = null;\n    }\n    if (this._meshInstance) {\n      this._meshInstance.material = null;\n      this._meshInstance.mesh = null;\n      this._meshInstance = null;\n    }\n  }, _showModel:function() {\n    if (this._addedModel) {\n      return;\n    }\n    if (!this._meshInstance) {\n      return;\n    }\n    var i;\n    var len;\n    var meshInstances = [this._meshInstance];\n    for (i = 0, len = this._layers.length; i < len; i++) {\n      var layer = this.system.app.scene.layers.getLayerById(this._layers[i]);\n      if (layer) {\n        layer.addMeshInstances(meshInstances);\n      }\n    }\n    this._addedModel = true;\n  }, _hideModel:function() {\n    if (!this._addedModel || !this._meshInstance) {\n      return;\n    }\n    var i;\n    var len;\n    var meshInstances = [this._meshInstance];\n    for (i = 0, len = this._layers.length; i < len; i++) {\n      var layer = this.system.app.scene.layers.getLayerById(this._layers[i]);\n      if (layer) {\n        layer.removeMeshInstances(meshInstances);\n      }\n    }\n    this._addedModel = false;\n  }, _showFrame:function(frame) {\n    if (!this.sprite) {\n      return;\n    }\n    var mesh = this.sprite.meshes[frame];\n    if (!mesh) {\n      if (this._meshInstance) {\n        this._meshInstance.mesh = null;\n        this._meshInstance.visible = false;\n      }\n      return;\n    }\n    var material = this.system.defaultMaterial;\n    if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {\n      material = this.system.default9SlicedMaterialSlicedMode;\n    } else {\n      if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {\n        material = this.system.default9SlicedMaterialTiledMode;\n      }\n    }\n    if (!this._meshInstance) {\n      this._meshInstance = new pc.MeshInstance(this._node, mesh, this._material);\n      this._meshInstance.castShadow = false;\n      this._meshInstance.receiveShadow = false;\n      this._meshInstance.drawOrder = this._drawOrder;\n      this._model.meshInstances.push(this._meshInstance);\n      this._meshInstance.setParameter(PARAM_EMISSIVE, this._color.data3);\n      this._meshInstance.setParameter(PARAM_OPACITY, this._color.data[3]);\n      if (this.enabled && this.entity.enabled) {\n        this._showModel();\n      }\n    }\n    if (this._meshInstance.material !== material) {\n      this._meshInstance.material = material;\n    }\n    if (this._meshInstance.mesh !== mesh) {\n      this._meshInstance.mesh = mesh;\n      this._meshInstance.visible = true;\n      this._meshInstance._aabbVer = -1;\n    }\n    if (this.sprite.atlas && this.sprite.atlas.texture) {\n      this._meshInstance.setParameter(PARAM_EMISSIVE_MAP, this.sprite.atlas.texture);\n      this._meshInstance.setParameter(PARAM_OPACITY_MAP, this.sprite.atlas.texture);\n    } else {\n      this._meshInstance.deleteParameter(PARAM_EMISSIVE_MAP);\n      this._meshInstance.deleteParameter(PARAM_OPACITY_MAP);\n    }\n    if (this.sprite.atlas && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {\n      this._meshInstance._updateAabbFunc = this._updateAabbFunc;\n      var frameData = this.sprite.atlas.frames[this.sprite.frameKeys[frame]];\n      if (frameData) {\n        var borderWidthScale = 2 / frameData.rect.z;\n        var borderHeightScale = 2 / frameData.rect.w;\n        this._innerOffset.set(frameData.border.x * borderWidthScale, frameData.border.y * borderHeightScale, frameData.border.z * borderWidthScale, frameData.border.w * borderHeightScale);\n        var tex = this.sprite.atlas.texture;\n        this._atlasRect.set(frameData.rect.x / tex.width, frameData.rect.y / tex.height, frameData.rect.z / tex.width, frameData.rect.w / tex.height);\n      } else {\n        this._innerOffset.set(0, 0, 0, 0);\n      }\n      this._meshInstance.setParameter(PARAM_INNER_OFFSET, this._innerOffset.data);\n      this._meshInstance.setParameter(PARAM_ATLAS_RECT, this._atlasRect.data);\n    } else {\n      this._meshInstance._updateAabbFunc = null;\n    }\n    this._updateTransform();\n  }, _updateTransform:function() {\n    var scaleX = this.flipX ? -1 : 1;\n    var scaleY = this.flipY ? -1 : 1;\n    var posX = 0;\n    var posY = 0;\n    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {\n      var w = 1;\n      var h = 1;\n      if (this.sprite.atlas) {\n        var frameData = this.sprite.atlas.frames[this.sprite.frameKeys[this.frame]];\n        if (frameData) {\n          w = frameData.rect.z;\n          h = frameData.rect.w;\n          posX = (0.5 - frameData.pivot.x) * this._width;\n          posY = (0.5 - frameData.pivot.y) * this._height;\n        }\n      }\n      var scaleMulX = w / this.sprite.pixelsPerUnit;\n      var scaleMulY = h / this.sprite.pixelsPerUnit;\n      this._outerScale.set(Math.max(this._width, this._innerOffset.x * scaleMulX), Math.max(this._height, this._innerOffset.y * scaleMulY));\n      scaleX *= scaleMulX;\n      scaleY *= scaleMulY;\n      this._outerScale.x /= scaleMulX;\n      this._outerScale.y /= scaleMulY;\n      scaleX *= pc.math.clamp(this._width / (this._innerOffset.x * scaleMulX), 0.0001, 1);\n      scaleY *= pc.math.clamp(this._height / (this._innerOffset.y * scaleMulY), 0.0001, 1);\n      if (this._meshInstance) {\n        this._meshInstance.setParameter(PARAM_OUTER_SCALE, this._outerScale.data, 4294967295);\n      }\n    }\n    this._node.setLocalScale(scaleX, scaleY, 1);\n    this._node.setLocalPosition(posX, posY, 0);\n  }, _updateAabb:function(aabb) {\n    aabb.center.set(0, 0, 0);\n    aabb.halfExtents.set(this._outerScale.x * 0.5, this._outerScale.y * 0.5, 0.001);\n    aabb.setFromTransformedAabb(aabb, this._node.getWorldTransform());\n    return aabb;\n  }, _tryAutoPlay:function() {\n    if (!this._autoPlayClip) {\n      return;\n    }\n    if (this.type !== pc.SPRITETYPE_ANIMATED) {\n      return;\n    }\n    var clip = this._clips[this._autoPlayClip];\n    if (clip && !clip.isPlaying && (!this._currentClip || !this._currentClip.isPlaying)) {\n      if (this.enabled && this.entity.enabled) {\n        this.play(clip.name);\n      }\n    }\n  }, _onLayersChanged:function(oldComp, newComp) {\n    oldComp.off(\"add\", this.onLayerAdded, this);\n    oldComp.off(\"remove\", this.onLayerRemoved, this);\n    newComp.on(\"add\", this.onLayerAdded, this);\n    newComp.on(\"remove\", this.onLayerRemoved, this);\n    if (this.enabled && this.entity.enabled) {\n      this._showModel();\n    }\n  }, _onLayerAdded:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    if (this._addedModel && this.enabled && this.entity.enabled && this._meshInstance) {\n      layer.addMeshInstances([this._meshInstance]);\n    }\n  }, _onLayerRemoved:function(layer) {\n    if (!this._meshInstance) {\n      return;\n    }\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    layer.removeMeshInstances([this._meshInstance]);\n  }, addClip:function(data) {\n    var clip = new pc.SpriteAnimationClip(this, {name:data.name, fps:data.fps, loop:data.loop, spriteAsset:data.spriteAsset});\n    this._clips[data.name] = clip;\n    if (clip.name && clip.name === this._autoPlayClip) {\n      this._tryAutoPlay();\n    }\n    return clip;\n  }, removeClip:function(name) {\n    delete this._clips[name];\n  }, clip:function(name) {\n    return this._clips[name];\n  }, play:function(name) {\n    var clip = this._clips[name];\n    var current = this._currentClip;\n    if (current && current !== clip) {\n      current._playing = false;\n    }\n    this._currentClip = clip;\n    if (this._currentClip) {\n      this._currentClip = clip;\n      this._currentClip.play();\n    } else {\n      logWARNING(\"Trying to play sprite animation \" + name + \" which does not exist.\");\n    }\n    return clip;\n  }, pause:function() {\n    if (this._currentClip === this._defaultClip) {\n      return;\n    }\n    if (this._currentClip.isPlaying) {\n      this._currentClip.pause();\n    }\n  }, resume:function() {\n    if (this._currentClip === this._defaultClip) {\n      return;\n    }\n    if (this._currentClip.isPaused) {\n      this._currentClip.resume();\n    }\n  }, stop:function() {\n    if (this._currentClip === this._defaultClip) {\n      return;\n    }\n    this._currentClip.stop();\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"type\", {get:function() {\n    return this._type;\n  }, set:function(value) {\n    if (this._type === value) {\n      return;\n    }\n    this._type = value;\n    if (this._type === pc.SPRITETYPE_SIMPLE) {\n      this.stop();\n      this._currentClip = this._defaultClip;\n      if (this.enabled && this.entity.enabled) {\n        this._currentClip.frame = this.frame;\n        if (this._currentClip.sprite) {\n          this._showModel();\n        } else {\n          this._hideModel();\n        }\n      }\n    } else {\n      if (this._type === pc.SPRITETYPE_ANIMATED) {\n        this.stop();\n        if (this._autoPlayClip) {\n          this._tryAutoPlay();\n        }\n        if (this._currentClip && this._currentClip.isPlaying && this.enabled && this.entity.enabled) {\n          this._showModel();\n        } else {\n          this._hideModel();\n        }\n      }\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"frame\", {get:function() {\n    return this._currentClip.frame;\n  }, set:function(value) {\n    this._currentClip.frame = value;\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"spriteAsset\", {get:function() {\n    return this._defaultClip._spriteAsset;\n  }, set:function(value) {\n    this._defaultClip.spriteAsset = value;\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"sprite\", {get:function() {\n    return this._currentClip.sprite;\n  }, set:function(value) {\n    this._currentClip.sprite = value;\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"material\", {get:function() {\n    return this._material;\n  }, set:function(value) {\n    this._material = value;\n    if (this._meshInstance) {\n      this._meshInstance.material = value;\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"color\", {get:function() {\n    return this._color;\n  }, set:function(value) {\n    this._color.data[0] = value.data[0];\n    this._color.data[1] = value.data[1];\n    this._color.data[2] = value.data[2];\n    if (this._meshInstance) {\n      this._meshInstance.setParameter(PARAM_EMISSIVE, this._color.data3);\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"opacity\", {get:function() {\n    return this._color.data[3];\n  }, set:function(value) {\n    this._color.data[3] = value;\n    if (this._meshInstance) {\n      this._meshInstance.setParameter(PARAM_OPACITY, value);\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"clips\", {get:function() {\n    return this._clips;\n  }, set:function(value) {\n    var name, key;\n    if (!value) {\n      for (name in this._clips) {\n        this.removeClip(name);\n      }\n      return;\n    }\n    for (name in this._clips) {\n      var found = false;\n      for (key in value) {\n        if (value[key].name === name) {\n          found = true;\n          this._clips[name].fps = value[key].fps;\n          this._clips[name].loop = value[key].loop;\n          if (value[key].hasOwnProperty(\"sprite\")) {\n            this._clips[name].sprite = value[key].sprite;\n          } else {\n            if (value[key].hasOwnProperty(\"spriteAsset\")) {\n              this._clips[name].spriteAsset = value[key].spriteAsset;\n            }\n          }\n          break;\n        }\n      }\n      if (!found) {\n        this.removeClip(name);\n      }\n    }\n    for (key in value) {\n      if (this._clips[value[key].name]) {\n        continue;\n      }\n      this.addClip(value[key]);\n    }\n    if (this._autoPlayClip) {\n      this._tryAutoPlay();\n    }\n    if (!this._currentClip || !this._currentClip.sprite) {\n      this._hideModel();\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"currentClip\", {get:function() {\n    return this._currentClip;\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"speed\", {get:function() {\n    return this._speed;\n  }, set:function(value) {\n    this._speed = value;\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"flipX\", {get:function() {\n    return this._flipX;\n  }, set:function(value) {\n    if (this._flipX === value) {\n      return;\n    }\n    this._flipX = value;\n    this._updateTransform();\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"flipY\", {get:function() {\n    return this._flipY;\n  }, set:function(value) {\n    if (this._flipY === value) {\n      return;\n    }\n    this._flipY = value;\n    this._updateTransform();\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"width\", {get:function() {\n    return this._width;\n  }, set:function(value) {\n    if (value === this._width) {\n      return;\n    }\n    this._width = value;\n    this._outerScale.x = this._width;\n    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED)) {\n      this._updateTransform();\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"height\", {get:function() {\n    return this._height;\n  }, set:function(value) {\n    if (value === this._height) {\n      return;\n    }\n    this._height = value;\n    this._outerScale.y = this.height;\n    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED)) {\n      this._updateTransform();\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"batchGroupId\", {get:function() {\n    return this._batchGroupId;\n  }, set:function(value) {\n    if (this._batchGroupId === value) {\n      return;\n    }\n    var prev = this._batchGroupId;\n    this._batchGroupId = value;\n    if (prev >= 0) {\n      this.system.app.batcher._markGroupDirty(prev);\n    }\n    if (this._batchGroupId >= 0) {\n      this.system.app.batcher._markGroupDirty(this._batchGroupId);\n    } else {\n      if (prev >= 0) {\n        if (this._currentClip && this._currentClip.sprite && this.enabled && this.entity.enabled) {\n          this._showModel();\n        }\n      }\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"autoPlayClip\", {get:function() {\n    return this._autoPlayClip;\n  }, set:function(value) {\n    this._autoPlayClip = value instanceof pc.SpriteAnimationClip ? value.name : value;\n    this._tryAutoPlay();\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"drawOrder\", {get:function() {\n    return this._drawOrder;\n  }, set:function(value) {\n    this._drawOrder = value;\n    if (this._meshInstance) {\n      this._meshInstance.drawOrder = value;\n    }\n  }});\n  Object.defineProperty(SpriteComponent.prototype, \"layers\", {get:function() {\n    return this._layers;\n  }, set:function(value) {\n    var i;\n    var len;\n    if (this._addedModel) {\n      this._hideModel();\n    }\n    var prev = this._layers;\n    this._layers = value;\n    if (!this._meshInstance) {\n      return;\n    }\n    if (this.enabled && this.entity.enabled) {\n      this._showModel();\n    }\n  }});\n  return {SpriteComponent:SpriteComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\"];\n  var warningShown = false;\n  var nineSliceBasePS = [\"varying vec2 vMask;\", \"varying vec2 vTiledUv;\", \"uniform vec4 innerOffset;\", \"uniform vec2 outerScale;\", \"uniform vec4 atlasRect;\", \"vec2 nineSlicedUv;\"].join(\"\\n\");\n  var nineSliceUvPs = [\"vec2 tileMask = step(vMask, vec2(0.99999));\", \"vec2 clampedUv = mix(innerOffset.xy*0.5, vec2(1.0) - innerOffset.zw*0.5, fract(vTiledUv));\", \"clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;\", \"nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);\"].join(\"\\n\");\n  var SpriteComponentSystem = function SpriteComponentSystem(app) {\n    this.id = \"sprite\";\n    this.app = app;\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.SpriteComponent;\n    this.DataType = pc.SpriteComponentData;\n    this.schema = _schema;\n    this._defaultTexture = new pc.Texture(app.graphicsDevice, {width:1, height:1, format:pc.PIXELFORMAT_R8_G8_B8_A8});\n    var pixels = this._defaultTexture.lock();\n    var pixelData = new Uint8Array(4);\n    pixelData[0] = 255.0;\n    pixelData[1] = 255.0;\n    pixelData[2] = 255.0;\n    pixelData[3] = 255.0;\n    pixels.set(pixelData);\n    this._defaultTexture.unlock();\n    this.defaultMaterial = new pc.StandardMaterial;\n    this.defaultMaterial.diffuse = new pc.Color(0, 0, 0, 1);\n    this.defaultMaterial.emissive = new pc.Color(0.5, 0.5, 0.5, 1);\n    this.defaultMaterial.emissiveMap = this._defaultTexture;\n    this.defaultMaterial.emissiveMapTint = true;\n    this.defaultMaterial.opacityMap = this._defaultTexture;\n    this.defaultMaterial.opacityMapChannel = \"a\";\n    this.defaultMaterial.opacityTint = true;\n    this.defaultMaterial.opacity = 0;\n    this.defaultMaterial.useLighting = false;\n    this.defaultMaterial.useGammaTonemap = false;\n    this.defaultMaterial.useFog = false;\n    this.defaultMaterial.useSkybox = false;\n    this.defaultMaterial.blendType = pc.BLEND_PREMULTIPLIED;\n    this.defaultMaterial.depthWrite = false;\n    this.defaultMaterial.pixelSnap = false;\n    this.defaultMaterial.cull = pc.CULLFACE_NONE;\n    this.defaultMaterial.update();\n    this.default9SlicedMaterialSlicedMode = this.defaultMaterial.clone();\n    this.default9SlicedMaterialSlicedMode.chunks.basePS = pc.shaderChunks.basePS + nineSliceBasePS;\n    this.default9SlicedMaterialSlicedMode.chunks.startPS = pc.shaderChunks.startPS + \"nineSlicedUv = vUv0;\\n\";\n    this.default9SlicedMaterialSlicedMode.chunks.emissivePS = pc.shaderChunks.emissivePS.replace(\"$UV\", \"nineSlicedUv\");\n    this.default9SlicedMaterialSlicedMode.chunks.opacityPS = pc.shaderChunks.opacityPS.replace(\"$UV\", \"nineSlicedUv\");\n    this.default9SlicedMaterialSlicedMode.chunks.transformVS = \"#define NINESLICED\\n\" + pc.shaderChunks.transformVS;\n    this.default9SlicedMaterialSlicedMode.chunks.uv0VS = pc.shaderChunks.uv9SliceVS;\n    this.default9SlicedMaterialSlicedMode.update();\n    this.default9SlicedMaterialTiledMode = this.defaultMaterial.clone();\n    this.default9SlicedMaterialTiledMode.chunks.basePS = pc.shaderChunks.basePS + \"#define NINESLICETILED\\n\" + nineSliceBasePS;\n    this.default9SlicedMaterialTiledMode.chunks.startPS = pc.shaderChunks.startPS + nineSliceUvPs;\n    this.default9SlicedMaterialTiledMode.chunks.emissivePS = pc.shaderChunks.emissivePS.replace(\"$UV\", \"nineSlicedUv, -1000.0\");\n    this.default9SlicedMaterialTiledMode.chunks.opacityPS = pc.shaderChunks.opacityPS.replace(\"$UV\", \"nineSlicedUv, -1000.0\");\n    this.default9SlicedMaterialTiledMode.chunks.transformVS = \"#define NINESLICED\\n\" + pc.shaderChunks.transformVS;\n    this.default9SlicedMaterialTiledMode.chunks.uv0VS = pc.shaderChunks.uv9SliceVS;\n    this.default9SlicedMaterialTiledMode.update();\n    pc.ComponentSystem.on(\"update\", this.onUpdate, this);\n    this.on(\"beforeremove\", this.onBeforeRemove, this);\n  };\n  SpriteComponentSystem = pc.inherits(SpriteComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.SpriteComponent.prototype, _schema);\n  pc.extend(SpriteComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    if (data.enabled !== undefined) {\n      component.enabled = data.enabled;\n    }\n    component.type = data.type;\n    if (data.layers && pc.type(data.layers) === \"array\") {\n      component.layers = data.layers.slice(0);\n    }\n    if (data.drawOrder !== undefined) {\n      component.drawOrder = data.drawOrder;\n    }\n    if (data.color !== undefined) {\n      if (data.color instanceof pc.Color) {\n        component.color.set(data.color.data[0], data.color.data[1], data.color.data[2], data.opacity !== undefined ? data.opacity : 1);\n      } else {\n        component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);\n      }\n      component.color = component.color;\n    }\n    if (data.opacity !== undefined) {\n      component.opacity = data.opacity;\n    }\n    if (data.flipX !== undefined) {\n      component.flipX = data.flipX;\n    }\n    if (data.flipY !== undefined) {\n      component.flipY = data.flipY;\n    }\n    if (data.width !== undefined) {\n      component.width = data.width;\n    }\n    if (data.height !== undefined) {\n      component.height = data.height;\n    }\n    if (data.spriteAsset !== undefined) {\n      component.spriteAsset = data.spriteAsset;\n    }\n    if (data.sprite) {\n      component.sprite = data.sprite;\n    }\n    if (data.frame !== undefined) {\n      component.frame = data.frame;\n    }\n    if (data.clips) {\n      for (var name in data.clips) {\n        component.addClip(data.clips[name]);\n      }\n    }\n    if (data.speed !== undefined) {\n      component.speed = data.speed;\n    }\n    if (data.autoPlayClip) {\n      component.autoPlayClip = data.autoPlayClip;\n    }\n    component.batchGroupId = data.batchGroupId === undefined || data.batchGroupId === null ? -1 : data.batchGroupId;\n    SpriteComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n    if (!warningShown) {\n      console.warn(\"The Sprite component is in beta and might change without notice.\");\n      warningShown = true;\n    }\n  }, cloneComponent:function(entity, clone) {\n    var source = entity.sprite;\n    return this.addComponent(clone, {enabled:source.enabled, type:source.type, spriteAsset:source.spriteAsset, sprite:source.sprite, frame:source.frame, color:source.color.clone(), opacity:source.opacity, flipX:source.flipX, flipY:source.flipY, speed:source.speed, clips:source.clips, batchGroupId:source.batchGroupId});\n  }, onUpdate:function(dt) {\n    var components = this.store;\n    for (var id in components) {\n      if (components.hasOwnProperty(id)) {\n        var component = components[id];\n        if (component.data.enabled && component.entity.enabled) {\n          var sprite = component.entity.sprite;\n          if (sprite._currentClip) {\n            sprite._currentClip._update(dt);\n          }\n        }\n      }\n    }\n  }, onBeforeRemove:function(entity, component) {\n    component.onDestroy();\n  }});\n  return {SpriteComponentSystem:SpriteComponentSystem};\n}());\npc.extend(pc, function() {\n  var SpriteComponentData = function() {\n    this.enabled = true;\n  };\n  SpriteComponentData = pc.inherits(SpriteComponentData, pc.ComponentData);\n  return {SpriteComponentData:SpriteComponentData};\n}());\npc.extend(pc, function() {\n  pc.SCALEMODE_NONE = \"none\";\n  pc.SCALEMODE_BLEND = \"blend\";\n  var ScreenComponent = function ScreenComponent(system, entity) {\n    this._resolution = new pc.Vec2(640, 320);\n    this._referenceResolution = new pc.Vec2(640, 320);\n    this._scaleMode = pc.SCALEMODE_NONE;\n    this.scale = 1;\n    this._scaleBlend = 0.5;\n    this._screenSpace = false;\n    this._screenMatrix = new pc.Mat4;\n    system.app.graphicsDevice.on(\"resizecanvas\", this._onResize, this);\n  };\n  ScreenComponent = pc.inherits(ScreenComponent, pc.Component);\n  var _transform = new pc.Mat4;\n  pc.extend(ScreenComponent.prototype, {syncDrawOrder:function() {\n    var i = 1;\n    var recurse = function(e) {\n      if (e.element) {\n        e.element.drawOrder = i++;\n      }\n      var children = e.getChildren();\n      for (var j = 0; j < children.length; j++) {\n        recurse(children[j]);\n      }\n    };\n    recurse(this.entity);\n  }, _calcProjectionMatrix:function() {\n    var left;\n    var right;\n    var bottom;\n    var top;\n    var near = 1;\n    var far = -1;\n    var w = this._resolution.x / this.scale;\n    var h = this._resolution.y / this.scale;\n    left = 0;\n    right = w;\n    bottom = -h;\n    top = 0;\n    this._screenMatrix.setOrtho(left, right, bottom, top, near, far);\n    if (!this._screenSpace) {\n      _transform.setScale(0.5 * w, 0.5 * h, 1);\n      this._screenMatrix.mul2(_transform, this._screenMatrix);\n    }\n  }, _updateScale:function() {\n    this.scale = this._calcScale(this._resolution, this.referenceResolution);\n  }, _calcScale:function(resolution, referenceResolution) {\n    var lx = Math.log2(resolution.x / referenceResolution.x);\n    var ly = Math.log2(resolution.y / referenceResolution.y);\n    return Math.pow(2, lx * (1 - this._scaleBlend) + ly * this._scaleBlend);\n  }, _onResize:function(width, height) {\n    if (this._screenSpace) {\n      this._resolution.set(width, height);\n      this.resolution = this._resolution;\n    }\n  }, onRemove:function() {\n    this.system.app.graphicsDevice.off(\"resizecanvas\", this._onResize, this);\n    this.fire(\"remove\");\n  }});\n  Object.defineProperty(ScreenComponent.prototype, \"resolution\", {set:function(value) {\n    if (!this._screenSpace) {\n      this._resolution.set(value.x, value.y);\n    } else {\n      this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height);\n    }\n    this._updateScale();\n    this._calcProjectionMatrix();\n    if (!this.entity._dirtyLocal) {\n      this.entity._dirtify(true);\n    }\n    this.fire(\"set:resolution\", this._resolution);\n  }, get:function() {\n    return this._resolution;\n  }});\n  Object.defineProperty(ScreenComponent.prototype, \"referenceResolution\", {set:function(value) {\n    this._referenceResolution.set(value.x, value.y);\n    this._updateScale();\n    this._calcProjectionMatrix();\n    if (!this.entity._dirtyLocal) {\n      this.entity._dirtify(true);\n    }\n    this.fire(\"set:referenceresolution\", this._resolution);\n  }, get:function() {\n    if (this._scaleMode === pc.SCALEMODE_NONE) {\n      return this._resolution;\n    } else {\n      return this._referenceResolution;\n    }\n  }});\n  Object.defineProperty(ScreenComponent.prototype, \"screenSpace\", {set:function(value) {\n    this._screenSpace = value;\n    if (this._screenSpace) {\n      this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height);\n    }\n    this.resolution = this._resolution;\n    if (!this.entity._dirtyLocal) {\n      this.entity._dirtify(true);\n    }\n    this.fire(\"set:screenspace\", this._screenSpace);\n  }, get:function() {\n    return this._screenSpace;\n  }});\n  Object.defineProperty(ScreenComponent.prototype, \"scaleMode\", {set:function(value) {\n    if (value !== pc.SCALEMODE_NONE && value !== pc.SCALEMODE_BLEND) {\n      value = pc.SCALEMODE_NONE;\n    }\n    if (!this._screenSpace && value !== pc.SCALEMODE_NONE) {\n      value = pc.SCALEMODE_NONE;\n    }\n    this._scaleMode = value;\n    this.resolution = this._resolution;\n    this.fire(\"set:scalemode\", this._scaleMode);\n  }, get:function() {\n    return this._scaleMode;\n  }});\n  Object.defineProperty(ScreenComponent.prototype, \"scaleBlend\", {set:function(value) {\n    this._scaleBlend = value;\n    this._updateScale();\n    this._calcProjectionMatrix();\n    if (!this.entity._dirtyLocal) {\n      this.entity._dirtify(true);\n    }\n    this.fire(\"set:scaleblend\", this._scaleBlend);\n  }, get:function() {\n    return this._scaleBlend;\n  }});\n  return {ScreenComponent:ScreenComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\"];\n  var ScreenComponentSystem = function ScreenComponentSystem(app) {\n    this.id = \"screen\";\n    this.app = app;\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ScreenComponent;\n    this.DataType = pc.ScreenComponentData;\n    this.schema = _schema;\n    this.windowResolution = new pc.Vec2;\n    this.app.graphicsDevice.on(\"resizecanvas\", this._onResize, this);\n    pc.ComponentSystem.on(\"update\", this._onUpdate, this);\n    this.on(\"beforeremove\", this.onRemoveComponent, this);\n  };\n  ScreenComponentSystem = pc.inherits(ScreenComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ScreenComponent.prototype, _schema);\n  pc.extend(ScreenComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    if (data.screenSpace !== undefined) {\n      component.screenSpace = data.screenSpace;\n    }\n    if (data.scaleMode !== undefined) {\n      component.scaleMode = data.scaleMode;\n    }\n    if (data.scaleBlend !== undefined) {\n      component.scaleBlend = data.scaleBlend;\n    }\n    if (data.resolution !== undefined) {\n      if (data.resolution instanceof pc.Vec2) {\n        component._resolution.copy(data.resolution);\n      } else {\n        component._resolution.set(data.resolution[0], data.resolution[1]);\n      }\n      component.resolution = component._resolution;\n    }\n    if (data.referenceResolution !== undefined) {\n      if (data.referenceResolution instanceof pc.Vec2) {\n        component._referenceResolution.copy(data.referenceResolution);\n      } else {\n        component._referenceResolution.set(data.referenceResolution[0], data.referenceResolution[1]);\n      }\n      component.referenceResolution = component._referenceResolution;\n    }\n    ScreenComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, _onUpdate:function(dt) {\n    var components = this.store;\n    for (var id in components) {\n      if (components[id].entity.screen.update) {\n        components[id].entity.screen.update(dt);\n      }\n    }\n  }, _onResize:function(width, height) {\n    this.windowResolution.x = width;\n    this.windowResolution.y = height;\n  }, cloneComponent:function(entity, clone) {\n    var screen = entity.screen;\n    return this.addComponent(clone, {enabled:screen.enabled, screenSpace:screen.screenSpace, scaleMode:screen.scaleMode, resolution:screen.resolution.clone(), referenceResolution:screen.referenceResolution.clone()});\n  }, onRemoveComponent:function(entity, component) {\n    component.onRemove();\n  }});\n  return {ScreenComponentSystem:ScreenComponentSystem};\n}());\npc.extend(pc, function() {\n  var ScreenComponentData = function() {\n    this.enabled = true;\n  };\n  ScreenComponentData = pc.inherits(ScreenComponentData, pc.ComponentData);\n  return {ScreenComponentData:ScreenComponentData};\n}());\npc.extend(pc, function() {\n  var topMasks = [];\n  var _debugLogging = false;\n  pc.ELEMENTTYPE_GROUP = \"group\";\n  pc.ELEMENTTYPE_IMAGE = \"image\";\n  pc.ELEMENTTYPE_TEXT = \"text\";\n  var vecA = new pc.Vec3;\n  var vecB = new pc.Vec3;\n  var matA = new pc.Mat4;\n  var matB = new pc.Mat4;\n  var matC = new pc.Mat4;\n  var matD = new pc.Mat4;\n  var ElementComponent = function ElementComponent(system, entity) {\n    this._anchor = new pc.Vec4;\n    this._localAnchor = new pc.Vec4;\n    this._pivot = new pc.Vec2;\n    this._width = 32;\n    this._height = 32;\n    this._margin = new pc.Vec4(0, 0, -32, -32);\n    this._modelTransform = new pc.Mat4;\n    this._screenToWorld = new pc.Mat4;\n    this._anchorTransform = new pc.Mat4;\n    this._anchorDirty = true;\n    this._parentWorldTransform = new pc.Mat4;\n    this._screenTransform = new pc.Mat4;\n    this._screenCorners = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];\n    this._canvasCorners = [new pc.Vec2, new pc.Vec2, new pc.Vec2, new pc.Vec2];\n    this._worldCorners = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];\n    this._cornersDirty = true;\n    this._canvasCornersDirty = true;\n    this._worldCornersDirty = true;\n    this.entity.on(\"insert\", this._onInsert, this);\n    this._patch();\n    this.screen = null;\n    this._type = pc.ELEMENTTYPE_GROUP;\n    this._image = null;\n    this._text = null;\n    this._group = null;\n    this._useInput = false;\n    this._layers = [pc.LAYERID_UI];\n    this._addedModel = null;\n    this._batchGroupId = -1;\n  };\n  ElementComponent = pc.inherits(ElementComponent, pc.Component);\n  pc.extend(ElementComponent.prototype, {_patch:function() {\n    this.entity._sync = this._sync;\n    this.entity.setPosition = this._setPosition;\n    this.entity.setLocalPosition = this._setLocalPosition;\n  }, _unpatch:function() {\n    this.entity._sync = pc.Entity.prototype._sync;\n    this.entity.setPosition = pc.Entity.prototype.setPosition;\n    this.entity.setLocalPosition = pc.Entity.prototype.setLocalPosition;\n  }, _setPosition:function() {\n    var position = new pc.Vec3;\n    var invParentWtm = new pc.Mat4;\n    return function(x, y, z) {\n      if (!this.element.screen) {\n        return pc.Entity.prototype.setPosition.call(this, x, y, z);\n      }\n      if (x instanceof pc.Vec3) {\n        position.copy(x);\n      } else {\n        position.set(x, y, z);\n      }\n      this.getWorldTransform();\n      invParentWtm.copy(this.element._screenToWorld).invert();\n      invParentWtm.transformPoint(position, this.localPosition);\n      if (!this._dirtyLocal) {\n        this._dirtify(true);\n      }\n    };\n  }(), _setLocalPosition:function(x, y, z) {\n    if (x instanceof pc.Vec3) {\n      this.localPosition.copy(x);\n    } else {\n      this.localPosition.set(x, y, z);\n    }\n    var element = this.element;\n    var p = this.localPosition.data;\n    var pvt = element._pivot.data;\n    element._margin.data[0] = p[0] - element._width * pvt[0];\n    element._margin.data[2] = element._localAnchor.data[2] - element._localAnchor.data[0] - element._width - element._margin.data[0];\n    element._margin.data[1] = p[1] - element._height * pvt[1];\n    element._margin.data[3] = element._localAnchor.data[3] - element._localAnchor.data[1] - element._height - element._margin.data[1];\n    if (!this._dirtyLocal) {\n      this._dirtify(true);\n    }\n  }, _sync:function() {\n    var element = this.element;\n    var screen = element.screen;\n    if (screen) {\n      if (element._anchorDirty) {\n        var resx = 0;\n        var resy = 0;\n        var px = 0;\n        var py = 1;\n        if (this._parent && this._parent.element) {\n          resx = this._parent.element.width;\n          resy = this._parent.element.height;\n          px = this._parent.element.pivot.x;\n          py = this._parent.element.pivot.y;\n        } else {\n          if (screen) {\n            var resolution = screen.screen.resolution;\n            resx = resolution.x / screen.screen.scale;\n            resy = resolution.y / screen.screen.scale;\n          }\n        }\n        element._anchorTransform.setTranslate(resx * (element.anchor.x - px), -(resy * (py - element.anchor.y)), 0);\n        element._anchorDirty = false;\n        element._calculateLocalAnchors();\n      }\n      if (element._sizeDirty) {\n        element._calculateSize();\n      }\n    }\n    if (this._dirtyLocal) {\n      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);\n      var p = this.localPosition.data;\n      var pvt = element._pivot.data;\n      element._margin.data[0] = p[0] - element._width * pvt[0];\n      element._margin.data[2] = element._localAnchor.data[2] - element._localAnchor.data[0] - element._width - element._margin.data[0];\n      element._margin.data[1] = p[1] - element._height * pvt[1];\n      element._margin.data[3] = element._localAnchor.data[3] - element._localAnchor.data[1] - element._height - element._margin.data[1];\n      this._dirtyLocal = false;\n    }\n    if (!screen) {\n      if (this._dirtyWorld) {\n        element._cornersDirty = true;\n        element._canvasCornersDirty = true;\n        element._worldCornersDirty = true;\n      }\n      return pc.Entity.prototype._sync.call(this);\n    }\n    if (this._dirtyWorld) {\n      if (this._parent === null) {\n        this.worldTransform.copy(this.localTransform);\n      } else {\n        if (this._parent.element) {\n          element._screenToWorld.mul2(this._parent.element._modelTransform, element._anchorTransform);\n        } else {\n          element._screenToWorld.copy(element._anchorTransform);\n        }\n        element._modelTransform.mul2(element._screenToWorld, this.localTransform);\n        if (screen) {\n          element._screenToWorld.mul2(screen.screen._screenMatrix, element._screenToWorld);\n          if (!screen.screen.screenSpace) {\n            element._screenToWorld.mul2(screen.worldTransform, element._screenToWorld);\n          }\n          this.worldTransform.mul2(element._screenToWorld, this.localTransform);\n          var parentWorldTransform = element._parentWorldTransform;\n          parentWorldTransform.setIdentity();\n          var parent = this._parent;\n          if (parent && parent.element && parent !== screen) {\n            matA.setTRS(pc.Vec3.ZERO, parent.getLocalRotation(), parent.getLocalScale());\n            parentWorldTransform.mul2(parent.element._parentWorldTransform, matA);\n          }\n          var depthOffset = vecA;\n          depthOffset.set(0, 0, this.localPosition.z);\n          var pivotOffset = vecB;\n          pivotOffset.set(element._absLeft + element._pivot.x * element.width, element._absBottom + element._pivot.y * element.height, 0);\n          matA.setTranslate(-pivotOffset.x, -pivotOffset.y, -pivotOffset.z);\n          matB.setTRS(depthOffset, this.getLocalRotation(), this.getLocalScale());\n          matC.setTranslate(pivotOffset.x, pivotOffset.y, pivotOffset.z);\n          element._screenTransform.mul2(element._parentWorldTransform, matC).mul(matB).mul(matA);\n          element._cornersDirty = true;\n          element._canvasCornersDirty = true;\n          element._worldCornersDirty = true;\n        } else {\n          this.worldTransform.copy(element._modelTransform);\n        }\n      }\n      this._dirtyWorld = false;\n    }\n  }, _onInsert:function(parent) {\n    var result = this._parseUpToScreen();\n    this.entity._dirtify();\n    this._updateScreen(result.screen);\n    this._dirtifyMask();\n  }, _dirtifyMask:function() {\n    var parent = this.entity;\n    while (parent) {\n      var next = parent.getParent();\n      if ((next === null || next.screen) && parent.element) {\n        if (!this.system._prerender || !this.system._prerender.length) {\n          this.system._prerender = [];\n          this.system.app.once(\"prerender\", this._onPrerender, this);\n          if (_debugLogging) {\n            console.log(\"register prerender\");\n          }\n        }\n        var i = this.system._prerender.indexOf(this.entity);\n        if (i >= 0) {\n          this.system._prerender.splice(i, 1);\n        }\n        var j = this.system._prerender.indexOf(parent);\n        if (j < 0) {\n          this.system._prerender.push(parent);\n        }\n        if (_debugLogging) {\n          console.log(\"set prerender root to: \" + parent.name);\n        }\n      }\n      parent = next;\n    }\n  }, _onPrerender:function() {\n    var ref = 0;\n    for (var i = 0; i < this.system._prerender.length; i++) {\n      var mask = this.system._prerender[i];\n      if (_debugLogging) {\n        console.log(\"prerender from: \" + mask.name);\n      }\n      ref = mask.element.syncMask(ref) + 1;\n    }\n    this.system._prerender.length = 0;\n  }, _updateScreen:function(screen) {\n    if (this.screen && this.screen !== screen) {\n      this.screen.screen.off(\"set:resolution\", this._onScreenResize, this);\n      this.screen.screen.off(\"set:referenceresolution\", this._onScreenResize, this);\n      this.screen.screen.off(\"set:scaleblend\", this._onScreenResize, this);\n      this.screen.screen.off(\"set:screenspace\", this._onScreenSpaceChange, this);\n      this.screen.screen.off(\"remove\", this._onScreenRemove, this);\n    }\n    this.screen = screen;\n    if (this.screen) {\n      this.screen.screen.on(\"set:resolution\", this._onScreenResize, this);\n      this.screen.screen.on(\"set:referenceresolution\", this._onScreenResize, this);\n      this.screen.screen.on(\"set:scaleblend\", this._onScreenResize, this);\n      this.screen.screen.on(\"set:screenspace\", this._onScreenSpaceChange, this);\n      this.screen.screen.on(\"remove\", this._onScreenRemove, this);\n    }\n    this._calculateSize();\n    this.fire(\"set:screen\", this.screen);\n    this._anchorDirty = true;\n    var children = this.entity.getChildren();\n    for (var i = 0, l = children.length; i < l; i++) {\n      if (children[i].element) {\n        children[i].element._updateScreen(screen);\n      }\n    }\n    if (this.screen) {\n      this.screen.screen.syncDrawOrder();\n    }\n  }, syncMask:function(ref) {\n    var result = this._parseUpToScreen();\n    return this._updateMask(result.mask, ref);\n  }, _setMaskedBy:function(mask) {\n    var i, mi, len;\n    var elem = this._image || this._text;\n    if (!elem) {\n      return;\n    }\n    if (mask) {\n      var ref = mask.element._image._maskRef;\n      if (_debugLogging) {\n        console.log(\"masking: \" + this.entity.name + \" with \" + ref);\n      }\n      var sp = new pc.StencilParameters({ref:ref, func:pc.FUNC_EQUAL});\n      for (i = 0, len = elem._model.meshInstances.length; i < len; i++) {\n        mi = elem._model.meshInstances[i];\n        mi.stencilFront = mi.stencilBack = sp;\n      }\n      elem._maskedBy = mask;\n    } else {\n      if (_debugLogging) {\n        console.log(\"no masking on: \" + this.entity.name);\n      }\n      for (i = 0, len = elem._model.meshInstances.length; i < len; i++) {\n        mi = elem._model.meshInstances[i];\n        mi.stencilFront = mi.stencilBack = null;\n      }\n      elem._maskedBy = null;\n    }\n  }, _getMaskDepth:function() {\n    var depth = 1;\n    var parent = this.entity;\n    while (parent) {\n      parent = parent.getParent();\n      if (parent && parent.element && parent.element.mask) {\n        depth++;\n      }\n    }\n    return depth;\n  }, _updateMask:function(mask, ref) {\n    var i, l, sp, children;\n    if (!ref) {\n      ref = 1;\n    }\n    if (mask) {\n      this._setMaskedBy(mask);\n      if (this.mask) {\n        if (_debugLogging) {\n          console.log(\"masking: \" + this.entity.name + \" with \" + ref);\n        }\n        sp = new pc.StencilParameters({ref:ref++, func:pc.FUNC_EQUAL, zpass:pc.STENCILOP_INCREMENT});\n        this._image._meshInstance.stencilFront = sp;\n        this._image._meshInstance.stencilBack = sp;\n        this._image._maskRef = ref;\n        if (_debugLogging) {\n          console.log(\"masking from: \" + this.entity.name + \" with \" + ref);\n        }\n        mask = this.entity;\n      }\n      children = this.entity.getChildren();\n      for (i = 0, l = children.length; i < l; i++) {\n        if (children[i].element) {\n          children[i].element._updateMask(mask, ref);\n        }\n      }\n    } else {\n      this._setMaskedBy(null);\n      if (this.mask) {\n        sp = new pc.StencilParameters({func:pc.FUNC_ALWAYS, zpass:pc.STENCILOP_REPLACE, ref:ref});\n        this._image._meshInstance.stencilFront = sp;\n        this._image._meshInstance.stencilBack = sp;\n        this._image._maskRef = ref;\n        if (_debugLogging) {\n          console.log(\"masking from: \" + this.entity.name + \" with \" + ref);\n        }\n        mask = this.entity;\n      }\n      children = this.entity.getChildren();\n      for (i = 0, l = children.length; i < l; i++) {\n        if (children[i].element) {\n          children[i].element._updateMask(mask, ref);\n        }\n      }\n    }\n    return ref;\n  }, _parseUpToScreen:function() {\n    var result = {screen:null, mask:null};\n    var parent = this.entity._parent;\n    while (parent && !parent.screen) {\n      if (parent.element && parent.element.mask) {\n        if (!result.mask) {\n          result.mask = parent;\n        }\n      }\n      parent = parent.parent;\n    }\n    if (parent && parent.screen) {\n      result.screen = parent;\n    }\n    return result;\n  }, _onScreenResize:function(res) {\n    this._anchorDirty = true;\n    this._cornersDirty = true;\n    this._worldCornersDirty = true;\n    this._calculateSize();\n    this.fire(\"screen:set:resolution\", res);\n  }, _onScreenSpaceChange:function() {\n    this.fire(\"screen:set:screenspace\", this.screen.screen.screenSpace);\n  }, _onScreenRemove:function() {\n    this._updateScreen(null);\n  }, _calculateLocalAnchors:function() {\n    var resx = 1000;\n    var resy = 1000;\n    var parent = this.entity._parent;\n    if (parent && parent.element) {\n      resx = parent.element.width;\n      resy = parent.element.height;\n    } else {\n      if (this.screen) {\n        var res = this.screen.screen.resolution;\n        var scale = this.screen.screen.scale;\n        resx = res.x / scale;\n        resy = res.y / scale;\n      }\n    }\n    this._localAnchor.set(this._anchor.x * resx, this._anchor.y * resy, this._anchor.z * resx, this._anchor.w * resy);\n  }, getOffsetPosition:function(x, y) {\n    var p = this.entity.getLocalPosition().clone();\n    p.x += x;\n    p.y += y;\n    this._screenToWorld.transformPoint(p, p);\n    return p;\n  }, onLayersChanged:function(oldComp, newComp) {\n    this.addModelToLayers(this._image ? this._image._model : this._text._model);\n    oldComp.off(\"add\", this.onLayerAdded, this);\n    oldComp.off(\"remove\", this.onLayerRemoved, this);\n    newComp.on(\"add\", this.onLayerAdded, this);\n    newComp.on(\"remove\", this.onLayerRemoved, this);\n  }, onLayerAdded:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    if (this._image) {\n      layer.addMeshInstances(this._image._model.meshInstances);\n    } else {\n      if (this._text) {\n        layer.addMeshInstances(this._text._model.meshInstances);\n      }\n    }\n  }, onLayerRemoved:function(layer) {\n    var index = this.layers.indexOf(layer.id);\n    if (index < 0) {\n      return;\n    }\n    if (this._image) {\n      layer.removeMeshInstances(this._image._model.meshInstances);\n    } else {\n      if (this._text) {\n        layer.removeMeshInstances(this._text._model.meshInstances);\n      }\n    }\n  }, onEnable:function() {\n    ElementComponent._super.onEnable.call(this);\n    if (this._image) {\n      this._image.onEnable();\n    }\n    if (this._text) {\n      this._text.onEnable();\n    }\n    if (this._group) {\n      this._group.onEnable();\n    }\n    if (this.useInput && this.system.app.elementInput) {\n      this.system.app.elementInput.addElement(this);\n    }\n    if (this.mask) {\n      var maskDepth = this._getMaskDepth();\n      if (maskDepth === 1) {\n        this._topMask = true;\n        if (topMasks.indexOf(this) < 0) {\n          topMasks.push(this);\n        }\n      }\n    }\n    this.system.app.scene.on(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.on(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.on(\"remove\", this.onLayerRemoved, this);\n    }\n  }, onDisable:function() {\n    ElementComponent._super.onDisable.call(this);\n    this.system.app.scene.off(\"set:layers\", this.onLayersChanged, this);\n    if (this.system.app.scene.layers) {\n      this.system.app.scene.layers.off(\"add\", this.onLayerAdded, this);\n      this.system.app.scene.layers.off(\"remove\", this.onLayerRemoved, this);\n    }\n    if (this._image) {\n      this._image.onDisable();\n    }\n    if (this._text) {\n      this._text.onDisable();\n    }\n    if (this._group) {\n      this._group.onDisable();\n    }\n    if (this.system.app.elementInput && this.useInput) {\n      this.system.app.elementInput.removeElement(this);\n    }\n    if (this._topMask) {\n      var index = topMasks.indexOf(this);\n      if (index >= 0) {\n        topMasks.splice(index, 1);\n      }\n      this._topMask = false;\n    }\n  }, onRemove:function() {\n    this.entity.off(\"insert\", this._onInsert, this);\n    this._unpatch();\n    if (this._image) {\n      this._image.destroy();\n    }\n    if (this._text) {\n      this._text.destroy();\n    }\n    if (this.system.app.elementInput && this.useInput) {\n      this.system.app.elementInput.removeElement(this);\n    }\n    if (this._topMask) {\n      var index = topMasks.indexOf(this);\n      if (index >= 0) {\n        topMasks.splice(index, 1);\n      }\n      this._topMask = false;\n    }\n  }, _calculateSize:function() {\n    if (!this.entity._parent && !this.screen) {\n      return;\n    }\n    this._calculateLocalAnchors();\n    var p = this.entity.getLocalPosition();\n    this._setWidth(this._absRight - this._absLeft);\n    this._setHeight(this._absTop - this._absBottom);\n    p.x = this._margin.data[0] + this._width * this._pivot.data[0];\n    p.y = this._margin.data[1] + this._height * this._pivot.data[1];\n    this.entity.setLocalPosition(p);\n    this._sizeDirty = false;\n  }, _setWidth:function(w) {\n    this._width = w;\n    var i, l;\n    var c = this.entity._children;\n    for (i = 0, l = c.length; i < l; i++) {\n      if (c[i].element) {\n        c[i].element._anchorDirty = true;\n        c[i].element._sizeDirty = true;\n      }\n    }\n    this.fire(\"set:width\", this._width);\n    this.fire(\"resize\", this._width, this._height);\n  }, _setHeight:function(h) {\n    this._height = h;\n    var i, l;\n    var c = this.entity._children;\n    for (i = 0, l = c.length; i < l; i++) {\n      if (c[i].element) {\n        c[i].element._anchorDirty = true;\n        c[i].element._sizeDirty = true;\n      }\n    }\n    this.fire(\"set:height\", this._height);\n    this.fire(\"resize\", this._width, this._height);\n  }, addModelToLayers:function(model) {\n    var layer;\n    this._addedModel = model;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.addMeshInstances(model.meshInstances);\n    }\n  }, removeModelFromLayers:function(model) {\n    var layer;\n    this._addedModel = null;\n    for (var i = 0; i < this.layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);\n      if (!layer) {\n        continue;\n      }\n      layer.removeMeshInstances(model.meshInstances);\n    }\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"type\", {get:function() {\n    return this._type;\n  }, set:function(value) {\n    if (value !== this._type) {\n      this._type = value;\n      if (this._image) {\n        this._image.destroy();\n        this._image = null;\n      }\n      if (this._text) {\n        this._text.destroy();\n        this._text = null;\n      }\n      if (value === pc.ELEMENTTYPE_IMAGE) {\n        this._image = new pc.ImageElement(this);\n      } else {\n        if (value === pc.ELEMENTTYPE_TEXT) {\n          this._text = new pc.TextElement(this);\n        }\n      }\n    }\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"layers\", {get:function() {\n    return this._layers;\n  }, set:function(value) {\n    var i, layer;\n    if (this._addedModel) {\n      for (i = 0; i < this._layers.length; i++) {\n        layer = this.system.app.scene.layers.getLayerById(this._layers[i]);\n        if (layer) {\n          layer.removeMeshInstances(this._addedModel.meshInstances);\n        }\n      }\n    }\n    this._layers = value;\n    if (!this.enabled || !this.entity.enabled || !this._addedModel) {\n      return;\n    }\n    for (i = 0; i < this._layers.length; i++) {\n      layer = this.system.app.scene.layers.getLayerById(this._layers[i]);\n      if (layer) {\n        layer.addMeshInstances(this._addedModel.meshInstances);\n      }\n    }\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"drawOrder\", {get:function() {\n    return this._drawOrder;\n  }, set:function(value) {\n    this._drawOrder = value;\n    this.fire(\"set:draworder\", this._drawOrder);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"_absLeft\", {get:function() {\n    return this._localAnchor.data[0] + this._margin.data[0];\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"_absRight\", {get:function() {\n    return this._localAnchor.data[2] - this._margin.data[2];\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"_absTop\", {get:function() {\n    return this._localAnchor.data[3] - this._margin.data[3];\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"_absBottom\", {get:function() {\n    return this._localAnchor.data[1] + this._margin.data[1];\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"margin\", {get:function() {\n    return this._margin;\n  }, set:function(value) {\n    this._margin.copy(value);\n    this._calculateSize();\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"left\", {get:function() {\n    return this._margin.data[0];\n  }, set:function(value) {\n    this._margin.data[0] = value;\n    var p = this.entity.getLocalPosition();\n    var wr = this._absRight;\n    var wl = this._localAnchor.data[0] + value;\n    this._setWidth(wr - wl);\n    p.x = value + this._width * this._pivot.data[0];\n    this.entity.setLocalPosition(p);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"right\", {get:function() {\n    return this._margin.data[2];\n  }, set:function(value) {\n    this._margin.data[2] = value;\n    var p = this.entity.getLocalPosition();\n    var wl = this._absLeft;\n    var wr = this._localAnchor.data[2] - value;\n    this._setWidth(wr - wl);\n    p.x = this._localAnchor.data[2] - this._localAnchor.data[0] - value - this._width * (1 - this._pivot.data[0]);\n    this.entity.setLocalPosition(p);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"top\", {get:function() {\n    return this._margin.data[3];\n  }, set:function(value) {\n    this._margin.data[3] = value;\n    var p = this.entity.getLocalPosition();\n    var wb = this._absBottom;\n    var wt = this._localAnchor.data[3] - value;\n    this._setHeight(wt - wb);\n    p.y = this._localAnchor.data[3] - this._localAnchor.data[1] - value - this._height * (1 - this._pivot.data[1]);\n    this.entity.setLocalPosition(p);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"bottom\", {get:function() {\n    return this._margin.data[1];\n  }, set:function(value) {\n    this._margin.data[1] = value;\n    var p = this.entity.getLocalPosition();\n    var wt = this._absTop;\n    var wb = this._localAnchor.data[1] + value;\n    this._setHeight(wt - wb);\n    p.y = value + this._height * this._pivot.data[1];\n    this.entity.setLocalPosition(p);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"width\", {get:function() {\n    return this._width;\n  }, set:function(value) {\n    this._width = value;\n    var p = this.entity.getLocalPosition().data;\n    var pvt = this._pivot.data;\n    this._margin.data[0] = p[0] - this._width * pvt[0];\n    this._margin.data[2] = this._localAnchor.data[2] - this._localAnchor.data[0] - this._width - this._margin.data[0];\n    var i, l;\n    var c = this.entity._children;\n    for (i = 0, l = c.length; i < l; i++) {\n      if (c[i].element) {\n        c[i].element._anchorDirty = true;\n        c[i].element._sizeDirty = true;\n      }\n    }\n    this.fire(\"set:width\", this._width);\n    this.fire(\"resize\", this._width, this._height);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"height\", {get:function() {\n    return this._height;\n  }, set:function(value) {\n    this._height = value;\n    var p = this.entity.getLocalPosition().data;\n    var pvt = this._pivot.data;\n    this._margin.data[1] = p[1] - this._height * pvt[1];\n    this._margin.data[3] = this._localAnchor.data[3] - this._localAnchor.data[1] - this._height - this._margin.data[1];\n    var i, l;\n    var c = this.entity._children;\n    for (i = 0, l = c.length; i < l; i++) {\n      if (c[i].element) {\n        c[i].element._anchorDirty = true;\n        c[i].element._sizeDirty = true;\n      }\n    }\n    this.fire(\"set:height\", this._height);\n    this.fire(\"resize\", this._width, this._height);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"pivot\", {get:function() {\n    return this._pivot;\n  }, set:function(value) {\n    var prevX = this._pivot.x;\n    var prevY = this._pivot.y;\n    if (value instanceof pc.Vec2) {\n      this._pivot.set(value.x, value.y);\n    } else {\n      this._pivot.set(value[0], value[1]);\n    }\n    var mx = this._margin.data[0] + this._margin.data[2];\n    var dx = this._pivot.x - prevX;\n    this._margin.data[0] += mx * dx;\n    this._margin.data[2] -= mx * dx;\n    var my = this._margin.data[1] + this._margin.data[3];\n    var dy = this._pivot.y - prevY;\n    this._margin.data[1] += my * dy;\n    this._margin.data[3] -= my * dy;\n    this._onScreenResize();\n    this.fire(\"set:pivot\", this._pivot);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"anchor\", {get:function() {\n    return this._anchor;\n  }, set:function(value) {\n    if (value instanceof pc.Vec4) {\n      this._anchor.set(value.x, value.y, value.z, value.w);\n    } else {\n      this._anchor.set(value[0], value[1], value[2], value[3]);\n    }\n    if (!this.entity._parent && !this.screen) {\n      this._calculateLocalAnchors();\n    } else {\n      this._calculateSize();\n    }\n    this._anchorDirty = true;\n    if (!this.entity._dirtyLocal) {\n      this.entity._dirtify(true);\n    }\n    this.fire(\"set:anchor\", this._anchor);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"screenCorners\", {get:function() {\n    if (!this._cornersDirty || !this.screen) {\n      return this._screenCorners;\n    }\n    var parentBottomLeft = this.entity.parent && this.entity.parent.element && this.entity.parent.element.screenCorners[0];\n    this._screenCorners[0].set(this._absLeft, this._absBottom, 0);\n    this._screenCorners[1].set(this._absRight, this._absBottom, 0);\n    this._screenCorners[2].set(this._absRight, this._absTop, 0);\n    this._screenCorners[3].set(this._absLeft, this._absTop, 0);\n    var screenSpace = this.screen.screen.screenSpace;\n    for (var i = 0; i < 4; i++) {\n      this._screenTransform.transformPoint(this._screenCorners[i], this._screenCorners[i]);\n      if (screenSpace) {\n        this._screenCorners[i].scale(this.screen.screen.scale);\n      }\n      if (parentBottomLeft) {\n        this._screenCorners[i].add(parentBottomLeft);\n      }\n    }\n    this._cornersDirty = false;\n    this._canvasCornersDirty = true;\n    this._worldCornersDirty = true;\n    return this._screenCorners;\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"canvasCorners\", {get:function() {\n    if (!this._canvasCornersDirty || !this.screen || !this.screen.screen.screenSpace) {\n      return this._canvasCorners;\n    }\n    var device = this.system.app.graphicsDevice;\n    var screenCorners = this.screenCorners;\n    var sx = device.canvas.clientWidth / device.width;\n    var sy = device.canvas.clientHeight / device.height;\n    for (var i = 0; i < 4; i++) {\n      this._canvasCorners[i].set(screenCorners[i].x * sx, (device.height - screenCorners[i].y) * sy);\n    }\n    this._canvasCornersDirty = false;\n    return this._canvasCorners;\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"worldCorners\", {get:function() {\n    if (!this._worldCornersDirty) {\n      return this._worldCorners;\n    }\n    if (this.screen) {\n      var screenCorners = this.screenCorners;\n      if (!this.screen.screen.screenSpace) {\n        matA.copy(this.screen.screen._screenMatrix);\n        matA.data[13] = -matA.data[13];\n        matA.mul2(this.screen.getWorldTransform(), matA);\n        for (var i = 0; i < 4; i++) {\n          matA.transformPoint(screenCorners[i], this._worldCorners[i]);\n        }\n      }\n    } else {\n      var localPos = this.entity.getLocalPosition();\n      matA.setTranslate(-localPos.x, -localPos.y, -localPos.z);\n      matB.setTRS(pc.Vec3.ZERO, this.entity.getLocalRotation(), this.entity.getLocalScale());\n      matC.setTranslate(localPos.x, localPos.y, localPos.z);\n      matD.copy(this.entity.parent.getWorldTransform());\n      matD.mul(matC).mul(matB).mul(matA);\n      vecA.set(localPos.x - this.pivot.x * this.width, localPos.y - this.pivot.y * this.height, localPos.z);\n      matD.transformPoint(vecA, this._worldCorners[0]);\n      vecA.set(localPos.x + (1 - this.pivot.x) * this.width, localPos.y - this.pivot.y * this.height, localPos.z);\n      matD.transformPoint(vecA, this._worldCorners[1]);\n      vecA.set(localPos.x + (1 - this.pivot.x) * this.width, localPos.y + (1 - this.pivot.y) * this.height, localPos.z);\n      matD.transformPoint(vecA, this._worldCorners[2]);\n      vecA.set(localPos.x - this.pivot.x * this.width, localPos.y + (1 - this.pivot.y) * this.height, localPos.z);\n      matD.transformPoint(vecA, this._worldCorners[3]);\n    }\n    this._worldCornersDirty = false;\n    return this._worldCorners;\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"textWidth\", {get:function() {\n    return this._text ? this._text.width : 0;\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"textHeight\", {get:function() {\n    return this._text ? this._text.height : 0;\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"useInput\", {get:function() {\n    return this._useInput;\n  }, set:function(value) {\n    if (this._useInput === value) {\n      return;\n    }\n    this._useInput = value;\n    if (this.system.app.elementInput) {\n      if (value) {\n        if (this.enabled && this.entity.enabled) {\n          this.system.app.elementInput.addElement(this);\n        }\n      } else {\n        this.system.app.elementInput.removeElement(this);\n      }\n    }\n    this.fire(\"set:useInput\", value);\n  }});\n  Object.defineProperty(ElementComponent.prototype, \"batchGroupId\", {get:function() {\n    return this._batchGroupId;\n  }, set:function(value) {\n    if (this._batchGroupId === value) {\n      return;\n    }\n    if (this._batchGroupId >= 0) {\n      this.system.app.batcher._markGroupDirty(this._batchGroupId);\n    }\n    if (value >= 0) {\n      this.system.app.batcher._markGroupDirty(value);\n    }\n    if (value < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled) {\n      if (this._image._model) {\n        this.addModelToLayers(this._image._model);\n      } else {\n        if (this._text._model) {\n          this.addModelToLayers(this._text._model);\n        }\n      }\n    }\n    this._batchGroupId = value;\n  }});\n  var _define = function(name) {\n    Object.defineProperty(ElementComponent.prototype, name, {get:function() {\n      if (this._text) {\n        return this._text[name];\n      } else {\n        if (this._image) {\n          return this._image[name];\n        } else {\n          return null;\n        }\n      }\n    }, set:function(value) {\n      if (this._text) {\n        this._text[name] = value;\n      } else {\n        if (this._image) {\n          this._image[name] = value;\n        }\n      }\n    }});\n  };\n  _define(\"fontSize\");\n  _define(\"color\");\n  _define(\"font\");\n  _define(\"fontAsset\");\n  _define(\"spacing\");\n  _define(\"lineHeight\");\n  _define(\"wrapLines\");\n  _define(\"lines\");\n  _define(\"alignment\");\n  _define(\"autoWidth\");\n  _define(\"autoHeight\");\n  _define(\"text\");\n  _define(\"texture\");\n  _define(\"textureAsset\");\n  _define(\"material\");\n  _define(\"materialAsset\");\n  _define(\"sprite\");\n  _define(\"spriteAsset\");\n  _define(\"spriteFrame\");\n  _define(\"pixelsPerUnit\");\n  _define(\"opacity\");\n  _define(\"rect\");\n  _define(\"mask\");\n  return {ElementComponent:ElementComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\"];\n  var nineSliceBasePS = [\"varying vec2 vMask;\", \"varying vec2 vTiledUv;\", \"uniform vec4 innerOffset;\", \"uniform vec2 outerScale;\", \"uniform vec4 atlasRect;\", \"vec2 nineSlicedUv;\"].join(\"\\n\");\n  var nineSliceUvPs = [\"vec2 tileMask = step(vMask, vec2(0.99999));\", \"vec2 clampedUv = mix(innerOffset.xy*0.5, vec2(1.0) - innerOffset.zw*0.5, fract(vTiledUv));\", \"clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;\", \"nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);\"].join(\"\\n\");\n  var ElementComponentSystem = function ElementComponentSystem(app) {\n    this.id = \"element\";\n    this.app = app;\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ElementComponent;\n    this.DataType = pc.ElementComponentData;\n    this.schema = _schema;\n    this._defaultTexture = new pc.Texture(app.graphicsDevice, {width:1, height:1, format:pc.PIXELFORMAT_R8_G8_B8_A8});\n    var pixels = this._defaultTexture.lock();\n    var pixelData = new Uint8Array(4);\n    pixelData[0] = 255.0;\n    pixelData[1] = 255.0;\n    pixelData[2] = 255.0;\n    pixelData[3] = 255.0;\n    pixels.set(pixelData);\n    this._defaultTexture.unlock();\n    this._maskMaterials = {};\n    this.defaultImageMaterial = new pc.StandardMaterial;\n    this.defaultImageMaterial.diffuse.set(0, 0, 0);\n    this.defaultImageMaterial.emissive.set(0.5, 0.5, 0.5);\n    this.defaultImageMaterial.emissiveMap = this._defaultTexture;\n    this.defaultImageMaterial.emissiveTint = true;\n    this.defaultImageMaterial.opacityMap = this._defaultTexture;\n    this.defaultImageMaterial.opacityMapChannel = \"a\";\n    this.defaultImageMaterial.opacityTint = true;\n    this.defaultImageMaterial.opacity = 0;\n    this.defaultImageMaterial.useLighting = false;\n    this.defaultImageMaterial.useGammaTonemap = false;\n    this.defaultImageMaterial.useFog = false;\n    this.defaultImageMaterial.useSkybox = false;\n    this.defaultImageMaterial.blendType = pc.BLEND_PREMULTIPLIED;\n    this.defaultImageMaterial.depthWrite = false;\n    this.defaultImageMaterial.update();\n    this.defaultImageMaskMaterial = this.defaultImageMaterial.clone();\n    this.defaultImageMaskMaterial.alphaTest = 1;\n    this.defaultImageMaskMaterial.redWrite = false;\n    this.defaultImageMaskMaterial.greenWrite = false;\n    this.defaultImageMaskMaterial.blueWrite = false;\n    this.defaultImageMaskMaterial.alphaWrite = false;\n    this.defaultImageMaskMaterial.update();\n    this.defaultImage9SlicedMaterial = this.defaultImageMaterial.clone();\n    this.defaultImage9SlicedMaterial.chunks.basePS = pc.shaderChunks.basePS + nineSliceBasePS;\n    this.defaultImage9SlicedMaterial.chunks.startPS = pc.shaderChunks.startPS + \"nineSlicedUv = vUv0;\\n\";\n    this.defaultImage9SlicedMaterial.chunks.emissivePS = pc.shaderChunks.emissivePS.replace(\"$UV\", \"nineSlicedUv\");\n    this.defaultImage9SlicedMaterial.chunks.opacityPS = pc.shaderChunks.opacityPS.replace(\"$UV\", \"nineSlicedUv\");\n    this.defaultImage9SlicedMaterial.chunks.transformVS = \"#define NINESLICED\\n\" + pc.shaderChunks.transformVS;\n    this.defaultImage9SlicedMaterial.chunks.uv0VS = pc.shaderChunks.uv9SliceVS;\n    this.defaultImage9SlicedMaterial.update();\n    this.defaultImage9TiledMaterial = this.defaultImage9SlicedMaterial.clone();\n    this.defaultImage9TiledMaterial.chunks.basePS = pc.shaderChunks.basePS + \"#define NINESLICETILED\\n\" + nineSliceBasePS;\n    this.defaultImage9TiledMaterial.chunks.startPS = pc.shaderChunks.startPS + nineSliceUvPs;\n    this.defaultImage9TiledMaterial.chunks.emissivePS = pc.shaderChunks.emissivePS.replace(\"$UV\", \"nineSlicedUv, -1000.0\");\n    this.defaultImage9TiledMaterial.chunks.opacityPS = pc.shaderChunks.opacityPS.replace(\"$UV\", \"nineSlicedUv, -1000.0\");\n    this.defaultImage9TiledMaterial.update();\n    this.defaultImage9SlicedMaskMaterial = this.defaultImage9SlicedMaterial.clone();\n    this.defaultImage9SlicedMaskMaterial.alphaTest = 1;\n    this.defaultImage9SlicedMaskMaterial.redWrite = false;\n    this.defaultImage9SlicedMaskMaterial.greenWrite = false;\n    this.defaultImage9SlicedMaskMaterial.blueWrite = false;\n    this.defaultImage9SlicedMaskMaterial.alphaWrite = false;\n    this.defaultImage9SlicedMaskMaterial.update();\n    this.defaultImage9TiledMaskMaterial = this.defaultImage9TiledMaterial.clone();\n    this.defaultImage9TiledMaskMaterial.alphaTest = 1;\n    this.defaultImage9TiledMaskMaterial.redWrite = false;\n    this.defaultImage9TiledMaskMaterial.greenWrite = false;\n    this.defaultImage9TiledMaskMaterial.blueWrite = false;\n    this.defaultImage9TiledMaskMaterial.alphaWrite = false;\n    this.defaultImage9TiledMaskMaterial.update();\n    this.defaultScreenSpaceImageMaterial = this.defaultImageMaterial.clone();\n    this.defaultScreenSpaceImageMaterial.depthTest = false;\n    this.defaultScreenSpaceImageMaterial.update();\n    this.defaultScreenSpaceImage9SlicedMaterial = this.defaultImage9SlicedMaterial.clone();\n    this.defaultScreenSpaceImage9SlicedMaterial.depthTest = false;\n    this.defaultScreenSpaceImage9SlicedMaterial.update();\n    this.defaultScreenSpaceImage9TiledMaterial = this.defaultScreenSpaceImage9SlicedMaterial.clone();\n    this.defaultScreenSpaceImage9TiledMaterial.chunks.basePS = pc.shaderChunks.basePS + \"#define NINESLICETILED\\n\" + nineSliceBasePS;\n    this.defaultScreenSpaceImage9TiledMaterial.chunks.startPS = pc.shaderChunks.startPS + nineSliceUvPs;\n    this.defaultScreenSpaceImage9TiledMaterial.chunks.emissivePS = pc.shaderChunks.emissivePS.replace(\"$UV\", \"nineSlicedUv, -1000.0\");\n    this.defaultScreenSpaceImage9TiledMaterial.chunks.opacityPS = pc.shaderChunks.opacityPS.replace(\"$UV\", \"nineSlicedUv, -1000.0\");\n    this.defaultScreenSpaceImage9TiledMaterial.update();\n    this.defaultScreenSpaceImageMask9SlicedMaterial = this.defaultScreenSpaceImage9SlicedMaterial.clone();\n    this.defaultScreenSpaceImageMask9SlicedMaterial.alphaTest = 1;\n    this.defaultScreenSpaceImageMask9SlicedMaterial.redWrite = false;\n    this.defaultScreenSpaceImageMask9SlicedMaterial.greenWrite = false;\n    this.defaultScreenSpaceImageMask9SlicedMaterial.blueWrite = false;\n    this.defaultScreenSpaceImageMask9SlicedMaterial.alphaWrite = false;\n    this.defaultScreenSpaceImageMask9SlicedMaterial.update();\n    this.defaultScreenSpaceImageMask9TiledMaterial = this.defaultScreenSpaceImage9TiledMaterial.clone();\n    this.defaultScreenSpaceImageMask9TiledMaterial.alphaTest = 1;\n    this.defaultScreenSpaceImageMask9TiledMaterial.redWrite = false;\n    this.defaultScreenSpaceImageMask9TiledMaterial.greenWrite = false;\n    this.defaultScreenSpaceImageMask9TiledMaterial.blueWrite = false;\n    this.defaultScreenSpaceImageMask9TiledMaterial.alphaWrite = false;\n    this.defaultScreenSpaceImageMask9TiledMaterial.update();\n    this.defaultScreenSpaceImageMaskMaterial = this.defaultScreenSpaceImageMaterial.clone();\n    this.defaultScreenSpaceImageMaskMaterial.alphaTest = 1;\n    this.defaultScreenSpaceImageMaskMaterial.redWrite = false;\n    this.defaultScreenSpaceImageMaskMaterial.greenWrite = false;\n    this.defaultScreenSpaceImageMaskMaterial.blueWrite = false;\n    this.defaultScreenSpaceImageMaskMaterial.alphaWrite = false;\n    this.defaultScreenSpaceImageMaskMaterial.update();\n    this.defaultTextMaterial = new pc.StandardMaterial;\n    this.defaultTextMaterial.msdfMap = this._defaultTexture;\n    this.defaultTextMaterial.useLighting = false;\n    this.defaultTextMaterial.useGammaTonemap = false;\n    this.defaultTextMaterial.useFog = false;\n    this.defaultTextMaterial.useSkybox = false;\n    this.defaultTextMaterial.diffuse.set(0, 0, 0);\n    this.defaultTextMaterial.emissive.set(1, 1, 1);\n    this.defaultTextMaterial.opacity = 0.5;\n    this.defaultTextMaterial.blendType = pc.BLEND_PREMULTIPLIED;\n    this.defaultTextMaterial.depthWrite = false;\n    this.defaultTextMaterial.update();\n    this.defaultScreenSpaceTextMaterial = this.defaultTextMaterial.clone();\n    this.defaultScreenSpaceTextMaterial.depthTest = false;\n    this.defaultScreenSpaceTextMaterial.update();\n    this.defaultImageMaterials = [this.defaultImageMaterial, this.defaultImageMaskMaterial, this.defaultImage9SlicedMaterial, this.defaultImage9TiledMaterial, this.defaultImage9SlicedMaskMaterial, this.defaultImage9TiledMaskMaterial, this.defaultScreenSpaceImageMaterial, this.defaultScreenSpaceImage9SlicedMaterial, this.defaultScreenSpaceImage9TiledMaterial, this.defaultScreenSpaceImageMask9SlicedMaterial, this.defaultScreenSpaceImageMask9TiledMaterial, this.defaultScreenSpaceImageMaskMaterial];\n    this.on(\"beforeremove\", this.onRemoveComponent, this);\n  };\n  ElementComponentSystem = pc.inherits(ElementComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ElementComponent.prototype, _schema);\n  pc.extend(ElementComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    if (data.anchor !== undefined) {\n      if (data.anchor instanceof pc.Vec4) {\n        component.anchor.copy(data.anchor);\n      } else {\n        component.anchor.set(data.anchor[0], data.anchor[1], data.anchor[2], data.anchor[3]);\n      }\n    }\n    if (data.pivot !== undefined) {\n      if (data.pivot instanceof pc.Vec2) {\n        component.pivot.copy(data.pivot);\n      } else {\n        component.pivot.set(data.pivot[0], data.pivot[1]);\n      }\n    }\n    var splitHorAnchors = Math.abs(component.anchor.x - component.anchor.z) > 0.001;\n    var splitVerAnchors = Math.abs(component.anchor.y - component.anchor.w) > 0.001;\n    var _marginChange = false;\n    if (data.margin !== undefined) {\n      if (data.margin instanceof pc.Vec4) {\n        component.margin.copy(data.margin);\n      } else {\n        component._margin.set(data.margin[0], data.margin[1], data.margin[2], data.margin[3]);\n      }\n      _marginChange = true;\n    }\n    if (data.left !== undefined) {\n      component._margin.x = data.left;\n      _marginChange = true;\n    }\n    if (data.bottom !== undefined) {\n      component._margin.y = data.bottom;\n      _marginChange = true;\n    }\n    if (data.right !== undefined) {\n      component._margin.z = data.right;\n      _marginChange = true;\n    }\n    if (data.top !== undefined) {\n      component._margin.w = data.top;\n      _marginChange = true;\n    }\n    if (_marginChange) {\n      component.margin = component._margin;\n    }\n    if (data.width !== undefined && !splitHorAnchors) {\n      component.width = data.width;\n    }\n    if (data.height !== undefined && !splitVerAnchors) {\n      component.height = data.height;\n    }\n    if (data.enabled !== undefined) {\n      component.enabled = data.enabled;\n    }\n    if (data.useInput !== undefined) {\n      component.useInput = data.useInput;\n    }\n    component.batchGroupId = data.batchGroupId === undefined || data.batchGroupId === null ? -1 : data.batchGroupId;\n    if (data.layers && pc.type(data.layers) === \"array\") {\n      component.layers = data.layers.slice(0);\n    }\n    component.type = data.type;\n    if (component.type === pc.ELEMENTTYPE_IMAGE) {\n      if (data.rect !== undefined) {\n        if (data.rect instanceof pc.Vec4) {\n          component.rect.copy(data.rect);\n        } else {\n          component.rect.set(data.rect[0], data.rect[1], data.rect[2], data.rect[3]);\n        }\n      }\n      if (data.color !== undefined) {\n        if (data.color instanceof pc.Color) {\n          component.color.set(data.color.data[0], data.color.data[1], data.color.data[2], data.opacity !== undefined ? data.opacity : 1);\n        } else {\n          component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);\n        }\n        component.color = component.color;\n      } else {\n        var opacity = data.opacity || 1;\n        component.color.set(1, 1, 1, opacity);\n        component.color = component.color;\n      }\n      if (data.opacity !== undefined) {\n        component.opacity = data.opacity;\n      } else {\n        component.opacity = 1;\n      }\n      if (data.textureAsset !== undefined) {\n        component.textureAsset = data.textureAsset;\n      }\n      if (data.texture) {\n        component.texture = data.texture;\n      }\n      if (data.spriteAsset !== undefined) {\n        component.spriteAsset = data.spriteAsset;\n      }\n      if (data.sprite) {\n        component.sprite = data.sprite;\n      }\n      if (data.spriteFrame !== undefined) {\n        component.spriteFrame = data.spriteFrame;\n      }\n      if (data.pixelsPerUnit !== undefined && data.pixelsPerUnit !== null) {\n        component.pixelsPerUnit = data.pixelsPerUnit;\n      }\n      if (data.materialAsset !== undefined) {\n        component.materialAsset = data.materialAsset;\n      }\n      if (data.material) {\n        component.material = data.material;\n      }\n      if (data.mask !== undefined) {\n        component.mask = data.mask;\n      }\n    } else {\n      if (component.type === pc.ELEMENTTYPE_TEXT) {\n        if (data.autoWidth !== undefined) {\n          component.autoWidth = data.autoWidth;\n        }\n        if (data.autoHeight !== undefined) {\n          component.autoHeight = data.autoHeight;\n        }\n        if (data.text !== undefined) {\n          component.text = data.text;\n        }\n        if (data.color !== undefined) {\n          if (data.color instanceof pc.Color) {\n            component.color.set(data.color.data[0], data.color.data[1], data.color.data[2], data.opacity !== undefined ? data.opacity : 1);\n          } else {\n            component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);\n          }\n          component.color = component.color;\n        }\n        if (data.opacity !== undefined) {\n          component.opacity = data.opacity;\n        }\n        if (data.spacing !== undefined) {\n          component.spacing = data.spacing;\n        }\n        if (data.fontSize !== undefined) {\n          component.fontSize = data.fontSize;\n          if (!data.lineHeight) {\n            component.lineHeight = data.fontSize;\n          }\n        }\n        if (data.lineHeight !== undefined) {\n          component.lineHeight = data.lineHeight;\n        }\n        if (data.wrapLines !== undefined) {\n          component.wrapLines = data.wrapLines;\n        }\n        if (data.fontAsset !== undefined) {\n          component.fontAsset = data.fontAsset;\n        }\n        if (data.font !== undefined) {\n          component.font = data.font;\n        }\n        if (data.alignment !== undefined) {\n          component.alignment = data.alignment;\n        }\n      } else {\n      }\n    }\n    var result = component._parseUpToScreen();\n    if (result.screen) {\n      component._updateScreen(result.screen);\n    }\n    ElementComponentSystem._super.initializeComponentData.call(this, component, data, properties);\n  }, onRemoveComponent:function(entity, component) {\n    component.onRemove();\n  }, cloneComponent:function(entity, clone) {\n    var source = entity.element;\n    return this.addComponent(clone, {enabled:source.enabled, width:source.width, height:source.height, anchor:source.anchor.clone(), pivot:source.pivot.clone(), margin:source.margin.clone(), alignment:source.alignment && source.alignment.clone() || source.alignment, autoWidth:source.autoWidth, autoHeight:source.autoHeight, type:source.type, rect:source.rect && source.rect.clone() || source.rect, materialAsset:source.materialAsset, material:source.material, color:source.color && source.color.clone() || \n    source.color, opacity:source.opacity, textureAsset:source.textureAsset, texture:source.texture, spriteAsset:source.spriteAsset, sprite:source.sprite, spriteFrame:source.spriteFrame, pixelsPerUnit:source.pixelsPerUnit, text:source.text, spacing:source.spacing, lineHeight:source.lineHeight, wrapLines:source.wrapLines, layers:source.layers, fontSize:source.fontSize, fontAsset:source.fontAsset, font:source.font, useInput:source.useInput, batchGroupId:source.batchGroupId, mask:source.mask});\n  }});\n  return {ElementComponentSystem:ElementComponentSystem};\n}());\npc.extend(pc, function() {\n  var ElementComponentData = function() {\n    this.enabled = true;\n  };\n  ElementComponentData = pc.inherits(ElementComponentData, pc.ComponentData);\n  return {ElementComponentData:ElementComponentData};\n}());\npc.extend(pc, function() {\n  var ImageElement = function ImageElement(element) {\n    this._element = element;\n    this._entity = element.entity;\n    this._system = element.system;\n    this._textureAsset = null;\n    this._texture = null;\n    this._materialAsset = null;\n    this._material = null;\n    this._spriteAsset = null;\n    this._sprite = null;\n    this._spriteFrame = 0;\n    this._pixelsPerUnit = null;\n    this._rect = new pc.Vec4(0, 0, 1, 1);\n    this._color = new pc.Color(1, 1, 1, 1);\n    this._mask = false;\n    this._maskRef = 0;\n    this._positions = [];\n    this._normals = [];\n    this._uvs = [];\n    this._indices = [];\n    this._outerScale = new pc.Vec2;\n    this._innerOffset = new pc.Vec4;\n    this._atlasRect = new pc.Vec4;\n    this._defaultMesh = this._createMesh();\n    this._mesh = this._defaultMesh;\n    this._node = new pc.GraphNode;\n    this._model = new pc.Model;\n    this._model.graph = this._node;\n    this._meshInstance = new pc.MeshInstance(this._node, this._mesh, this._material);\n    this._meshInstance.castShadow = false;\n    this._meshInstance.receiveShadow = false;\n    this._model.meshInstances.push(this._meshInstance);\n    this._drawOrder = 0;\n    this._updateAabbFunc = this._updateAabb.bind(this);\n    this._entity.addChild(this._model.graph);\n    this._model._entity = this._entity;\n    this._onScreenChange(this._element.screen);\n    this._element.on(\"resize\", this._onParentResize, this);\n    this._element.on(\"screen:set:screenspace\", this._onScreenSpaceChange, this);\n    this._element.on(\"set:screen\", this._onScreenChange, this);\n    this._element.on(\"set:draworder\", this._onDrawOrderChange, this);\n    this._element.on(\"screen:set:resolution\", this._onResolutionChange, this);\n  };\n  pc.extend(ImageElement.prototype, {destroy:function() {\n    if (this._model) {\n      this._element.removeModelFromLayers(this._model);\n      this._meshInstance.mesh = this._defaultMesh;\n      this._model.destroy();\n      this._model = null;\n    }\n    this._element.off(\"resize\", this._onParentResize, this);\n    this._element.off(\"screen:set:screenspace\", this._onScreenSpaceChange, this);\n    this._element.off(\"set:screen\", this._onScreenChange, this);\n    this._element.off(\"set:draworder\", this._onDrawOrderChange, this);\n    this._element.off(\"screen:set:resolution\", this._onResolutionChange, this);\n  }, _onResolutionChange:function(res) {\n  }, _onParentResize:function() {\n    if (this._mesh) {\n      this._updateMesh(this._mesh);\n    }\n  }, _onScreenSpaceChange:function(value) {\n    this._updateMaterial(value);\n  }, _onScreenChange:function(screen) {\n    if (screen) {\n      this._updateMaterial(screen.screen.screenSpace);\n    } else {\n      this._updateMaterial(false);\n    }\n  }, _onDrawOrderChange:function(order) {\n    this._drawOrder = order;\n    if (this._meshInstance) {\n      this._meshInstance.drawOrder = order;\n    }\n  }, _hasUserMaterial:function() {\n    return !!this._materialAsset || !!this._material && this._system.defaultImageMaterials.indexOf(this._material) === -1;\n  }, _use9Slicing:function() {\n    return this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED);\n  }, _updateMaterial:function(screenSpace) {\n    if (screenSpace) {\n      if (!this._hasUserMaterial()) {\n        if (this._mask) {\n          if (this.sprite) {\n            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {\n              this._material = this._system.defaultScreenSpaceImageMask9SlicedMaterial;\n            } else {\n              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {\n                this._material = this._system.defaultScreenSpaceImageMask9TiledMaterial;\n              } else {\n                this._material = this._system.defaultScreenSpaceImageMaskMaterial;\n              }\n            }\n          } else {\n            this._material = this._system.defaultScreenSpaceImageMaskMaterial;\n          }\n        } else {\n          if (this.sprite) {\n            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {\n              this._material = this._system.defaultScreenSpaceImage9SlicedMaterial;\n            } else {\n              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {\n                this._material = this._system.defaultScreenSpaceImage9TiledMaterial;\n              } else {\n                this._material = this._system.defaultScreenSpaceImageMaterial;\n              }\n            }\n          } else {\n            this._material = this._system.defaultScreenSpaceImageMaterial;\n          }\n        }\n      }\n      if (this._meshInstance) {\n        this._meshInstance.cull = false;\n      }\n    } else {\n      if (!this._hasUserMaterial()) {\n        if (this._mask) {\n          if (this.sprite) {\n            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {\n              this._material = this._system.defaultImage9SlicedMaskMaterial;\n            } else {\n              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {\n                this._material = this._system.defaultImage9TiledMaskMaterial;\n              } else {\n                this._material = this._system.defaultImageMaskMaterial;\n              }\n            }\n          } else {\n            this._material = this._system.defaultImageMaskMaterial;\n          }\n        } else {\n          if (this.sprite) {\n            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {\n              this._material = this._system.defaultImage9SlicedMaterial;\n            } else {\n              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {\n                this._material = this._system.defaultImage9TiledMaterial;\n              } else {\n                this._material = this._system.defaultImageMaterial;\n              }\n            }\n          } else {\n            this._material = this._system.defaultImageMaterial;\n          }\n        }\n      }\n      if (this._meshInstance) {\n        this._meshInstance.cull = true;\n      }\n    }\n    if (this._meshInstance) {\n      this._meshInstance.material = this._material;\n      this._meshInstance.screenSpace = screenSpace;\n      this._meshInstance.layer = screenSpace ? pc.scene.LAYER_HUD : pc.scene.LAYER_WORLD;\n    }\n  }, _createMesh:function() {\n    var w = this._element.width;\n    var h = this._element.height;\n    this._positions[0] = 0;\n    this._positions[1] = 0;\n    this._positions[2] = 0;\n    this._positions[3] = w;\n    this._positions[4] = 0;\n    this._positions[5] = 0;\n    this._positions[6] = w;\n    this._positions[7] = h;\n    this._positions[8] = 0;\n    this._positions[9] = 0;\n    this._positions[10] = h;\n    this._positions[11] = 0;\n    for (var i = 0; i < 12; i += 3) {\n      this._normals[i] = 0;\n      this._normals[i + 1] = 0;\n      this._normals[i + 2] = 1;\n    }\n    this._uvs[0] = this._rect.data[0];\n    this._uvs[1] = this._rect.data[1];\n    this._uvs[2] = this._rect.data[0] + this._rect.data[2];\n    this._uvs[3] = this._rect.data[1];\n    this._uvs[4] = this._rect.data[0] + this._rect.data[2];\n    this._uvs[5] = this._rect.data[1] + this._rect.data[3];\n    this._uvs[6] = this._rect.data[0];\n    this._uvs[7] = this._rect.data[1] + this._rect.data[3];\n    this._indices[0] = 0;\n    this._indices[1] = 1;\n    this._indices[2] = 3;\n    this._indices[3] = 2;\n    this._indices[4] = 3;\n    this._indices[5] = 1;\n    var mesh = pc.createMesh(this._system.app.graphicsDevice, this._positions, {uvs:this._uvs, normals:this._normals, indices:this._indices});\n    this._updateMesh(mesh);\n    return mesh;\n  }, _updateMesh:function(mesh) {\n    var i;\n    var w = this._element.width;\n    var h = this._element.height;\n    if (this._element.screen) {\n      this._updateMaterial(this._element.screen.screen.screenSpace);\n    } else {\n      this._updateMaterial();\n    }\n    if (this._meshInstance) {\n      this._meshInstance._aabbVer = -1;\n    }\n    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {\n      var frameData = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];\n      var borderWidthScale = 2 / frameData.rect.z;\n      var borderHeightScale = 2 / frameData.rect.w;\n      this._innerOffset.set(frameData.border.x * borderWidthScale, frameData.border.y * borderHeightScale, frameData.border.z * borderWidthScale, frameData.border.w * borderHeightScale);\n      var tex = this.sprite.atlas.texture;\n      this._atlasRect.set(frameData.rect.x / tex.width, frameData.rect.y / tex.height, frameData.rect.z / tex.width, frameData.rect.w / tex.height);\n      var ppu = this._pixelsPerUnit !== null ? this._pixelsPerUnit : this.sprite.pixelsPerUnit;\n      var scaleMulX = frameData.rect.z / ppu;\n      var scaleMulY = frameData.rect.w / ppu;\n      this._outerScale.set(Math.max(w, this._innerOffset.x * scaleMulX), Math.max(h, this._innerOffset.y * scaleMulY));\n      var scaleX = scaleMulX;\n      var scaleY = scaleMulY;\n      this._outerScale.x /= scaleMulX;\n      this._outerScale.y /= scaleMulY;\n      scaleX *= pc.math.clamp(w / (this._innerOffset.x * scaleMulX), 0.0001, 1);\n      scaleY *= pc.math.clamp(h / (this._innerOffset.y * scaleMulY), 0.0001, 1);\n      if (this._meshInstance) {\n        this._meshInstance.setParameter(\"innerOffset\", this._innerOffset.data);\n        this._meshInstance.setParameter(\"atlasRect\", this._atlasRect.data);\n        this._meshInstance.setParameter(\"outerScale\", this._outerScale.data, 4294967295);\n        this._meshInstance._updateAabbFunc = this._updateAabbFunc;\n      }\n      if (this._node) {\n        this._node.setLocalScale(scaleX, scaleY, 1);\n        this._node.setLocalPosition((0.5 - this._element.pivot.x) * w, (0.5 - this._element.pivot.y) * h, 0);\n      }\n    } else {\n      this._positions[0] = 0;\n      this._positions[1] = 0;\n      this._positions[2] = 0;\n      this._positions[3] = w;\n      this._positions[4] = 0;\n      this._positions[5] = 0;\n      this._positions[6] = w;\n      this._positions[7] = h;\n      this._positions[8] = 0;\n      this._positions[9] = 0;\n      this._positions[10] = h;\n      this._positions[11] = 0;\n      var hp = this._element.pivot.data[0];\n      var vp = this._element.pivot.data[1];\n      for (i = 0; i < this._positions.length; i += 3) {\n        this._positions[i] -= hp * w;\n        this._positions[i + 1] -= vp * h;\n      }\n      w = 1;\n      h = 1;\n      var rect = this._rect;\n      if (this._sprite && this._sprite.frameKeys[this._spriteFrame] && this._sprite.atlas) {\n        var frame = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];\n        if (frame) {\n          rect = frame.rect;\n          w = this._sprite.atlas.texture.width;\n          h = this._sprite.atlas.texture.height;\n        }\n      }\n      this._uvs[0] = rect.data[0] / w;\n      this._uvs[1] = rect.data[1] / h;\n      this._uvs[2] = (rect.data[0] + rect.data[2]) / w;\n      this._uvs[3] = rect.data[1] / h;\n      this._uvs[4] = (rect.data[0] + rect.data[2]) / w;\n      this._uvs[5] = (rect.data[1] + rect.data[3]) / h;\n      this._uvs[6] = rect.data[0] / w;\n      this._uvs[7] = (rect.data[1] + rect.data[3]) / h;\n      var vb = mesh.vertexBuffer;\n      var it = new pc.VertexIterator(vb);\n      var numVertices = 4;\n      for (i = 0; i < numVertices; i++) {\n        it.element[pc.SEMANTIC_POSITION].set(this._positions[i * 3 + 0], this._positions[i * 3 + 1], this._positions[i * 3 + 2]);\n        it.element[pc.SEMANTIC_NORMAL].set(this._normals[i * 3 + 0], this._normals[i * 3 + 1], this._normals[i * 3 + 2]);\n        it.element[pc.SEMANTIC_TEXCOORD0].set(this._uvs[i * 2 + 0], this._uvs[i * 2 + 1]);\n        it.next();\n      }\n      it.end();\n      mesh.aabb.compute(this._positions);\n      if (this._node) {\n        this._node.setLocalScale(1, 1, 1);\n        this._node.setLocalPosition(0, 0, 0);\n      }\n      if (this._meshInstance) {\n        this._meshInstance._updateAabbFunc = null;\n      }\n    }\n  }, _updateAabb:function(aabb) {\n    aabb.center.set(0, 0, 0);\n    aabb.halfExtents.set(this._outerScale.x * 0.5, this._outerScale.y * 0.5, 0.001);\n    aabb.setFromTransformedAabb(aabb, this._node.getWorldTransform());\n    return aabb;\n  }, _getHigherMask:function() {\n    var parent = this._entity;\n    while (parent) {\n      parent = parent.getParent();\n      if (parent && parent.element && parent.element.mask) {\n        return parent;\n      }\n    }\n    return null;\n  }, _toggleMask:function() {\n    this._element._dirtifyMask();\n    var screenSpace = this._element.screen ? this._element.screen.screen.screenSpace : false;\n    this._updateMaterial(screenSpace);\n  }, _onMaterialLoad:function(asset) {\n    this.material = asset.resource;\n  }, _onMaterialAdded:function(asset) {\n    this._system.app.assets.off(\"add:\" + asset.id, this._onMaterialAdded, this);\n    if (this._materialAsset === asset.id) {\n      this._bindMaterialAsset(asset);\n    }\n  }, _bindMaterialAsset:function(asset) {\n    asset.on(\"load\", this._onMaterialLoad, this);\n    asset.on(\"change\", this._onMaterialChange, this);\n    asset.on(\"remove\", this._onMaterialRemove, this);\n    if (asset.resource) {\n      this._onMaterialLoad(asset);\n    } else {\n      this._system.app.assets.load(asset);\n    }\n  }, _onMaterialChange:function() {\n  }, _onMaterialRemove:function() {\n  }, _onTextureAdded:function(asset) {\n    this._system.app.assets.off(\"add:\" + asset.id, this._onTextureAdded, this);\n    if (this._textureAsset === asset.id) {\n      this._bindTextureAsset(asset);\n    }\n  }, _bindTextureAsset:function(asset) {\n    asset.on(\"load\", this._onTextureLoad, this);\n    asset.on(\"change\", this._onTextureChange, this);\n    asset.on(\"remove\", this._onTextureRemove, this);\n    if (asset.resource) {\n      this._onTextureLoad(asset);\n    } else {\n      this._system.app.assets.load(asset);\n    }\n  }, _onTextureLoad:function(asset) {\n    this.texture = asset.resource;\n  }, _onTextureChange:function(asset) {\n  }, _onTextureRemove:function(asset) {\n  }, _onSpriteAssetAdded:function(asset) {\n    this._system.app.assets.off(\"add:\" + asset.id, this._onSpriteAssetAdded, this);\n    if (this._spriteAsset === asset.id) {\n      this._bindSpriteAsset(asset);\n    }\n  }, _bindSpriteAsset:function(asset) {\n    asset.on(\"load\", this._onSpriteAssetLoad, this);\n    asset.on(\"change\", this._onSpriteAssetChange, this);\n    asset.on(\"remove\", this._onSpriteAssetRemove, this);\n    if (asset.resource) {\n      this._onSpriteAssetLoad(asset);\n    } else {\n      this._system.app.assets.load(asset);\n    }\n  }, _onSpriteAssetLoad:function(asset) {\n    if (!asset.resource) {\n      this.sprite = null;\n    } else {\n      if (!asset.resource.atlas) {\n        var atlasAssetId = asset.data.textureAtlasAsset;\n        var assets = this._system.app.assets;\n        assets.off(\"load:\" + atlasAssetId, this._onTextureAtlasLoad, this);\n        assets.once(\"load:\" + atlasAssetId, this._onTextureAtlasLoad, this);\n      } else {\n        this.sprite = asset.resource;\n      }\n    }\n  }, _onSpriteMeshesChange:function() {\n    this.spriteFrame = this.spriteFrame;\n  }, _onSpritePpuChange:function() {\n    if (this.sprite.renderMode !== pc.SPRITE_RENDERMODE_SIMPLE && this._pixelsPerUnit === null) {\n      this.spriteFrame = this.spriteFrame;\n    }\n  }, _onAtlasTextureChange:function() {\n    if (this.sprite && this.sprite.atlas && this.sprite.atlas.texture) {\n      this._meshInstance.setParameter(\"texture_emissiveMap\", this._sprite.atlas.texture);\n      this._meshInstance.setParameter(\"texture_opacityMap\", this._sprite.atlas.texture);\n    } else {\n      this._meshInstance.deleteParameter(\"texture_emissiveMap\");\n      this._meshInstance.deleteParameter(\"texture_opacityMap\");\n    }\n  }, _onTextureAtlasLoad:function(atlasAsset) {\n    var spriteAsset = this._spriteAsset;\n    if (spriteAsset instanceof pc.Asset) {\n      this._onSpriteAssetLoad(spriteAsset);\n    } else {\n      this._onSpriteAssetLoad(this._system.app.assets.get(spriteAsset));\n    }\n  }, _onSpriteAssetChange:function(asset) {\n    this._onSpriteAssetLoad(asset);\n  }, _onSpriteAssetRemove:function(asset) {\n  }, onEnable:function() {\n    if (this._model) {\n      this._element.addModelToLayers(this._model);\n    }\n  }, onDisable:function() {\n    if (this._model) {\n      this._element.removeModelFromLayers(this._model);\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"color\", {get:function() {\n    return this._color;\n  }, set:function(value) {\n    this._color.data[0] = value.data[0];\n    this._color.data[1] = value.data[1];\n    this._color.data[2] = value.data[2];\n    if (this._meshInstance) {\n      this._meshInstance.setParameter(\"material_emissive\", this._color.data3);\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"opacity\", {get:function() {\n    return this._color.data[3];\n  }, set:function(value) {\n    this._color.data[3] = value;\n    this._meshInstance.setParameter(\"material_opacity\", value);\n  }});\n  Object.defineProperty(ImageElement.prototype, \"rect\", {get:function() {\n    return this._rect;\n  }, set:function(value) {\n    if (value instanceof pc.Vec4) {\n      this._rect.set(value.x, value.y, value.z, value.w);\n    } else {\n      this._rect.set(value[0], value[1], value[2], value[3]);\n    }\n    if (this._mesh) {\n      this._updateMesh(this._mesh);\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"material\", {get:function() {\n    return this._material;\n  }, set:function(value) {\n    if (!value) {\n      var screenSpace = this._element.screen ? this._element.screen.screen.screenSpace : false;\n      value = screenSpace ? this._system.defaultScreenSpaceImageMaterial : this._system.defaultImageMaterial;\n      value = this._mask ? this._system.defaultScreenSpaceImageMaskMaterial : this._system.defaultImageMaskMaterial;\n    }\n    this._material = value;\n    if (value) {\n      this._meshInstance.material = value;\n      if (value !== this._system.defaultScreenSpaceImageMaterial && value !== this._system.defaultImageMaterial && value !== this._system.defaultImageMaskMaterial && value !== this._system.defaultScreenSpaceImageMaskMaterial) {\n        this._meshInstance.deleteParameter(\"material_opacity\");\n        this._meshInstance.deleteParameter(\"material_emissive\");\n      } else {\n        this._meshInstance.setParameter(\"material_emissive\", this._color.data3);\n        this._meshInstance.setParameter(\"material_opacity\", this._color.data[3]);\n      }\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"materialAsset\", {get:function() {\n    return this._materialAsset;\n  }, set:function(value) {\n    var assets = this._system.app.assets;\n    var _id = value;\n    if (value instanceof pc.Asset) {\n      _id = value.id;\n    }\n    if (this._materialAsset !== _id) {\n      if (this._materialAsset) {\n        var _prev = assets.get(this._materialAsset);\n        if (_prev) {\n          _prev.off(\"load\", this._onMaterialLoad, this);\n          _prev.off(\"change\", this._onMaterialChange, this);\n          _prev.off(\"remove\", this._onMaterialRemove, this);\n        }\n      }\n      this._materialAsset = _id;\n      if (this._materialAsset) {\n        var asset = assets.get(this._materialAsset);\n        if (!asset) {\n          this.material = null;\n          assets.on(\"add:\" + this._materialAsset, this._onMaterialAdded, this);\n        } else {\n          this._bindMaterialAsset(asset);\n        }\n      } else {\n        this.material = null;\n      }\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"texture\", {get:function() {\n    return this._texture;\n  }, set:function(value) {\n    this._texture = value;\n    if (value) {\n      this._meshInstance.setParameter(\"texture_emissiveMap\", this._texture);\n      this._meshInstance.setParameter(\"texture_opacityMap\", this._texture);\n      this._meshInstance.setParameter(\"material_emissive\", this._color.data3);\n      this._meshInstance.setParameter(\"material_opacity\", this._color.data[3]);\n    } else {\n      this._meshInstance.deleteParameter(\"texture_emissiveMap\");\n      this._meshInstance.deleteParameter(\"texture_opacityMap\");\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"textureAsset\", {get:function() {\n    return this._textureAsset;\n  }, set:function(value) {\n    var assets = this._system.app.assets;\n    var _id = value;\n    if (value instanceof pc.Asset) {\n      _id = value.id;\n    }\n    if (this._textureAsset !== _id) {\n      if (this._textureAsset) {\n        var _prev = assets.get(this._textureAsset);\n        if (_prev) {\n          _prev.off(\"load\", this._onTextureLoad, this);\n          _prev.off(\"change\", this._onTextureChange, this);\n          _prev.off(\"remove\", this._onTextureRemove, this);\n        }\n      }\n      this._textureAsset = _id;\n      if (this._textureAsset) {\n        var asset = assets.get(this._textureAsset);\n        if (!asset) {\n          this.texture = null;\n          assets.on(\"add:\" + this._textureAsset, this._onTextureAdded, this);\n        } else {\n          this._bindTextureAsset(asset);\n        }\n      } else {\n        this.texture = null;\n      }\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"spriteAsset\", {get:function() {\n    return this._spriteAsset;\n  }, set:function(value) {\n    var assets = this._system.app.assets;\n    var _id = value;\n    if (value instanceof pc.Asset) {\n      _id = value.id;\n    }\n    if (this._spriteAsset !== _id) {\n      if (this._spriteAsset) {\n        var _prev = assets.get(this._spriteAsset);\n        if (_prev) {\n          _prev.off(\"load\", this._onSpriteAssetLoad, this);\n          _prev.off(\"change\", this._onSpriteAssetChange, this);\n          _prev.off(\"remove\", this._onSpriteAssetRemove, this);\n        }\n      }\n      this._spriteAsset = _id;\n      if (this._spriteAsset) {\n        var asset = assets.get(this._spriteAsset);\n        if (!asset) {\n          this.sprite = null;\n          assets.on(\"add:\" + this._spriteAsset, this._onSpriteAssetAdded, this);\n        } else {\n          this._bindSpriteAsset(asset);\n        }\n      } else {\n        this.sprite = null;\n      }\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"sprite\", {get:function() {\n    return this._sprite;\n  }, set:function(value) {\n    if (this._sprite) {\n      this._sprite.off(\"set:meshes\", this._onSpriteMeshesChange, this);\n      this._sprite.off(\"set:pixelsPerUnit\", this._onSpritePpuChange, this);\n      this._sprite.off(\"set:atlas\", this._onAtlasTextureChange, this);\n      if (this._sprite.atlas) {\n        this._sprite.atlas.off(\"set:texture\", this._onAtlasTextureChange, this);\n      }\n    }\n    this._sprite = value;\n    if (this._sprite) {\n      this._sprite.on(\"set:meshes\", this._onSpriteMeshesChange, this);\n      this._sprite.on(\"set:pixelsPerUnit\", this._onSpritePpuChange, this);\n      this._sprite.on(\"set:atlas\", this._onAtlasTextureChange, this);\n      if (this._sprite.atlas) {\n        this._sprite.atlas.on(\"set:texture\", this._onAtlasTextureChange, this);\n      }\n    }\n    if (this._meshInstance) {\n      if (this._sprite && this._sprite.atlas && this._sprite.atlas.texture) {\n        this._meshInstance.setParameter(\"texture_emissiveMap\", this._sprite.atlas.texture);\n        this._meshInstance.setParameter(\"texture_opacityMap\", this._sprite.atlas.texture);\n      } else {\n        this._meshInstance.deleteParameter(\"texture_emissiveMap\");\n        this._meshInstance.deleteParameter(\"texture_opacityMap\");\n      }\n    }\n    this.spriteFrame = this.spriteFrame;\n  }});\n  Object.defineProperty(ImageElement.prototype, \"spriteFrame\", {get:function() {\n    return this._spriteFrame;\n  }, set:function(value) {\n    if (this._sprite) {\n      this._spriteFrame = pc.math.clamp(value, 0, this._sprite.frameKeys.length - 1);\n    } else {\n      this._spriteFrame = value;\n    }\n    var nineSlice = false;\n    var mesh = null;\n    if (this._sprite && this._sprite.atlas) {\n      mesh = this._sprite.meshes[this.spriteFrame];\n      nineSlice = this._sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this._sprite.renderMode === pc.SPRITE_RENDERMODE_TILED;\n    }\n    this.mesh = nineSlice ? mesh : this._defaultMesh;\n    if (this.mesh) {\n      this._updateMesh(this.mesh);\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"mesh\", {get:function() {\n    return this._mesh;\n  }, set:function(value) {\n    this._mesh = value;\n    if (this._meshInstance) {\n      this._meshInstance.mesh = this._mesh;\n      this._meshInstance.visible = !!this._mesh;\n      this._meshInstance._aabbVer = -1;\n      if (this._mesh === this._defaultMesh) {\n        this._meshInstance._updateAabbFunc = null;\n      } else {\n        this._meshInstance._updateAabbFunc = this._updateAabbFunc;\n      }\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"mask\", {get:function() {\n    return this._mask;\n  }, set:function(value) {\n    if (this._mask !== value) {\n      this._mask = value;\n      this._toggleMask();\n    }\n  }});\n  Object.defineProperty(ImageElement.prototype, \"pixelsPerUnit\", {get:function() {\n    return this._pixelsPerUnit;\n  }, set:function(value) {\n    if (this._pixelsPerUnit === value) {\n      return;\n    }\n    this._pixelsPerUnit = value;\n    if (this._sprite && (this._sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this._sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {\n      this.spriteFrame = this.spriteFrame;\n    }\n  }});\n  return {ImageElement:ImageElement};\n}());\npc.extend(pc, function() {\n  var TextElement = function TextElement(element) {\n    this._element = element;\n    this._system = element.system;\n    this._entity = element.entity;\n    this._text = \"\";\n    this._fontAsset = null;\n    this._font = null;\n    this._color = new pc.Color(1, 1, 1, 1);\n    this._spacing = 1;\n    this._fontSize = 32;\n    this._lineHeight = 32;\n    this._wrapLines = false;\n    this._drawOrder = 0;\n    this._alignment = new pc.Vec2(0.5, 0.5);\n    this._autoWidth = true;\n    this._autoHeight = true;\n    this.width = 0;\n    this.height = 0;\n    this._node = new pc.GraphNode;\n    this._model = new pc.Model;\n    this._model.graph = this._node;\n    this._entity.addChild(this._node);\n    this._meshInfo = [];\n    this._material = null;\n    this._noResize = false;\n    this._currentMaterialType = null;\n    this._maskedMaterialSrc = null;\n    this._onScreenChange(this._element.screen);\n    element.on(\"resize\", this._onParentResize, this);\n    this._element.on(\"set:screen\", this._onScreenChange, this);\n    element.on(\"screen:set:screenspace\", this._onScreenSpaceChange, this);\n    element.on(\"set:draworder\", this._onDrawOrderChange, this);\n    element.on(\"set:pivot\", this._onPivotChange, this);\n  };\n  var LINE_BREAK_CHAR = /^[\\r\\n]$/;\n  var WHITESPACE_CHAR = /^[ \\t]$/;\n  var WORD_BOUNDARY_CHAR = /^[ \\t\\-]$/;\n  pc.extend(TextElement.prototype, {destroy:function() {\n    if (this._model) {\n      this._element.removeModelFromLayers(this._model);\n      this._model.destroy();\n      this._model = null;\n    }\n    this._element.off(\"resize\", this._onParentResize, this);\n    this._element.off(\"set:screen\", this._onScreenChange, this);\n    this._element.off(\"screen:set:screenspace\", this._onScreenSpaceChange, this);\n    this._element.off(\"set:draworder\", this._onDrawOrderChange, this);\n    this._element.off(\"set:pivot\", this._onPivotChange, this);\n  }, _onParentResize:function(width, height) {\n    if (this._noResize) {\n      return;\n    }\n    if (this._font) {\n      this._updateText(this._text);\n    }\n  }, _onScreenChange:function(screen) {\n    if (screen) {\n      this._updateMaterial(screen.screen.screenSpace);\n    } else {\n      this._updateMaterial(false);\n    }\n  }, _onScreenSpaceChange:function(value) {\n    this._updateMaterial(value);\n  }, _onDrawOrderChange:function(order) {\n    this._drawOrder = order;\n    if (this._model) {\n      var i;\n      var len;\n      for (i = 0, len = this._model.meshInstances.length; i < len; i++) {\n        this._model.meshInstances[i].drawOrder = order;\n      }\n    }\n  }, _onPivotChange:function(pivot) {\n    if (this._font) {\n      this._updateText();\n    }\n  }, _updateText:function(text) {\n    var i;\n    var len;\n    if (text === undefined) {\n      text = this._text;\n    }\n    var textLength = text.length;\n    if (textLength === 0) {\n      textLength = 1;\n      text = \" \";\n    }\n    var charactersPerTexture = {};\n    for (i = 0; i < textLength; i++) {\n      var code = text.charCodeAt(i);\n      var info = this._font.data.chars[code];\n      if (!info) {\n        continue;\n      }\n      var map = info.map;\n      if (!charactersPerTexture[map]) {\n        charactersPerTexture[map] = 0;\n      }\n      charactersPerTexture[map]++;\n    }\n    var removedModel = false;\n    var screenSpace = this._element.screen && this._element.screen.screen.screenSpace;\n    for (i = 0, len = this._meshInfo.length; i < len; i++) {\n      var l = charactersPerTexture[i] || 0;\n      var meshInfo = this._meshInfo[i];\n      if (meshInfo.count !== l) {\n        if (!removedModel) {\n          this._element.removeModelFromLayers(this._model);\n          removedModel = true;\n        }\n        meshInfo.count = l;\n        meshInfo.positions.length = meshInfo.normals.length = l * 3 * 4;\n        meshInfo.indices.length = l * 3 * 2;\n        meshInfo.uvs.length = l * 2 * 4;\n        if (meshInfo.meshInstance) {\n          this._removeMeshInstance(meshInfo.meshInstance);\n        }\n        if (l === 0) {\n          meshInfo.meshInstance = null;\n          continue;\n        }\n        for (var v = 0; v < l; v++) {\n          meshInfo.indices[v * 3 * 2 + 0] = v * 4;\n          meshInfo.indices[v * 3 * 2 + 1] = v * 4 + 1;\n          meshInfo.indices[v * 3 * 2 + 2] = v * 4 + 3;\n          meshInfo.indices[v * 3 * 2 + 3] = v * 4 + 2;\n          meshInfo.indices[v * 3 * 2 + 4] = v * 4 + 3;\n          meshInfo.indices[v * 3 * 2 + 5] = v * 4 + 1;\n          meshInfo.normals[v * 4 * 3 + 0] = 0;\n          meshInfo.normals[v * 4 * 3 + 1] = 0;\n          meshInfo.normals[v * 4 * 3 + 2] = -1;\n          meshInfo.normals[v * 4 * 3 + 3] = 0;\n          meshInfo.normals[v * 4 * 3 + 4] = 0;\n          meshInfo.normals[v * 4 * 3 + 5] = -1;\n          meshInfo.normals[v * 4 * 3 + 6] = 0;\n          meshInfo.normals[v * 4 * 3 + 7] = 0;\n          meshInfo.normals[v * 4 * 3 + 8] = -1;\n          meshInfo.normals[v * 4 * 3 + 9] = 0;\n          meshInfo.normals[v * 4 * 3 + 10] = 0;\n          meshInfo.normals[v * 4 * 3 + 11] = -1;\n        }\n        var mesh = pc.createMesh(this._system.app.graphicsDevice, meshInfo.positions, {uvs:meshInfo.uvs, normals:meshInfo.normals, indices:meshInfo.indices});\n        var mi = new pc.MeshInstance(this._node, mesh, this._material);\n        mi.castShadow = false;\n        mi.receiveShadow = false;\n        mi.drawOrder = this._drawOrder;\n        if (screenSpace) {\n          mi.cull = false;\n        }\n        mi.screenSpace = screenSpace;\n        mi.setParameter(\"texture_msdfMap\", this._font.textures[i]);\n        mi.setParameter(\"material_emissive\", this._color.data3);\n        mi.setParameter(\"material_opacity\", this._color.data[3]);\n        mi.setParameter(\"font_sdfIntensity\", this._font.intensity);\n        mi.setParameter(\"font_pxrange\", this._getPxRange(this._font));\n        mi.setParameter(\"font_textureWidth\", this._font.data.info.maps[i].width);\n        meshInfo.meshInstance = mi;\n        this._model.meshInstances.push(mi);\n      }\n    }\n    if (this._maskedBy) {\n      this._element._setMaskedBy(this._maskedBy);\n    }\n    if (removedModel && this._element.enabled && this._entity.enabled) {\n      this._element.addModelToLayers(this._model);\n    }\n    this._updateMeshes(text);\n  }, _removeMeshInstance:function(meshInstance) {\n    var ib;\n    var iblen;\n    var oldMesh = meshInstance.mesh;\n    if (oldMesh) {\n      if (oldMesh.vertexBuffer) {\n        oldMesh.vertexBuffer.destroy();\n      }\n      if (oldMesh.indexBuffer) {\n        for (ib = 0, iblen = oldMesh.indexBuffer.length; ib < iblen; ib++) {\n          oldMesh.indexBuffer[ib].destroy();\n        }\n      }\n    }\n    var idx = this._model.meshInstances.indexOf(meshInstance);\n    if (idx !== -1) {\n      this._model.meshInstances.splice(idx, 1);\n    }\n  }, _setMaterial:function(material) {\n    var i;\n    var len;\n    this._material = material;\n    if (this._model) {\n      for (i = 0, len = this._model.meshInstances.length; i < len; i++) {\n        var mi = this._model.meshInstances[i];\n        mi.material = material;\n      }\n    }\n  }, _updateMaterial:function(screenSpace) {\n    var cull;\n    if (screenSpace) {\n      this._material = this._system.defaultScreenSpaceTextMaterial;\n      cull = false;\n    } else {\n      this._material = this._system.defaultTextMaterial;\n      cull = true;\n    }\n    if (this._model) {\n      for (var i = 0, len = this._model.meshInstances.length; i < len; i++) {\n        var mi = this._model.meshInstances[i];\n        mi.cull = cull;\n        mi.material = this._material;\n        mi.screenSpace = screenSpace;\n      }\n    }\n  }, _updateMeshes:function(text) {\n    var json = this._font.data;\n    var self = this;\n    this.width = 0;\n    this.height = 0;\n    this._lineWidths = [];\n    this._lineContents = [];\n    var l = text.length;\n    var _x = 0;\n    var _xMinusTrailingWhitespace = 0;\n    var _y = 0;\n    var _z = 0;\n    var lines = 1;\n    var wordStartX = 0;\n    var wordStartIndex = 0;\n    var lineStartIndex = 0;\n    var numWordsThisLine = 0;\n    var numCharsThisLine = 0;\n    var splitHorizontalAnchors = Math.abs(this._element.anchor.x - this._element.anchor.z) >= 0.0001;\n    var maxLineWidth = this._element.width;\n    if (this.autoWidth && !splitHorizontalAnchors || !this._wrapLines) {\n      maxLineWidth = Number.POSITIVE_INFINITY;\n    }\n    var fontMinY = 0;\n    var fontMaxY = 0;\n    var scale = 1;\n    var MAGIC = 32;\n    var char, charCode, data, i, quad;\n    for (charCode in json.chars) {\n      data = json.chars[charCode];\n      scale = data.height / MAGIC * this._fontSize / data.height;\n      if (data.bounds) {\n        fontMinY = Math.min(fontMinY, data.bounds[1] * scale);\n        fontMaxY = Math.max(fontMaxY, data.bounds[3] * scale);\n      }\n    }\n    for (i = 0; i < this._meshInfo.length; i++) {\n      this._meshInfo[i].quad = 0;\n      this._meshInfo[i].lines = {};\n    }\n    function breakLine(lineBreakIndex, lineBreakX) {\n      self._lineWidths.push(lineBreakX);\n      self._lineContents.push(text.substring(lineStartIndex, lineBreakIndex));\n      _x = 0;\n      _y -= self._lineHeight;\n      lines++;\n      numWordsThisLine = 0;\n      numCharsThisLine = 0;\n      wordStartX = 0;\n      lineStartIndex = lineBreakIndex;\n    }\n    for (i = 0; i < l; i++) {\n      char = text.charAt(i);\n      charCode = text.charCodeAt(i);\n      var x = 0;\n      var y = 0;\n      var advance = 0;\n      var quadsize = 1;\n      var glyphMinX = 0;\n      var glyphWidth = 0;\n      data = json.chars[charCode];\n      if (data && data.scale) {\n        var size = (data.width + data.height) / 2;\n        scale = size / MAGIC * this._fontSize / size;\n        quadsize = size / MAGIC * this._fontSize / data.scale;\n        advance = data.xadvance * scale;\n        x = data.xoffset * scale;\n        y = data.yoffset * scale;\n        if (data.bounds) {\n          glyphWidth = (data.bounds[2] - data.bounds[0]) * scale;\n          glyphMinX = data.bounds[0] * scale;\n        } else {\n          glyphWidth = x;\n          glyphMinX = 0;\n        }\n      } else {\n        advance = 1;\n        x = 0;\n        y = 0;\n        quadsize = this._fontSize;\n      }\n      var isLineBreak = LINE_BREAK_CHAR.test(char);\n      var isWordBoundary = WORD_BOUNDARY_CHAR.test(char);\n      var isWhitespace = WHITESPACE_CHAR.test(char);\n      if (isLineBreak) {\n        breakLine(i, _xMinusTrailingWhitespace);\n        wordStartIndex = i + 1;\n        lineStartIndex = i + 1;\n        continue;\n      }\n      var meshInfo = this._meshInfo[data && data.map || 0];\n      var candidateLineWidth = _x + glyphWidth + glyphMinX;\n      if (candidateLineWidth >= maxLineWidth && numCharsThisLine > 0 && !isWhitespace) {\n        if (numWordsThisLine === 0) {\n          wordStartIndex = i;\n          breakLine(i, _xMinusTrailingWhitespace);\n        } else {\n          var backtrack = Math.max(i - wordStartIndex, 0);\n          i -= backtrack + 1;\n          meshInfo.lines[lines - 1] -= backtrack;\n          meshInfo.quad -= backtrack;\n          breakLine(wordStartIndex, wordStartX);\n          continue;\n        }\n      }\n      quad = meshInfo.quad;\n      meshInfo.lines[lines - 1] = quad;\n      meshInfo.positions[quad * 4 * 3 + 0] = _x - x;\n      meshInfo.positions[quad * 4 * 3 + 1] = _y - y;\n      meshInfo.positions[quad * 4 * 3 + 2] = _z;\n      meshInfo.positions[quad * 4 * 3 + 3] = _x - x + quadsize;\n      meshInfo.positions[quad * 4 * 3 + 4] = _y - y;\n      meshInfo.positions[quad * 4 * 3 + 5] = _z;\n      meshInfo.positions[quad * 4 * 3 + 6] = _x - x + quadsize;\n      meshInfo.positions[quad * 4 * 3 + 7] = _y - y + quadsize;\n      meshInfo.positions[quad * 4 * 3 + 8] = _z;\n      meshInfo.positions[quad * 4 * 3 + 9] = _x - x;\n      meshInfo.positions[quad * 4 * 3 + 10] = _y - y + quadsize;\n      meshInfo.positions[quad * 4 * 3 + 11] = _z;\n      this.width = Math.max(this.width, _x + glyphWidth + glyphMinX);\n      this.height = Math.max(this.height, fontMaxY - (_y + fontMinY));\n      _x = _x + this._spacing * advance;\n      if (!isWhitespace && !isLineBreak) {\n        _xMinusTrailingWhitespace = _x;\n      }\n      if (isWordBoundary) {\n        numWordsThisLine++;\n        wordStartX = _xMinusTrailingWhitespace;\n        wordStartIndex = i + 1;\n      }\n      numCharsThisLine++;\n      var uv = this._getUv(charCode);\n      meshInfo.uvs[quad * 4 * 2 + 0] = uv[0];\n      meshInfo.uvs[quad * 4 * 2 + 1] = uv[1];\n      meshInfo.uvs[quad * 4 * 2 + 2] = uv[2];\n      meshInfo.uvs[quad * 4 * 2 + 3] = uv[1];\n      meshInfo.uvs[quad * 4 * 2 + 4] = uv[2];\n      meshInfo.uvs[quad * 4 * 2 + 5] = uv[3];\n      meshInfo.uvs[quad * 4 * 2 + 6] = uv[0];\n      meshInfo.uvs[quad * 4 * 2 + 7] = uv[3];\n      meshInfo.quad++;\n    }\n    if (lineStartIndex < l) {\n      breakLine(l, _x);\n    }\n    this._noResize = true;\n    this.autoWidth = this._autoWidth;\n    this.autoHeight = this._autoHeight;\n    this._noResize = false;\n    var hp = this._element.pivot.data[0];\n    var vp = this._element.pivot.data[1];\n    var ha = this._alignment.x;\n    var va = this._alignment.y;\n    for (i = 0; i < this._meshInfo.length; i++) {\n      if (this._meshInfo[i].count === 0) {\n        continue;\n      }\n      var prevQuad = 0;\n      for (var line in this._meshInfo[i].lines) {\n        var index = this._meshInfo[i].lines[line];\n        var hoffset = -hp * this._element.width + ha * (this._element.width - this._lineWidths[parseInt(line, 10)]);\n        var voffset = (1 - vp) * this._element.height - fontMaxY - (1 - va) * (this._element.height - this.height);\n        for (quad = prevQuad; quad <= index; quad++) {\n          this._meshInfo[i].positions[quad * 4 * 3] += hoffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 3] += hoffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 6] += hoffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 9] += hoffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 1] += voffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 4] += voffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 7] += voffset;\n          this._meshInfo[i].positions[quad * 4 * 3 + 10] += voffset;\n        }\n        prevQuad = index + 1;\n      }\n      var numVertices = this._meshInfo[i].quad * 4;\n      var it = new pc.VertexIterator(this._meshInfo[i].meshInstance.mesh.vertexBuffer);\n      for (var v = 0; v < numVertices; v++) {\n        it.element[pc.SEMANTIC_POSITION].set(this._meshInfo[i].positions[v * 3 + 0], this._meshInfo[i].positions[v * 3 + 1], this._meshInfo[i].positions[v * 3 + 2]);\n        it.element[pc.SEMANTIC_TEXCOORD0].set(this._meshInfo[i].uvs[v * 2 + 0], this._meshInfo[i].uvs[v * 2 + 1]);\n        it.next();\n      }\n      it.end();\n      this._meshInfo[i].meshInstance.mesh.aabb.compute(this._meshInfo[i].positions);\n      this._meshInfo[i].meshInstance._aabbVer = -1;\n    }\n  }, _onFontAdded:function(asset) {\n    this._system.app.assets.off(\"add:\" + asset.id, this._onFontAdded, this);\n    if (asset.id === this._fontAsset) {\n      this._bindFont(asset);\n    }\n  }, _bindFont:function(asset) {\n    asset.on(\"load\", this._onFontLoad, this);\n    asset.on(\"change\", this._onFontChange, this);\n    asset.on(\"remove\", this._onFontRemove, this);\n    if (asset.resource) {\n      this._onFontLoad(asset);\n    } else {\n      this._system.app.assets.load(asset);\n    }\n  }, _onFontLoad:function(asset) {\n    if (this.font !== asset.resource) {\n      this.font = asset.resource;\n    }\n  }, _onFontChange:function(asset, name, _new, _old) {\n    if (name === \"data\") {\n      this._font.data = _new;\n      var maps = this._font.data.info.maps.length;\n      for (var i = 0; i < maps; i++) {\n        if (!this._meshInfo[i]) {\n          continue;\n        }\n        var mi = this._meshInfo[i].meshInstance;\n        if (mi) {\n          mi.setParameter(\"font_sdfIntensity\", this._font.intensity);\n          mi.setParameter(\"font_pxrange\", this._getPxRange(this._font));\n          mi.setParameter(\"font_textureWidth\", this._font.data.info.maps[i].width);\n        }\n      }\n    }\n  }, _onFontRemove:function(asset) {\n  }, _getPxRange:function(font) {\n    var keys = Object.keys(this._font.data.chars);\n    for (var i = 0; i < keys.length; i++) {\n      var char = this._font.data.chars[keys[i]];\n      if (char.scale && char.range) {\n        return char.scale * char.range;\n      }\n    }\n    return 2;\n  }, _getUv:function(char) {\n    var data = this._font.data;\n    if (!data.chars[char]) {\n      if (data.chars[32]) {\n        return this._getUv(32);\n      }\n      return [0, 0, 1, 1];\n    }\n    var map = data.chars[char].map;\n    var width = data.info.maps[map].width;\n    var height = data.info.maps[map].height;\n    var x = data.chars[char].x;\n    var y = data.chars[char].y;\n    var x1 = x;\n    var y1 = y;\n    var x2 = x + data.chars[char].width;\n    var y2 = y - data.chars[char].height;\n    var edge = 1 - data.chars[char].height / height;\n    return [x1 / width, edge - y1 / height, x2 / width, edge - y2 / height];\n  }, onEnable:function() {\n    if (this._model) {\n      this._element.addModelToLayers(this._model);\n    }\n  }, onDisable:function() {\n    if (this._model) {\n      this._element.removeModelFromLayers(this._model);\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"text\", {get:function() {\n    return this._text;\n  }, set:function(value) {\n    var str = value.toString();\n    if (this._text !== str) {\n      if (this._font) {\n        this._updateText(str);\n      }\n      this._text = str;\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"color\", {get:function() {\n    return this._color;\n  }, set:function(value) {\n    this._color.data[0] = value.data[0];\n    this._color.data[1] = value.data[1];\n    this._color.data[2] = value.data[2];\n    if (this._model) {\n      for (var i = 0, len = this._model.meshInstances.length; i < len; i++) {\n        var mi = this._model.meshInstances[i];\n        mi.setParameter(\"material_emissive\", this._color.data3);\n      }\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"opacity\", {get:function() {\n    return this._color.data[3];\n  }, set:function(value) {\n    this._color.data[3] = value;\n    if (this._model) {\n      for (var i = 0, len = this._model.meshInstances.length; i < len; i++) {\n        var mi = this._model.meshInstances[i];\n        mi.setParameter(\"material_opacity\", value);\n      }\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"lineHeight\", {get:function() {\n    return this._lineHeight;\n  }, set:function(value) {\n    var _prev = this._lineHeight;\n    this._lineHeight = value;\n    if (_prev !== value && this._font) {\n      this._updateText();\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"wrapLines\", {get:function() {\n    return this._wrapLines;\n  }, set:function(value) {\n    var _prev = this._wrapLines;\n    this._wrapLines = value;\n    if (_prev !== value && this._font) {\n      this._updateText();\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"lines\", {get:function() {\n    return this._lineContents;\n  }});\n  Object.defineProperty(TextElement.prototype, \"spacing\", {get:function() {\n    return this._spacing;\n  }, set:function(value) {\n    var _prev = this._spacing;\n    this._spacing = value;\n    if (_prev !== value && this._font) {\n      this._updateText();\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"fontSize\", {get:function() {\n    return this._fontSize;\n  }, set:function(value) {\n    var _prev = this._fontSize;\n    this._fontSize = value;\n    if (_prev !== value && this._font) {\n      this._updateText();\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"fontAsset\", {get function() {\n    return this._fontAsset;\n  }, set:function(value) {\n    var assets = this._system.app.assets;\n    var _id = value;\n    if (value instanceof pc.Asset) {\n      _id = value.id;\n    }\n    if (this._fontAsset !== _id) {\n      if (this._fontAsset) {\n        var _prev = assets.get(this._fontAsset);\n        if (_prev) {\n          _prev.off(\"load\", this._onFontLoad, this);\n          _prev.off(\"change\", this._onFontChange, this);\n          _prev.off(\"remove\", this._onFontRemove, this);\n        }\n      }\n      this._fontAsset = _id;\n      if (this._fontAsset) {\n        var asset = assets.get(this._fontAsset);\n        if (!asset) {\n          assets.on(\"add:\" + this._fontAsset, this._onFontAdded, this);\n        } else {\n          this._bindFont(asset);\n        }\n      }\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"font\", {get:function() {\n    return this._font;\n  }, set:function(value) {\n    var i;\n    var len;\n    this._font = value;\n    if (!value) {\n      return;\n    }\n    for (i = 0, len = this._font.textures.length; i < len; i++) {\n      if (!this._meshInfo[i]) {\n        this._meshInfo[i] = {count:0, quad:0, lines:{}, positions:[], normals:[], uvs:[], indices:[], meshInstance:null};\n      } else {\n        var mi = this._meshInfo[i].meshInstance;\n        if (mi) {\n          mi.setParameter(\"font_sdfIntensity\", this._font.intensity);\n          mi.setParameter(\"font_pxrange\", this._getPxRange(this._font));\n          mi.setParameter(\"font_textureWidth\", this._font.data.info.maps[i].width);\n          mi.setParameter(\"texture_msdfMap\", this._font.textures[i]);\n        }\n      }\n    }\n    var removedModel = false;\n    for (i = this._font.textures.length; i < this._meshInfo.length; i++) {\n      if (this._meshInfo[i].meshInstance) {\n        if (!removedModel) {\n          this._element.removeModelFromLayers(this._model);\n          removedModel = true;\n        }\n        this._removeMeshInstance(this._meshInfo[i].meshInstance);\n      }\n    }\n    if (this._meshInfo.length > this._font.textures.length) {\n      this._meshInfo.length = this._font.textures.length;\n    }\n    this._updateText();\n  }});\n  Object.defineProperty(TextElement.prototype, \"alignment\", {get:function() {\n    return this._alignment;\n  }, set:function(value) {\n    if (value instanceof pc.Vec2) {\n      this._alignment.set(value.x, value.y);\n    } else {\n      this._alignment.set(value[0], value[1]);\n    }\n    if (this._font) {\n      this._updateText();\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"autoWidth\", {get:function() {\n    return this._autoWidth;\n  }, set:function(value) {\n    this._autoWidth = value;\n    if (value && Math.abs(this._element.anchor.x - this._element.anchor.z) < 0.0001) {\n      this._element.width = this.width;\n    }\n  }});\n  Object.defineProperty(TextElement.prototype, \"autoHeight\", {get:function() {\n    return this._autoHeight;\n  }, set:function(value) {\n    this._autoHeight = value;\n    if (value && Math.abs(this._element.anchor.y - this._element.anchor.w) < 0.0001) {\n      this._element.height = this.height;\n    }\n  }});\n  return {TextElement:TextElement};\n}());\npc.extend(pc, function() {\n  pc.FONT_MSDF = \"msdf\";\n  var Font = function(textures, data) {\n    this.type = pc.FONT_MSDF;\n    this.em = 1;\n    this.textures = textures;\n    this.intensity = 0.0;\n    this._data = null;\n    this.data = data;\n  };\n  Font.prototype = {};\n  Object.defineProperty(Font.prototype, \"data\", {get:function() {\n    return this._data;\n  }, set:function(value) {\n    this._data = value;\n    if (!value) {\n      return;\n    }\n    if (this._data.intensity !== undefined) {\n      this.intensity = this._data.intensity;\n    }\n    if (!this._data.info) {\n      this._data.info = {};\n    }\n    if (!this._data.version || this._data.version < 2) {\n      this._data.info.maps = [{width:this._data.info.width, height:this._data.info.height}];\n      if (this._data.chars) {\n        for (var key in this._data.chars) {\n          this._data.chars[key].map = 0;\n        }\n      }\n    }\n  }});\n  return {FONT_MSDF:pc.FONT_MSDF, Font:Font};\n}());\npc.extend(pc, function() {\n  var ZoneComponent = function ZoneComponent(system, entity) {\n    this._oldState = true;\n    this._size = new pc.Vec3;\n    this.on(\"set_enabled\", this._onSetEnabled, this);\n  };\n  ZoneComponent = pc.inherits(ZoneComponent, pc.Component);\n  pc.extend(ZoneComponent.prototype, {onEnable:function() {\n    ZoneComponent._super.onEnable.call(this);\n    this._checkState();\n  }, onDisable:function() {\n    ZoneComponent._super.onDisable.call(this);\n    this._checkState();\n  }, _onSetEnabled:function(prop, old, value) {\n    this._checkState();\n  }, _checkState:function() {\n    var state = this.enabled && this.entity.enabled;\n    if (state === this._oldState) {\n      return;\n    }\n    this._oldState = state;\n    this.fire(\"enable\");\n    this.fire(\"state\", this.enabled);\n  }, _onBeforeRemove:function() {\n    this.fire(\"remove\");\n  }});\n  Object.defineProperty(ZoneComponent.prototype, \"size\", {set:function(data) {\n    if (data instanceof pc.Vec3) {\n      this._size.copy(data);\n    } else {\n      if (data instanceof Array && data.length >= 3) {\n        this.size.set(data[0], data[1], data[2]);\n      }\n    }\n  }, get:function() {\n    return this._size;\n  }});\n  return {ZoneComponent:ZoneComponent};\n}());\npc.extend(pc, function() {\n  var _schema = [\"enabled\"];\n  var ZoneComponentSystem = function ZoneComponentSystem(app) {\n    this.id = \"zone\";\n    this.app = app;\n    app.systems.add(this.id, this);\n    this.ComponentType = pc.ZoneComponent;\n    this.DataType = pc.ZoneComponentData;\n    this.schema = _schema;\n    this.on(\"beforeremove\", this._onBeforeRemove, this);\n  };\n  ZoneComponentSystem = pc.inherits(ZoneComponentSystem, pc.ComponentSystem);\n  pc.Component._buildAccessors(pc.ZoneComponent.prototype, _schema);\n  pc.extend(ZoneComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {\n    component.enabled = data.hasOwnProperty(\"enabled\") ? !!data.enabled : true;\n    if (data.size) {\n      if (data.size instanceof pc.Vec3) {\n        component.size.copy(data.size);\n      } else {\n        if (data.size instanceof Array && data.size.length >= 3) {\n          component.size.set(data.size[0], data.size[1], data.size[2]);\n        }\n      }\n    }\n  }, cloneComponent:function(entity, clone) {\n    var data = {size:entity.zone.size};\n    return this.addComponent(clone, data);\n  }, _onBeforeRemove:function(entity, component) {\n    component._onBeforeRemove();\n  }});\n  return {ZoneComponentSystem:ZoneComponentSystem};\n}());\npc.extend(pc, function() {\n  var ZoneComponentData = function() {\n    this.enabled = true;\n  };\n  ZoneComponentData = pc.inherits(ZoneComponentData, pc.ComponentData);\n  return {ZoneComponentData:ZoneComponentData};\n}());\npc.extend(pc, function() {\n  var Entity = function(name, app) {\n    if (name instanceof pc.Application) {\n      app = name;\n    }\n    this._guid = pc.guid.create();\n    this._batchHandle = null;\n    this.c = {};\n    this._app = app;\n    if (!app) {\n      this._app = pc.Application.getApplication();\n      if (!this._app) {\n        console.error(\"Couldn't find current application\");\n      }\n    }\n    pc.events.attach(this);\n  };\n  Entity = pc.inherits(Entity, pc.GraphNode);\n  Entity.prototype.addComponent = function(type, data) {\n    var system = this._app.systems[type];\n    if (system) {\n      if (!this.c[type]) {\n        return system.addComponent(this, data);\n      } else {\n        logERROR(pc.string.format(\"Entity already has {0} Component\", type));\n      }\n    } else {\n      logERROR(pc.string.format(\"System: '{0}' doesn't exist\", type));\n      return null;\n    }\n  };\n  Entity.prototype.removeComponent = function(type) {\n    var system = this._app.systems[type];\n    if (system) {\n      if (this.c[type]) {\n        system.removeComponent(this);\n      } else {\n        logERROR(pc.string.format(\"Entity doesn't have {0} Component\", type));\n      }\n    } else {\n      logERROR(pc.string.format(\"System: '{0}' doesn't exist\", type));\n    }\n  };\n  Entity.prototype.getGuid = function() {\n    return this._guid;\n  };\n  Entity.prototype.setGuid = function(guid) {\n    this._guid = guid;\n  };\n  Entity.prototype._notifyHierarchyStateChanged = function(node, enabled) {\n    var enableFirst = false;\n    if (node === this && this._app._enableList.length === 0) {\n      enableFirst = true;\n    }\n    node._beingEnabled = true;\n    node._onHierarchyStateChanged(enabled);\n    if (node._onHierarchyStatePostChanged) {\n      this._app._enableList.push(node);\n    }\n    var i, len;\n    var c = node._children;\n    for (i = 0, len = c.length; i < len; i++) {\n      if (c[i]._enabled) {\n        this._notifyHierarchyStateChanged(c[i], enabled);\n      }\n    }\n    node._beingEnabled = false;\n    if (enableFirst) {\n      for (i = 0, len = this._app._enableList.length; i < len; i++) {\n        this._app._enableList[i]._onHierarchyStatePostChanged();\n      }\n      this._app._enableList.length = 0;\n    }\n  };\n  Entity.prototype._onHierarchyStateChanged = function(enabled) {\n    pc.Entity._super._onHierarchyStateChanged.call(this, enabled);\n    var component;\n    var components = this.c;\n    for (var type in components) {\n      if (components.hasOwnProperty(type)) {\n        component = components[type];\n        if (component.enabled) {\n          if (enabled) {\n            component.onEnable();\n          } else {\n            component.onDisable();\n          }\n        }\n      }\n    }\n  };\n  Entity.prototype._onHierarchyStatePostChanged = function() {\n    var components = this.c;\n    for (var type in components) {\n      if (components.hasOwnProperty(type)) {\n        components[type].onPostStateChange();\n      }\n    }\n  };\n  Entity.prototype.setRequest = function(request) {\n    this._request = request;\n  };\n  Entity.prototype.getRequest = function() {\n    return this._request;\n  };\n  Entity.prototype.findByGuid = function(guid) {\n    if (this._guid === guid) {\n      return this;\n    }\n    for (var i = 0; i < this._children.length; i++) {\n      if (this._children[i].findByGuid) {\n        var found = this._children[i].findByGuid(guid);\n        if (found !== null) {\n          return found;\n        }\n      }\n    }\n    return null;\n  };\n  Entity.prototype.destroy = function() {\n    var name;\n    for (name in this.c) {\n      this.c[name].enabled = false;\n    }\n    for (name in this.c) {\n      this.c[name].system.removeComponent(this);\n    }\n    if (this._parent) {\n      this._parent.removeChild(this);\n    }\n    var children = this._children;\n    var child = children.shift();\n    while (child) {\n      if (child instanceof pc.Entity) {\n        child.destroy();\n      }\n      child._parent = null;\n      child = children.shift();\n    }\n    this.fire(\"destroy\", this);\n    if (this._callbacks) {\n      this._callbacks = null;\n    }\n    if (this._callbackActive) {\n      this._callbackActive = null;\n    }\n  };\n  Entity.prototype.clone = function() {\n    var type;\n    var c = new pc.Entity(this._app);\n    pc.Entity._super._cloneInternal.call(this, c);\n    for (type in this.c) {\n      var component = this.c[type];\n      component.system.cloneComponent(this, c);\n    }\n    var i;\n    for (i = 0; i < this._children.length; i++) {\n      var child = this._children[i];\n      if (child instanceof pc.Entity) {\n        c.addChild(child.clone());\n      }\n    }\n    return c;\n  };\n  return {Entity:Entity};\n}());\npc.extend(pc, function() {\n  var ResourceLoader = function() {\n    this._handlers = {};\n    this._requests = {};\n    this._cache = {};\n  };\n  ResourceLoader.prototype = {addHandler:function(type, handler) {\n    this._handlers[type] = handler;\n    handler._loader = this;\n  }, removeHandler:function(type) {\n    delete this._handlers[type];\n  }, getHandler:function(type) {\n    return this._handlers[type];\n  }, load:function(url, type, callback, asset) {\n    var handler = this._handlers[type];\n    if (!handler) {\n      var err = \"No handler for asset type: \" + type;\n      callback(err);\n      return;\n    }\n    var key = url + type;\n    if (this._cache[key] !== undefined) {\n      callback(null, this._cache[key]);\n    } else {\n      if (this._requests[key]) {\n        this._requests[key].push(callback);\n      } else {\n        this._requests[key] = [callback];\n        handler.load(url, function(err, data, extra) {\n          if (!this._requests[key]) {\n            return;\n          }\n          var i, len = this._requests[key].length;\n          if (!err) {\n            var resource = handler.open(url, data, asset);\n            this._cache[key] = resource;\n            for (i = 0; i < len; i++) {\n              this._requests[key][i](null, resource, extra);\n            }\n          } else {\n            for (i = 0; i < len; i++) {\n              this._requests[key][i](err);\n            }\n          }\n          delete this._requests[key];\n        }.bind(this), asset);\n      }\n    }\n  }, open:function(type, data) {\n    var handler = this._handlers[type];\n    if (!handler) {\n      console.warn(\"No resource handler found for: \" + type);\n      return data;\n    }\n    return handler.open(null, data);\n  }, patch:function(asset, assets) {\n    var handler = this._handlers[asset.type];\n    if (!handler) {\n      console.warn(\"No resource handler found for: \" + asset.type);\n      return;\n    }\n    if (handler.patch) {\n      handler.patch(asset, assets);\n    }\n  }, clearCache:function(url, type) {\n    delete this._cache[url + type];\n  }, getFromCache:function(url, type) {\n    if (this._cache[url + type]) {\n      return this._cache[url + type];\n    }\n  }, destroy:function() {\n    this._handlers = {};\n    this._requests = {};\n    this._cache = {};\n  }};\n  return {ResourceLoader:ResourceLoader};\n}());\npc.extend(pc, function() {\n  var AnimationHandler = function() {\n  };\n  AnimationHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (err) {\n        callback(pc.string.format(\"Error loading animation resource: {0} [{1}]\", url, err));\n      } else {\n        callback(null, response);\n      }\n    }.bind(this));\n  }, open:function(url, data) {\n    return this[\"_parseAnimationV\" + data.animation.version](data);\n  }, _parseAnimationV3:function(data) {\n    var animData = data.animation;\n    var anim = new pc.Animation;\n    anim.setName(animData.name);\n    anim.duration = animData.duration;\n    for (var i = 0; i < animData.nodes.length; i++) {\n      var node = new pc.Node;\n      var n = animData.nodes[i];\n      node._name = n.name;\n      for (var j = 0; j < n.keys.length; j++) {\n        var k = n.keys[j];\n        var t = k.time;\n        var p = k.pos;\n        var r = k.rot;\n        var s = k.scale;\n        var pos = new pc.Vec3(p[0], p[1], p[2]);\n        var rot = (new pc.Quat).setFromEulerAngles(r[0], r[1], r[2]);\n        var scl = new pc.Vec3(s[0], s[1], s[2]);\n        var key = new pc.Key(t, pos, rot, scl);\n        node._keys.push(key);\n      }\n      anim.addNode(node);\n    }\n    return anim;\n  }, _parseAnimationV4:function(data) {\n    var animData = data.animation;\n    var anim = new pc.Animation;\n    anim.setName(animData.name);\n    anim.duration = animData.duration;\n    for (var i = 0; i < animData.nodes.length; i++) {\n      var node = new pc.Node;\n      var n = animData.nodes[i];\n      node._name = n.name;\n      var defPos = n.defaults.p;\n      var defRot = n.defaults.r;\n      var defScl = n.defaults.s;\n      for (var j = 0; j < n.keys.length; j++) {\n        var k = n.keys[j];\n        var t = k.t;\n        var p = defPos ? defPos : k.p;\n        var r = defRot ? defRot : k.r;\n        var s = defScl ? defScl : k.s;\n        var pos = new pc.Vec3(p[0], p[1], p[2]);\n        var rot = (new pc.Quat).setFromEulerAngles(r[0], r[1], r[2]);\n        var scl = new pc.Vec3(s[0], s[1], s[2]);\n        var key = new pc.Key(t, pos, rot, scl);\n        node._keys.push(key);\n      }\n      anim.addNode(node);\n    }\n    return anim;\n  }};\n  return {AnimationHandler:AnimationHandler};\n}());\npc.extend(pc, function() {\n  var ie = function() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    if (msie > 0) {\n      return parseInt(ua.substring(msie + 5, ua.indexOf(\".\", msie)), 10);\n    }\n    var trident = ua.indexOf(\"Trident/\");\n    if (trident > 0) {\n      var rv = ua.indexOf(\"rv:\");\n      return parseInt(ua.substring(rv + 3, ua.indexOf(\".\", rv)), 10);\n    }\n    return false;\n  }();\n  var AudioHandler = function(manager) {\n    this.manager = manager;\n  };\n  AudioHandler.prototype = {_isSupported:function(url) {\n    var toMIME = {\".ogg\":\"audio/ogg\", \".mp3\":\"audio/mpeg\", \".wav\":\"audio/x-wav\", \".mp4a\":\"audio/mp4\", \".m4a\":\"audio/mp4\", \".mp4\":\"audio/mp4\", \".aac\":\"audio/aac\"};\n    var ext = pc.path.getExtension(url);\n    if (toMIME[ext]) {\n      return true;\n    } else {\n      return false;\n    }\n  }, load:function(url, callback) {\n    var success = function(resource) {\n      callback(null, new pc.Sound(resource));\n    };\n    var error = function(msg) {\n      msg = msg || \"Error loading audio url: \" + url;\n      console.warn(msg);\n      callback(msg);\n    };\n    if (this._createSound) {\n      if (!this._isSupported(url)) {\n        error(pc.string.format(\"Audio format for {0} not supported\", url));\n        return;\n      }\n      this._createSound(url, success, error);\n    } else {\n      error(null);\n    }\n  }, open:function(url, data) {\n    return data;\n  }};\n  if (pc.SoundManager.hasAudioContext()) {\n    AudioHandler.prototype._createSound = function(url, success, error) {\n      var manager = this.manager;\n      if (!manager.context) {\n        error(\"Audio manager has no audio context\");\n        return;\n      }\n      pc.http.get(url, function(err, response) {\n        if (err) {\n          error(err);\n          return;\n        }\n        manager.context.decodeAudioData(response, success, error);\n      });\n    };\n  } else {\n    if (pc.SoundManager.hasAudio()) {\n      AudioHandler.prototype._createSound = function(url, success, error) {\n        var audio = null;\n        try {\n          audio = new Audio;\n        } catch (e) {\n          error(\"No support for Audio element\");\n          return;\n        }\n        if (ie) {\n          document.body.appendChild(audio);\n        }\n        var onReady = function() {\n          audio.removeEventListener(\"canplaythrough\", onReady);\n          if (ie) {\n            document.body.removeChild(audio);\n          }\n          success(audio);\n        };\n        audio.onerror = function() {\n          audio.onerror = null;\n          if (ie) {\n            document.body.removeChild(audio);\n          }\n          error();\n        };\n        audio.addEventListener(\"canplaythrough\", onReady);\n        audio.src = url;\n      };\n    }\n  }\n  return {AudioHandler:AudioHandler};\n}());\npc.extend(pc, function() {\n  var CubemapHandler = function(device, assets, loader) {\n    this._device = device;\n    this._assets = assets;\n    this._loader = loader;\n  };\n  CubemapHandler.prototype = {load:function(url, callback) {\n  }, open:function(url, data) {\n  }, patch:function(assetCubeMap, assets) {\n    var self = this;\n    var loaded = false;\n    if (!assetCubeMap.resources[0]) {\n      assetCubeMap.resources[0] = new pc.Texture(this._device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, cubemap:true, mipmaps:true, fixCubemapSeams:!!assetCubeMap._dds});\n      loaded = true;\n    }\n    if (!assetCubeMap.file) {\n      delete assetCubeMap._dds;\n    } else {\n      if (assetCubeMap.file && !assetCubeMap._dds) {\n        var url = assetCubeMap.getFileUrl();\n        assets._loader.load(url + \"?t=\" + assetCubeMap.file.hash, \"texture\", function(err, texture) {\n          if (!err) {\n            assets._loader.patch({resource:texture, type:\"texture\", data:assetCubeMap.data}, assets);\n            assetCubeMap._dds = texture;\n            self.patch(assetCubeMap, assets);\n          } else {\n            assets.fire(\"error\", err, assetCubeMap);\n            assets.fire(\"error:\" + assetCubeMap.id, err, assetCubeMap);\n            assetCubeMap.fire(\"error\", err, assetCubeMap);\n          }\n        });\n      }\n    }\n    if ((!assetCubeMap.file || !assetCubeMap._dds) && assetCubeMap.resources[1]) {\n      assetCubeMap.resources = [assetCubeMap.resources[0]];\n      loaded = true;\n    } else {\n      if (assetCubeMap._dds && !assetCubeMap.resources[1]) {\n        assetCubeMap.resources = [assetCubeMap.resources[0]];\n        assetCubeMap._dds.fixCubemapSeams = true;\n        assetCubeMap._dds.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n        assetCubeMap._dds.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n        var startIndex = 0;\n        if (this._device.useTexCubeLod) {\n          assetCubeMap.resources.push(assetCubeMap._dds);\n          startIndex = 1;\n        }\n        for (var i = startIndex; i < 6; i++) {\n          var mip = new pc.Texture(this._device, {cubemap:true, fixCubemapSeams:true, mipmaps:true, format:assetCubeMap._dds.format, rgbm:assetCubeMap._dds.rgbm, width:Math.pow(2, 7 - i), height:Math.pow(2, 7 - i)});\n          mip._levels[0] = assetCubeMap._dds._levels[i];\n          mip.upload();\n          assetCubeMap.resources.push(mip);\n        }\n        loaded = true;\n      }\n    }\n    var cubemap = assetCubeMap.resource;\n    if (cubemap.name !== assetCubeMap.name) {\n      cubemap.name = assetCubeMap.name;\n    }\n    var rgbm = !!assetCubeMap.data.rgbm;\n    if (assetCubeMap.data.hasOwnProperty(\"rgbm\") && cubemap.rgbm !== rgbm) {\n      cubemap.rgbm = rgbm;\n    }\n    cubemap.fixCubemapSeams = !!assetCubeMap._dds;\n    if (assetCubeMap.data.hasOwnProperty(\"minFilter\") && cubemap.minFilter !== assetCubeMap.data.minFilter) {\n      cubemap.minFilter = assetCubeMap.data.minFilter;\n    }\n    if (assetCubeMap.data.hasOwnProperty(\"magFilter\") && cubemap.magFilter !== assetCubeMap.data.magFilter) {\n      cubemap.magFilter = assetCubeMap.data.magFilter;\n    }\n    if (assetCubeMap.data.hasOwnProperty(\"anisotropy\") && cubemap.anisotropy !== assetCubeMap.data.anisotropy) {\n      cubemap.anisotropy = assetCubeMap.data.anisotropy;\n    }\n    if (cubemap.addressU !== pc.ADDRESS_CLAMP_TO_EDGE) {\n      cubemap.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n    }\n    if (cubemap.addressV !== pc.ADDRESS_CLAMP_TO_EDGE) {\n      cubemap.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n    }\n    this._patchTextureFaces(assetCubeMap, assets);\n    if (loaded) {\n      assets.fire(\"load\", assetCubeMap);\n      assets.fire(\"load:\" + assetCubeMap.id, assetCubeMap);\n      assetCubeMap.fire(\"load\", assetCubeMap);\n    }\n  }, _patchTexture:function() {\n    this.registry._loader._handlers.cubemap._patchTextureFaces(this, this.registry);\n  }, _patchTextureFaces:function(assetCubeMap, assets) {\n    if (!assetCubeMap.loadFaces && assetCubeMap.file) {\n      return;\n    }\n    var cubemap = assetCubeMap.resource;\n    var sources = [];\n    var count = 0;\n    var levelsUpdated = false;\n    var self = this;\n    if (!assetCubeMap._levelsEvents) {\n      assetCubeMap._levelsEvents = [null, null, null, null, null, null];\n    }\n    assetCubeMap.data.textures.forEach(function(id, index) {\n      var assetAdded = function(asset) {\n        asset.ready(assetReady);\n        assets.load(asset);\n      };\n      var assetReady = function(asset) {\n        count++;\n        sources[index] = asset && asset.resource.getSource() || null;\n        var evtAsset = assetCubeMap._levelsEvents[index];\n        if (evtAsset !== asset) {\n          if (evtAsset) {\n            evtAsset.off(\"load\", self._patchTexture, assetCubeMap);\n          }\n          if (asset) {\n            asset.on(\"load\", self._patchTexture, assetCubeMap);\n          }\n          assetCubeMap._levelsEvents[index] = asset || null;\n        }\n        if (sources[index] !== cubemap._levels[0][index]) {\n          levelsUpdated = true;\n        }\n        if (count === 6 && levelsUpdated) {\n          cubemap.setSource(sources);\n          assets.fire(\"load\", assetCubeMap);\n          assets.fire(\"load:\" + assetCubeMap.id, assetCubeMap);\n          assetCubeMap.fire(\"load\", assetCubeMap);\n        }\n      };\n      var asset = assets.get(id);\n      if (asset) {\n        asset.ready(assetReady);\n        assets.load(asset);\n      } else {\n        if (id) {\n          assets.once(\"load:\" + id, assetReady);\n          assets.once(\"add:\" + id, assetAdded);\n        } else {\n          assetReady(null);\n        }\n      }\n    });\n  }};\n  return {CubemapHandler:CubemapHandler};\n}());\npc.extend(pc, function() {\n  var JsonHandler = function() {\n  };\n  JsonHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading JSON resource: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }};\n  return {JsonHandler:JsonHandler};\n}());\npc.extend(pc, function() {\n  var PARAMETER_TYPES = {ambient:\"vec3\", ambientTnumber:\"boolean\", aoMap:\"texture\", aoVertexColor:\"boolean\", aoVertexColorChannel:\"string\", aoMapChannel:\"string\", aoMapUv:\"number\", aoMapTiling:\"vec2\", aoMapOffset:\"vec2\", occludeSpecular:\"boolean\", diffuse:\"vec3\", diffuseMap:\"texture\", diffuseTint:\"boolean\", diffuseVertexColor:\"boolean\", diffuseVertexColorChannel:\"string\", diffuseMapChannel:\"string\", diffuseMapUv:\"number\", diffuseMapTiling:\"vec2\", diffuseMapOffset:\"vec2\", diffuseMapTnumber:\"boolean\", \n  specular:\"vec3\", specularVertexColor:\"boolean\", specularVertexColorChannel:\"string\", specularMapChannel:\"string\", specularMapUv:\"number\", specularMap:\"texture\", specularTint:\"boolean\", specularMapTiling:\"vec2\", specularMapOffset:\"vec2\", specularMapTnumber:\"boolean\", specularAntialias:\"boolean\", useMetalness:\"boolean\", metalnessMap:\"texture\", metalnessVertexColor:\"boolean\", metalnessVertexColorChannel:\"string\", metalnessMapChannel:\"string\", metalnessMapUv:\"number\", metalnessMapTiling:\"vec2\", metalnessMapOffset:\"vec2\", \n  metalnessMapTnumber:\"boolean\", metalness:\"number\", conserveEnergy:\"boolean\", shininess:\"number\", glossMap:\"texture\", glossVertexColor:\"boolean\", glossVertexColorChannel:\"string\", glossMapChannel:\"string\", glossMapUv:\"number\", glossMapTiling:\"vec2\", glossMapOffset:\"vec2\", fresnelModel:\"number\", fresnelFactor:\"float\", emissive:\"vec3\", emissiveMap:\"texture\", emissiveVertexColor:\"boolean\", emissiveVertexColorChannel:\"string\", emissiveMapChannel:\"string\", emissiveMapUv:\"number\", emissiveMapTiling:\"vec2\", \n  emissiveMapOffset:\"vec2\", emissiveTint:\"boolean\", emissiveIntensity:\"number\", normalMap:\"texture\", normalMapTiling:\"vec2\", normalMapOffset:\"vec2\", normalMapUv:\"number\", bumpMapFactor:\"number\", heightMap:\"texture\", heightMapChannel:\"string\", heightMapUv:\"number\", heightMapTiling:\"vec2\", heightMapOffset:\"vec2\", heightMapFactor:\"number\", alphaTest:\"number\", opacity:\"number\", opacityMap:\"texture\", opacityVertexColor:\"boolean\", opacityVertexColorChannel:\"string\", opacityMapChannel:\"string\", opacityMapUv:\"number\", \n  opacityMapTiling:\"vec2\", opacityMapOffset:\"vec2\", reflectivity:\"number\", refraction:\"number\", refractionIndex:\"number\", sphereMap:\"texture\", cubeMap:\"cubemap\", cubeMapProjection:\"number\", cubeMapProjectionBox:\"boundingbox\", lightMap:\"texture\", lightVertexColor:\"boolean\", lightVertexColorChannel:\"string\", lightMapChannel:\"string\", lightMapUv:\"number\", lightMapTiling:\"vec2\", lightMapOffset:\"vec2\", depthTest:\"boolean\", depthWrite:\"boolean\", depthBias:\"number\", slopeDepthBias:\"number\", cull:\"number\", \n  blendType:\"number\", shadingModel:\"number\"};\n  var placeholders = {};\n  var placeholdersMapping = {aoMap:\"white\", diffuseMap:\"gray\", specularMap:\"gray\", metalnessMap:\"black\", glossMap:\"gray\", emissiveMap:\"gray\", normalMap:\"normal\", heightMap:\"gray\", opacityMap:\"gray\", sphereMap:\"gray\", lightMap:\"white\"};\n  var onCubemapAssetLoad = function(asset, attribute, newValue, oldValue) {\n    var props = [\"cubeMap\", \"prefilteredCubeMap128\", \"prefilteredCubeMap64\", \"prefilteredCubeMap32\", \"prefilteredCubeMap16\", \"prefilteredCubeMap8\", \"prefilteredCubeMap4\"];\n    for (var i = 0; i < props.length; i++) {\n      if (this[props[i]] !== asset.resources[i]) {\n        this[props[i]] = asset.resources[i];\n      }\n    }\n    this.update();\n  };\n  var MaterialHandler = function(app) {\n    this._assets = app.assets;\n    this._device = app.graphicsDevice;\n    this._createPlaceholders();\n  };\n  MaterialHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        if (callback) {\n          callback(null, response);\n        }\n      } else {\n        if (callback) {\n          callback(pc.string.format(\"Error loading material: {0} [{1}]\", url, err));\n        }\n      }\n    });\n  }, open:function(url, data) {\n    var material = new pc.StandardMaterial;\n    if (!data.parameters) {\n      this._createParameters(data);\n    }\n    material.init(data);\n    material._data = data;\n    return material;\n  }, _createPlaceholders:function() {\n    var textures = {white:[255, 255, 255, 255], gray:[128, 128, 128, 255], black:[0, 0, 0, 255], normal:[128, 128, 255, 255]};\n    for (var key in textures) {\n      if (!textures.hasOwnProperty(key)) {\n        continue;\n      }\n      var texture = placeholders[key] = new pc.Texture(this._device, {width:2, height:2, format:pc.PIXELFORMAT_R8_G8_B8_A8});\n      var pixels = texture.lock();\n      for (var i = 0; i < 4; i++) {\n        for (var c = 0; c < 4; c++) {\n          pixels[i * 4 + c] = textures[key][c];\n        }\n      }\n      texture.unlock();\n    }\n  }, _createParameters:function(data) {\n    var parameters = [];\n    if (!data.shadingModel) {\n      data.shadingModel = data.shader === \"blinn\" ? pc.SPECULAR_BLINN : pc.SPECULAR_PHONG;\n    }\n    var shader = data.shader;\n    delete data.shader;\n    for (var key in data) {\n      if (!data.hasOwnProperty(key)) {\n        continue;\n      }\n      parameters.push({name:key, type:PARAMETER_TYPES[key], data:data[key]});\n    }\n    data.shader = shader;\n    data.parameters = parameters;\n  }, patch:function(asset, assets) {\n    if (asset.data.shader === undefined) {\n      asset.data = asset.resource._data;\n      delete asset.resource._data;\n    }\n    this._updateStandardMaterial(asset, asset.data, assets);\n    asset.off(\"change\", this._onAssetChange, this);\n    asset.on(\"change\", this._onAssetChange, this);\n    asset.on(\"unload\", this._onAssetUnload, this);\n  }, _onAssetChange:function(asset, attribute, value) {\n    if (attribute === \"data\") {\n      this._updateStandardMaterial(asset, value, this._assets);\n    }\n  }, _onAssetUnload:function(asset) {\n    delete asset.data.parameters;\n    delete asset.data.chunks;\n    delete asset.data.name;\n  }, _updateStandardMaterial:function(asset, data, assets) {\n    var material = asset.resource;\n    var dir;\n    if (asset.file) {\n      dir = pc.path.getDirectory(asset.getFileUrl());\n    }\n    data.name = asset.name;\n    if (!data.parameters) {\n      this._createParameters(data);\n    }\n    var pathMapping = data.mapping_format === \"path\";\n    data.chunks = asset.resource.chunks;\n    data.parameters.forEach(function(param, i) {\n      var id;\n      if (param.type === \"texture\") {\n        if (!material._assetHandlers) {\n          material._assetHandlers = {};\n        }\n        var handler = material._assetHandlers[param.name];\n        if (param.data && !(param.data instanceof pc.Texture)) {\n          if (pathMapping) {\n            asset = assets.getByUrl(pc.path.join(dir, param.data));\n          } else {\n            id = param.data;\n            asset = assets.get(param.data);\n          }\n          if (handler) {\n            assets.off(\"load:\" + handler.id, handler.bind);\n            assets.off(\"add:\" + handler.id, handler.add);\n            assets.off(\"remove:\" + handler.id, handler.remove);\n            if (handler.url) {\n              assets.off(\"add:url:\" + handler.url, handler.add);\n              assets.off(\"remove:url:\" + handler.url, handler.remove);\n            }\n            material._assetHandlers[param.name] = null;\n          }\n          handler = material._assetHandlers[param.name] = {id:id, url:pathMapping ? pc.path.join(dir, param.data) : \"\", bind:function(asset) {\n            data.parameters[i].data = asset.resource;\n            material[data.parameters[i].name] = asset.resource;\n            material.update();\n          }, add:function(asset) {\n            assets.load(asset);\n          }, remove:function(asset) {\n            if (material[data.parameters[i].name] === asset.resource) {\n              data.parameters[i].data = null;\n              material[data.parameters[i].name] = null;\n              material.update();\n            }\n          }};\n          if (id) {\n            assets.on(\"load:\" + id, handler.bind);\n            assets.on(\"remove:\" + id, handler.remove);\n          } else {\n            if (pathMapping) {\n              assets.on(\"load:url:\" + pc.path.join(dir, param.data), handler.bind);\n              assets.on(\"remove:url:\" + pc.path.join(dir, param.data), handler.remove);\n            }\n          }\n          if (asset) {\n            if (asset.resource) {\n              handler.bind(asset);\n            } else {\n              if (placeholdersMapping[data.parameters[i].name]) {\n                var texture = placeholders[placeholdersMapping[data.parameters[i].name]];\n                if (texture) {\n                  data.parameters[i].data = texture;\n                  material[data.parameters[i].name] = texture;\n                }\n              }\n            }\n            assets.load(asset);\n          } else {\n            if (id) {\n              assets.once(\"add:\" + id, handler.add);\n            } else {\n              if (pathMapping) {\n                assets.once(\"add:url:\" + handler.url, handler.add);\n              }\n            }\n          }\n        } else {\n          if (handler && !param.data) {\n            assets.off(\"load:\" + handler.id, handler.bind);\n            assets.off(\"add:\" + handler.id, handler.add);\n            assets.off(\"remove:\" + handler.id, handler.remove);\n            if (handler.url) {\n              assets.off(\"add:url:\" + handler.url, handler.add);\n              assets.off(\"remove:url:\" + handler.url, handler.remove);\n            }\n            material._assetHandlers[param.name] = null;\n          }\n        }\n      } else {\n        if (param.type === \"cubemap\" && param.data && !(param.data instanceof pc.Texture)) {\n          if (pathMapping) {\n            asset = assets.getByUrl(pc.path.join(dir, param.data));\n          } else {\n            id = param.data;\n            asset = assets.get(param.data);\n          }\n          var onAdd = function(asset) {\n            if (data.shadingModel === pc.SPECULAR_PHONG) {\n              asset.loadFaces = true;\n            }\n            asset.ready(onReady);\n            assets.load(asset);\n          };\n          var onReady = function(asset) {\n            param.data = asset.resource;\n            if (asset.resources.length > 1) {\n              data.parameters.push({name:\"prefilteredCubeMap128\", data:asset.resources[1]});\n              data.parameters.push({name:\"prefilteredCubeMap64\", data:asset.resources[2]});\n              data.parameters.push({name:\"prefilteredCubeMap32\", data:asset.resources[3]});\n              data.parameters.push({name:\"prefilteredCubeMap16\", data:asset.resources[4]});\n              data.parameters.push({name:\"prefilteredCubeMap8\", data:asset.resources[5]});\n              data.parameters.push({name:\"prefilteredCubeMap4\", data:asset.resources[6]});\n            }\n            material.init(data);\n            asset.off(\"load\", onCubemapAssetLoad, material);\n            asset.on(\"load\", onCubemapAssetLoad, material);\n          };\n          if (asset) {\n            onAdd(asset);\n          } else {\n            if (id) {\n              assets.once(\"add:\" + id, onAdd);\n            } else {\n              if (pathMapping) {\n                assets.once(\"add:url:\" + pc.path.join(dir, param.data), function(asset) {\n                  asset.ready(function(asset) {\n                    data.parameters[i].data = asset.resource;\n                    material.init(data);\n                    asset.off(\"load\", onCubemapAssetLoad, material);\n                    asset.on(\"load\", onCubemapAssetLoad, material);\n                  });\n                  assets.load(asset);\n                });\n              }\n            }\n          }\n        }\n      }\n    });\n    material.init(data);\n  }};\n  return {MaterialHandler:MaterialHandler, getMaterialParamType:function(name) {\n    return PARAMETER_TYPES[name];\n  }};\n}());\npc.extend(pc, function() {\n  var ModelHandler = function(device) {\n    this._device = device;\n    this._parsers = [];\n    this.addParser(new pc.JsonModelParser(this._device), function(url, data) {\n      return pc.path.getExtension(url) === \".json\";\n    });\n  };\n  ModelHandler.DEFAULT_MATERIAL = pc.Scene.defaultMaterial;\n  ModelHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!callback) {\n        return;\n      }\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading model: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    for (var i = 0; i < this._parsers.length; i++) {\n      var p = this._parsers[i];\n      if (p.decider(url, data)) {\n        return p.parser.parse(data);\n      }\n    }\n    logWARNING(pc.string.format(\"No model parser found for: {0}\", url));\n    return null;\n  }, patch:function(asset, assets) {\n    if (!asset.resource) {\n      return;\n    }\n    var data = asset.data;\n    asset.resource.meshInstances.forEach(function(meshInstance, i) {\n      if (data.mapping) {\n        var handleMaterial = function(asset) {\n          if (asset.resource) {\n            meshInstance.material = asset.resource;\n          } else {\n            asset.once(\"load\", handleMaterial);\n            assets.load(asset);\n          }\n          asset.once(\"remove\", function(asset) {\n            if (meshInstance.material === asset.resource) {\n              meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;\n            }\n          });\n        };\n        if (!data.mapping[i]) {\n          meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;\n          return;\n        }\n        var id = data.mapping[i].material;\n        var url = data.mapping[i].path;\n        var material;\n        if (id !== undefined) {\n          if (!id) {\n            meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;\n          } else {\n            material = assets.get(id);\n            if (material) {\n              handleMaterial(material);\n            } else {\n              assets.once(\"add:\" + id, handleMaterial);\n            }\n          }\n        } else {\n          if (url) {\n            var fileUrl = asset.getFileUrl();\n            var dirUrl = pc.path.getDirectory(fileUrl);\n            var path = pc.path.join(dirUrl, data.mapping[i].path);\n            material = assets.getByUrl(path);\n            if (material) {\n              handleMaterial(material);\n            } else {\n              assets.once(\"add:url:\" + path, handleMaterial);\n            }\n          }\n        }\n      }\n    });\n  }, addParser:function(parser, decider) {\n    this._parsers.push({parser:parser, decider:decider});\n  }};\n  return {ModelHandler:ModelHandler};\n}());\npc.extend(pc, function() {\n  var ScriptHandler = function(app) {\n    this._app = app;\n    this._scripts = {};\n    this._cache = {};\n  };\n  ScriptHandler._types = [];\n  ScriptHandler._push = function(Type) {\n    if (pc.script.legacy && ScriptHandler._types.length > 0) {\n      console.assert(\"Script Ordering Error. Contact support@playcanvas.com\");\n    } else {\n      ScriptHandler._types.push(Type);\n    }\n  };\n  ScriptHandler.prototype = {load:function(url, callback) {\n    var self = this;\n    pc.script.app = this._app;\n    this._loadScript(url, function(err, url, extra) {\n      if (!err) {\n        if (pc.script.legacy) {\n          var Type = null;\n          if (ScriptHandler._types.length) {\n            Type = ScriptHandler._types.pop();\n          }\n          if (Type) {\n            this._scripts[url] = Type;\n          } else {\n            Type = null;\n          }\n          callback(null, Type, extra);\n        } else {\n          var obj = {};\n          for (var i = 0; i < ScriptHandler._types.length; i++) {\n            obj[ScriptHandler._types[i].name] = ScriptHandler._types[i];\n          }\n          ScriptHandler._types.length = 0;\n          callback(null, obj, extra);\n          delete self._loader._cache[url + \"script\"];\n        }\n      } else {\n        callback(err);\n      }\n    }.bind(this));\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }, _loadScript:function(url, callback) {\n    var head = document.head;\n    var element = document.createElement(\"script\");\n    this._cache[url] = element;\n    element.async = false;\n    element.addEventListener(\"error\", function(e) {\n      callback(pc.string.format(\"Script: {0} failed to load\", e.target.src));\n    }, false);\n    var done = false;\n    element.onload = element.onreadystatechange = function() {\n      if (!done && (!this.readyState || (this.readyState == \"loaded\" || this.readyState == \"complete\"))) {\n        done = true;\n        callback(null, url, element);\n      }\n    };\n    element.src = url;\n    head.appendChild(element);\n  }};\n  return {ScriptHandler:ScriptHandler};\n}());\npc.extend(pc, function() {\n  var TextHandler = function() {\n  };\n  TextHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading text resource: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }};\n  return {TextHandler:TextHandler};\n}());\npc.extend(pc, function() {\n  var BinaryHandler = function() {\n  };\n  BinaryHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, {responseType:pc.Http.ResponseType.ARRAY_BUFFER}, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading binary resource: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }};\n  return {BinaryHandler:BinaryHandler};\n}());\npc.extend(pc, function() {\n  var JSON_ADDRESS_MODE = {\"repeat\":pc.ADDRESS_REPEAT, \"clamp\":pc.ADDRESS_CLAMP_TO_EDGE, \"mirror\":pc.ADDRESS_MIRRORED_REPEAT};\n  var JSON_FILTER_MODE = {\"nearest\":pc.FILTER_NEAREST, \"linear\":pc.FILTER_LINEAR, \"nearest_mip_nearest\":pc.FILTER_NEAREST_MIPMAP_NEAREST, \"linear_mip_nearest\":pc.FILTER_LINEAR_MIPMAP_NEAREST, \"nearest_mip_linear\":pc.FILTER_NEAREST_MIPMAP_LINEAR, \"linear_mip_linear\":pc.FILTER_LINEAR_MIPMAP_LINEAR};\n  function arrayBufferCopy(src, dst, dstByteOffset, numBytes) {\n    var i;\n    var dst32Offset = dstByteOffset / 4;\n    var tail = numBytes % 4;\n    var src32 = new Uint32Array(src.buffer, 0, (numBytes - tail) / 4);\n    var dst32 = new Uint32Array(dst.buffer);\n    for (i = 0; i < src32.length; i++) {\n      dst32[dst32Offset + i] = src32[i];\n    }\n    for (i = numBytes - tail; i < numBytes; i++) {\n      dst[dstByteOffset + i] = src[i];\n    }\n  }\n  var TextureHandler = function(device, assets, loader) {\n    this._device = device;\n    this._assets = assets;\n    this._loader = loader;\n    this.crossOrigin = undefined;\n    if (assets.prefix) {\n      this.crossOrigin = \"anonymous\";\n    }\n  };\n  TextureHandler.prototype = {load:function(url, callback) {\n    var self = this;\n    var image;\n    var urlWithoutParams = url.indexOf(\"?\") >= 0 ? url.split(\"?\")[0] : url;\n    var ext = pc.path.getExtension(urlWithoutParams).toLowerCase();\n    if (ext === \".dds\" || ext === \".crn\") {\n      var options = {cache:true, responseType:\"arraybuffer\"};\n      pc.http.get(url, options, function(err, response) {\n        if (!err) {\n          callback(null, response);\n        } else {\n          callback(err);\n        }\n      });\n    } else {\n      if (ext === \".jpg\" || ext === \".jpeg\" || ext === \".gif\" || ext === \".png\") {\n        image = new Image;\n        if (self.crossOrigin !== undefined && pc.ABSOLUTE_URL.test(url)) {\n          image.crossOrigin = self.crossOrigin;\n        }\n        image.onload = function() {\n          callback(null, image);\n        };\n        image.onerror = function(event) {\n          callback(pc.string.format(\"Error loading Texture from: '{0}'\", url));\n        };\n        image.src = url;\n      } else {\n        var blobStart = urlWithoutParams.indexOf(\"blob:\");\n        if (blobStart >= 0) {\n          urlWithoutParams = urlWithoutParams.substr(blobStart);\n          url = urlWithoutParams;\n          image = new Image;\n          image.onload = function() {\n            callback(null, image);\n          };\n          image.onerror = function(event) {\n            callback(pc.string.format(\"Error loading Texture from: '{0}'\", url));\n          };\n          image.src = url;\n        } else {\n          setTimeout(function() {\n            callback(pc.string.format(\"Error loading Texture: format not supported: '{0}'\", ext));\n          }, 0);\n        }\n      }\n    }\n  }, open:function(url, data) {\n    if (!url) {\n      return;\n    }\n    var texture;\n    var ext = pc.path.getExtension(url).toLowerCase();\n    var format = null;\n    if (data instanceof Image || data instanceof HTMLImageElement) {\n      var img = data;\n      format = ext === \".jpg\" || ext === \".jpeg\" ? pc.PIXELFORMAT_R8_G8_B8 : pc.PIXELFORMAT_R8_G8_B8_A8;\n      texture = new pc.Texture(this._device, {width:img.width, height:img.height, format:format});\n      texture.setSource(img);\n    } else {\n      if (data instanceof ArrayBuffer) {\n        if (ext === \".crn\") {\n          var srcSize = data.byteLength;\n          var bytes = new Uint8Array(data);\n          var src = Module._malloc(srcSize);\n          arrayBufferCopy(bytes, Module.HEAPU8, src, srcSize);\n          var dst = Module._crn_decompress_get_data(src, srcSize);\n          var dstSize = Module._crn_decompress_get_size(src, srcSize);\n          data = Module.HEAPU8.buffer.slice(dst, dst + dstSize);\n        }\n        var header = new Uint32Array(data, 0, 128 / 4);\n        var width = header[4];\n        var height = header[3];\n        var mips = Math.max(header[7], 1);\n        var isFourCc = header[20] === 4;\n        var fcc = header[21];\n        var bpp = header[22];\n        var isCubemap = header[28] === 65024;\n        var FCC_DXT1 = 827611204;\n        var FCC_DXT5 = 894720068;\n        var FCC_FP32 = 116;\n        var FCC_ETC1 = 826496069;\n        var FCC_PVRTC_2BPP_RGB_1 = 825438800;\n        var FCC_PVRTC_2BPP_RGBA_1 = 825504336;\n        var FCC_PVRTC_4BPP_RGB_1 = 825439312;\n        var FCC_PVRTC_4BPP_RGBA_1 = 825504848;\n        var compressed = false;\n        var floating = false;\n        var etc1 = false;\n        var pvrtc2 = false;\n        var pvrtc4 = false;\n        if (isFourCc) {\n          if (fcc === FCC_DXT1) {\n            format = pc.PIXELFORMAT_DXT1;\n            compressed = true;\n          } else {\n            if (fcc === FCC_DXT5) {\n              format = pc.PIXELFORMAT_DXT5;\n              compressed = true;\n            } else {\n              if (fcc === FCC_FP32) {\n                format = pc.PIXELFORMAT_RGBA32F;\n                floating = true;\n              } else {\n                if (fcc === FCC_ETC1) {\n                  format = pc.PIXELFORMAT_ETC1;\n                  compressed = true;\n                  etc1 = true;\n                } else {\n                  if (fcc === FCC_PVRTC_2BPP_RGB_1 || fcc === FCC_PVRTC_2BPP_RGBA_1) {\n                    format = fcc === FCC_PVRTC_2BPP_RGB_1 ? pc.PIXELFORMAT_PVRTC_2BPP_RGB_1 : pc.PIXELFORMAT_PVRTC_2BPP_RGBA_1;\n                    compressed = true;\n                    pvrtc2 = true;\n                  } else {\n                    if (fcc === FCC_PVRTC_4BPP_RGB_1 || fcc === FCC_PVRTC_4BPP_RGBA_1) {\n                      format = fcc === FCC_PVRTC_4BPP_RGB_1 ? pc.PIXELFORMAT_PVRTC_4BPP_RGB_1 : pc.PIXELFORMAT_PVRTC_4BPP_RGBA_1;\n                      compressed = true;\n                      pvrtc4 = true;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          if (bpp === 32) {\n            format = pc.PIXELFORMAT_R8_G8_B8_A8;\n          }\n        }\n        if (!format) {\n          texture = new pc.Texture(this._device, {width:4, height:4, format:pc.PIXELFORMAT_R8_G8_B8});\n          return texture;\n        }\n        var texOptions = {width:width, height:height, format:format, cubemap:isCubemap};\n        texture = new pc.Texture(this._device, texOptions);\n        if (isCubemap) {\n          texture.addressU = pc.ADDRESS_CLAMP_TO_EDGE;\n          texture.addressV = pc.ADDRESS_CLAMP_TO_EDGE;\n        }\n        var offset = 128;\n        var faces = isCubemap ? 6 : 1;\n        var mipSize;\n        var DXT_BLOCK_WIDTH = 4;\n        var DXT_BLOCK_HEIGHT = 4;\n        var blockSize = fcc === FCC_DXT1 ? 8 : 16;\n        var numBlocksAcross, numBlocksDown, numBlocks;\n        for (var face = 0; face < faces; face++) {\n          var mipWidth = width;\n          var mipHeight = height;\n          for (var i = 0; i < mips; i++) {\n            if (compressed) {\n              if (etc1) {\n                mipSize = Math.floor((mipWidth + 3) / 4) * Math.floor((mipHeight + 3) / 4) * 8;\n              } else {\n                if (pvrtc2) {\n                  mipSize = Math.max(mipWidth, 16) * Math.max(mipHeight, 8) / 4;\n                } else {\n                  if (pvrtc4) {\n                    mipSize = Math.max(mipWidth, 8) * Math.max(mipHeight, 8) / 2;\n                  } else {\n                    numBlocksAcross = Math.floor((mipWidth + DXT_BLOCK_WIDTH - 1) / DXT_BLOCK_WIDTH);\n                    numBlocksDown = Math.floor((mipHeight + DXT_BLOCK_HEIGHT - 1) / DXT_BLOCK_HEIGHT);\n                    numBlocks = numBlocksAcross * numBlocksDown;\n                    mipSize = numBlocks * blockSize;\n                  }\n                }\n              }\n            } else {\n              mipSize = mipWidth * mipHeight * 4;\n            }\n            var mipBuff = floating ? new Float32Array(data, offset, mipSize) : new Uint8Array(data, offset, mipSize);\n            if (!isCubemap) {\n              texture._levels[i] = mipBuff;\n            } else {\n              if (!texture._levels[i]) {\n                texture._levels[i] = [];\n              }\n              texture._levels[i][face] = mipBuff;\n            }\n            offset += floating ? mipSize * 4 : mipSize;\n            mipWidth = Math.max(mipWidth * 0.5, 1);\n            mipHeight = Math.max(mipHeight * 0.5, 1);\n          }\n        }\n        texture.upload();\n      }\n    }\n    return texture;\n  }, patch:function(asset, assets) {\n    var texture = asset.resource;\n    if (!texture) {\n      return;\n    }\n    if (texture.name !== asset.name) {\n      texture.name = asset.name;\n    }\n    if (asset.data.hasOwnProperty(\"minfilter\") && texture.minFilter !== JSON_FILTER_MODE[asset.data.minfilter]) {\n      texture.minFilter = JSON_FILTER_MODE[asset.data.minfilter];\n    }\n    if (asset.data.hasOwnProperty(\"magfilter\") && texture.magFilter !== JSON_FILTER_MODE[asset.data.magfilter]) {\n      texture.magFilter = JSON_FILTER_MODE[asset.data.magfilter];\n    }\n    if (asset.data.hasOwnProperty(\"addressu\") && texture.addressU !== JSON_ADDRESS_MODE[asset.data.addressu]) {\n      texture.addressU = JSON_ADDRESS_MODE[asset.data.addressu];\n    }\n    if (asset.data.hasOwnProperty(\"addressv\") && texture.addressV !== JSON_ADDRESS_MODE[asset.data.addressv]) {\n      texture.addressV = JSON_ADDRESS_MODE[asset.data.addressv];\n    }\n    if (asset.data.hasOwnProperty(\"mipmaps\") && texture.mipmaps !== asset.data.mipmaps) {\n      texture.mipmaps = asset.data.mipmaps;\n    }\n    if (asset.data.hasOwnProperty(\"anisotropy\") && texture.anisotropy !== asset.data.anisotropy) {\n      texture.anisotropy = asset.data.anisotropy;\n    }\n    var rgbm = !!asset.data.rgbm;\n    if (asset.data.hasOwnProperty(\"rgbm\") && texture.rgbm !== rgbm) {\n      texture.rgbm = rgbm;\n    }\n  }};\n  return {TextureHandler:TextureHandler};\n}());\npc.extend(pc, function() {\n  var HtmlHandler = function() {\n  };\n  HtmlHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading html resource: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }};\n  return {HtmlHandler:HtmlHandler};\n}());\npc.extend(pc, function() {\n  var CssHandler = function() {\n  };\n  CssHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading css resource: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }};\n  var createStyle = function(cssString) {\n    var result = document.createElement(\"style\");\n    result.type = \"text/css\";\n    if (result.styleSheet) {\n      result.styleSheet.cssText = cssString;\n    } else {\n      result.appendChild(document.createTextNode(cssString));\n    }\n    return result;\n  };\n  return {CssHandler:CssHandler, createStyle:createStyle};\n}());\npc.extend(pc, function() {\n  var ShaderHandler = function() {\n  };\n  ShaderHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(pc.string.format(\"Error loading shader resource: {0} [{1}]\", url, err));\n      }\n    });\n  }, open:function(url, data) {\n    return data;\n  }, patch:function(asset, assets) {\n  }};\n  return {ShaderHandler:ShaderHandler};\n}());\npc.extend(pc, function() {\n  var SceneHandler = function(app) {\n    this._app = app;\n  };\n  SceneHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(\"Error requesting scene: \" + url);\n      }\n    });\n  }, open:function(url, data) {\n    this._app.systems.script.preloading = true;\n    var parser = new pc.SceneParser(this._app);\n    var parent = parser.parse(data);\n    var scene = this._app.scene;\n    scene.root = parent;\n    this._app.applySceneSettings(data.settings);\n    this._app.systems.script.preloading = false;\n    return scene;\n  }, patch:function(asset, assets) {\n  }};\n  return {SceneHandler:SceneHandler};\n}());\npc.extend(pc, function() {\n  var HierarchyHandler = function(app) {\n    this._app = app;\n  };\n  HierarchyHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(\"Error requesting scene: \" + url);\n      }\n    });\n  }, open:function(url, data) {\n    this._app.systems.script.preloading = true;\n    var parser = new pc.SceneParser(this._app);\n    var parent = parser.parse(data);\n    this._app.systems.script.preloading = false;\n    return parent;\n  }};\n  return {HierarchyHandler:HierarchyHandler};\n}());\npc.extend(pc, function() {\n  var SceneSettingsHandler = function(app) {\n    this._app = app;\n  };\n  SceneSettingsHandler.prototype = {load:function(url, callback) {\n    pc.http.get(url, function(err, response) {\n      if (!err) {\n        callback(null, response);\n      } else {\n        callback(\"Error requesting scene: \" + url);\n      }\n    });\n  }, open:function(url, data) {\n    return data.settings;\n  }};\n  return {SceneSettingsHandler:SceneSettingsHandler};\n}());\npc.extend(pc, function() {\n  var FolderHandler = function() {\n  };\n  FolderHandler.prototype = {load:function(url, callback) {\n    callback(null, null);\n  }, open:function(url, data) {\n    return data;\n  }};\n  return {FolderHandler:FolderHandler};\n}());\npc.extend(pc, function() {\n  var FontHandler = function(loader) {\n    this._loader = loader;\n  };\n  FontHandler.prototype = {load:function(url, callback, asset) {\n    var self = this;\n    if (pc.path.getExtension(url) === \".json\") {\n      pc.http.get(url, function(err, response) {\n        if (!err) {\n          self._loadTextures(url.replace(\".json\", \".png\"), response, function(err, textures) {\n            if (err) {\n              return callback(err);\n            }\n            callback(null, {data:response, textures:textures});\n          });\n        } else {\n          callback(pc.string.format(\"Error loading font resource: {0} [{1}]\", url, err));\n        }\n      });\n    } else {\n      this._loadTextures(url, asset && asset.data, callback);\n    }\n  }, _loadTextures:function(url, data, callback) {\n    var numTextures = 1;\n    var numLoaded = 0;\n    var error = null;\n    if (data && data.version >= 2) {\n      numTextures = data.info.maps.length;\n    }\n    var textures = new Array(numTextures);\n    var loader = this._loader;\n    var loadTexture = function(index) {\n      var onLoaded = function(err, texture) {\n        if (error) {\n          return;\n        }\n        if (err) {\n          error = err;\n          return callback(err);\n        }\n        texture.upload();\n        textures[index] = texture;\n        numLoaded++;\n        if (numLoaded === numTextures) {\n          callback(null, textures);\n        }\n      };\n      if (index === 0) {\n        loader.load(url, \"texture\", onLoaded);\n      } else {\n        loader.load(url.replace(\".png\", index + \".png\"), \"texture\", onLoaded);\n      }\n    };\n    for (var i = 0; i < numTextures; i++) {\n      loadTexture(i);\n    }\n  }, open:function(url, data, asset) {\n    var font;\n    if (data.textures) {\n      font = new pc.Font(data.textures, data.data);\n    } else {\n      font = new pc.Font(data, null);\n    }\n    return font;\n  }, patch:function(asset, assets) {\n    var font = asset.resource;\n    if (!font.data && asset.data) {\n      font.data = asset.data;\n    } else {\n      if (!asset.data && font.data) {\n        asset.data = font.data;\n      }\n    }\n  }};\n  return {FontHandler:FontHandler};\n}());\npc.extend(pc, function() {\n  var JSON_ADDRESS_MODE = {\"repeat\":pc.ADDRESS_REPEAT, \"clamp\":pc.ADDRESS_CLAMP_TO_EDGE, \"mirror\":pc.ADDRESS_MIRRORED_REPEAT};\n  var JSON_FILTER_MODE = {\"nearest\":pc.FILTER_NEAREST, \"linear\":pc.FILTER_LINEAR, \"nearest_mip_nearest\":pc.FILTER_NEAREST_MIPMAP_NEAREST, \"linear_mip_nearest\":pc.FILTER_LINEAR_MIPMAP_NEAREST, \"nearest_mip_linear\":pc.FILTER_NEAREST_MIPMAP_LINEAR, \"linear_mip_linear\":pc.FILTER_LINEAR_MIPMAP_LINEAR};\n  var regexFrame = /^data\\.frames\\.(\\d+)$/;\n  var TextureAtlasHandler = function(loader) {\n    this._loader = loader;\n  };\n  TextureAtlasHandler.prototype = {load:function(url, callback) {\n    var self = this;\n    var handler = this._loader.getHandler(\"texture\");\n    if (pc.path.getExtension(url) === \".json\") {\n      pc.http.get(url, function(err, response) {\n        if (!err) {\n          var textureUrl = url.replace(\".json\", \".png\");\n          self._loader.load(textureUrl, \"texture\", function(err, texture) {\n            if (err) {\n              callback(err);\n            } else {\n              callback(null, {data:response, texture:texture});\n            }\n          });\n        } else {\n          callback(err);\n        }\n      });\n    } else {\n      return handler.load(url, callback);\n    }\n  }, open:function(url, data) {\n    var resource = new pc.TextureAtlas;\n    if (data.texture && data.data) {\n      resource.texture = data.texture;\n      resource.__data = data.data;\n    } else {\n      var handler = this._loader.getHandler(\"texture\");\n      var texture = handler.open(url, data);\n      if (!texture) {\n        return null;\n      }\n      resource.texture = texture;\n    }\n    return resource;\n  }, patch:function(asset, assets) {\n    if (asset.resource.__data) {\n      if (asset.resource.__data.minfilter !== undefined) {\n        asset.data.minfilter = asset.resource.__data.minfilter;\n      }\n      if (asset.resource.__data.magfilter !== undefined) {\n        asset.data.magfilter = asset.resource.__data.magfilter;\n      }\n      if (asset.resource.__data.addressu !== undefined) {\n        asset.data.addressu = asset.resource.__data.addressu;\n      }\n      if (asset.resource.__data.addressv !== undefined) {\n        asset.data.addressv = asset.resource.__data.addressv;\n      }\n      if (asset.resource.__data.mipmaps !== undefined) {\n        asset.data.mipmaps = asset.resource.__data.mipmaps;\n      }\n      if (asset.resource.__data.anisotropy !== undefined) {\n        asset.data.anisotropy = asset.resource.__data.anisotropy;\n      }\n      if (asset.resource.__data.rgbm !== undefined) {\n        asset.data.rgbm = !!asset.resource.__data.rgbm;\n      }\n      asset.data.frames = asset.resource.__data.frames;\n      delete asset.resource.__data;\n    }\n    var texture = asset.resource.texture;\n    if (texture) {\n      texture.name = asset.name;\n      if (asset.data.hasOwnProperty(\"minfilter\") && texture.minFilter !== JSON_FILTER_MODE[asset.data.minfilter]) {\n        texture.minFilter = JSON_FILTER_MODE[asset.data.minfilter];\n      }\n      if (asset.data.hasOwnProperty(\"magfilter\") && texture.magFilter !== JSON_FILTER_MODE[asset.data.magfilter]) {\n        texture.magFilter = JSON_FILTER_MODE[asset.data.magfilter];\n      }\n      if (asset.data.hasOwnProperty(\"addressu\") && texture.addressU !== JSON_ADDRESS_MODE[asset.data.addressu]) {\n        texture.addressU = JSON_ADDRESS_MODE[asset.data.addressu];\n      }\n      if (asset.data.hasOwnProperty(\"addressv\") && texture.addressV !== JSON_ADDRESS_MODE[asset.data.addressv]) {\n        texture.addressV = JSON_ADDRESS_MODE[asset.data.addressv];\n      }\n      if (asset.data.hasOwnProperty(\"mipmaps\") && texture.mipmaps !== asset.data.mipmaps) {\n        texture.mipmaps = asset.data.mipmaps;\n      }\n      if (asset.data.hasOwnProperty(\"anisotropy\") && texture.anisotropy !== asset.data.anisotropy) {\n        texture.anisotropy = asset.data.anisotropy;\n      }\n      var rgbm = !!asset.data.rgbm;\n      if (asset.data.hasOwnProperty(\"rgbm\") && texture.rgbm !== rgbm) {\n        texture.rgbm = rgbm;\n      }\n    }\n    asset.resource.texture = texture;\n    var frames = {};\n    for (var key in asset.data.frames) {\n      var frame = asset.data.frames[key];\n      frames[key] = {rect:new pc.Vec4(frame.rect), pivot:new pc.Vec2(frame.pivot), border:new pc.Vec4(frame.border)};\n    }\n    asset.resource.frames = frames;\n    asset.off(\"change\", this._onAssetChange, this);\n    asset.on(\"change\", this._onAssetChange, this);\n  }, _onAssetChange:function(asset, attribute, value) {\n    if (attribute === \"data\" || attribute === \"data.frames\") {\n      var frames = {};\n      for (var key in value.frames) {\n        var frame = value.frames[key];\n        frames[key] = {rect:new pc.Vec4(frame.rect), pivot:new pc.Vec2(frame.pivot), border:new pc.Vec4(frame.border)};\n      }\n      asset.resource.frames = frames;\n    } else {\n      var match = attribute.match(regexFrame);\n      if (match) {\n        var frameKey = match[1];\n        if (value) {\n          if (!asset.resource.frames[frameKey]) {\n            asset.resource.frames[frameKey] = {rect:new pc.Vec4(value.rect), pivot:new pc.Vec2(value.pivot), border:new pc.Vec4(value.border)};\n          } else {\n            var frame = asset.resource.frames[frameKey];\n            frame.rect.set(value.rect[0], value.rect[1], value.rect[2], value.rect[3]);\n            frame.pivot.set(value.pivot[0], value.pivot[1]);\n            frame.border.set(value.border[0], value.border[1], value.border[2], value.border[3]);\n          }\n          asset.resource.fire(\"set:frame\", frameKey, asset.resource.frames[frameKey]);\n        } else {\n          if (asset.resource.frames[frameKey]) {\n            delete asset.resource.frames[frameKey];\n            asset.resource.fire(\"remove:frame\", frameKey);\n          }\n        }\n      }\n    }\n  }};\n  return {TextureAtlasHandler:TextureAtlasHandler};\n}());\npc.extend(pc, function() {\n  var SpriteHandler = function(assets, device) {\n    this._assets = assets;\n    this._device = device;\n  };\n  var onTextureAtlasLoaded = function(atlasAsset) {\n    var spriteAsset = this;\n    if (spriteAsset.resource) {\n      spriteAsset.resource.atlas = atlasAsset.resource;\n    }\n  };\n  var onTextureAtlasAdded = function(atlasAsset) {\n    var spriteAsset = this;\n    spriteAsset.registry.load(atlasAsset);\n  };\n  SpriteHandler.prototype = {load:function(url, callback) {\n    if (pc.path.getExtension(url) === \".json\") {\n      pc.http.get(url, function(err, response) {\n        if (!err) {\n          callback(null, response);\n        } else {\n          callback(err);\n        }\n      });\n    }\n  }, open:function(url, data) {\n    var sprite = new pc.Sprite(this._device);\n    if (data) {\n      sprite.__data = data;\n    }\n    return sprite;\n  }, patch:function(asset, assets) {\n    var sprite = asset.resource;\n    if (sprite.__data) {\n      asset.data.pixelsPerUnit = sprite.__data.pixelsPerUnit;\n      asset.data.renderMode = sprite.__data.renderMode;\n      asset.data.frameKeys = sprite.__data.frameKeys;\n      var atlas = assets.getByUrl(sprite.__data.textureAtlasAsset);\n      if (atlas) {\n        asset.data.textureAtlasAsset = atlas.id;\n      }\n      delete sprite.__data;\n    }\n    sprite.startUpdate();\n    sprite.renderMode = asset.data.renderMode;\n    sprite.pixelsPerUnit = asset.data.pixelsPerUnit;\n    sprite.frameKeys = asset.data.frameKeys;\n    this._updateAtlas(asset);\n    sprite.endUpdate();\n    asset.off(\"change\", this._onAssetChange, this);\n    asset.on(\"change\", this._onAssetChange, this);\n  }, _updateAtlas:function(asset) {\n    var sprite = asset.resource;\n    if (!asset.data.textureAtlasAsset) {\n      sprite.atlas = null;\n      return;\n    }\n    this._assets.off(\"load:\" + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);\n    this._assets.on(\"load:\" + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);\n    var atlasAsset = this._assets.get(asset.data.textureAtlasAsset);\n    if (atlasAsset && atlasAsset.resource) {\n      sprite.atlas = atlasAsset.resource;\n    } else {\n      if (!atlasAsset) {\n        this._assets.off(\"add:\" + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);\n        this._assets.on(\"add:\" + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);\n      } else {\n        this._assets.load(atlasAsset);\n      }\n    }\n  }, _onAssetChange:function(asset, attribute, value, oldValue) {\n    if (attribute === \"data\") {\n      if (value && value.textureAtlasAsset && oldValue && value.textureAtlasAsset !== oldValue.textureAtlasAsset) {\n        this._assets.off(\"load:\" + oldValue.textureAtlasAsset, onTextureAtlasLoaded, asset);\n        this._assets.off(\"add:\" + oldValue.textureAtlasAsset, onTextureAtlasAdded, asset);\n      }\n    }\n  }};\n  return {SpriteHandler:SpriteHandler};\n}());\npc.extend(pc, function() {\n  var JSON_PRIMITIVE_TYPE = {\"points\":pc.PRIMITIVE_POINTS, \"lines\":pc.PRIMITIVE_LINES, \"lineloop\":pc.PRIMITIVE_LINELOOP, \"linestrip\":pc.PRIMITIVE_LINESTRIP, \"triangles\":pc.PRIMITIVE_TRIANGLES, \"trianglestrip\":pc.PRIMITIVE_TRISTRIP, \"trianglefan\":pc.PRIMITIVE_TRIFAN};\n  var JSON_VERTEX_ELEMENT_TYPE = {\"int8\":pc.TYPE_INT8, \"uint8\":pc.TYPE_UINT8, \"int16\":pc.TYPE_INT16, \"uint16\":pc.TYPE_UINT16, \"int32\":pc.TYPE_INT32, \"uint32\":pc.TYPE_UINT32, \"float32\":pc.TYPE_FLOAT32};\n  var JsonModelParser = function(device) {\n    this._device = device;\n  };\n  JsonModelParser.prototype = {parse:function(data) {\n    var modelData = data.model;\n    if (!modelData) {\n      return null;\n    }\n    if (modelData.version <= 1) {\n      logERROR(pc.string.format(\"Trying to parse unsupported model format.\"));\n      return null;\n    }\n    var nodes = this._parseNodes(data);\n    var skins = this._parseSkins(data, nodes);\n    var morphs = this._parseMorphs(data, nodes);\n    var vertexBuffers = this._parseVertexBuffers(data);\n    var indices = this._parseIndexBuffers(data, vertexBuffers);\n    var meshes = this._parseMeshes(data, skins.skins, morphs.morphs, vertexBuffers, indices.buffer, indices.data);\n    this._initMorphs(data, morphs.morphs, vertexBuffers, meshes);\n    var meshInstances = this._parseMeshInstances(data, nodes, meshes, skins.skins, skins.instances, morphs.morphs, morphs.instances);\n    var model = new pc.Model;\n    model.graph = nodes[0];\n    model.meshInstances = meshInstances;\n    model.skinInstances = skins.instances;\n    model.morphInstances = morphs.instances;\n    model.getGraph().syncHierarchy();\n    return model;\n  }, _parseNodes:function(data) {\n    var modelData = data.model;\n    var nodes = [];\n    var i;\n    for (i = 0; i < modelData.nodes.length; i++) {\n      var nodeData = modelData.nodes[i];\n      var node = new pc.GraphNode;\n      node.setName(nodeData.name);\n      node.setLocalPosition(nodeData.position[0], nodeData.position[1], nodeData.position[2]);\n      node.setLocalEulerAngles(nodeData.rotation[0], nodeData.rotation[1], nodeData.rotation[2]);\n      node.setLocalScale(nodeData.scale[0], nodeData.scale[1], nodeData.scale[2]);\n      node.scaleCompensation = !!nodeData.scaleCompensation;\n      nodes.push(node);\n    }\n    for (i = 1; i < modelData.parents.length; i++) {\n      nodes[modelData.parents[i]].addChild(nodes[i]);\n    }\n    return nodes;\n  }, _parseSkins:function(data, nodes) {\n    var modelData = data.model;\n    var skins = [];\n    var skinInstances = [];\n    var i, j;\n    if (!this._device.supportsBoneTextures && modelData.skins.length > 0) {\n      var boneLimit = this._device.getBoneLimit();\n      pc.partitionSkin(modelData, null, boneLimit);\n    }\n    for (i = 0; i < modelData.skins.length; i++) {\n      var skinData = modelData.skins[i];\n      var inverseBindMatrices = [];\n      for (j = 0; j < skinData.inverseBindMatrices.length; j++) {\n        var ibm = skinData.inverseBindMatrices[j];\n        inverseBindMatrices[j] = new pc.Mat4(ibm[0], ibm[1], ibm[2], ibm[3], ibm[4], ibm[5], ibm[6], ibm[7], ibm[8], ibm[9], ibm[10], ibm[11], ibm[12], ibm[13], ibm[14], ibm[15]);\n      }\n      var skin = new pc.Skin(this._device, inverseBindMatrices, skinData.boneNames);\n      skins.push(skin);\n      var skinInstance = new pc.SkinInstance(skin);\n      var bones = [];\n      for (j = 0; j < skin.boneNames.length; j++) {\n        var boneName = skin.boneNames[j];\n        var bone = nodes[0].findByName(boneName);\n        bones.push(bone);\n      }\n      skinInstance.bones = bones;\n      skinInstances.push(skinInstance);\n    }\n    return {skins:skins, instances:skinInstances};\n  }, _parseMorphs:function(data, nodes) {\n    var modelData = data.model;\n    var morphs = [];\n    var morphInstances = [];\n    var i, j;\n    var targets, morphTarget, morphTargetArray;\n    if (modelData.morphs) {\n      for (i = 0; i < modelData.morphs.length; i++) {\n        targets = modelData.morphs[i].targets;\n        morphTargetArray = [];\n        for (j = 0; j < targets.length; j++) {\n          var targetAabb = targets[j].aabb;\n          var min = targetAabb.min;\n          var max = targetAabb.max;\n          var aabb = new pc.BoundingBox(new pc.Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new pc.Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));\n          morphTarget = new pc.MorphTarget({indices:targets[j].indices, deltaPositions:targets[j].deltaPositions, deltaNormals:targets[j].deltaNormals, name:targets[j].name, aabb:aabb});\n          morphTargetArray.push(morphTarget);\n        }\n        var morph = new pc.Morph(morphTargetArray);\n        morphs.push(morph);\n        var morphInstance = new pc.MorphInstance(morph);\n        morphInstances.push(morphInstance);\n      }\n    }\n    return {morphs:morphs, instances:morphInstances};\n  }, _calculateTangentsMorphTarget:function(positions, normals, uvs, indices, tan1, tan2, mtIndices, tangents) {\n    var sdirx, sdiry, sdirz;\n    var tdirx, tdiry, tdirz;\n    var v1x, v1y, v1z;\n    var v2x, v2y, v2z;\n    var v3x, v3y, v3z;\n    var w1x, w1y;\n    var w2x, w2y;\n    var w3x, w3y;\n    var t1x, t1y, t1z;\n    var t2x, t2y, t2z;\n    var nx, ny, nz;\n    var triangleCount;\n    var i1, i2, i3;\n    var x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r;\n    var i, j;\n    var area, ndott, mtIndexCount, len;\n    triangleCount = indices.length / 3;\n    area = 0.0;\n    for (i = 0; i < triangleCount; i++) {\n      i1 = indices[i * 3];\n      i2 = indices[i * 3 + 1];\n      i3 = indices[i * 3 + 2];\n      v1x = positions[i1 * 3];\n      v1y = positions[i1 * 3 + 1];\n      v1z = positions[i1 * 3 + 2];\n      v2x = positions[i2 * 3];\n      v2y = positions[i2 * 3 + 1];\n      v2z = positions[i2 * 3 + 2];\n      v3x = positions[i3 * 3];\n      v3y = positions[i3 * 3 + 1];\n      v3z = positions[i3 * 3 + 2];\n      w1x = uvs[i1 * 2];\n      w1y = uvs[i1 * 2 + 1];\n      w2x = uvs[i2 * 2];\n      w2y = uvs[i2 * 2 + 1];\n      w3x = uvs[i3 * 2];\n      w3y = uvs[i3 * 2 + 1];\n      x1 = v2x - v1x;\n      x2 = v3x - v1x;\n      y1 = v2y - v1y;\n      y2 = v3y - v1y;\n      z1 = v2z - v1z;\n      z2 = v3z - v1z;\n      s1 = w2x - w1x;\n      s2 = w3x - w1x;\n      t1 = w2y - w1y;\n      t2 = w3y - w1y;\n      area = s1 * t2 - s2 * t1;\n      if (area == 0.0) {\n        sdirx = 0;\n        sdiry = 1;\n        sdirz = 0;\n        tdirx = 1;\n        tdiry = 0;\n        tdirz = 0;\n      } else {\n        r = 1.0 / area;\n        sdirx = (t2 * x1 - t1 * x2) * r;\n        sdiry = (t2 * y1 - t1 * y2) * r;\n        sdirz = (t2 * z1 - t1 * z2) * r;\n        tdirx = (s1 * x2 - s2 * x1) * r;\n        tdiry = (s1 * y2 - s2 * y1) * r;\n        tdirz = (s1 * z2 - s2 * z1) * r;\n      }\n      tan1[i1 * 3 + 0] += sdirx;\n      tan1[i1 * 3 + 1] += sdiry;\n      tan1[i1 * 3 + 2] += sdirz;\n      tan1[i2 * 3 + 0] += sdirx;\n      tan1[i2 * 3 + 1] += sdiry;\n      tan1[i2 * 3 + 2] += sdirz;\n      tan1[i3 * 3 + 0] += sdirx;\n      tan1[i3 * 3 + 1] += sdiry;\n      tan1[i3 * 3 + 2] += sdirz;\n      tan2[i1 * 3 + 0] += tdirx;\n      tan2[i1 * 3 + 1] += tdiry;\n      tan2[i1 * 3 + 2] += tdirz;\n      tan2[i2 * 3 + 0] += tdirx;\n      tan2[i2 * 3 + 1] += tdiry;\n      tan2[i2 * 3 + 2] += tdirz;\n      tan2[i3 * 3 + 0] += tdirx;\n      tan2[i3 * 3 + 1] += tdiry;\n      tan2[i3 * 3 + 2] += tdirz;\n    }\n    mtIndexCount = mtIndices.length;\n    for (j = 0; j < mtIndexCount; j++) {\n      i = mtIndices[j];\n      nx = normals[i * 3];\n      ny = normals[i * 3 + 1];\n      nz = normals[i * 3 + 2];\n      t1x = tan1[i * 3];\n      t1y = tan1[i * 3 + 1];\n      t1z = tan1[i * 3 + 2];\n      t2x = tan2[i * 3];\n      t2y = tan2[i * 3 + 1];\n      t2z = tan2[i * 3 + 2];\n      ndott = nx * t1x + ny * t1y + nz * t1z;\n      v1x = nx * ndott;\n      v1y = ny * ndott;\n      v1z = nz * ndott;\n      v2x = ny * t1z - t1y * nz;\n      v2y = nz * t1x - t1z * nx;\n      v2z = nx * t1y - t1x * ny;\n      t1x -= v1x;\n      t1y -= v1y;\n      t1z -= v1z;\n      len = 1.0 / Math.sqrt(t1x * t1x + t1y * t1y + t1z * t1z);\n      t1x *= len;\n      t1y *= len;\n      t1z *= len;\n      tangents[i * 4] = t1x;\n      tangents[i * 4 + 1] = t1y;\n      tangents[i * 4 + 2] = t1z;\n      tangents[i * 4 + 3] = v2x * t2x + v2y * t2y + v2z * t2z < 0.0 ? -1.0 : 1.0;\n    }\n    return tangents;\n  }, _initMorphs:function(data, morphs, vertexBuffers, meshes) {\n    var modelData = data.model;\n    var i, j;\n    var target, k, l, index;\n    var triA, triB, triC;\n    var flagged;\n    var basePos;\n    var baseNorm;\n    var baseUv;\n    var numVerts;\n    var numIndices;\n    var tpos, tnorm;\n    var vertexData;\n    var mtTriIndices = [];\n    var processed = [];\n    var vid;\n    for (i = 0; i < meshes.length; i++) {\n      vid = modelData.meshes[i].vertices;\n      if (processed[vid]) {\n        continue;\n      }\n      vertexData = modelData.vertices[vid];\n      if (!vertexData.tangent) {\n        continue;\n      }\n      var tangents = new Float32Array(vertexData.tangent.data);\n      processed[vid] = true;\n      if (vertexData.position && vertexData.normal && vertexData.texCoord0) {\n        var indices = [];\n        for (j = 0; j < modelData.meshes.length; j++) {\n          if (modelData.meshes[j].vertices === vid) {\n            indices = indices.concat(modelData.meshes[j].indices);\n          }\n        }\n        basePos = vertexData.position.data;\n        baseNorm = vertexData.normal.data;\n        baseUv = vertexData.texCoord0.data;\n        numVerts = basePos.length / 3;\n        numIndices = indices.length;\n        var targetTangents = new Float32Array(numVerts * 4);\n        var tan1 = new Float32Array(numVerts * 3);\n        var tan2 = new Float32Array(numVerts * 3);\n        tpos = new Float32Array(numVerts * 3);\n        tpos.set(basePos);\n        tnorm = new Float32Array(numVerts * 3);\n        tnorm.set(baseNorm);\n        for (j = 0; j < morphs.length; j++) {\n          if (modelData.meshes[i].morph !== j) {\n            continue;\n          }\n          for (k = 0; k < morphs[j]._targets.length; k++) {\n            target = morphs[j]._targets[k];\n            var mtIndices = target.indices;\n            var numMtIndices = mtIndices.length;\n            if (numMtIndices === 0) {\n              continue;\n            }\n            target.deltaTangents = new Float32Array(numMtIndices * 4);\n            if (!flagged || flagged.length < numVerts) {\n              flagged = new Uint8Array(numVerts);\n            } else {\n              for (l = 0; l > numVerts; l++) {\n                flagged[l] = 0;\n              }\n            }\n            for (l = 0; l < numMtIndices; l++) {\n              index = mtIndices[l];\n              flagged[index] = 1;\n            }\n            var numMtTriIndices = 0;\n            for (l = 0; l < numIndices; l += 3) {\n              triA = indices[l];\n              triB = indices[l + 1];\n              triC = indices[l + 2];\n              if (flagged[triA] || flagged[triB] || flagged[triC]) {\n                mtTriIndices[numMtTriIndices] = triA;\n                mtTriIndices[numMtTriIndices + 1] = triB;\n                mtTriIndices[numMtTriIndices + 2] = triC;\n                numMtTriIndices += 3;\n              }\n            }\n            mtTriIndices.length = numMtTriIndices;\n            var deltaPos = target.deltaPositions;\n            var deltaNorm = target.deltaNormals;\n            for (l = 0; l < numMtIndices; l++) {\n              index = mtIndices[l];\n              tpos[index * 3] += deltaPos[l * 3];\n              tpos[index * 3 + 1] += deltaPos[l * 3 + 1];\n              tpos[index * 3 + 2] += deltaPos[l * 3 + 2];\n              tnorm[index * 3] += deltaNorm[l * 3];\n              tnorm[index * 3 + 1] += deltaNorm[l * 3 + 1];\n              tnorm[index * 3 + 2] += deltaNorm[l * 3 + 2];\n            }\n            this._calculateTangentsMorphTarget(tpos, tnorm, baseUv, mtTriIndices, tan1, tan2, mtIndices, targetTangents);\n            var deltaTangents = target.deltaTangents;\n            for (l = 0; l < numMtIndices; l++) {\n              index = mtIndices[l];\n              deltaTangents[l * 4] = targetTangents[l * 4] - tangents[index * 4];\n              deltaTangents[l * 4 + 1] = targetTangents[l * 4 + 1] - tangents[index * 4 + 1];\n              deltaTangents[l * 4 + 2] = targetTangents[l * 4 + 2] - tangents[index * 4 + 2];\n              deltaTangents[l * 4 + 3] = targetTangents[l * 4 + 3] - tangents[index * 4 + 3];\n            }\n            if (k === morphs[j]._targets.length - 1) {\n              continue;\n            }\n            for (l = 0; l < numIndices; l += 3) {\n              triA = indices[l];\n              triB = indices[l + 1];\n              triC = indices[l + 2];\n              tan1[triA * 3 + 0] = 0;\n              tan1[triA * 3 + 1] = 0;\n              tan1[triA * 3 + 2] = 0;\n              tan1[triB * 3 + 0] = 0;\n              tan1[triB * 3 + 1] = 0;\n              tan1[triB * 3 + 2] = 0;\n              tan1[triC * 3 + 0] = 0;\n              tan1[triC * 3 + 1] = 0;\n              tan1[triC * 3 + 2] = 0;\n              tan2[triA * 3 + 0] = 0;\n              tan2[triA * 3 + 1] = 0;\n              tan2[triA * 3 + 2] = 0;\n              tan2[triB * 3 + 0] = 0;\n              tan2[triB * 3 + 1] = 0;\n              tan2[triB * 3 + 2] = 0;\n              tan2[triC * 3 + 0] = 0;\n              tan2[triC * 3 + 1] = 0;\n              tan2[triC * 3 + 2] = 0;\n            }\n            for (l = 0; l < numMtIndices; l++) {\n              index = target.indices[l];\n              tpos[index * 3] = basePos[index * 3];\n              tpos[index * 3 + 1] = basePos[index * 3 + 1];\n              tpos[index * 3 + 2] = basePos[index * 3 + 2];\n              tnorm[index * 3] = baseNorm[index * 3];\n              tnorm[index * 3 + 1] = baseNorm[index * 3 + 1];\n              tnorm[index * 3 + 2] = baseNorm[index * 3 + 2];\n            }\n          }\n        }\n      }\n    }\n  }, _parseVertexBuffers:function(data) {\n    var modelData = data.model;\n    var vertexBuffers = [];\n    var attribute, attributeName;\n    var attributeMap = {position:pc.SEMANTIC_POSITION, normal:pc.SEMANTIC_NORMAL, tangent:pc.SEMANTIC_TANGENT, blendWeight:pc.SEMANTIC_BLENDWEIGHT, blendIndices:pc.SEMANTIC_BLENDINDICES, color:pc.SEMANTIC_COLOR, texCoord0:pc.SEMANTIC_TEXCOORD0, texCoord1:pc.SEMANTIC_TEXCOORD1, texCoord2:pc.SEMANTIC_TEXCOORD2, texCoord3:pc.SEMANTIC_TEXCOORD3, texCoord4:pc.SEMANTIC_TEXCOORD4, texCoord5:pc.SEMANTIC_TEXCOORD5, texCoord6:pc.SEMANTIC_TEXCOORD6, texCoord7:pc.SEMANTIC_TEXCOORD7};\n    var i, j;\n    for (i = 0; i < modelData.vertices.length; i++) {\n      var vertexData = modelData.vertices[i];\n      if (!vertexData.tangent && vertexData.position && vertexData.normal && vertexData.texCoord0) {\n        var indices = [];\n        for (j = 0; j < modelData.meshes.length; j++) {\n          if (modelData.meshes[j].vertices === i) {\n            indices = indices.concat(modelData.meshes[j].indices);\n          }\n        }\n        var tangents = pc.calculateTangents(vertexData.position.data, vertexData.normal.data, vertexData.texCoord0.data, indices);\n        vertexData.tangent = {type:\"float32\", components:4, data:tangents};\n      }\n      var formatDesc = [];\n      for (attributeName in vertexData) {\n        attribute = vertexData[attributeName];\n        var attribType = attribute.type;\n        if (!this._device.supportsUnsignedByte) {\n          if (attribType === \"uint8\") {\n            attribType = \"float32\";\n          }\n          if (attribType === \"int8\") {\n            attribType = \"float32\";\n          }\n        }\n        formatDesc.push({semantic:attributeMap[attributeName], components:attribute.components, type:JSON_VERTEX_ELEMENT_TYPE[attribType], normalize:attributeMap[attributeName] === pc.SEMANTIC_COLOR});\n      }\n      var vertexFormat = new pc.VertexFormat(this._device, formatDesc);\n      var numVertices = vertexData.position.data.length / vertexData.position.components;\n      var vertexBuffer = new pc.VertexBuffer(this._device, vertexFormat, numVertices);\n      var iterator = new pc.VertexIterator(vertexBuffer);\n      for (j = 0; j < numVertices; j++) {\n        for (attributeName in vertexData) {\n          attribute = vertexData[attributeName];\n          switch(attribute.components) {\n            case 1:\n              iterator.element[attributeMap[attributeName]].set(attribute.data[j]);\n              break;\n            case 2:\n              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 2], attribute.data[j * 2 + 1]);\n              break;\n            case 3:\n              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 3], attribute.data[j * 3 + 1], attribute.data[j * 3 + 2]);\n              break;\n            case 4:\n              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 4], attribute.data[j * 4 + 1], attribute.data[j * 4 + 2], attribute.data[j * 4 + 3]);\n              break;\n          }\n        }\n        iterator.next();\n      }\n      iterator.end();\n      vertexBuffers.push(vertexBuffer);\n    }\n    return vertexBuffers;\n  }, _parseIndexBuffers:function(data, vertexBuffers) {\n    var modelData = data.model;\n    var indexBuffer = null;\n    var indexData = null;\n    var i;\n    var numIndices = 0;\n    for (i = 0; i < modelData.meshes.length; i++) {\n      var meshData = modelData.meshes[i];\n      if (meshData.indices !== undefined) {\n        numIndices += meshData.indices.length;\n      }\n    }\n    var maxVerts = 0;\n    for (i = 0; i < vertexBuffers.length; i++) {\n      maxVerts = Math.max(maxVerts, vertexBuffers[i].numVertices);\n    }\n    if (numIndices > 0) {\n      if (maxVerts > 65535 && this._device.extUintElement) {\n        indexBuffer = new pc.IndexBuffer(this._device, pc.INDEXFORMAT_UINT32, numIndices);\n        indexData = new Uint32Array(indexBuffer.lock());\n      } else {\n        indexBuffer = new pc.IndexBuffer(this._device, pc.INDEXFORMAT_UINT16, numIndices);\n        indexData = new Uint16Array(indexBuffer.lock());\n      }\n    }\n    return {buffer:indexBuffer, data:indexData};\n  }, _parseMeshes:function(data, skins, morphs, vertexBuffers, indexBuffer, indexData) {\n    var modelData = data.model;\n    var meshes = [];\n    var indexBase = 0;\n    var i;\n    for (i = 0; i < modelData.meshes.length; i++) {\n      var meshData = modelData.meshes[i];\n      var meshAabb = meshData.aabb;\n      var min = meshAabb.min;\n      var max = meshAabb.max;\n      var aabb = new pc.BoundingBox(new pc.Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new pc.Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));\n      var indexed = meshData.indices !== undefined;\n      var mesh = new pc.Mesh;\n      mesh.vertexBuffer = vertexBuffers[meshData.vertices];\n      mesh.indexBuffer[0] = indexed ? indexBuffer : null;\n      mesh.primitive[0].type = JSON_PRIMITIVE_TYPE[meshData.type];\n      mesh.primitive[0].base = indexed ? meshData.base + indexBase : meshData.base;\n      mesh.primitive[0].count = meshData.count;\n      mesh.primitive[0].indexed = indexed;\n      mesh.skin = meshData.skin !== undefined ? skins[meshData.skin] : null;\n      mesh.morph = meshData.morph !== undefined ? morphs[meshData.morph] : null;\n      mesh.aabb = aabb;\n      if (indexed) {\n        indexData.set(meshData.indices, indexBase);\n        indexBase += meshData.indices.length;\n      }\n      meshes.push(mesh);\n    }\n    if (indexBuffer !== null) {\n      indexBuffer.unlock();\n    }\n    return meshes;\n  }, _parseMeshInstances:function(data, nodes, meshes, skins, skinInstances, morphs, morphInstances) {\n    var modelData = data.model;\n    var meshInstances = [];\n    var i;\n    for (i = 0; i < modelData.meshInstances.length; i++) {\n      var meshInstanceData = modelData.meshInstances[i];\n      var node = nodes[meshInstanceData.node];\n      var mesh = meshes[meshInstanceData.mesh];\n      var meshInstance = new pc.MeshInstance(node, mesh, pc.ModelHandler.DEFAULT_MATERIAL);\n      if (mesh.skin) {\n        var skinIndex = skins.indexOf(mesh.skin);\n        meshInstance.skinInstance = skinInstances[skinIndex];\n      }\n      if (mesh.morph) {\n        var morphIndex = morphs.indexOf(mesh.morph);\n        meshInstance.morphInstance = morphInstances[morphIndex];\n      }\n      meshInstances.push(meshInstance);\n    }\n    return meshInstances;\n  }};\n  return {JsonModelParser:JsonModelParser};\n}());\npc.extend(pc, function() {\n  var SceneParser = function(app) {\n    this._app = app;\n  };\n  SceneParser.prototype = {parse:function(data) {\n    var entities = {};\n    var id, i;\n    var parent = null;\n    for (id in data.entities) {\n      entities[id] = this._createEntity(data.entities[id]);\n      if (data.entities[id].parent === null) {\n        parent = entities[id];\n      }\n    }\n    for (id in data.entities) {\n      var l = data.entities[id].children.length;\n      for (i = 0; i < l; i++) {\n        var resource_id = data.entities[id].children[i];\n        if (entities[resource_id]) {\n          entities[id].addChild(entities[resource_id]);\n        }\n      }\n    }\n    this._openComponentData(parent, data.entities);\n    return parent;\n  }, _createEntity:function(data) {\n    var entity = new pc.Entity;\n    var p = data.position;\n    var r = data.rotation;\n    var s = data.scale;\n    entity.name = data.name;\n    entity._guid = data.resource_id;\n    entity.setLocalPosition(p[0], p[1], p[2]);\n    entity.setLocalEulerAngles(r[0], r[1], r[2]);\n    entity.setLocalScale(s[0], s[1], s[2]);\n    entity._enabled = data.enabled !== undefined ? data.enabled : true;\n    entity._enabledInHierarchy = entity._enabled;\n    entity.template = data.template;\n    if (data.tags) {\n      for (var i = 0; i < data.tags.length; i++) {\n        entity.tags.add(data.tags[i]);\n      }\n    }\n    if (data.labels) {\n      data.labels.forEach(function(label) {\n        entity.addLabel(label);\n      });\n    }\n    return entity;\n  }, _openComponentData:function(entity, entities) {\n    var systems = this._app.systems.list();\n    var i, len = systems.length;\n    var edata = entities[entity._guid];\n    for (i = 0; i < len; i++) {\n      var componentData = edata.components[systems[i].id];\n      if (componentData) {\n        this._app.systems[systems[i].id].addComponent(entity, componentData);\n      }\n    }\n    var length = edata.children.length;\n    var children = entity._children;\n    for (i = 0; i < length; i++) {\n      children[i] = this._openComponentData(children[i], entities);\n    }\n    return entity;\n  }};\n  return {SceneParser:SceneParser};\n}());\npc.extend(pc, function() {\n  var assetIdCounter = 0;\n  var ABSOLUTE_URL = new RegExp(\"^\" + \"\\\\s*\" + \"(?:\" + \"[a-z]+[a-z0-9\\\\-\\\\+\\\\.]*\" + \":\" + \")?\" + \"//\", \"i\");\n  var Asset = function(name, type, file, data) {\n    this._id = ++assetIdCounter;\n    this.name = name || \"\";\n    this.type = type;\n    this.tags = new pc.Tags(this);\n    this._preload = false;\n    this.variants = new pc.AssetVariants(this);\n    this._file = null;\n    this._data = data || {};\n    this._resources = [];\n    this.loaded = false;\n    this.loading = false;\n    this.registry = null;\n    pc.events.attach(this);\n    if (file) {\n      this.file = file;\n    }\n  };\n  Asset.prototype = {getFileUrl:function() {\n    var file = this.getPreferredFile();\n    if (!file || !file.url) {\n      return null;\n    }\n    var url = file.url;\n    if (this.registry && this.registry.prefix && !ABSOLUTE_URL.test(url)) {\n      url = this.registry.prefix + url;\n    }\n    if (this.type !== \"script\" && file.hash) {\n      var separator = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n      url += separator + \"t=\" + file.hash;\n    }\n    return url;\n  }, getPreferredFile:function() {\n    if (!this.file) {\n      return null;\n    }\n    if (this.type === \"texture\" || this.type === \"textureatlas\") {\n      var device = this.registry._loader.getHandler(\"texture\")._device;\n      if (this.variants.pvr && device.extCompressedTexturePVRTC) {\n        return this.variants.pvr;\n      } else {\n        if (this.variants.dxt && device.extCompressedTextureS3TC) {\n          return this.variants.dxt;\n        } else {\n          if (this.variants.etc1 && device.extCompressedTextureETC1) {\n            return this.variants.etc1;\n          }\n        }\n      }\n    }\n    return this.file;\n  }, ready:function(callback, scope) {\n    scope = scope || this;\n    if (this.resource) {\n      callback.call(scope, this);\n    } else {\n      this.once(\"load\", function(asset) {\n        callback.call(scope, asset);\n      });\n    }\n  }, reload:function() {\n    if (!this.loaded) {\n      return;\n    }\n    if (this.type === \"cubemap\") {\n      this.registry._loader.patch(this, this.registry);\n    } else {\n      this.loaded = false;\n      this.registry.load(this);\n    }\n  }, unload:function() {\n    if (!this.loaded && !this.resource) {\n      return;\n    }\n    this.fire(\"unload\", this);\n    this.registry.fire(\"unload:\" + this.id, this);\n    if (this.resource && this.resource.destroy) {\n      this.resource.destroy();\n    }\n    this.resource = null;\n    this.loaded = false;\n    if (this.file) {\n      this.registry._loader.clearCache(this.getFileUrl(), this.type);\n    }\n  }};\n  Object.defineProperty(Asset.prototype, \"id\", {get:function() {\n    return this._id;\n  }, set:function(value) {\n    this._id = value;\n    if (value > assetIdCounter) {\n      assetIdCounter = value;\n    }\n  }});\n  Object.defineProperty(Asset.prototype, \"file\", {get:function() {\n    return this._file;\n  }, set:function(value) {\n    var key;\n    var valueAsBool = !!value;\n    var fileAsBool = !!this._file;\n    if (valueAsBool !== fileAsBool || value && this._file && value.hash !== this._file) {\n      if (value) {\n        if (!this._file) {\n          this._file = {};\n        }\n        this._file.url = value.url;\n        this._file.filename = value.filename;\n        this._file.hash = value.hash;\n        this._file.size = value.size;\n        this._file.variants = this.variants;\n        if (value.hasOwnProperty(\"variants\")) {\n          this.variants.clear();\n          if (value.variants) {\n            for (key in value.variants) {\n              if (!value.variants[key]) {\n                continue;\n              }\n              this.variants[key] = value.variants[key];\n            }\n          }\n        }\n        this.fire(\"change\", this, \"file\", this._file, this._file);\n        this.reload();\n      } else {\n        this._file = null;\n        this.variants.clear();\n      }\n    } else {\n      if (value && this._file && value.hasOwnProperty(\"variants\")) {\n        this.variants.clear();\n        if (value.variants) {\n          for (key in value.variants) {\n            if (!value.variants[key]) {\n              continue;\n            }\n            this.variants[key] = value.variants[key];\n          }\n        }\n      }\n    }\n  }});\n  Object.defineProperty(Asset.prototype, \"data\", {get:function() {\n    return this._data;\n  }, set:function(value) {\n    var old = this._data;\n    this._data = value;\n    if (value !== old) {\n      this.fire(\"change\", this, \"data\", value, old);\n      if (this.loaded) {\n        this.registry._loader.patch(this, this.registry);\n      }\n    }\n  }});\n  Object.defineProperty(Asset.prototype, \"resource\", {get:function() {\n    return this._resources[0];\n  }, set:function(value) {\n    var _old = this._resources[0];\n    this._resources[0] = value;\n    this.fire(\"change\", this, \"resource\", value, _old);\n  }});\n  Object.defineProperty(Asset.prototype, \"resources\", {get:function() {\n    return this._resources;\n  }, set:function(value) {\n    var _old = this._resources;\n    this._resources = value;\n    this.fire(\"change\", this, \"resources\", value, _old);\n  }});\n  Object.defineProperty(Asset.prototype, \"preload\", {get:function() {\n    return this._preload;\n  }, set:function(value) {\n    value = !!value;\n    if (this._preload === value) {\n      return;\n    }\n    this._preload = value;\n    if (this._preload && !this.loaded && !this.loading && this.registry) {\n      this.registry.load(this);\n    }\n  }});\n  return {Asset:Asset, ASSET_ANIMATION:\"animation\", ASSET_AUDIO:\"audio\", ASSET_IMAGE:\"image\", ASSET_JSON:\"json\", ASSET_MODEL:\"model\", ASSET_MATERIAL:\"material\", ASSET_TEXT:\"text\", ASSET_TEXTURE:\"texture\", ASSET_CUBEMAP:\"cubemap\", ASSET_SHADER:\"shader\", ASSET_CSS:\"css\", ASSET_HTML:\"html\", ASSET_SCRIPT:\"script\", ABSOLUTE_URL:ABSOLUTE_URL};\n}());\npc.extend(pc, function() {\n  var properties = [];\n  var AssetVariants = function(asset) {\n    this.asset = asset;\n  };\n  var defineVariantProperty = function(name) {\n    var field = \"_\" + name;\n    properties.push(field);\n    Object.defineProperty(AssetVariants.prototype, name, {get:function() {\n      return this[field] || null;\n    }, set:function(value) {\n      var fieldAsBool = !!this[field];\n      var valueAsBool = !!value;\n      if (fieldAsBool !== valueAsBool || this[field] && value && this[field].hash !== value.hash) {\n        if (value) {\n          this[field] = {url:value.url, filename:value.filename, size:value.size, hash:value.hash, opt:value.opt || 0};\n        } else {\n          this[field] = null;\n        }\n        if (this.asset.file) {\n          this.asset.fire(\"change\", this.asset, \"file\", this.asset._file, this.asset._file);\n          this.asset.reload();\n        }\n      }\n    }});\n  };\n  defineVariantProperty(\"dxt\");\n  defineVariantProperty(\"pvr\");\n  defineVariantProperty(\"etc1\");\n  AssetVariants.prototype.clear = function() {\n    for (var i = 0; i < properties.length; i++) {\n      this[properties[i]] = null;\n    }\n  };\n  return {AssetVariants:AssetVariants};\n}());\npc.extend(pc, function() {\n  var AssetRegistry = function(loader) {\n    this._loader = loader;\n    this._assets = [];\n    this._cache = {};\n    this._names = {};\n    this._tags = new pc.TagsCache(\"_id\");\n    this._urls = {};\n    this.prefix = null;\n    pc.extend(this, pc.events);\n  };\n  AssetRegistry.prototype = {list:function(filters) {\n    filters = filters || {};\n    return this._assets.filter(function(asset) {\n      var include = true;\n      if (filters.preload !== undefined) {\n        include = asset.preload === filters.preload;\n      }\n      return include;\n    });\n  }, add:function(asset) {\n    var index = this._assets.push(asset) - 1;\n    var url;\n    this._cache[asset.id] = index;\n    if (!this._names[asset.name]) {\n      this._names[asset.name] = [];\n    }\n    this._names[asset.name].push(index);\n    if (asset.file) {\n      url = asset.file.url;\n      this._urls[url] = index;\n    }\n    asset.registry = this;\n    this._tags.addItem(asset);\n    asset.tags.on(\"add\", this._onTagAdd, this);\n    asset.tags.on(\"remove\", this._onTagRemove, this);\n    this.fire(\"add\", asset);\n    this.fire(\"add:\" + asset.id, asset);\n    if (url) {\n      this.fire(\"add:url:\" + url, asset);\n    }\n    if (asset.preload) {\n      this.load(asset);\n    }\n  }, remove:function(asset) {\n    delete this._cache[asset.id];\n    delete this._names[asset.name];\n    var url = asset.file ? asset.file.url : null;\n    if (url) {\n      delete this._urls[url];\n    }\n    this._tags.removeItem(asset);\n    asset.tags.off(\"add\", this._onTagAdd, this);\n    asset.tags.off(\"remove\", this._onTagRemove, this);\n    asset.fire(\"remove\", asset);\n    this.fire(\"remove\", asset);\n    this.fire(\"remove:\" + asset.id, asset);\n    if (url) {\n      this.fire(\"remove:url:\" + url, asset);\n    }\n  }, get:function(id) {\n    var idx = this._cache[id];\n    return this._assets[idx];\n  }, getByUrl:function(url) {\n    var idx = this._urls[url];\n    return this._assets[idx];\n  }, load:function(asset) {\n    if (asset.loading) {\n      return;\n    }\n    var self = this;\n    if (asset.loaded) {\n      if (asset.type === \"cubemap\") {\n        self._loader.patch(asset, this);\n      }\n      return;\n    }\n    var load = !!asset.file;\n    var file = asset.getPreferredFile();\n    var _load = function() {\n      var url = asset.getFileUrl();\n      asset.loading = true;\n      self._loader.load(url, asset.type, function(err, resource, extra) {\n        asset.loaded = true;\n        asset.loading = false;\n        if (err) {\n          self.fire(\"error\", err, asset);\n          self.fire(\"error:\" + asset.id, err, asset);\n          asset.fire(\"error\", err, asset);\n          return;\n        }\n        if (resource instanceof Array) {\n          asset.resources = resource;\n        } else {\n          asset.resource = resource;\n        }\n        if (!pc.script.legacy && asset.type === \"script\") {\n          var loader = self._loader.getHandler(\"script\");\n          if (loader._cache[asset.id] && loader._cache[asset.id].parentNode === document.head) {\n            document.head.removeChild(loader._cache[asset.id]);\n          }\n          loader._cache[asset.id] = extra;\n        }\n        self._loader.patch(asset, self);\n        self.fire(\"load\", asset);\n        self.fire(\"load:\" + asset.id, asset);\n        if (file && file.url) {\n          self.fire(\"load:url:\" + file.url, asset);\n        }\n        asset.fire(\"load\", asset);\n      }, asset);\n    };\n    var _open = function() {\n      var resource = self._loader.open(asset.type, asset.data);\n      if (resource instanceof Array) {\n        asset.resources = resource;\n      } else {\n        asset.resource = resource;\n      }\n      asset.loaded = true;\n      self._loader.patch(asset, self);\n      self.fire(\"load\", asset);\n      self.fire(\"load:\" + asset.id, asset);\n      if (file && file.url) {\n        self.fire(\"load:url:\" + file.url, asset);\n      }\n      asset.fire(\"load\", asset);\n    };\n    if (file && asset.type === \"cubemap\") {\n      load = false;\n      var url = asset.getFileUrl();\n      this._loader.load(url, \"texture\", function(err, texture) {\n        if (!err) {\n          self._loader.patch({resource:texture, type:\"texture\", data:asset.data}, self);\n          asset._dds = texture;\n          _open();\n        } else {\n          self.fire(\"error\", err, asset);\n          self.fire(\"error:\" + asset.id, err, asset);\n          asset.fire(\"error\", err, asset);\n        }\n      });\n    }\n    if (!file) {\n      _open();\n    } else {\n      if (load) {\n        this.fire(\"load:start\", asset);\n        this.fire(\"load:\" + asset.id + \":start\", asset);\n        _load();\n      }\n    }\n  }, loadFromUrl:function(url, type, callback) {\n    var self = this;\n    var name = pc.path.getBasename(url);\n    var file = {url:url};\n    var data = {};\n    var asset = self.getByUrl(url);\n    if (!asset) {\n      asset = new pc.Asset(name, type, file, data);\n      self.add(asset);\n    }\n    if (type === \"model\") {\n      self._loadModel(asset, callback);\n      return;\n    }\n    asset.once(\"load\", function(asset) {\n      callback(null, asset);\n    });\n    asset.once(\"error\", function(err) {\n      callback(err);\n    });\n    self.load(asset);\n  }, _loadModel:function(asset, callback) {\n    var self = this;\n    var url = asset.getFileUrl();\n    var dir = pc.path.getDirectory(url);\n    var basename = pc.path.getBasename(url);\n    var ext = pc.path.getExtension(url);\n    var _loadAsset = function(asset) {\n      asset.once(\"load\", function(asset) {\n        callback(null, asset);\n      });\n      asset.once(\"error\", function(err) {\n        callback(err);\n      });\n      self.load(asset);\n    };\n    if (ext === \".json\") {\n      var mappingUrl = pc.path.join(dir, basename.replace(\".json\", \".mapping.json\"));\n      this._loader.load(mappingUrl, \"json\", function(err, data) {\n        if (err) {\n          asset.data = {mapping:[]};\n          _loadAsset(asset);\n          return;\n        }\n        self._loadMaterials(dir, data, function(err, materials) {\n          asset.data = data;\n          _loadAsset(asset);\n        });\n      });\n    } else {\n      _loadAsset(asset);\n    }\n  }, _loadMaterials:function(dir, mapping, callback) {\n    var self = this;\n    var i;\n    var count = mapping.mapping.length;\n    var materials = [];\n    var done = function(err, materials) {\n      self._loadTextures(materials, function(err, textures) {\n        callback(null, materials);\n      });\n    };\n    if (count === 0) {\n      callback(null, materials);\n    }\n    var onLoadAsset = function(err, asset) {\n      materials.push(asset);\n      count--;\n      if (count === 0) {\n        done(null, materials);\n      }\n    };\n    for (i = 0; i < mapping.mapping.length; i++) {\n      var path = mapping.mapping[i].path;\n      if (path) {\n        self.loadFromUrl(pc.path.join(dir, path), \"material\", onLoadAsset);\n      } else {\n        count--;\n      }\n    }\n  }, _loadTextures:function(materials, callback) {\n    var self = this;\n    var i, j;\n    var used = {};\n    var urls = [];\n    var textures = [];\n    var count = 0;\n    for (i = 0; i < materials.length; i++) {\n      if (materials[i].data.parameters) {\n        var params = materials[i].data.parameters;\n        for (j = 0; j < params.length; j++) {\n          if (params[j].type === \"texture\") {\n            var url = materials[i].getFileUrl();\n            var dir = pc.path.getDirectory(url);\n            url = pc.path.join(dir, params[j].data);\n            if (!used[url]) {\n              used[url] = true;\n              urls.push(url);\n              count++;\n            }\n          }\n        }\n      } else {\n        console.warn(\"Update material asset loader to support new material format\");\n      }\n    }\n    if (!count) {\n      callback(null, textures);\n      return;\n    }\n    var onLoadAsset = function(err, texture) {\n      textures.push(texture);\n      count--;\n      if (err) {\n        console.error(err);\n      }\n      if (count === 0) {\n        callback(null, textures);\n      }\n    };\n    for (i = 0; i < urls.length; i++) {\n      self.loadFromUrl(urls[i], \"texture\", onLoadAsset);\n    }\n  }, findAll:function(name, type) {\n    var self = this;\n    var idxs = this._names[name];\n    var assets;\n    if (idxs) {\n      assets = idxs.map(function(idx) {\n        return self._assets[idx];\n      });\n      if (type) {\n        return assets.filter(function(asset) {\n          return asset.type === type;\n        });\n      } else {\n        return assets;\n      }\n    } else {\n      return [];\n    }\n  }, _onTagAdd:function(tag, asset) {\n    this._tags.add(tag, asset);\n  }, _onTagRemove:function(tag, asset) {\n    this._tags.remove(tag, asset);\n  }, findByTag:function() {\n    return this._tags.find(arguments);\n  }, filter:function(callback) {\n    var items = [];\n    for (var i = 0, len = this._assets.length; i < len; i++) {\n      if (callback(this._assets[i])) {\n        items.push(this._assets[i]);\n      }\n    }\n    return items;\n  }, find:function(name, type) {\n    var asset = this.findAll(name, type);\n    return asset ? asset[0] : null;\n  }, getAssetById:function(id) {\n    console.warn(\"DEPRECATED: getAssetById() use get() instead\");\n    return this.get(id);\n  }};\n  return {AssetRegistry:AssetRegistry};\n}());\npc.anim = {Animation:pc.Animation, Key:pc.Key, Node:pc.Node, Skeleton:pc.Skeleton};\npc.asset = {ASSET_ANIMATION:\"animation\", ASSET_AUDIO:\"audio\", ASSET_IMAGE:\"image\", ASSET_JSON:\"json\", ASSET_MODEL:\"model\", ASSET_MATERIAL:\"material\", ASSET_TEXT:\"text\", ASSET_TEXTURE:\"texture\", ASSET_CUBEMAP:\"cubemap\", ASSET_SCRIPT:\"script\"};\npc.audio = {AudioManager:pc.SoundManager, Channel:pc.Channel, Channel3d:pc.Channel3d, Listener:pc.Listener, Sound:pc.Sound};\npc.fw = {Application:pc.Application, Component:pc.Component, ComponentData:pc.ComponentData, ComponentSystem:pc.ComponentSystem, Entity:pc.Entity, FillMode:{NONE:pc.FILLMODE_NONE, FILL_WINDOW:pc.FILLMODE_FILL_WINDOW, KEEP_ASPECT:pc.FILLMODE_KEEP_ASPECT}, ResolutionMode:{AUTO:pc.RESOLUTION_AUTO, FIXED:pc.RESOLUTION_FIXED}};\npc.extend(pc.gfx, {drawQuadWithShader:pc.drawQuadWithShader, precalculatedTangents:pc.precalculatedTangents, programlib:pc.programlib, shaderChunks:pc.shaderChunks, ContextCreationError:pc.ContextCreationError, Device:pc.GraphicsDevice, IndexBuffer:pc.IndexBuffer, ProgramLibrary:pc.ProgramLibrary, RenderTarget:pc.RenderTarget, ScopeId:pc.ScopeId, Shader:pc.Shader, ShaderInput:pc.ShaderInput, Texture:pc.Texture, UnsupportedBrowserError:pc.UnsupportedBrowserError, VertexBuffer:pc.VertexBuffer, VertexFormat:pc.VertexFormat, \nVertexIterator:pc.VertexIterator});\npc.extend(pc.input, {getTouchTargetCoords:pc.getTouchTargetCoords, Controller:pc.Controller, GamePads:pc.GamePads, Keyboard:pc.Keyboard, KeyboardEvent:pc.KeyboardEvent, Mouse:pc.Mouse, MouseEvent:pc.MouseEvent, Touch:pc.Touch, TouchDevice:pc.TouchDevice, TouchEvent:pc.TouchEvent});\npc.posteffect = {createFullscreenQuad:pc.createFullscreenQuad, drawFullscreenQuad:pc.drawFullscreenQuad, PostEffect:pc.PostEffect, PostEffectQueue:pc.PostEffectQueue};\npc.extend(pc.scene, {partitionSkin:pc.partitionSkin, procedural:{calculateTangents:pc.calculateTangents, createMesh:pc.createMesh, createTorus:pc.createTorus, createCylinder:pc.createCylinder, createCapsule:pc.createCapsule, createCone:pc.createCone, createSphere:pc.createSphere, createPlane:pc.createPlane, createBox:pc.createBox}, BasicMaterial:pc.BasicMaterial, DepthMaterial:pc.DepthMaterial, ForwardRenderer:pc.ForwardRenderer, GraphNode:pc.GraphNode, Material:pc.Material, Command:pc.Command, Mesh:pc.Mesh, \nMeshInstance:pc.MeshInstance, Model:pc.Model, ParticleEmitter:pc.ParticleEmitter, PhongMaterial:pc.StandardMaterial, Picker:pc.Picker, PickMaterial:pc.PickMaterial, Projection:{ORTHOGRAPHIC:pc.PROJECTION_ORTHOGRAPHIC, PERSPECTIVE:pc.PROJECTION_PERSPECTIVE}, Scene:pc.Scene, Skin:pc.Skin, SkinInstance:pc.SkinInstance});\npc.shape = {Aabb:pc.BoundingBox, Sphere:pc.BoundingSphere, Plane:pc.Plane};\npc.time = {now:pc.now, Timer:pc.Timer};\npc.PhongMaterial = pc.StandardMaterial;\npc.BoundingSphere.prototype.intersectRay = pc.BoundingSphere.prototype.intersectsRay;\npc.ELEMENTTYPE_INT8 = pc.TYPE_INT8;\npc.ELEMENTTYPE_UINT8 = pc.TYPE_UINT8;\npc.ELEMENTTYPE_INT16 = pc.TYPE_INT16;\npc.ELEMENTTYPE_UINT16 = pc.TYPE_UINT16;\npc.ELEMENTTYPE_INT32 = pc.TYPE_INT32;\npc.ELEMENTTYPE_UINT32 = pc.TYPE_UINT32;\npc.ELEMENTTYPE_FLOAT32 = pc.TYPE_FLOAT32;\nObject.defineProperty(pc.shaderChunks, \"transformSkinnedVS\", {get:function() {\n  return \"#define SKIN\\n\" + pc.shaderChunks.transformVS;\n}});\npc.extend(pc.Application.prototype, function() {\n  var tempGraphNode = new pc.GraphNode;\n  var identityGraphNode = new pc.GraphNode;\n  var meshInstanceArray = [];\n  var _deprecationWarning = false;\n  var ImmediateData = function(device) {\n    this.lineVertexFormat = new pc.VertexFormat(device, [{semantic:pc.SEMANTIC_POSITION, components:3, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_COLOR, components:4, type:pc.TYPE_UINT8, normalize:true}]);\n    this.lineBatches = [];\n    this.layers = [];\n    this.layerToBatch = {};\n    this.quadMesh = null;\n    this.cubeLocalPos = null;\n    this.cubeWorldPos = null;\n    this.identityGraphNode = new pc.GraphNode;\n  };\n  ImmediateData.prototype.addLayer = function(layer) {\n    var id = layer.id;\n    if (this.layers.indexOf(layer) < 0) {\n      this.layers.push(layer);\n    }\n  };\n  ImmediateData.prototype.getLayerIdx = function(layer) {\n    return this.layerToBatch[layer.id];\n  };\n  ImmediateData.prototype.addLayerIdx = function(idx, layer) {\n    this.layerToBatch[layer.id] = idx;\n  };\n  var LineBatch = function() {\n    this.numLinesAllocated = 128;\n    this.vb = null;\n    this.vbRam = null;\n    this.mesh = null;\n    this.linesUsed = 0;\n    this.material = null;\n    this.meshInstance = null;\n    this.layer = null;\n  };\n  LineBatch.prototype = {init:function(device, vertexFormat, layer, linesToAdd) {\n    if (!this.mesh) {\n      this.mesh = new pc.Mesh;\n      this.mesh.primitive[0].type = pc.PRIMITIVE_LINES;\n      this.mesh.primitive[0].base = 0;\n      this.mesh.primitive[0].indexed = false;\n      this.material = new pc.BasicMaterial;\n      this.material.vertexColors = true;\n      this.material.blend = true;\n      this.material.blendType = pc.BLEND_NORMAL;\n      this.material.update();\n    }\n    this.layer = layer;\n    while (this.linesUsed + linesToAdd > this.numLinesAllocated) {\n      this.vb = null;\n      this.numLinesAllocated *= 2;\n    }\n    this.vertexFormat = vertexFormat;\n    if (!this.vb) {\n      this.vb = new pc.VertexBuffer(device, vertexFormat, this.numLinesAllocated * 2, pc.BUFFER_DYNAMIC);\n      this.mesh.vertexBuffer = this.vb;\n      this.vbRam = new DataView(this.vb.lock());\n      if (!this.meshInstance) {\n        identityGraphNode.worldTransform = pc.Mat4.IDENTITY;\n        identityGraphNode._dirtyWorld = identityGraphNode._dirtyNormal = false;\n        this.meshInstance = new pc.MeshInstance(identityGraphNode, this.mesh, this.material);\n        this.meshInstance.cull = false;\n      }\n    }\n  }, addLines:function(position, color) {\n    var multiColor = !!color.length;\n    var offset = this.linesUsed * 2 * this.vertexFormat.size;\n    var clr;\n    for (var i = 0; i < position.length; i++) {\n      this.vbRam.setFloat32(offset, position[i].x, true);\n      offset += 4;\n      this.vbRam.setFloat32(offset, position[i].y, true);\n      offset += 4;\n      this.vbRam.setFloat32(offset, position[i].z, true);\n      offset += 4;\n      clr = multiColor ? color[i] : color;\n      this.vbRam.setUint8(offset, clr.r * 255);\n      offset += 1;\n      this.vbRam.setUint8(offset, clr.g * 255);\n      offset += 1;\n      this.vbRam.setUint8(offset, clr.b * 255);\n      offset += 1;\n      this.vbRam.setUint8(offset, clr.a * 255);\n      offset += 1;\n    }\n    this.linesUsed += position.length / 2;\n  }, finalize:function() {\n    if (this.linesUsed > 0) {\n      this.vb.setData(this.vbRam.buffer);\n      this.mesh.primitive[0].count = this.linesUsed * 2;\n      meshInstanceArray[0] = this.meshInstance;\n      this.layer.addMeshInstances(meshInstanceArray, true);\n      this.linesUsed = 0;\n    }\n  }};\n  function _initImmediate() {\n    if (!this._immediateData) {\n      this._immediateData = new ImmediateData(this.graphicsDevice);\n      this.on(\"prerender\", this._preRenderImmediate, this);\n      this.on(\"postrender\", this._postRenderImmediate, this);\n    }\n  }\n  function _addLines(position, color, options) {\n    if (options.layer === undefined) {\n      options.layer = this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE);\n    }\n    if (options.depthTest === undefined) {\n      options.depthTest = true;\n    }\n    this._initImmediate();\n    var layer = options.layer;\n    this._immediateData.addLayer(layer);\n    var idx = this._immediateData.getLayerIdx(layer);\n    if (idx === undefined) {\n      var batch = new LineBatch;\n      batch.init(this.graphicsDevice, this._immediateData.lineVertexFormat, layer, position.length / 2);\n      batch.material.depthTest = options.depthTest;\n      if (options.mask) {\n        batch.meshInstance.mask = options.mask;\n      }\n      idx = this._immediateData.lineBatches.push(batch) - 1;\n      this._immediateData.addLayerIdx(idx, layer);\n    } else {\n      this._immediateData.lineBatches[idx].init(this.graphicsDevice, this._immediateData.lineVertexFormat, layer, position.length / 2);\n      this._immediateData.lineBatches[idx].material.depthTest = options.depthTest;\n      if (options.mask) {\n        this._immediateData.lineBatches[idx].meshInstance.mask = options.mask;\n      }\n    }\n    this._immediateData.lineBatches[idx].addLines(position, color);\n  }\n  function renderLine(start, end, color, arg3, arg4) {\n    var endColor = color;\n    var options;\n    if (arg3 instanceof pc.Color) {\n      endColor = arg3;\n      if (typeof arg4 === \"number\") {\n        if (!_deprecationWarning) {\n          console.warn(\"lineBatch argument is deprecated for renderLine. Use options.layer instead\");\n          _deprecationWarning = true;\n        }\n        if (arg4 === pc.LINEBATCH_OVERLAY) {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:false};\n        } else {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};\n        }\n      } else {\n        options = arg4;\n      }\n    } else {\n      if (typeof arg3 === \"number\") {\n        if (!_deprecationWarning) {\n          console.warn(\"lineBatch argument is deprecated for renderLine. Use options.layer instead\");\n          _deprecationWarning = true;\n        }\n        endColor = color;\n        if (arg3 === pc.LINEBATCH_OVERLAY) {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:false};\n        } else {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};\n        }\n      } else {\n        if (arg3) {\n          options = arg3;\n        } else {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};\n        }\n      }\n    }\n    this._addLines([start, end], [color, endColor], options);\n  }\n  function renderLines(position, color, options) {\n    if (!options) {\n      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};\n    } else {\n      if (typeof options === \"number\") {\n        if (!_deprecationWarning) {\n          console.warn(\"lineBatch argument is deprecated for renderLine. Use options.layer instead\");\n          _deprecationWarning = true;\n        }\n        if (options === pc.LINEBATCH_OVERLAY) {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:false};\n        } else {\n          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};\n        }\n      }\n    }\n    var multiColor = !!color.length;\n    if (multiColor) {\n      if (position.length !== color.length) {\n        pc.log.error(\"renderLines: position/color arrays have different lengths\");\n        return;\n      }\n    }\n    if (position.length % 2 !== 0) {\n      pc.log.error(\"renderLines: array length is not divisible by 2\");\n      return;\n    }\n    this._addLines(position, color, options);\n  }\n  function renderWireCube(matrix, color, options) {\n    var i;\n    this._initImmediate();\n    if (!this._immediateData.cubeLocalPos) {\n      var x = 0.5;\n      this._immediateData.cubeLocalPos = [new pc.Vec3(-x, -x, -x), new pc.Vec3(-x, x, -x), new pc.Vec3(x, x, -x), new pc.Vec3(x, -x, -x), new pc.Vec3(-x, -x, x), new pc.Vec3(-x, x, x), new pc.Vec3(x, x, x), new pc.Vec3(x, -x, x)];\n      this._immediateData.cubeWorldPos = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];\n    }\n    var cubeLocalPos = this._immediateData.cubeLocalPos;\n    var cubeWorldPos = this._immediateData.cubeWorldPos;\n    for (i = 0; i < 8; i++) {\n      matrix.transformPoint(cubeLocalPos[i], cubeWorldPos[i]);\n    }\n    this.renderLines([cubeWorldPos[0], cubeWorldPos[1], cubeWorldPos[1], cubeWorldPos[2], cubeWorldPos[2], cubeWorldPos[3], cubeWorldPos[3], cubeWorldPos[0], cubeWorldPos[4], cubeWorldPos[5], cubeWorldPos[5], cubeWorldPos[6], cubeWorldPos[6], cubeWorldPos[7], cubeWorldPos[7], cubeWorldPos[4], cubeWorldPos[0], cubeWorldPos[4], cubeWorldPos[1], cubeWorldPos[5], cubeWorldPos[2], cubeWorldPos[6], cubeWorldPos[3], cubeWorldPos[7]], color, options);\n  }\n  function _preRenderImmediate() {\n    for (var i = 0; i < this._immediateData.lineBatches.length; i++) {\n      if (this._immediateData.lineBatches[i]) {\n        this._immediateData.lineBatches[i].finalize();\n      }\n    }\n  }\n  function _postRenderImmediate() {\n    for (var i = 0; i < this._immediateData.layers.length; i++) {\n      this._immediateData.layers[i].clearMeshInstances(true);\n    }\n    this._immediateData.layers.length = 0;\n  }\n  function renderMeshInstance(meshInstance, options) {\n    if (!options) {\n      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE)};\n    }\n    this._initImmediate();\n    this._immediateData.addLayer(options.layer);\n    meshInstanceArray[0] = meshInstance;\n    options.layer.addMeshInstances(meshInstanceArray, true);\n  }\n  function renderMesh(mesh, material, matrix, options) {\n    if (!options) {\n      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE)};\n    }\n    this._initImmediate();\n    tempGraphNode.worldTransform = matrix;\n    tempGraphNode._dirtyWorld = tempGraphNode._dirtyNormal = false;\n    var instance = new pc.MeshInstance(tempGraphNode, mesh, material);\n    instance.cull = false;\n    if (options.mask) {\n      instance.mask = options.mask;\n    }\n    this._immediateData.addLayer(options.layer);\n    meshInstanceArray[0] = instance;\n    options.layer.addMeshInstances(meshInstanceArray, true);\n  }\n  function renderQuad(matrix, material, options) {\n    if (!options) {\n      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE)};\n    }\n    this._initImmediate();\n    if (!this._immediateData.quadMesh) {\n      var format = new pc.VertexFormat(this.graphicsDevice, [{semantic:pc.SEMANTIC_POSITION, components:3, type:pc.TYPE_FLOAT32}]);\n      var quadVb = new pc.VertexBuffer(this.graphicsDevice, format, 4);\n      var iterator = new pc.VertexIterator(quadVb);\n      iterator.element[pc.SEMANTIC_POSITION].set(-0.5, -0.5, 0);\n      iterator.next();\n      iterator.element[pc.SEMANTIC_POSITION].set(0.5, -0.5, 0);\n      iterator.next();\n      iterator.element[pc.SEMANTIC_POSITION].set(-0.5, 0.5, 0);\n      iterator.next();\n      iterator.element[pc.SEMANTIC_POSITION].set(0.5, 0.5, 0);\n      iterator.end();\n      this._immediateData.quadMesh = new pc.Mesh;\n      this._immediateData.quadMesh.vertexBuffer = quadVb;\n      this._immediateData.quadMesh.primitive[0].type = pc.PRIMITIVE_TRISTRIP;\n      this._immediateData.quadMesh.primitive[0].base = 0;\n      this._immediateData.quadMesh.primitive[0].count = 4;\n      this._immediateData.quadMesh.primitive[0].indexed = false;\n    }\n    tempGraphNode.worldTransform = matrix;\n    tempGraphNode._dirtyWorld = tempGraphNode._dirtyNormal = false;\n    var quad = new pc.MeshInstance(tempGraphNode, this._immediateData.quadMesh, material);\n    quad.cull = false;\n    meshInstanceArray[0] = quad;\n    this._immediateData.addLayer(options.layer);\n    options.layer.addMeshInstances(meshInstanceArray, true);\n  }\n  return {renderMeshInstance:renderMeshInstance, renderMesh:renderMesh, renderLine:renderLine, renderLines:renderLines, renderQuad:renderQuad, renderWireCube:renderWireCube, _addLines:_addLines, _initImmediate:_initImmediate, _preRenderImmediate:_preRenderImmediate, _postRenderImmediate:_postRenderImmediate};\n}());\npc.extend(pc, function() {\n  var maxSize = 2048;\n  var maskDynamic = 1;\n  var maskBaked = 2;\n  var maskLightmap = 4;\n  var sceneLightmaps = [];\n  var sceneLightmapsNode = [];\n  var lmCamera;\n  var tempVec = new pc.Vec3;\n  var bounds = new pc.BoundingBox;\n  var lightBounds = new pc.BoundingBox;\n  var tempSphere = {};\n  var PASS_COLOR = 0;\n  var PASS_DIR = 1;\n  var passTexName = [\"texture_lightMap\", \"texture_dirLightMap\"];\n  var passMaterial = [];\n  function collectModels(node, nodes, nodesMeshInstances, allNodes) {\n    if (!node.enabled) {\n      return;\n    }\n    var i;\n    if (node.model && node.model.model && node.model.enabled) {\n      if (allNodes) {\n        allNodes.push(node);\n      }\n      if (node.model.data.lightmapped) {\n        if (nodes) {\n          var hasUv1 = true;\n          var meshInstances = node.model.model.meshInstances;\n          for (i = 0; i < meshInstances.length; i++) {\n            if (!meshInstances[i].mesh.vertexBuffer.format.hasUv1) {\n              hasUv1 = false;\n              break;\n            }\n          }\n          if (hasUv1) {\n            var j;\n            var isInstance;\n            var notInstancedMeshInstances = [];\n            for (i = 0; i < meshInstances.length; i++) {\n              isInstance = false;\n              for (j = 0; j < meshInstances.length; j++) {\n                if (i !== j) {\n                  if (meshInstances[i].mesh === meshInstances[j].mesh) {\n                    isInstance = true;\n                  }\n                }\n              }\n              if (isInstance) {\n                nodes.push(node);\n                nodesMeshInstances.push([meshInstances[i]]);\n              } else {\n                notInstancedMeshInstances.push(meshInstances[i]);\n              }\n            }\n            if (notInstancedMeshInstances.length > 0) {\n              nodes.push(node);\n              nodesMeshInstances.push(notInstancedMeshInstances);\n            }\n          }\n        }\n      }\n    }\n    for (i = 0; i < node._children.length; i++) {\n      collectModels(node._children[i], nodes, nodesMeshInstances, allNodes);\n    }\n  }\n  var Lightmapper = function(device, root, scene, renderer, assets) {\n    this.device = device;\n    this.root = root;\n    this.scene = scene;\n    this.renderer = renderer;\n    this.assets = assets;\n  };\n  Lightmapper.prototype = {calculateLightmapSize:function(node) {\n    var data, parent;\n    var sizeMult = this.scene.lightmapSizeMultiplier || 16;\n    var scale = tempVec;\n    var area = {x:1, y:1, z:1, uv:1};\n    if (node.model.asset) {\n      data = this.assets.get(node.model.asset).data;\n      if (data.area) {\n        area.x = data.area.x;\n        area.y = data.area.y;\n        area.z = data.area.z;\n        area.uv = data.area.uv;\n      }\n    } else {\n      if (node.model._area) {\n        data = node.model;\n        if (data._area) {\n          area.x = data._area.x;\n          area.y = data._area.y;\n          area.z = data._area.z;\n          area.uv = data._area.uv;\n        }\n      }\n    }\n    var areaMult = node.model.lightmapSizeMultiplier || 1;\n    area.x *= areaMult;\n    area.y *= areaMult;\n    area.z *= areaMult;\n    scale.copy(node.localScale);\n    parent = node._parent;\n    while (parent) {\n      scale.mul(parent.localScale);\n      parent = parent._parent;\n    }\n    scale.x = Math.abs(scale.x);\n    scale.y = Math.abs(scale.y);\n    scale.z = Math.abs(scale.z);\n    var totalArea = area.x * scale.y * scale.z + area.y * scale.x * scale.z + area.z * scale.x * scale.y;\n    totalArea /= area.uv;\n    totalArea = Math.sqrt(totalArea);\n    return Math.min(pc.math.nextPowerOfTwo(totalArea * sizeMult), this.scene.lightmapMaxResolution || maxSize);\n  }, bake:function(nodes, mode) {\n    var i, j;\n    var device = this.device;\n    var scene = this.scene;\n    var passCount = 1;\n    if (mode === undefined) {\n      mode = pc.BAKE_COLORDIR;\n    }\n    if (mode === pc.BAKE_COLORDIR) {\n      passCount = 2;\n    }\n    var pass;\n    var allNodes = [];\n    var nodesMeshInstances = [];\n    if (!nodes) {\n      for (i = 0; i < sceneLightmaps.length; i++) {\n        for (j = 0; j < sceneLightmaps[i].length; j++) {\n          sceneLightmaps[i][j].destroy();\n        }\n      }\n      sceneLightmaps = [];\n      sceneLightmapsNode = [];\n      nodes = [];\n      collectModels(this.root, nodes, nodesMeshInstances, allNodes);\n    } else {\n      var k;\n      for (i = sceneLightmapsNode.length - 1; i >= 0; i--) {\n        for (j = 0; j < nodes.length; j++) {\n          if (sceneLightmapsNode[i] === nodes[j]) {\n            for (k = 0; k < sceneLightmaps[i].length; k++) {\n              sceneLightmaps[i][k].destroy();\n            }\n            sceneLightmaps.splice(i, 1);\n            sceneLightmapsNode.splice(i, 1);\n          }\n        }\n      }\n      var _nodes = [];\n      for (i = 0; i < nodes.length; i++) {\n        collectModels(nodes[i], _nodes, nodesMeshInstances);\n      }\n      nodes = _nodes;\n      collectModels(this.root, null, null, allNodes);\n    }\n    if (nodes.length === 0) {\n      device.fire(\"lightmapper:end\", {timestamp:pc.now(), target:this});\n      return;\n    }\n    var revertStatic = false;\n    if (scene._needsStaticPrepare) {\n      scene._needsStaticPrepare = false;\n      revertStatic = true;\n    }\n    var texSize = [];\n    var lmaps = [[], []];\n    var texPool = {};\n    var size;\n    var tex;\n    var blackTex = new pc.Texture(this.device, {width:4, height:4, format:pc.PIXELFORMAT_R8_G8_B8_A8, rgbm:true});\n    for (i = 0; i < nodes.length; i++) {\n      size = this.calculateLightmapSize(nodes[i]);\n      texSize.push(size);\n      for (pass = 0; pass < passCount; pass++) {\n        tex = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_R8_G8_B8_A8, mipmaps:false, rgbm:pass === PASS_COLOR, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});\n        lmaps[pass].push(tex);\n      }\n      if (!texPool[size]) {\n        var tex2 = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_R8_G8_B8_A8, mipmaps:false, rgbm:true, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});\n        var targ2 = new pc.RenderTarget(device, tex2, {depth:false});\n        texPool[size] = targ2;\n      }\n    }\n    var activeComp = scene.layers;\n    activeComp._update();\n    var lights = [];\n    var origMask = [];\n    var origShadowMode = [];\n    var origEnabled = [];\n    var sceneLights = activeComp._lights;\n    var mask;\n    for (i = 0; i < sceneLights.length; i++) {\n      if (sceneLights[i]._enabled) {\n        mask = sceneLights[i]._mask;\n        if ((mask & maskLightmap) !== 0) {\n          origMask.push(mask);\n          origShadowMode.push(sceneLights[i].shadowUpdateMode);\n          sceneLights[i]._mask = 4294967295;\n          sceneLights[i].shadowUpdateMode = sceneLights[i]._type === pc.LIGHTTYPE_DIRECTIONAL ? pc.SHADOWUPDATE_REALTIME : pc.SHADOWUPDATE_THISFRAME;\n          lights.push(sceneLights[i]);\n          sceneLights[i].isStatic = false;\n        }\n      }\n      origEnabled.push(sceneLights[i]._enabled);\n      sceneLights[i].enabled = false;\n    }\n    var chunks = pc.shaderChunks;\n    var xformUv1 = \"#define UV1LAYOUT\\n\" + chunks.transformVS;\n    var bakeLmEnd = chunks.bakeLmEndPS;\n    var dilate = chunks.dilatePS;\n    var dilateShader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, dilate, \"lmDilate\");\n    var constantTexSource = device.scope.resolve(\"source\");\n    var constantPixelOffset = device.scope.resolve(\"pixelOffset\");\n    var constantBakeDir = device.scope.resolve(\"bakeDir\");\n    var pixelOffset = new pc.Vec2;\n    var drawCalls = activeComp._meshInstances;\n    for (i = 0; i < drawCalls.length; i++) {\n      if (drawCalls[i].node) {\n        drawCalls[i].node.getWorldTransform();\n      }\n    }\n    var origFog = scene.fog;\n    var origAmbientR = scene.ambientLight.data[0];\n    var origAmbientG = scene.ambientLight.data[1];\n    var origAmbientB = scene.ambientLight.data[2];\n    scene.fog = pc.FOG_NONE;\n    scene.ambientLight.data[0] = 0;\n    scene.ambientLight.data[1] = 0;\n    scene.ambientLight.data[2] = 0;\n    if (!lmCamera) {\n      lmCamera = new pc.Camera;\n      lmCamera._node = new pc.GraphNode;\n      lmCamera.clearColor[0] = 0;\n      lmCamera.clearColor[1] = 0;\n      lmCamera.clearColor[2] = 0;\n      lmCamera.clearColor[3] = 0;\n      lmCamera.clearDepth = 1;\n      lmCamera.clearFlags = pc.CLEARFLAG_COLOR;\n      lmCamera.clearStencil = null;\n      lmCamera.frustumCulling = false;\n    }\n    var node;\n    var lm, rcv, mat, m;\n    var origShaderDefs = [];\n    origShaderDefs.length = sceneLightmapsNode.length;\n    var shaderDefs;\n    for (node = 0; node < allNodes.length; node++) {\n      rcv = allNodes[node].model.model.meshInstances;\n      shaderDefs = [];\n      for (i = 0; i < rcv.length; i++) {\n        shaderDefs.push(rcv[i]._shaderDefs);\n        rcv[i]._shaderDefs &= ~(pc.SHADERDEF_LM | pc.SHADERDEF_DIRLM);\n      }\n      for (i = 0; i < sceneLightmapsNode.length; i++) {\n        if (sceneLightmapsNode[i] === allNodes[node]) {\n          origShaderDefs[i] = shaderDefs;\n          break;\n        }\n      }\n    }\n    var origCastShadows = [];\n    var casters = [];\n    var meshes;\n    for (node = 0; node < allNodes.length; node++) {\n      origCastShadows[node] = allNodes[node].model.castShadows;\n      allNodes[node].model.castShadows = allNodes[node].model.data.castShadowsLightmap;\n      if (allNodes[node].model.data.castShadowsLightmap) {\n        meshes = allNodes[node].model.meshInstances;\n        for (i = 0; i < meshes.length; i++) {\n          meshes[i].visibleThisFrame = true;\n          casters.push(meshes[i]);\n        }\n      }\n    }\n    this.renderer.updateCpuSkinMatrices(casters);\n    this.renderer.gpuUpdate(casters);\n    var origMat = [];\n    var nodeBounds = [];\n    var nodeTarg = [[], []];\n    var targ, targTmp, texTmp;\n    var light, shadowCam;\n    var nodeLightCount = [];\n    nodeLightCount.length = nodes.length;\n    var lmMaterial;\n    for (pass = 0; pass < passCount; pass++) {\n      if (!passMaterial[pass]) {\n        lmMaterial = new pc.StandardMaterial;\n        lmMaterial.chunks.transformVS = xformUv1;\n        if (pass === PASS_COLOR) {\n          lmMaterial.chunks.endPS = bakeLmEnd;\n          lmMaterial.ambient = new pc.Color(0, 0, 0);\n          lmMaterial.ambientTint = true;\n          lmMaterial.lightMap = blackTex;\n        } else {\n          lmMaterial.chunks.basePS = chunks.basePS + \"\\nuniform sampler2D texture_dirLightMap;\\nuniform float bakeDir;\\n\";\n          lmMaterial.chunks.endPS = chunks.bakeDirLmEndPS;\n        }\n        lmMaterial.chunks.outputAlphaPS = \"\\n\";\n        lmMaterial.chunks.outputAlphaOpaquePS = \"\\n\";\n        lmMaterial.chunks.outputAlphaPremulPS = \"\\n\";\n        lmMaterial.cull = pc.CULLFACE_NONE;\n        lmMaterial.forceUv1 = true;\n        lmMaterial.update();\n        lmMaterial.updateShader(device, scene);\n        lmMaterial.name = \"lmMaterial\" + pass;\n        passMaterial[pass] = lmMaterial;\n      }\n    }\n    for (node = 0; node < nodes.length; node++) {\n      rcv = nodesMeshInstances[node];\n      nodeLightCount[node] = 0;\n      if (rcv.length > 0) {\n        bounds.copy(rcv[0].aabb);\n        for (i = 0; i < rcv.length; i++) {\n          rcv[i].node.getWorldTransform();\n          bounds.add(rcv[i].aabb);\n        }\n      }\n      var nbounds = new pc.BoundingBox;\n      nbounds.copy(bounds);\n      nodeBounds.push(nbounds);\n      for (i = 0; i < rcv.length; i++) {\n        m = rcv[i];\n        m._shaderDefs &= ~(pc.SHADERDEF_LM | pc.SHADERDEF_DIRLM);\n        m.mask = maskLightmap;\n        m.deleteParameter(\"texture_lightMap\");\n        m.deleteParameter(\"texture_dirLightMap\");\n        m.setParameter(\"texture_lightMap\", m.material.lightMap ? m.material.lightMap : blackTex);\n        m.setParameter(\"texture_dirLightMap\", blackTex);\n      }\n      for (pass = 0; pass < passCount; pass++) {\n        lm = lmaps[pass][node];\n        targ = new pc.RenderTarget(device, lm, {depth:false});\n        nodeTarg[pass].push(targ);\n      }\n    }\n    for (j = 0; j < lights.length; j++) {\n      lights[j].enabled = false;\n    }\n    var drawCallArray = [];\n    var lightArray = [[], [], []];\n    var shadersUpdatedOn1stPass = false;\n    var shadowMapRendered;\n    for (i = 0; i < lights.length; i++) {\n      lights[i].enabled = true;\n      shadowMapRendered = false;\n      lights[i]._cacheShadowMap = true;\n      if (lights[i]._type !== pc.LIGHTTYPE_DIRECTIONAL) {\n        lights[i]._node.getWorldTransform();\n        lights[i].getBoundingSphere(tempSphere);\n        lightBounds.center = tempSphere.center;\n        lightBounds.halfExtents.x = tempSphere.radius;\n        lightBounds.halfExtents.y = tempSphere.radius;\n        lightBounds.halfExtents.z = tempSphere.radius;\n      }\n      if (lights[i]._type === pc.LIGHTTYPE_SPOT) {\n        light = lights[i];\n        shadowCam = this.renderer.getShadowCamera(device, light);\n        shadowCam._node.setPosition(light._node.getPosition());\n        shadowCam._node.setRotation(light._node.getRotation());\n        shadowCam._node.rotateLocal(-90, 0, 0);\n        shadowCam.projection = pc.PROJECTION_PERSPECTIVE;\n        shadowCam.nearClip = light.attenuationEnd / 1000;\n        shadowCam.farClip = light.attenuationEnd;\n        shadowCam.aspectRatio = 1;\n        shadowCam.fov = light._outerConeAngle * 2;\n        this.renderer.updateCameraFrustum(shadowCam);\n      }\n      if (nodesMeshInstances.length > 0) {\n        this.renderer.updateShaders(nodesMeshInstances[0]);\n      }\n      for (node = 0; node < nodes.length; node++) {\n        rcv = nodesMeshInstances[node];\n        bounds = nodeBounds[node];\n        if (lights[i]._type === pc.LIGHTTYPE_DIRECTIONAL) {\n          tempVec.copy(bounds.center);\n          tempVec.y += bounds.halfExtents.y;\n          lmCamera._node.setPosition(tempVec);\n          lmCamera._node.setEulerAngles(-90, 0, 0);\n          var frustumSize = Math.max(bounds.halfExtents.x, bounds.halfExtents.z);\n          lmCamera.projection = pc.PROJECTION_ORTHOGRAPHIC;\n          lmCamera.nearClip = 0;\n          lmCamera.farClip = bounds.halfExtents.y * 2;\n          lmCamera.aspectRatio = 1;\n          lmCamera.orthoHeight = frustumSize;\n        } else {\n          if (!lightBounds.intersects(bounds)) {\n            continue;\n          }\n        }\n        if (lights[i]._type === pc.LIGHTTYPE_SPOT) {\n          var nodeVisible = false;\n          for (j = 0; j < rcv.length; j++) {\n            if (this.renderer._isVisible(shadowCam, rcv[j])) {\n              nodeVisible = true;\n              break;\n            }\n          }\n          if (!nodeVisible) {\n            continue;\n          }\n        }\n        if (lights[i]._type === pc.LIGHTTYPE_DIRECTIONAL) {\n          lightArray[pc.LIGHTTYPE_DIRECTIONAL][0] = lights[i];\n          lightArray[pc.LIGHTTYPE_POINT].length = 0;\n          lightArray[pc.LIGHTTYPE_SPOT].length = 0;\n          if (!shadowMapRendered && lights[i].castShadows) {\n            this.renderer.cullDirectionalShadowmap(lights[i], casters, lmCamera, 0);\n            this.renderer.renderShadows(lightArray[pc.LIGHTTYPE_DIRECTIONAL], 0);\n            shadowMapRendered = true;\n          }\n        } else {\n          lightArray[pc.LIGHTTYPE_DIRECTIONAL].length = 0;\n          if (lights[i]._type === pc.LIGHTTYPE_POINT) {\n            lightArray[pc.LIGHTTYPE_POINT][0] = lights[i];\n            lightArray[pc.LIGHTTYPE_SPOT].length = 0;\n            if (!shadowMapRendered && lights[i].castShadows) {\n              this.renderer.cullLocalShadowmap(lights[i], casters);\n              this.renderer.renderShadows(lightArray[pc.LIGHTTYPE_POINT]);\n              shadowMapRendered = true;\n            }\n          } else {\n            lightArray[pc.LIGHTTYPE_POINT].length = 0;\n            lightArray[pc.LIGHTTYPE_SPOT][0] = lights[i];\n            if (!shadowMapRendered && lights[i].castShadows) {\n              this.renderer.cullLocalShadowmap(lights[i], casters);\n              this.renderer.renderShadows(lightArray[pc.LIGHTTYPE_SPOT]);\n              shadowMapRendered = true;\n            }\n          }\n        }\n        for (j = 0; j < rcv.length; j++) {\n          origMat[j] = rcv[j].material;\n        }\n        for (pass = 0; pass < passCount; pass++) {\n          lm = lmaps[pass][node];\n          targ = nodeTarg[pass][node];\n          targTmp = texPool[lm.width];\n          texTmp = targTmp.colorBuffer;\n          if (pass === 0) {\n            shadersUpdatedOn1stPass = scene.updateShaders;\n          } else {\n            if (shadersUpdatedOn1stPass) {\n              scene.updateShaders = true;\n            }\n          }\n          for (j = 0; j < rcv.length; j++) {\n            rcv[j].material = passMaterial[pass];\n          }\n          if (passCount > 1) {\n            this.renderer.updateShaders(rcv);\n          }\n          this.renderer.setCamera(lmCamera, targTmp, true);\n          if (pass === PASS_DIR) {\n            constantBakeDir.setValue(lights[i].bakeDir ? 1 : 0);\n          }\n          this.renderer._forwardTime = 0;\n          this.renderer._shadowMapTime = 0;\n          this.renderer.renderForward(lmCamera, rcv, rcv.length, lightArray, pc.SHADER_FORWARDHDR);\n          lmaps[pass][node] = texTmp;\n          nodeTarg[pass][node] = targTmp;\n          texPool[lm.width] = targ;\n          for (j = 0; j < rcv.length; j++) {\n            m = rcv[j];\n            m.setParameter(passTexName[pass], texTmp);\n            m._shaderDefs |= pc.SHADERDEF_LM;\n          }\n        }\n        nodeLightCount[node]++;\n        for (j = 0; j < rcv.length; j++) {\n          rcv[j].material = origMat[j];\n        }\n      }\n      lights[i].enabled = false;\n      lights[i]._cacheShadowMap = false;\n      if (lights[i]._isCachedShadowMap) {\n        lights[i]._destroyShadowMap();\n      }\n    }\n    var sceneLmaps;\n    for (node = 0; node < nodes.length; node++) {\n      rcv = nodesMeshInstances[node];\n      sceneLmaps = [];\n      for (pass = 0; pass < passCount; pass++) {\n        lm = lmaps[pass][node];\n        targ = nodeTarg[pass][node];\n        targTmp = texPool[lm.width];\n        texTmp = targTmp.colorBuffer;\n        var numDilates2x = 4;\n        pixelOffset.set(1 / lm.width, 1 / lm.height);\n        constantPixelOffset.setValue(pixelOffset.data);\n        for (i = 0; i < numDilates2x; i++) {\n          constantTexSource.setValue(lm);\n          pc.drawQuadWithShader(device, targTmp, dilateShader);\n          constantTexSource.setValue(texTmp);\n          pc.drawQuadWithShader(device, targ, dilateShader);\n        }\n        for (i = 0; i < rcv.length; i++) {\n          m = rcv[i];\n          m.mask = maskBaked;\n          rcv[i].setParameter(passTexName[pass], lm);\n          if (pass === PASS_DIR) {\n            rcv[i]._shaderDefs |= pc.SHADERDEF_DIRLM;\n          }\n        }\n        sceneLmaps[pass] = lm;\n        if (pass === passCount - 1) {\n          targ.destroy();\n        }\n      }\n      sceneLightmaps.push(sceneLmaps);\n      sceneLightmapsNode.push(nodes[node]);\n    }\n    for (var key in texPool) {\n      if (texPool.hasOwnProperty(key)) {\n        texPool[key].colorBuffer.destroy();\n        texPool[key].destroy();\n      }\n    }\n    for (i = 0; i < sceneLightmaps.length; i++) {\n      for (j = 0; j < sceneLightmaps[i].length; j++) {\n        tex = sceneLightmaps[i][j];\n        tex.minFilter = pc.FILTER_LINEAR;\n        tex.magFilter = pc.FILTER_LINEAR;\n      }\n    }\n    for (node = 0; node < allNodes.length; node++) {\n      allNodes[node].model.castShadows = origCastShadows[node];\n    }\n    for (i = 0; i < origShaderDefs.length; i++) {\n      if (origShaderDefs[i]) {\n        rcv = sceneLightmapsNode[i].model.model.meshInstances;\n        for (j = 0; j < rcv.length; j++) {\n          rcv[j]._shaderDefs |= origShaderDefs[i][j] & (pc.SHADERDEF_LM | pc.SHADERDEF_DIRLM);\n        }\n      }\n    }\n    for (i = 0; i < lights.length; i++) {\n      lights[i]._mask = origMask[i];\n      lights[i].shadowUpdateMode = origShadowMode[i];\n    }\n    for (i = 0; i < sceneLights.length; i++) {\n      sceneLights[i].enabled = origEnabled[i];\n    }\n    scene.fog = origFog;\n    scene.ambientLight.data[0] = origAmbientR;\n    scene.ambientLight.data[1] = origAmbientG;\n    scene.ambientLight.data[2] = origAmbientB;\n    if (revertStatic) {\n      scene._needsStaticPrepare = true;\n    }\n  }};\n  return {Lightmapper:Lightmapper};\n}());\npc.extend(pc, function() {\n  var Batch = function(meshInstances, dynamic, batchGroupId) {\n    this.origMeshInstances = meshInstances;\n    this._aabb = new pc.BoundingBox;\n    this.meshInstance = null;\n    this.model = null;\n    this.dynamic = dynamic;\n    this.batchGroupId = batchGroupId;\n  };\n  var BatchGroup = function(id, name, dynamic, maxAabbSize, layers) {\n    this.dynamic = dynamic;\n    this.maxAabbSize = maxAabbSize;\n    this.id = id;\n    this.name = name;\n    this.layers = layers === undefined ? [pc.LAYERID_WORLD] : layers;\n  };\n  var SkinBatchInstance = function(device, nodes, rootNode) {\n    this.device = device;\n    this.rootNode = rootNode;\n    this._dirty = true;\n    this.bones = nodes;\n    var numBones = nodes.length;\n    if (device.supportsBoneTextures) {\n      var size;\n      if (numBones > 256) {\n        size = 64;\n      } else {\n        if (numBones > 64) {\n          size = 32;\n        } else {\n          if (numBones > 16) {\n            size = 16;\n          } else {\n            size = 8;\n          }\n        }\n      }\n      this.boneTexture = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_RGBA32F, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});\n      this.matrixPalette = this.boneTexture.lock();\n    } else {\n      this.matrixPalette = new Float32Array(numBones * 16);\n    }\n  };\n  SkinBatchInstance.prototype = {updateMatrices:function() {\n  }, updateMatrixPalette:function() {\n    var pe;\n    var mp = this.matrixPalette;\n    var base;\n    for (var i = this.bones.length - 1; i >= 0; i--) {\n      pe = this.bones[i].getWorldTransform().data;\n      base = i * 16;\n      mp[base] = pe[0];\n      mp[base + 1] = pe[1];\n      mp[base + 2] = pe[2];\n      mp[base + 3] = pe[3];\n      mp[base + 4] = pe[4];\n      mp[base + 5] = pe[5];\n      mp[base + 6] = pe[6];\n      mp[base + 7] = pe[7];\n      mp[base + 8] = pe[8];\n      mp[base + 9] = pe[9];\n      mp[base + 10] = pe[10];\n      mp[base + 11] = pe[11];\n      mp[base + 12] = pe[12];\n      mp[base + 13] = pe[13];\n      mp[base + 14] = pe[14];\n      mp[base + 15] = pe[15];\n    }\n    if (this.device.supportsBoneTextures) {\n      this.boneTexture.lock();\n      this.boneTexture.unlock();\n    }\n  }};\n  var BatchManager = function(device, root, scene) {\n    this.device = device;\n    this.rootNode = root;\n    this.scene = scene;\n    this._init = false;\n    this._batchGroups = {};\n    this._batchGroupCounter = 0;\n    this._batchList = [];\n    this._dirtyGroups = [];\n  };\n  BatchManager.prototype.addGroup = function(name, dynamic, maxAabbSize, id, layers) {\n    if (id === undefined) {\n      id = this._batchGroupCounter;\n      this._batchGroupCounter++;\n    }\n    if (this._batchGroups[id]) {\n      return;\n    }\n    var group;\n    this._batchGroups[id] = group = new pc.BatchGroup(id, name, dynamic, maxAabbSize, layers);\n    return group;\n  };\n  BatchManager.prototype.removeGroup = function(id) {\n    if (!this._batchGroups[id]) {\n      return;\n    }\n    var newBatchList = [];\n    for (var i = 0; i < this._batchList.length; i++) {\n      if (this._batchList[i].batchGroupId !== id) {\n        newBatchList.push(this._batchList[i]);\n        continue;\n      }\n      this._batchList[i].refCounter = 1;\n      this.destroy(this._batchList[i]);\n    }\n    this._batchList = newBatchList;\n    this._removeModelsFromBatchGroup(this.rootNode, id);\n    delete this._batchGroups[id];\n  };\n  BatchManager.prototype._removeModelsFromBatchGroup = function(node, id) {\n    if (!node.enabled) {\n      return;\n    }\n    if (node.model && node.model.batchGroupId === id) {\n      node.model.batchGroupId = -1;\n    }\n    if (node.element && node.element.batchGroupId === id) {\n      node.element.batchGroupId = -1;\n    }\n    if (node.sprite && node.sprite.batchGroupId === id) {\n      node.sprite.batchGroupId = -1;\n    }\n    for (var i = 0; i < node._children.length; i++) {\n      this._removeModelsFromBatchGroup(node._children[i], id);\n    }\n  };\n  BatchManager.prototype._collectAndRemoveModels = function(node, groupMeshInstances, groupIds) {\n    if (!node.enabled) {\n      return;\n    }\n    var i;\n    if (node.model && node.model.batchGroupId >= 0 && node.model.model && node.model.enabled) {\n      if (!groupIds || groupIds && groupIds.indexOf(node.model.batchGroupId) >= 0) {\n        var arr = groupMeshInstances[node.model.batchGroupId];\n        if (!arr) {\n          arr = groupMeshInstances[node.model.batchGroupId] = [];\n        }\n        if (node.model.isStatic) {\n          var drawCalls = this.scene.drawCalls;\n          var nodeMeshInstances = node.model.meshInstances;\n          for (i = 0; i < drawCalls.length; i++) {\n            if (!drawCalls[i]._staticSource) {\n              continue;\n            }\n            if (nodeMeshInstances.indexOf(drawCalls[i]._staticSource) < 0) {\n              continue;\n            }\n            groupMeshInstances[node.model.batchGroupId].push(drawCalls[i]);\n          }\n          for (i = 0; i < nodeMeshInstances.length; i++) {\n            if (drawCalls.indexOf(nodeMeshInstances[i]) >= 0) {\n              groupMeshInstances[node.model.batchGroupId].push(nodeMeshInstances[i]);\n            }\n          }\n        } else {\n          groupMeshInstances[node.model.batchGroupId] = arr.concat(node.model.meshInstances);\n        }\n        node.model.removeModelFromLayers(node.model.model);\n      }\n    }\n    if (node.element && node.element.batchGroupId >= 0 && node.element.enabled) {\n      if (!groupIds || groupIds && groupIds.indexOf(node.element.batchGroupId) >= 0) {\n        var arr = groupMeshInstances[node.element.batchGroupId];\n        if (!arr) {\n          arr = groupMeshInstances[node.element.batchGroupId] = [];\n        }\n        var valid = false;\n        if (node.element._text) {\n          groupMeshInstances[node.element.batchGroupId].push(node.element._text._model.meshInstances[0]);\n          node.element.removeModelFromLayers(node.element._text._model);\n          valid = true;\n        } else {\n          if (node.element._image) {\n            groupMeshInstances[node.element.batchGroupId].push(node.element._image._model.meshInstances[0]);\n            node.element.removeModelFromLayers(node.element._image._model);\n            valid = true;\n          }\n        }\n      }\n    }\n    if (node.sprite && node.sprite.batchGroupId >= 0 && node.sprite.enabled) {\n      if (!groupIds || groupIds && groupIds.indexOf(node.sprite.batchGroupId) >= 0) {\n        var arr = groupMeshInstances[node.sprite.batchGroupId];\n        if (!arr) {\n          arr = groupMeshInstances[node.sprite.batchGroupId] = [];\n        }\n        if (node.sprite._meshInstance) {\n          groupMeshInstances[node.sprite.batchGroupId].push(node.sprite._meshInstance);\n          this.scene.removeModel(node.sprite._model);\n          node.sprite._batchGroup = this._batchGroups[node.sprite.batchGroupId];\n        }\n      }\n    }\n    for (i = 0; i < node._children.length; i++) {\n      this._collectAndRemoveModels(node._children[i], groupMeshInstances, groupIds);\n    }\n  };\n  BatchManager.prototype._markGroupDirty = function(id) {\n    if (this._dirtyGroups.indexOf(id) < 0) {\n      this._dirtyGroups.push(id);\n    }\n  };\n  BatchManager.prototype._registerEntities = function(batch, meshInstances) {\n    var node;\n    var ents = [];\n    for (var i = 0; i < meshInstances.length; i++) {\n      node = meshInstances[i].node;\n      while (!node._app && node._parent) {\n        node = node._parent;\n      }\n      if (!node._app) {\n        continue;\n      }\n      ents.push(node);\n    }\n    this.register(batch, ents);\n  };\n  BatchManager.prototype.generate = function(groupIds) {\n    var i, j;\n    var groupMeshInstances = {};\n    if (!groupIds) {\n      for (i = 0; i < this._batchList.length; i++) {\n        this._batchList[i].refCounter = 1;\n        this.destroy(this._batchList[i]);\n      }\n      this._batchList.length = 0;\n      this._collectAndRemoveModels(this.rootNode, groupMeshInstances);\n      this._dirtyGroups.length = 0;\n    } else {\n      var newBatchList = [];\n      for (i = 0; i < this._batchList.length; i++) {\n        if (groupIds.indexOf(this._batchList[i].batchGroupId) < 0) {\n          newBatchList.push(this._batchList[i]);\n          continue;\n        }\n        this._batchList[i].refCounter = 1;\n        this.destroy(this._batchList[i]);\n      }\n      this._batchList = newBatchList;\n      this._collectAndRemoveModels(this.rootNode, groupMeshInstances, groupIds);\n      if (groupIds === this._dirtyGroups) {\n        this._dirtyGroups.length = 0;\n      } else {\n        var newDirtyGroups = [];\n        for (i = 0; i < this._dirtyGroups.length; i++) {\n          if (groupIds.indexOf(this._dirtyGroups[i]) < 0) {\n            newDirtyGroups.push(this._dirtyGroups[i]);\n          }\n        }\n        this._dirtyGroups = newDirtyGroups;\n      }\n    }\n    var group, lists, groupData, batch;\n    for (var groupId in groupMeshInstances) {\n      if (!groupMeshInstances.hasOwnProperty(groupId)) {\n        continue;\n      }\n      group = groupMeshInstances[groupId];\n      groupData = this._batchGroups[groupId];\n      if (!groupData) {\n        continue;\n      }\n      lists = this.prepare(group, groupData.dynamic, groupData.maxAabbSize);\n      for (i = 0; i < lists.length; i++) {\n        batch = this.create(lists[i], groupData.dynamic, parseInt(groupId));\n        for (j = 0; j < groupData.layers.length; j++) {\n          this.scene.layers.getLayerById(groupData.layers[j]).addMeshInstances(batch.model.meshInstances);\n        }\n        this._registerEntities(batch, lists[i]);\n      }\n    }\n  };\n  BatchManager.prototype.getGroupByName = function(name) {\n    var groups = this._batchGroups;\n    for (var group in groups) {\n      if (!groups.hasOwnProperty(group)) {\n        continue;\n      }\n      if (groups[group].name === name) {\n        return groups[group];\n      }\n    }\n    return null;\n  };\n  function paramsIdentical(a, b) {\n    if (a && !b) {\n      return false;\n    }\n    if (!a && b) {\n      return false;\n    }\n    a = a.data;\n    b = b.data;\n    if (a === b) {\n      return true;\n    }\n    if (a instanceof Float32Array && b instanceof Float32Array) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  BatchManager.prototype.prepare = function(meshInstances, dynamic, maxAabbSize) {\n    if (meshInstances.length === 0) {\n      return [];\n    }\n    if (maxAabbSize === undefined) {\n      maxAabbSize = Number.POSITIVE_INFINITY;\n    }\n    var halfMaxAabbSize = maxAabbSize * 0.5;\n    var maxInstanceCount = this.device.supportsBoneTextures ? 1024 : this.device.boneLimit;\n    var i;\n    var material, layer, vertCount, params, params2, param, paramFailed, lightList, defs;\n    var aabb = new pc.BoundingBox;\n    var testAabb = new pc.BoundingBox;\n    var lists = [];\n    var j = 0;\n    var meshInstancesLeftA = meshInstances;\n    var meshInstancesLeftB;\n    var k;\n    while (meshInstancesLeftA.length > 0) {\n      lists[j] = [];\n      meshInstancesLeftB = [];\n      material = meshInstancesLeftA[0].material;\n      layer = meshInstancesLeftA[0].layer;\n      defs = meshInstancesLeftA[0]._shaderDefs;\n      params = meshInstancesLeftA[0].parameters;\n      lightList = meshInstancesLeftA[0]._staticLightList;\n      vertCount = meshInstancesLeftA[0].mesh.vertexBuffer.getNumVertices();\n      aabb.copy(meshInstancesLeftA[0].aabb);\n      for (i = 0; i < meshInstancesLeftA.length; i++) {\n        if (i > 0) {\n          if (material !== meshInstancesLeftA[i].material) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          if (layer !== meshInstancesLeftA[i].layer) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          if (defs !== meshInstancesLeftA[i]._shaderDefs) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          if (vertCount + meshInstancesLeftA[i].mesh.vertexBuffer.getNumVertices() > 65535) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          testAabb.copy(aabb);\n          testAabb.add(meshInstancesLeftA[i].aabb);\n          if (testAabb.halfExtents.x > halfMaxAabbSize || testAabb.halfExtents.y > halfMaxAabbSize || testAabb.halfExtents.z > halfMaxAabbSize) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          params2 = meshInstancesLeftA[i].parameters;\n          paramFailed = false;\n          for (param in params) {\n            if (!params.hasOwnProperty(param)) {\n              continue;\n            }\n            if (!paramsIdentical(params[param], params2[param])) {\n              paramFailed = true;\n              break;\n            }\n          }\n          if (!paramFailed) {\n            for (param in params2) {\n              if (!params2.hasOwnProperty(param)) {\n                continue;\n              }\n              if (!paramsIdentical(params2[param], params[param])) {\n                paramFailed = true;\n                break;\n              }\n            }\n          }\n          if (paramFailed) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          params2 = meshInstancesLeftA[i]._staticLightList;\n          if (lightList && !params2 || !lightList && params2) {\n            meshInstancesLeftB.push(meshInstancesLeftA[i]);\n            continue;\n          }\n          if (lightList && params2) {\n            paramFailed = false;\n            for (k = 0; k < lightList.length; k++) {\n              if (params2.indexOf(lightList[k]) < 0) {\n                paramFailed = true;\n                break;\n              }\n            }\n            for (k = 0; k < params2.length; k++) {\n              if (lightList.indexOf(params2[k]) < 0) {\n                paramFailed = true;\n                break;\n              }\n            }\n            if (paramFailed) {\n              meshInstancesLeftB.push(meshInstancesLeftA[i]);\n              continue;\n            }\n          }\n        }\n        aabb.add(meshInstancesLeftA[i].aabb);\n        vertCount += meshInstancesLeftA[i].mesh.vertexBuffer.getNumVertices();\n        lists[j].push(meshInstancesLeftA[i]);\n        if (dynamic && lists[j].length === maxInstanceCount) {\n          if (i === meshInstancesLeftA.length) {\n            meshInstancesLeftB = [];\n          } else {\n            meshInstancesLeftB = meshInstancesLeftA.slice(i + 1);\n          }\n          break;\n        }\n      }\n      j++;\n      meshInstancesLeftA = meshInstancesLeftB;\n    }\n    return lists;\n  };\n  BatchManager.prototype.create = function(meshInstances, dynamic, batchGroupId) {\n    if (!this._init) {\n      var boneLimit = \"#define BONE_LIMIT \" + this.device.getBoneLimit() + \"\\n\";\n      this.transformVS = boneLimit + \"#define DYNAMICBATCH\\n\" + pc.shaderChunks.transformVS;\n      this.skinTexVS = pc.shaderChunks.skinBatchTexVS;\n      this.skinConstVS = pc.shaderChunks.skinBatchConstVS;\n      this.vertexFormats = {};\n      this._init = true;\n    }\n    var i, j;\n    var batch = new pc.Batch(meshInstances, dynamic, batchGroupId);\n    this._batchList.push(batch);\n    var material = null;\n    var mesh, elems, numVerts, vertSize;\n    var hasPos, hasNormal, hasUv, hasUv2, hasTangent, hasColor;\n    var batchNumVerts = 0;\n    var batchNumIndices = 0;\n    for (i = 0; i < meshInstances.length; i++) {\n      if (!material) {\n        material = meshInstances[i].material;\n      } else {\n        if (material !== meshInstances[i].material) {\n          return;\n        }\n      }\n      mesh = meshInstances[i].mesh;\n      elems = mesh.vertexBuffer.format.elements;\n      numVerts = mesh.vertexBuffer.numVertices;\n      batchNumVerts += numVerts;\n      for (j = 0; j < elems.length; j++) {\n        if (elems[j].name === pc.SEMANTIC_POSITION) {\n          hasPos = true;\n        } else {\n          if (elems[j].name === pc.SEMANTIC_NORMAL) {\n            hasNormal = true;\n          } else {\n            if (elems[j].name === pc.SEMANTIC_TEXCOORD0) {\n              hasUv = true;\n            } else {\n              if (elems[j].name === pc.SEMANTIC_TEXCOORD1) {\n                hasUv2 = true;\n              } else {\n                if (elems[j].name === pc.SEMANTIC_TANGENT) {\n                  hasTangent = true;\n                } else {\n                  if (elems[j].name === pc.SEMANTIC_COLOR) {\n                    hasColor = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      batchNumIndices += mesh.primitive[0].count;\n    }\n    if (!hasPos) {\n      return;\n    }\n    var entityIndexSizeF = dynamic ? 1 : 0;\n    var batchVertSizeF = 3 + (hasNormal ? 3 : 0) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0) + (hasTangent ? 4 : 0) + (hasColor ? 1 : 0) + entityIndexSizeF;\n    var batchOffsetNF = 3;\n    var batchOffsetUF = hasNormal ? 3 * 2 : 3;\n    var batchOffsetU2F = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0);\n    var batchOffsetTF = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0);\n    var batchOffsetCF = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0) + (hasTangent ? 4 : 0);\n    var batchOffsetEF = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0) + (hasTangent ? 4 : 0) + (hasColor ? 1 : 0);\n    var arrayBuffer = new ArrayBuffer(batchNumVerts * batchVertSizeF * 4);\n    var batchData = new Float32Array(arrayBuffer);\n    var batchData8 = new Uint8Array(arrayBuffer);\n    var indexBuffer = new pc.IndexBuffer(this.device, pc.INDEXFORMAT_UINT16, batchNumIndices, pc.BUFFER_STATIC);\n    var batchIndexData = new Uint16Array(indexBuffer.lock());\n    var vertSizeF;\n    var data, data8, indexBase, numIndices, indexData;\n    var verticesOffset = 0;\n    var indexOffset = 0;\n    var vbOffset = 0;\n    var offsetPF, offsetNF, offsetUF, offsetU2F, offsetTF, offsetCF;\n    var transform, vec, vecData;\n    if (!dynamic) {\n      vec = new pc.Vec3;\n      vecData = vec.data;\n    }\n    for (i = 0; i < meshInstances.length; i++) {\n      mesh = meshInstances[i].mesh;\n      elems = mesh.vertexBuffer.format.elements;\n      numVerts = mesh.vertexBuffer.numVertices;\n      vertSize = mesh.vertexBuffer.format.size;\n      vertSizeF = vertSize / 4;\n      for (j = 0; j < elems.length; j++) {\n        if (elems[j].name === pc.SEMANTIC_POSITION) {\n          offsetPF = elems[j].offset / 4;\n        } else {\n          if (elems[j].name === pc.SEMANTIC_NORMAL) {\n            offsetNF = elems[j].offset / 4;\n          } else {\n            if (elems[j].name === pc.SEMANTIC_TEXCOORD0) {\n              offsetUF = elems[j].offset / 4;\n            } else {\n              if (elems[j].name === pc.SEMANTIC_TEXCOORD1) {\n                offsetU2F = elems[j].offset / 4;\n              } else {\n                if (elems[j].name === pc.SEMANTIC_TANGENT) {\n                  offsetTF = elems[j].offset / 4;\n                } else {\n                  if (elems[j].name === pc.SEMANTIC_COLOR) {\n                    offsetCF = elems[j].offset / 4;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      data = new Float32Array(mesh.vertexBuffer.storage);\n      data8 = new Uint8Array(mesh.vertexBuffer.storage);\n      if (dynamic) {\n        for (j = 0; j < numVerts; j++) {\n          batchData[j * batchVertSizeF + vbOffset] = data[j * vertSizeF + offsetPF];\n          batchData[j * batchVertSizeF + vbOffset + 1] = data[j * vertSizeF + offsetPF + 1];\n          batchData[j * batchVertSizeF + vbOffset + 2] = data[j * vertSizeF + offsetPF + 2];\n          if (hasNormal) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF] = data[j * vertSizeF + offsetNF];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 1] = data[j * vertSizeF + offsetNF + 1];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 2] = data[j * vertSizeF + offsetNF + 2];\n          }\n          if (hasUv) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF] = data[j * vertSizeF + offsetUF];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF + 1] = data[j * vertSizeF + offsetUF + 1];\n          }\n          if (hasUv2) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F] = data[j * vertSizeF + offsetU2F];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F + 1] = data[j * vertSizeF + offsetU2F + 1];\n          }\n          if (hasTangent) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF] = data[j * vertSizeF + offsetTF];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 1] = data[j * vertSizeF + offsetTF + 1];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 2] = data[j * vertSizeF + offsetTF + 2];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 3] = data[j * vertSizeF + offsetTF + 3];\n          }\n          if (hasColor) {\n            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4] = data8[j * vertSizeF * 4 + offsetCF * 4];\n            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4 + 1] = data8[j * vertSizeF * 4 + offsetCF * 4 + 1];\n            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4 + 2] = data8[j * vertSizeF * 4 + offsetCF * 4 + 2];\n            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4 + 3] = data8[j * vertSizeF * 4 + offsetCF * 4 + 3];\n          }\n          batchData[j * batchVertSizeF + batchOffsetEF + vbOffset] = i;\n        }\n      } else {\n        transform = meshInstances[i].node.getWorldTransform();\n        for (j = 0; j < numVerts; j++) {\n          vec.set(data[j * vertSizeF + offsetPF], data[j * vertSizeF + offsetPF + 1], data[j * vertSizeF + offsetPF + 2]);\n          transform.transformPoint(vec, vec);\n          batchData[j * batchVertSizeF + vbOffset] = vecData[0];\n          batchData[j * batchVertSizeF + vbOffset + 1] = vecData[1];\n          batchData[j * batchVertSizeF + vbOffset + 2] = vecData[2];\n          if (hasNormal) {\n            vec.set(data[j * vertSizeF + offsetNF], data[j * vertSizeF + offsetNF + 1], data[j * vertSizeF + offsetNF + 2]);\n            transform.transformVector(vec, vec);\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF] = vecData[0];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 1] = vecData[1];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 2] = vecData[2];\n          }\n          if (hasUv) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF] = data[j * vertSizeF + offsetUF];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF + 1] = data[j * vertSizeF + offsetUF + 1];\n          }\n          if (hasUv2) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F] = data[j * vertSizeF + offsetU2F];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F + 1] = data[j * vertSizeF + offsetU2F + 1];\n          }\n          if (hasTangent) {\n            vec.set(data[j * vertSizeF + offsetTF], data[j * vertSizeF + offsetTF + 1], data[j * vertSizeF + offsetTF + 2]);\n            transform.transformVector(vec, vec);\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF] = vecData[0];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 1] = vecData[1];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 2] = vecData[2];\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 3] = data[j * vertSizeF + offsetTF + 3];\n          }\n          if (hasColor) {\n            batchData[j * batchVertSizeF + vbOffset + batchOffsetCF] = data[j * vertSizeF + offsetCF];\n          }\n        }\n      }\n      indexBase = mesh.primitive[0].base;\n      numIndices = mesh.primitive[0].count;\n      indexData = new Uint16Array(mesh.indexBuffer[0].storage);\n      for (j = 0; j < numIndices; j++) {\n        batchIndexData[j + indexOffset] = indexData[indexBase + j] + verticesOffset;\n      }\n      indexOffset += numIndices;\n      verticesOffset += numVerts;\n      vbOffset = verticesOffset * batchVertSizeF;\n    }\n    var vertexFormatId = 0;\n    if (hasNormal) {\n      vertexFormatId |= 1 << 1;\n    }\n    if (hasUv) {\n      vertexFormatId |= 1 << 2;\n    }\n    if (hasUv2) {\n      vertexFormatId |= 1 << 3;\n    }\n    if (hasTangent) {\n      vertexFormatId |= 1 << 4;\n    }\n    if (hasColor) {\n      vertexFormatId |= 1 << 5;\n    }\n    if (dynamic) {\n      vertexFormatId |= 1 << 6;\n    }\n    var vertexFormat = this.vertexFormats[vertexFormatId];\n    if (!vertexFormat) {\n      var formatDesc = [];\n      formatDesc.push({semantic:pc.SEMANTIC_POSITION, components:3, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});\n      if (hasNormal) {\n        formatDesc.push({semantic:pc.SEMANTIC_NORMAL, components:3, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});\n      }\n      if (hasUv) {\n        formatDesc.push({semantic:pc.SEMANTIC_TEXCOORD0, components:2, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});\n      }\n      if (hasUv2) {\n        formatDesc.push({semantic:pc.SEMANTIC_TEXCOORD1, components:2, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});\n      }\n      if (hasTangent) {\n        formatDesc.push({semantic:pc.SEMANTIC_TANGENT, components:4, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});\n      }\n      if (hasColor) {\n        formatDesc.push({semantic:pc.SEMANTIC_COLOR, components:4, type:pc.ELEMENTTYPE_UINT8, normalize:true});\n      }\n      if (dynamic) {\n        formatDesc.push({semantic:pc.SEMANTIC_BLENDINDICES, components:1, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});\n      }\n      vertexFormat = this.vertexFormats[vertexFormatId] = new pc.VertexFormat(this.device, formatDesc);\n    }\n    var vertexBuffer = new pc.VertexBuffer(this.device, vertexFormat, batchNumVerts, pc.BUFFER_STATIC, batchData.buffer);\n    indexBuffer.unlock();\n    mesh = new pc.Mesh;\n    mesh.vertexBuffer = vertexBuffer;\n    mesh.indexBuffer[0] = indexBuffer;\n    mesh.primitive[0].type = batch.origMeshInstances[0].mesh.primitive[0].type;\n    mesh.primitive[0].base = 0;\n    mesh.primitive[0].count = batchNumIndices;\n    mesh.primitive[0].indexed = true;\n    mesh.cull = false;\n    if (dynamic) {\n      material = material.clone();\n      material.chunks.transformVS = this.transformVS;\n      material.chunks.skinTexVS = this.skinTexVS;\n      material.chunks.skinConstVS = this.skinConstVS;\n      material.update();\n    }\n    var meshInstance = new pc.MeshInstance(this.rootNode, mesh, material);\n    meshInstance.castShadow = batch.origMeshInstances[0].castShadow;\n    meshInstance.parameters = batch.origMeshInstances[0].parameters;\n    meshInstance.isStatic = batch.origMeshInstances[0].isStatic;\n    meshInstance.cull = batch.origMeshInstances[0].cull;\n    meshInstance.layer = batch.origMeshInstances[0].layer;\n    meshInstance._staticLightList = batch.origMeshInstances[0]._staticLightList;\n    meshInstance._shaderDefs = batch.origMeshInstances[0]._shaderDefs;\n    if (dynamic) {\n      var nodes = [];\n      for (i = 0; i < batch.origMeshInstances.length; i++) {\n        nodes.push(batch.origMeshInstances[i].node);\n      }\n      meshInstance.skinInstance = new SkinBatchInstance(this.device, nodes, this.rootNode);\n    }\n    meshInstance._updateAabb = false;\n    batch.meshInstance = meshInstance;\n    this.update(batch);\n    var newModel = new pc.Model;\n    newModel.meshInstances = [batch.meshInstance];\n    newModel.castShadows = batch.origMeshInstances[0].castShadows;\n    batch.model = newModel;\n    return batch;\n  };\n  BatchManager.prototype.update = function(batch) {\n    batch._aabb.copy(batch.origMeshInstances[0].aabb);\n    for (var i = 0; i < batch.origMeshInstances.length; i++) {\n      if (i > 0) {\n        batch._aabb.add(batch.origMeshInstances[i].aabb);\n      }\n    }\n    batch.meshInstance.aabb = batch._aabb;\n    batch._aabb._radiusVer = -1;\n    batch.meshInstance._aabbVer = 0;\n  };\n  BatchManager.prototype.updateAll = function() {\n    if (this._dirtyGroups.length > 0) {\n      this.generate(this._dirtyGroups);\n    }\n    for (var i = 0; i < this._batchList.length; i++) {\n      if (!this._batchList[i].dynamic) {\n        continue;\n      }\n      this.update(this._batchList[i]);\n    }\n  };\n  BatchManager.prototype.clone = function(batch, clonedMeshInstances) {\n    var batch2 = new pc.Batch(clonedMeshInstances, batch.dynamic, batch.batchGroupId);\n    this._batchList.push(batch2);\n    var nodes = [];\n    for (var i = 0; i < clonedMeshInstances.length; i++) {\n      nodes.push(clonedMeshInstances[i].node);\n    }\n    batch2.meshInstance = new pc.MeshInstance(batch.meshInstance.node, batch.meshInstance.mesh, batch.meshInstance.material);\n    batch2.meshInstance._updateAabb = false;\n    batch2.meshInstance.parameters = clonedMeshInstances[0].parameters;\n    batch2.meshInstance.isStatic = clonedMeshInstances[0].isStatic;\n    batch2.meshInstance.cull = clonedMeshInstances[0].cull;\n    batch2.meshInstance.layer = clonedMeshInstances[0].layer;\n    batch2.meshInstance._staticLightList = clonedMeshInstances[0]._staticLightList;\n    if (batch.dynamic) {\n      batch2.meshInstance.skinInstance = new SkinBatchInstance(this.device, nodes, this.rootNode);\n    }\n    batch2.meshInstance.castShadow = batch.meshInstance.castShadow;\n    batch2.meshInstance._shader = batch.meshInstance._shader;\n    var newModel = new pc.Model;\n    newModel.meshInstances = [batch2.meshInstance];\n    newModel.castShadows = batch.origMeshInstances[0].castShadows;\n    batch2.model = newModel;\n    return batch2;\n  };\n  BatchManager.prototype.destroy = function(batch) {\n    batch.refCounter--;\n    if (batch.refCounter === 0) {\n      var layers = this._batchGroups[batch.batchGroupId].layers;\n      for (var i = 0; i < layers.length; i++) {\n        this.scene.layers.getLayerById(layers[i]).removeMeshInstances(batch.model.meshInstances);\n      }\n      batch.model.destroy();\n    }\n  };\n  BatchManager.prototype.register = function(batch, entities) {\n    batch.refCounter = entities.length;\n    var self = this;\n    var callback = function() {\n      self.destroy(batch);\n    };\n    for (var i = 0; i < entities.length; i++) {\n      entities[i].once(\"destroy\", callback);\n    }\n  };\n  return {Batch:Batch, BatchGroup:BatchGroup, BatchManager:BatchManager};\n}());\n  window.pc=pc;\n  return pc;\n}));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./package/playcanvas/playcanvas-latest.js\n// module id = 28\n// module chunks = 0"],"sourceRoot":""}